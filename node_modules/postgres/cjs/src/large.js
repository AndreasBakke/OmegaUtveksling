const Stream = require('stream')

module.exports = largeObject;function largeObject(sql, oid, mode = 0x00020000 | 0x00040000) ***REMOVED***
  return new Promise(async(resolve, reject) => ***REMOVED***
    await sql.begin(async sql => ***REMOVED***
      let finish
      !oid && ([***REMOVED*** oid }] = await sql`select lo_creat(-1) as oid`)
      const [***REMOVED*** fd }] = await sql`select lo_open($***REMOVED*** oid }, $***REMOVED*** mode }) as fd`

      const lo = ***REMOVED***
        writable,
        readable,
        close     : () => sql`select lo_close($***REMOVED*** fd })`.then(finish),
        tell      : () => sql`select lo_tell64($***REMOVED*** fd })`,
        read      : (x) => sql`select loread($***REMOVED*** fd }, $***REMOVED*** x }) as data`,
        write     : (x) => sql`select lowrite($***REMOVED*** fd }, $***REMOVED*** x })`,
        truncate  : (x) => sql`select lo_truncate64($***REMOVED*** fd }, $***REMOVED*** x })`,
        seek      : (x, whence = 0) => sql`select lo_lseek64($***REMOVED*** fd }, $***REMOVED*** x }, $***REMOVED*** whence })`,
        size      : () => sql`
          select
            lo_lseek64($***REMOVED*** fd }, location, 0) as position,
            seek.size
          from (
            select
              lo_lseek64($1, 0, 2) as size,
              tell.location
            from (select lo_tell64($1) as location) tell
          ) seek
        `
    ***REMOVED***

      resolve(lo)

      return new Promise(async r => finish = r)

      async function readable(***REMOVED***
        highWaterMark = 2048 * 8,
        start = 0,
        end = Infinity
    ***REMOVED*** = ***REMOVED***}) ***REMOVED***
        let max = end - start
        start && await lo.seek(start)
        return new Stream.Readable(***REMOVED***
          highWaterMark,
          async read(size) ***REMOVED***
            const l = size > max ? size - max : size
            max -= size
            const [***REMOVED*** data }] = await lo.read(l)
            this.push(data)
            if (data.length < size)
              this.push(null)
        ***REMOVED***
      ***REMOVED***)
    ***REMOVED***

      async function writable(***REMOVED***
        highWaterMark = 2048 * 8,
        start = 0
    ***REMOVED*** = ***REMOVED***}) ***REMOVED***
        start && await lo.seek(start)
        return new Stream.Writable(***REMOVED***
          highWaterMark,
          write(chunk, encoding, callback) ***REMOVED***
            lo.write(chunk).then(() => callback(), callback)
        ***REMOVED***
      ***REMOVED***)
    ***REMOVED***
  ***REMOVED***).catch(reject)
***REMOVED***)
}
