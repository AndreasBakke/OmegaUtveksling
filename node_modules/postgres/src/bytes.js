const size = 256
let buffer = Buffer.allocUnsafe(size)

const messages = 'BCcDdEFfHPpQSX'.split('').reduce((acc, x) => ***REMOVED***
  const v = x.charCodeAt(0)
  acc[x] = () => ***REMOVED***
    buffer[0] = v
    b.i = 5
    return b
***REMOVED***
  return acc
}, ***REMOVED***})

const b = Object.assign(reset, messages, ***REMOVED***
  N: String.fromCharCode(0),
  i: 0,
  inc(x) ***REMOVED***
    b.i += x
    return b
***REMOVED***,
  str(x) ***REMOVED***
    const length = Buffer.byteLength(x)
    fit(length)
    b.i += buffer.write(x, b.i, length, 'utf8')
    return b
***REMOVED***,
  i16(x) ***REMOVED***
    fit(2)
    buffer.writeUInt16BE(x, b.i)
    b.i += 2
    return b
***REMOVED***,
  i32(x, i) ***REMOVED***
    if (i || i === 0) ***REMOVED***
      buffer.writeUInt32BE(x, i)
      return b
  ***REMOVED***
    fit(4)
    buffer.writeUInt32BE(x, b.i)
    b.i += 4
    return b
***REMOVED***,
  z(x) ***REMOVED***
    fit(x)
    buffer.fill(0, b.i, b.i + x)
    b.i += x
    return b
***REMOVED***,
  raw(x) ***REMOVED***
    buffer = Buffer.concat([buffer.subarray(0, b.i), x])
    b.i = buffer.length
    return b
***REMOVED***,
  end(at = 1) ***REMOVED***
    buffer.writeUInt32BE(b.i - at, at)
    const out = buffer.subarray(0, b.i)
    b.i = 0
    buffer = Buffer.allocUnsafe(size)
    return out
***REMOVED***
})

export default b

function fit(x) ***REMOVED***
  if (buffer.length - b.i < x) ***REMOVED***
    const prev = buffer
        , length = prev.length

    buffer = Buffer.allocUnsafe(length + (length >> 1) + x)
    prev.copy(buffer)
***REMOVED***
}

function reset() ***REMOVED***
  b.i = 0
  return b
}
