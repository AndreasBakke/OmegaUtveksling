// Generated by LiveScript 1.4.0
var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty, each, map, compact, filter, reject, partition, find;
values = function(object)***REMOVED***
  var i$, x, results$ = [];
  for (i$ in object) ***REMOVED***
    x = object[i$];
    results$.push(x);
***REMOVED***
  return results$;
};
keys = function(object)***REMOVED***
  var x, results$ = [];
  for (x in object) ***REMOVED***
    results$.push(x);
***REMOVED***
  return results$;
};
pairsToObj = function(object)***REMOVED***
  var i$, len$, x, resultObj$ = ***REMOVED***};
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) ***REMOVED***
    x = object[i$];
    resultObj$[x[0]] = x[1];
***REMOVED***
  return resultObj$;
};
objToPairs = function(object)***REMOVED***
  var key, value, results$ = [];
  for (key in object) ***REMOVED***
    value = object[key];
    results$.push([key, value]);
***REMOVED***
  return results$;
};
listsToObj = curry$(function(keys, values)***REMOVED***
  var i$, len$, i, key, resultObj$ = ***REMOVED***};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) ***REMOVED***
    i = i$;
    key = keys[i$];
    resultObj$[key] = values[i];
***REMOVED***
  return resultObj$;
});
objToLists = function(object)***REMOVED***
  var keys, values, key, value;
  keys = [];
  values = [];
  for (key in object) ***REMOVED***
    value = object[key];
    keys.push(key);
    values.push(value);
***REMOVED***
  return [keys, values];
};
empty = function(object)***REMOVED***
  var x;
  for (x in object) ***REMOVED***
    return false;
***REMOVED***
  return true;
};
each = curry$(function(f, object)***REMOVED***
  var i$, x;
  for (i$ in object) ***REMOVED***
    x = object[i$];
    f(x);
***REMOVED***
  return object;
});
map = curry$(function(f, object)***REMOVED***
  var k, x, resultObj$ = ***REMOVED***};
  for (k in object) ***REMOVED***
    x = object[k];
    resultObj$[k] = f(x);
***REMOVED***
  return resultObj$;
});
compact = function(object)***REMOVED***
  var k, x, resultObj$ = ***REMOVED***};
  for (k in object) ***REMOVED***
    x = object[k];
    if (x) ***REMOVED***
      resultObj$[k] = x;
  ***REMOVED***
***REMOVED***
  return resultObj$;
};
filter = curry$(function(f, object)***REMOVED***
  var k, x, resultObj$ = ***REMOVED***};
  for (k in object) ***REMOVED***
    x = object[k];
    if (f(x)) ***REMOVED***
      resultObj$[k] = x;
  ***REMOVED***
***REMOVED***
  return resultObj$;
});
reject = curry$(function(f, object)***REMOVED***
  var k, x, resultObj$ = ***REMOVED***};
  for (k in object) ***REMOVED***
    x = object[k];
    if (!f(x)) ***REMOVED***
      resultObj$[k] = x;
  ***REMOVED***
***REMOVED***
  return resultObj$;
});
partition = curry$(function(f, object)***REMOVED***
  var passed, failed, k, x;
  passed = ***REMOVED***};
  failed = ***REMOVED***};
  for (k in object) ***REMOVED***
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
***REMOVED***
  return [passed, failed];
});
find = curry$(function(f, object)***REMOVED***
  var i$, x;
  for (i$ in object) ***REMOVED***
    x = object[i$];
    if (f(x)) ***REMOVED***
      return x;
  ***REMOVED***
***REMOVED***
});
module.exports = ***REMOVED***
  values: values,
  keys: keys,
  pairsToObj: pairsToObj,
  objToPairs: objToPairs,
  listsToObj: listsToObj,
  objToLists: objToLists,
  empty: empty,
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find
};
function curry$(f, bound)***REMOVED***
  var context,
  _curry = function(args) ***REMOVED***
    return f.length > 1 ? function()***REMOVED***
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
  ***REMOVED*** : f;
***REMOVED***;
  return _curry();
}