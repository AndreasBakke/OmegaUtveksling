"use strict";
/*
 * Copyright 2020 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.uriToString = exports.splitHostPort = exports.parseUri = void 0;
/*
 * The groups correspond to URI parts as follows:
 * 1. scheme
 * 2. authority
 * 3. path
 */
const URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\/\/([^/]*)\/)?(.+)$/;
function parseUri(uriString) ***REMOVED***
    const parsedUri = URI_REGEX.exec(uriString);
    if (parsedUri === null) ***REMOVED***
        return null;
  ***REMOVED***
    return ***REMOVED***
        scheme: parsedUri[1],
        authority: parsedUri[2],
        path: parsedUri[3],
  ***REMOVED***;
}
exports.parseUri = parseUri;
const NUMBER_REGEX = /^\d+$/;
function splitHostPort(path) ***REMOVED***
    if (path.startsWith('[')) ***REMOVED***
        const hostEnd = path.indexOf(']');
        if (hostEnd === -1) ***REMOVED***
            return null;
      ***REMOVED***
        const host = path.substring(1, hostEnd);
        /* Only an IPv6 address should be in bracketed notation, and an IPv6
         * address should have at least one colon */
        if (host.indexOf(':') === -1) ***REMOVED***
            return null;
      ***REMOVED***
        if (path.length > hostEnd + 1) ***REMOVED***
            if (path[hostEnd + 1] === ':') ***REMOVED***
                const portString = path.substring(hostEnd + 2);
                if (NUMBER_REGEX.test(portString)) ***REMOVED***
                    return ***REMOVED***
                        host: host,
                        port: +portString,
                  ***REMOVED***;
              ***REMOVED***
                else ***REMOVED***
                    return null;
              ***REMOVED***
          ***REMOVED***
            else ***REMOVED***
                return null;
          ***REMOVED***
      ***REMOVED***
        else ***REMOVED***
            return ***REMOVED***
                host,
          ***REMOVED***;
      ***REMOVED***
  ***REMOVED***
    else ***REMOVED***
        const splitPath = path.split(':');
        /* Exactly one colon means that this is host:port. Zero colons means that
         * there is no port. And multiple colons means that this is a bare IPv6
         * address with no port */
        if (splitPath.length === 2) ***REMOVED***
            if (NUMBER_REGEX.test(splitPath[1])) ***REMOVED***
                return ***REMOVED***
                    host: splitPath[0],
                    port: +splitPath[1],
              ***REMOVED***;
          ***REMOVED***
            else ***REMOVED***
                return null;
          ***REMOVED***
      ***REMOVED***
        else ***REMOVED***
            return ***REMOVED***
                host: path,
          ***REMOVED***;
      ***REMOVED***
  ***REMOVED***
}
exports.splitHostPort = splitHostPort;
function uriToString(uri) ***REMOVED***
    let result = '';
    if (uri.scheme !== undefined) ***REMOVED***
        result += uri.scheme + ':';
  ***REMOVED***
    if (uri.authority !== undefined) ***REMOVED***
        result += '//' + uri.authority + '/';
  ***REMOVED***
    result += uri.path;
    return result;
}
exports.uriToString = uriToString;
//# sourceMappingURL=uri-parser.js.map