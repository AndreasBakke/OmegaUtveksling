"use strict";
/*
 * Copyright 2022 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.BaseSubchannelWrapper = void 0;
class BaseSubchannelWrapper ***REMOVED***
    constructor(child) ***REMOVED***
        this.child = child;
  ***REMOVED***
    getConnectivityState() ***REMOVED***
        return this.child.getConnectivityState();
  ***REMOVED***
    addConnectivityStateListener(listener) ***REMOVED***
        this.child.addConnectivityStateListener(listener);
  ***REMOVED***
    removeConnectivityStateListener(listener) ***REMOVED***
        this.child.removeConnectivityStateListener(listener);
  ***REMOVED***
    startConnecting() ***REMOVED***
        this.child.startConnecting();
  ***REMOVED***
    getAddress() ***REMOVED***
        return this.child.getAddress();
  ***REMOVED***
    ref() ***REMOVED***
        this.child.ref();
  ***REMOVED***
    unref() ***REMOVED***
        this.child.unref();
  ***REMOVED***
    getChannelzRef() ***REMOVED***
        return this.child.getChannelzRef();
  ***REMOVED***
    getRealSubchannel() ***REMOVED***
        return this.child.getRealSubchannel();
  ***REMOVED***
}
exports.BaseSubchannelWrapper = BaseSubchannelWrapper;
//# sourceMappingURL=subchannel-interface.js.map