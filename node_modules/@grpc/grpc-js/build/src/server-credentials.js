"use strict";
/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.ServerCredentials = void 0;
const tls_helpers_1 = require("./tls-helpers");
class ServerCredentials ***REMOVED***
    static createInsecure() ***REMOVED***
        return new InsecureServerCredentials();
  ***REMOVED***
    static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) ***REMOVED***
        if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) ***REMOVED***
            throw new TypeError('rootCerts must be null or a Buffer');
      ***REMOVED***
        if (!Array.isArray(keyCertPairs)) ***REMOVED***
            throw new TypeError('keyCertPairs must be an array');
      ***REMOVED***
        if (typeof checkClientCertificate !== 'boolean') ***REMOVED***
            throw new TypeError('checkClientCertificate must be a boolean');
      ***REMOVED***
        const cert = [];
        const key = [];
        for (let i = 0; i < keyCertPairs.length; i++) ***REMOVED***
            const pair = keyCertPairs[i];
            if (pair === null || typeof pair !== 'object') ***REMOVED***
                throw new TypeError(`keyCertPair[$***REMOVED***i}] must be an object`);
          ***REMOVED***
            if (!Buffer.isBuffer(pair.private_key)) ***REMOVED***
                throw new TypeError(`keyCertPair[$***REMOVED***i}].private_key must be a Buffer`);
          ***REMOVED***
            if (!Buffer.isBuffer(pair.cert_chain)) ***REMOVED***
                throw new TypeError(`keyCertPair[$***REMOVED***i}].cert_chain must be a Buffer`);
          ***REMOVED***
            cert.push(pair.cert_chain);
            key.push(pair.private_key);
      ***REMOVED***
        return new SecureServerCredentials(***REMOVED***
            ca: rootCerts || tls_helpers_1.getDefaultRootsData() || undefined,
            cert,
            key,
            requestCert: checkClientCertificate,
            ciphers: tls_helpers_1.CIPHER_SUITES,
      ***REMOVED***);
  ***REMOVED***
}
exports.ServerCredentials = ServerCredentials;
class InsecureServerCredentials extends ServerCredentials ***REMOVED***
    _isSecure() ***REMOVED***
        return false;
  ***REMOVED***
    _getSettings() ***REMOVED***
        return null;
  ***REMOVED***
}
class SecureServerCredentials extends ServerCredentials ***REMOVED***
    constructor(options) ***REMOVED***
        super();
        this.options = options;
  ***REMOVED***
    _isSecure() ***REMOVED***
        return true;
  ***REMOVED***
    _getSettings() ***REMOVED***
        return this.options;
  ***REMOVED***
}
//# sourceMappingURL=server-credentials.js.map