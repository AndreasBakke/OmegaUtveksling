"use strict";
/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.CallCredentials = void 0;
const metadata_1 = require("./metadata");
function isCurrentOauth2Client(client) ***REMOVED***
    return ('getRequestHeaders' in client &&
        typeof client.getRequestHeaders === 'function');
}
/**
 * A class that represents a generic method of adding authentication-related
 * metadata on a per-request basis.
 */
class CallCredentials ***REMOVED***
    /**
     * Creates a new CallCredentials object from a given function that generates
     * Metadata objects.
     * @param metadataGenerator A function that accepts a set of options, and
     * generates a Metadata object based on these options, which is passed back
     * to the caller via a supplied (err, metadata) callback.
     */
    static createFromMetadataGenerator(metadataGenerator) ***REMOVED***
        return new SingleCallCredentials(metadataGenerator);
  ***REMOVED***
    /**
     * Create a gRPC credential from a Google credential object.
     * @param googleCredentials The authentication client to use.
     * @return The resulting CallCredentials object.
     */
    static createFromGoogleCredential(googleCredentials) ***REMOVED***
        return CallCredentials.createFromMetadataGenerator((options, callback) => ***REMOVED***
            let getHeaders;
            if (isCurrentOauth2Client(googleCredentials)) ***REMOVED***
                getHeaders = googleCredentials.getRequestHeaders(options.service_url);
          ***REMOVED***
            else ***REMOVED***
                getHeaders = new Promise((resolve, reject) => ***REMOVED***
                    googleCredentials.getRequestMetadata(options.service_url, (err, headers) => ***REMOVED***
                        if (err) ***REMOVED***
                            reject(err);
                            return;
                      ***REMOVED***
                        resolve(headers);
                  ***REMOVED***);
              ***REMOVED***);
          ***REMOVED***
            getHeaders.then((headers) => ***REMOVED***
                const metadata = new metadata_1.Metadata();
                for (const key of Object.keys(headers)) ***REMOVED***
                    metadata.add(key, headers[key]);
              ***REMOVED***
                callback(null, metadata);
          ***REMOVED***, (err) => ***REMOVED***
                callback(err);
          ***REMOVED***);
      ***REMOVED***);
  ***REMOVED***
    static createEmpty() ***REMOVED***
        return new EmptyCallCredentials();
  ***REMOVED***
}
exports.CallCredentials = CallCredentials;
class ComposedCallCredentials extends CallCredentials ***REMOVED***
    constructor(creds) ***REMOVED***
        super();
        this.creds = creds;
  ***REMOVED***
    async generateMetadata(options) ***REMOVED***
        const base = new metadata_1.Metadata();
        const generated = await Promise.all(this.creds.map((cred) => cred.generateMetadata(options)));
        for (const gen of generated) ***REMOVED***
            base.merge(gen);
      ***REMOVED***
        return base;
  ***REMOVED***
    compose(other) ***REMOVED***
        return new ComposedCallCredentials(this.creds.concat([other]));
  ***REMOVED***
    _equals(other) ***REMOVED***
        if (this === other) ***REMOVED***
            return true;
      ***REMOVED***
        if (other instanceof ComposedCallCredentials) ***REMOVED***
            return this.creds.every((value, index) => value._equals(other.creds[index]));
      ***REMOVED***
        else ***REMOVED***
            return false;
      ***REMOVED***
  ***REMOVED***
}
class SingleCallCredentials extends CallCredentials ***REMOVED***
    constructor(metadataGenerator) ***REMOVED***
        super();
        this.metadataGenerator = metadataGenerator;
  ***REMOVED***
    generateMetadata(options) ***REMOVED***
        return new Promise((resolve, reject) => ***REMOVED***
            this.metadataGenerator(options, (err, metadata) => ***REMOVED***
                if (metadata !== undefined) ***REMOVED***
                    resolve(metadata);
              ***REMOVED***
                else ***REMOVED***
                    reject(err);
              ***REMOVED***
          ***REMOVED***);
      ***REMOVED***);
  ***REMOVED***
    compose(other) ***REMOVED***
        return new ComposedCallCredentials([this, other]);
  ***REMOVED***
    _equals(other) ***REMOVED***
        if (this === other) ***REMOVED***
            return true;
      ***REMOVED***
        if (other instanceof SingleCallCredentials) ***REMOVED***
            return this.metadataGenerator === other.metadataGenerator;
      ***REMOVED***
        else ***REMOVED***
            return false;
      ***REMOVED***
  ***REMOVED***
}
class EmptyCallCredentials extends CallCredentials ***REMOVED***
    generateMetadata(options) ***REMOVED***
        return Promise.resolve(new metadata_1.Metadata());
  ***REMOVED***
    compose(other) ***REMOVED***
        return other;
  ***REMOVED***
    _equals(other) ***REMOVED***
        return other instanceof EmptyCallCredentials;
  ***REMOVED***
}
//# sourceMappingURL=call-credentials.js.map