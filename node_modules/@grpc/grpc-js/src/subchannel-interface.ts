/*
 * Copyright 2022 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import ***REMOVED*** SubchannelRef } from "./channelz";
import ***REMOVED*** ConnectivityState } from "./connectivity-state";
import ***REMOVED*** Subchannel } from "./subchannel";

export type ConnectivityStateListener = (
  subchannel: SubchannelInterface,
  previousState: ConnectivityState,
  newState: ConnectivityState
) => void;

/**
 * This is an interface for load balancing policies to use to interact with
 * subchannels. This allows load balancing policies to wrap and unwrap
 * subchannels.
 * 
 * Any load balancing policy that wraps subchannels must unwrap the subchannel
 * in the picker, so that other load balancing policies consistently have
 * access to their own wrapper objects.
 */
export interface SubchannelInterface ***REMOVED***
  getConnectivityState(): ConnectivityState;
  addConnectivityStateListener(listener: ConnectivityStateListener): void;
  removeConnectivityStateListener(listener: ConnectivityStateListener): void;
  startConnecting(): void;
  getAddress(): string;
  ref(): void;
  unref(): void;
  getChannelzRef(): SubchannelRef;
  /**
   * If this is a wrapper, return the wrapped subchannel, otherwise return this
   */
  getRealSubchannel(): Subchannel;
}

export abstract class BaseSubchannelWrapper implements SubchannelInterface ***REMOVED***
  constructor(protected child: SubchannelInterface) ***REMOVED***}

  getConnectivityState(): ConnectivityState ***REMOVED***
    return this.child.getConnectivityState();
***REMOVED***
  addConnectivityStateListener(listener: ConnectivityStateListener): void ***REMOVED***
    this.child.addConnectivityStateListener(listener);
***REMOVED***
  removeConnectivityStateListener(listener: ConnectivityStateListener): void ***REMOVED***
    this.child.removeConnectivityStateListener(listener);
***REMOVED***
  startConnecting(): void ***REMOVED***
    this.child.startConnecting();
***REMOVED***
  getAddress(): string ***REMOVED***
    return this.child.getAddress();
***REMOVED***
  ref(): void ***REMOVED***
    this.child.ref();
***REMOVED***
  unref(): void ***REMOVED***
    this.child.unref();
***REMOVED***
  getChannelzRef(): SubchannelRef ***REMOVED***
    return this.child.getChannelzRef();
***REMOVED***
  getRealSubchannel(): Subchannel ***REMOVED***
    return this.child.getRealSubchannel();
***REMOVED***
}