/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import ***REMOVED*** Metadata } from './metadata';

export interface CallMetadataOptions ***REMOVED***
  service_url: string;
}

export type CallMetadataGenerator = (
  options: CallMetadataOptions,
  cb: (err: Error | null, metadata?: Metadata) => void
) => void;

// google-auth-library pre-v2.0.0 does not have getRequestHeaders
// but has getRequestMetadata, which is deprecated in v2.0.0
export interface OldOAuth2Client ***REMOVED***
  getRequestMetadata: (
    url: string,
    callback: (
      err: Error | null,
      headers?: ***REMOVED***
        [index: string]: string;
    ***REMOVED***
    ) => void
  ) => void;
}

export interface CurrentOAuth2Client ***REMOVED***
  getRequestHeaders: (url?: string) => Promise<***REMOVED*** [index: string]: string }>;
}

export type OAuth2Client = OldOAuth2Client | CurrentOAuth2Client;

function isCurrentOauth2Client(
  client: OAuth2Client
): client is CurrentOAuth2Client ***REMOVED***
  return (
    'getRequestHeaders' in client &&
    typeof client.getRequestHeaders === 'function'
  );
}

/**
 * A class that represents a generic method of adding authentication-related
 * metadata on a per-request basis.
 */
export abstract class CallCredentials ***REMOVED***
  /**
   * Asynchronously generates a new Metadata object.
   * @param options Options used in generating the Metadata object.
   */
  abstract generateMetadata(options: CallMetadataOptions): Promise<Metadata>;
  /**
   * Creates a new CallCredentials object from properties of both this and
   * another CallCredentials object. This object's metadata generator will be
   * called first.
   * @param callCredentials The other CallCredentials object.
   */
  abstract compose(callCredentials: CallCredentials): CallCredentials;

  /**
   * Check whether two call credentials objects are equal. Separate
   * SingleCallCredentials with identical metadata generator functions are
   * equal.
   * @param other The other CallCredentials object to compare with.
   */
  abstract _equals(other: CallCredentials): boolean;

  /**
   * Creates a new CallCredentials object from a given function that generates
   * Metadata objects.
   * @param metadataGenerator A function that accepts a set of options, and
   * generates a Metadata object based on these options, which is passed back
   * to the caller via a supplied (err, metadata) callback.
   */
  static createFromMetadataGenerator(
    metadataGenerator: CallMetadataGenerator
  ): CallCredentials ***REMOVED***
    return new SingleCallCredentials(metadataGenerator);
***REMOVED***

  /**
   * Create a gRPC credential from a Google credential object.
   * @param googleCredentials The authentication client to use.
   * @return The resulting CallCredentials object.
   */
  static createFromGoogleCredential(
    googleCredentials: OAuth2Client
  ): CallCredentials ***REMOVED***
    return CallCredentials.createFromMetadataGenerator((options, callback) => ***REMOVED***
      let getHeaders: Promise<***REMOVED*** [index: string]: string }>;
      if (isCurrentOauth2Client(googleCredentials)) ***REMOVED***
        getHeaders = googleCredentials.getRequestHeaders(options.service_url);
    ***REMOVED*** else ***REMOVED***
        getHeaders = new Promise((resolve, reject) => ***REMOVED***
          googleCredentials.getRequestMetadata(
            options.service_url,
            (err, headers) => ***REMOVED***
              if (err) ***REMOVED***
                reject(err);
                return;
            ***REMOVED***
              resolve(headers);
          ***REMOVED***
          );
      ***REMOVED***);
    ***REMOVED***
      getHeaders.then(
        (headers) => ***REMOVED***
          const metadata = new Metadata();
          for (const key of Object.keys(headers)) ***REMOVED***
            metadata.add(key, headers[key]);
        ***REMOVED***
          callback(null, metadata);
      ***REMOVED***,
        (err) => ***REMOVED***
          callback(err);
      ***REMOVED***
      );
  ***REMOVED***);
***REMOVED***

  static createEmpty(): CallCredentials ***REMOVED***
    return new EmptyCallCredentials();
***REMOVED***
}

class ComposedCallCredentials extends CallCredentials ***REMOVED***
  constructor(private creds: CallCredentials[]) ***REMOVED***
    super();
***REMOVED***

  async generateMetadata(options: CallMetadataOptions): Promise<Metadata> ***REMOVED***
    const base: Metadata = new Metadata();
    const generated: Metadata[] = await Promise.all(
      this.creds.map((cred) => cred.generateMetadata(options))
    );
    for (const gen of generated) ***REMOVED***
      base.merge(gen);
  ***REMOVED***
    return base;
***REMOVED***

  compose(other: CallCredentials): CallCredentials ***REMOVED***
    return new ComposedCallCredentials(this.creds.concat([other]));
***REMOVED***

  _equals(other: CallCredentials): boolean ***REMOVED***
    if (this === other) ***REMOVED***
      return true;
  ***REMOVED***
    if (other instanceof ComposedCallCredentials) ***REMOVED***
      return this.creds.every((value, index) =>
        value._equals(other.creds[index])
      );
  ***REMOVED*** else ***REMOVED***
      return false;
  ***REMOVED***
***REMOVED***
}

class SingleCallCredentials extends CallCredentials ***REMOVED***
  constructor(private metadataGenerator: CallMetadataGenerator) ***REMOVED***
    super();
***REMOVED***

  generateMetadata(options: CallMetadataOptions): Promise<Metadata> ***REMOVED***
    return new Promise<Metadata>((resolve, reject) => ***REMOVED***
      this.metadataGenerator(options, (err, metadata) => ***REMOVED***
        if (metadata !== undefined) ***REMOVED***
          resolve(metadata);
      ***REMOVED*** else ***REMOVED***
          reject(err);
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***

  compose(other: CallCredentials): CallCredentials ***REMOVED***
    return new ComposedCallCredentials([this, other]);
***REMOVED***

  _equals(other: CallCredentials): boolean ***REMOVED***
    if (this === other) ***REMOVED***
      return true;
  ***REMOVED***
    if (other instanceof SingleCallCredentials) ***REMOVED***
      return this.metadataGenerator === other.metadataGenerator;
  ***REMOVED*** else ***REMOVED***
      return false;
  ***REMOVED***
***REMOVED***
}

class EmptyCallCredentials extends CallCredentials ***REMOVED***
  generateMetadata(options: CallMetadataOptions): Promise<Metadata> ***REMOVED***
    return Promise.resolve(new Metadata());
***REMOVED***

  compose(other: CallCredentials): CallCredentials ***REMOVED***
    return other;
***REMOVED***

  _equals(other: CallCredentials): boolean ***REMOVED***
    return other instanceof EmptyCallCredentials;
***REMOVED***
}
