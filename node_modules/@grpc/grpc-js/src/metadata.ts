/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import * as http2 from 'http2';
import ***REMOVED*** log } from './logging';
import ***REMOVED*** LogVerbosity } from './constants';
const LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;
const LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;

export type MetadataValue = string | Buffer;
export type MetadataObject = Map<string, MetadataValue[]>;

function isLegalKey(key: string): boolean ***REMOVED***
  return LEGAL_KEY_REGEX.test(key);
}

function isLegalNonBinaryValue(value: string): boolean ***REMOVED***
  return LEGAL_NON_BINARY_VALUE_REGEX.test(value);
}

function isBinaryKey(key: string): boolean ***REMOVED***
  return key.endsWith('-bin');
}

function isCustomMetadata(key: string): boolean ***REMOVED***
  return !key.startsWith('grpc-');
}

function normalizeKey(key: string): string ***REMOVED***
  return key.toLowerCase();
}

function validate(key: string, value?: MetadataValue): void ***REMOVED***
  if (!isLegalKey(key)) ***REMOVED***
    throw new Error('Metadata key "' + key + '" contains illegal characters');
***REMOVED***

  if (value !== null && value !== undefined) ***REMOVED***
    if (isBinaryKey(key)) ***REMOVED***
      if (!Buffer.isBuffer(value)) ***REMOVED***
        throw new Error("keys that end with '-bin' must have Buffer values");
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
      if (Buffer.isBuffer(value)) ***REMOVED***
        throw new Error(
          "keys that don't end with '-bin' must have String values"
        );
    ***REMOVED***
      if (!isLegalNonBinaryValue(value)) ***REMOVED***
        throw new Error(
          'Metadata string value "' + value + '" contains illegal characters'
        );
    ***REMOVED***
  ***REMOVED***
***REMOVED***
}

export interface MetadataOptions ***REMOVED***
  /* Signal that the request is idempotent. Defaults to false */
  idempotentRequest?: boolean;
  /* Signal that the call should not return UNAVAILABLE before it has
   * started. Defaults to false. */
  waitForReady?: boolean;
  /* Signal that the call is cacheable. GRPC is free to use GET verb.
   * Defaults to false */
  cacheableRequest?: boolean;
  /* Signal that the initial metadata should be corked. Defaults to false. */
  corked?: boolean;
}

/**
 * A class for storing metadata. Keys are normalized to lowercase ASCII.
 */
export class Metadata ***REMOVED***
  protected internalRepr: MetadataObject = new Map<string, MetadataValue[]>();
  private options: MetadataOptions;

  constructor(options: MetadataOptions = ***REMOVED***}) ***REMOVED***
    this.options = options;
***REMOVED***

  /**
   * Sets the given value for the given key by replacing any other values
   * associated with that key. Normalizes the key.
   * @param key The key to whose value should be set.
   * @param value The value to set. Must be a buffer if and only
   *   if the normalized key ends with '-bin'.
   */
  set(key: string, value: MetadataValue): void ***REMOVED***
    key = normalizeKey(key);
    validate(key, value);
    this.internalRepr.set(key, [value]);
***REMOVED***

  /**
   * Adds the given value for the given key by appending to a list of previous
   * values associated with that key. Normalizes the key.
   * @param key The key for which a new value should be appended.
   * @param value The value to add. Must be a buffer if and only
   *   if the normalized key ends with '-bin'.
   */
  add(key: string, value: MetadataValue): void ***REMOVED***
    key = normalizeKey(key);
    validate(key, value);

    const existingValue: MetadataValue[] | undefined = this.internalRepr.get(key);

    if (existingValue === undefined) ***REMOVED***
      this.internalRepr.set(key, [value]);
  ***REMOVED*** else ***REMOVED***
      existingValue.push(value);
  ***REMOVED***
***REMOVED***

  /**
   * Removes the given key and any associated values. Normalizes the key.
   * @param key The key whose values should be removed.
   */
  remove(key: string): void ***REMOVED***
    key = normalizeKey(key);
    // validate(key);
    this.internalRepr.delete(key);
***REMOVED***

  /**
   * Gets a list of all values associated with the key. Normalizes the key.
   * @param key The key whose value should be retrieved.
   * @return A list of values associated with the given key.
   */
  get(key: string): MetadataValue[] ***REMOVED***
    key = normalizeKey(key);
    // validate(key);
    return this.internalRepr.get(key) || [];
***REMOVED***

  /**
   * Gets a plain object mapping each key to the first value associated with it.
   * This reflects the most common way that people will want to see metadata.
   * @return A key/value mapping of the metadata.
   */
  getMap(): ***REMOVED*** [key: string]: MetadataValue } ***REMOVED***
    const result: ***REMOVED*** [key: string]: MetadataValue } = ***REMOVED***};

    for (const [key, values] of this.internalRepr) ***REMOVED***
      if (values.length > 0) ***REMOVED***
        const v = values[0];
        result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;
    ***REMOVED***
  ***REMOVED***
    return result;
***REMOVED***

  /**
   * Clones the metadata object.
   * @return The newly cloned object.
   */
  clone(): Metadata ***REMOVED***
    const newMetadata = new Metadata(this.options);
    const newInternalRepr = newMetadata.internalRepr;

    for (const [key, value] of this.internalRepr) ***REMOVED***
      const clonedValue: MetadataValue[] = value.map((v) => ***REMOVED***
        if (Buffer.isBuffer(v)) ***REMOVED***
          return Buffer.from(v);
      ***REMOVED*** else ***REMOVED***
          return v;
      ***REMOVED***
    ***REMOVED***);

      newInternalRepr.set(key, clonedValue);
  ***REMOVED***

    return newMetadata;
***REMOVED***

  /**
   * Merges all key-value pairs from a given Metadata object into this one.
   * If both this object and the given object have values in the same key,
   * values from the other Metadata object will be appended to this object's
   * values.
   * @param other A Metadata object.
   */
  merge(other: Metadata): void ***REMOVED***
    for (const [key, values] of other.internalRepr) ***REMOVED***
      const mergedValue: MetadataValue[] = (
        this.internalRepr.get(key) || []
      ).concat(values);

      this.internalRepr.set(key, mergedValue);
  ***REMOVED***
***REMOVED***

  setOptions(options: MetadataOptions) ***REMOVED***
    this.options = options;
***REMOVED***

  getOptions(): MetadataOptions ***REMOVED***
    return this.options;
***REMOVED***

  /**
   * Creates an OutgoingHttpHeaders object that can be used with the http2 API.
   */
  toHttp2Headers(): http2.OutgoingHttpHeaders ***REMOVED***
    // NOTE: Node <8.9 formats http2 headers incorrectly.
    const result: http2.OutgoingHttpHeaders = ***REMOVED***};

    for (const [key, values] of this.internalRepr) ***REMOVED***
      // We assume that the user's interaction with this object is limited to
      // through its public API (i.e. keys and values are already validated).
      result[key] = values.map(bufToString);
  ***REMOVED***

    return result;
***REMOVED***

  // For compatibility with the other Metadata implementation
  private _getCoreRepresentation() ***REMOVED***
    return this.internalRepr;
***REMOVED***

  /**
   * This modifies the behavior of JSON.stringify to show an object
   * representation of the metadata map.
   */
  toJSON() ***REMOVED***
    const result: ***REMOVED*** [key: string]: MetadataValue[] } = ***REMOVED***};
    for (const [key, values] of this.internalRepr) ***REMOVED***
      result[key] = values;
  ***REMOVED***
    return result;
***REMOVED***

  /**
   * Returns a new Metadata object based fields in a given IncomingHttpHeaders
   * object.
   * @param headers An IncomingHttpHeaders object.
   */
  static fromHttp2Headers(headers: http2.IncomingHttpHeaders): Metadata ***REMOVED***
    const result = new Metadata();
    for (const key of Object.keys(headers)) ***REMOVED***
      // Reserved headers (beginning with `:`) are not valid keys.
      if (key.charAt(0) === ':') ***REMOVED***
        continue;
    ***REMOVED***

      const values = headers[key];

      try ***REMOVED***
        if (isBinaryKey(key)) ***REMOVED***
          if (Array.isArray(values)) ***REMOVED***
            values.forEach((value) => ***REMOVED***
              result.add(key, Buffer.from(value, 'base64'));
          ***REMOVED***);
        ***REMOVED*** else if (values !== undefined) ***REMOVED***
            if (isCustomMetadata(key)) ***REMOVED***
              values.split(',').forEach((v) => ***REMOVED***
                result.add(key, Buffer.from(v.trim(), 'base64'));
            ***REMOVED***);
          ***REMOVED*** else ***REMOVED***
              result.add(key, Buffer.from(values, 'base64'));
          ***REMOVED***
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
          if (Array.isArray(values)) ***REMOVED***
            values.forEach((value) => ***REMOVED***
              result.add(key, value);
          ***REMOVED***);
        ***REMOVED*** else if (values !== undefined) ***REMOVED***
            result.add(key, values);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED*** catch (error) ***REMOVED***
        const message = `Failed to add metadata entry $***REMOVED***key}: $***REMOVED***values}. $***REMOVED***error.message}. For more information see https://github.com/grpc/grpc-node/issues/1173`;
        log(LogVerbosity.ERROR, message);
    ***REMOVED***
  ***REMOVED***

    return result;
***REMOVED***
}

const bufToString = (val: string | Buffer): string => ***REMOVED***
  return Buffer.isBuffer(val) ? val.toString('base64') : val
};
