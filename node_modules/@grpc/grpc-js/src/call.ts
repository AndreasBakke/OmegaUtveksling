/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import ***REMOVED*** EventEmitter } from 'events';
import ***REMOVED*** Duplex, Readable, Writable } from 'stream';

import ***REMOVED*** StatusObject, MessageContext } from './call-stream';
import ***REMOVED*** Status } from './constants';
import ***REMOVED*** EmitterAugmentation1 } from './events';
import ***REMOVED*** Metadata } from './metadata';
import ***REMOVED*** ObjectReadable, ObjectWritable, WriteCallback } from './object-stream';
import ***REMOVED*** InterceptingCallInterface } from './client-interceptors';

/**
 * A type extending the built-in Error object with additional fields.
 */
export type ServiceError = StatusObject & Error;

/**
 * A base type for all user-facing values returned by client-side method calls.
 */
export type SurfaceCall = ***REMOVED***
  call?: InterceptingCallInterface;
  cancel(): void;
  getPeer(): string;
} & EmitterAugmentation1<'metadata', Metadata> &
  EmitterAugmentation1<'status', StatusObject> &
  EventEmitter;

/**
 * A type representing the return value of a unary method call.
 */
export type ClientUnaryCall = SurfaceCall;

/**
 * A type representing the return value of a server stream method call.
 */
export type ClientReadableStream<ResponseType> = ***REMOVED***
  deserialize: (chunk: Buffer) => ResponseType;
} & SurfaceCall &
  ObjectReadable<ResponseType>;

/**
 * A type representing the return value of a client stream method call.
 */
export type ClientWritableStream<RequestType> = ***REMOVED***
  serialize: (value: RequestType) => Buffer;
} & SurfaceCall &
  ObjectWritable<RequestType>;

/**
 * A type representing the return value of a bidirectional stream method call.
 */
export type ClientDuplexStream<
  RequestType,
  ResponseType
> = ClientWritableStream<RequestType> & ClientReadableStream<ResponseType>;

/**
 * Construct a ServiceError from a StatusObject. This function exists primarily
 * as an attempt to make the error stack trace clearly communicate that the
 * error is not necessarily a problem in gRPC itself.
 * @param status
 */
export function callErrorFromStatus(status: StatusObject, callerStack: string): ServiceError ***REMOVED***
  const message = `$***REMOVED***status.code} $***REMOVED***Status[status.code]}: $***REMOVED***status.details}`;
  const error = new Error(message);
  const stack = `$***REMOVED***error.stack}\nfor call at\n$***REMOVED***callerStack}`;
  return Object.assign(new Error(message), status, ***REMOVED***stack});
}

export class ClientUnaryCallImpl
  extends EventEmitter
  implements ClientUnaryCall ***REMOVED***
  public call?: InterceptingCallInterface;
  constructor() ***REMOVED***
    super();
***REMOVED***

  cancel(): void ***REMOVED***
    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');
***REMOVED***

  getPeer(): string ***REMOVED***
    return this.call?.getPeer() ?? 'unknown';
***REMOVED***
}

export class ClientReadableStreamImpl<ResponseType>
  extends Readable
  implements ClientReadableStream<ResponseType> ***REMOVED***
  public call?: InterceptingCallInterface;
  constructor(readonly deserialize: (chunk: Buffer) => ResponseType) ***REMOVED***
    super(***REMOVED*** objectMode: true });
***REMOVED***

  cancel(): void ***REMOVED***
    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');
***REMOVED***

  getPeer(): string ***REMOVED***
    return this.call?.getPeer() ?? 'unknown';
***REMOVED***

  _read(_size: number): void ***REMOVED***
    this.call?.startRead();
***REMOVED***
}

export class ClientWritableStreamImpl<RequestType>
  extends Writable
  implements ClientWritableStream<RequestType> ***REMOVED***
  public call?: InterceptingCallInterface;
  constructor(readonly serialize: (value: RequestType) => Buffer) ***REMOVED***
    super(***REMOVED*** objectMode: true });
***REMOVED***

  cancel(): void ***REMOVED***
    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');
***REMOVED***

  getPeer(): string ***REMOVED***
    return this.call?.getPeer() ?? 'unknown';
***REMOVED***

  _write(chunk: RequestType, encoding: string, cb: WriteCallback) ***REMOVED***
    const context: MessageContext = ***REMOVED***
      callback: cb,
  ***REMOVED***;
    const flags = Number(encoding);
    if (!Number.isNaN(flags)) ***REMOVED***
      context.flags = flags;
  ***REMOVED***
    this.call?.sendMessageWithContext(context, chunk);
***REMOVED***

  _final(cb: Function) ***REMOVED***
    this.call?.halfClose();
    cb();
***REMOVED***
}

export class ClientDuplexStreamImpl<RequestType, ResponseType>
  extends Duplex
  implements ClientDuplexStream<RequestType, ResponseType> ***REMOVED***
  public call?: InterceptingCallInterface;
  constructor(
    readonly serialize: (value: RequestType) => Buffer,
    readonly deserialize: (chunk: Buffer) => ResponseType
  ) ***REMOVED***
    super(***REMOVED*** objectMode: true });
***REMOVED***

  cancel(): void ***REMOVED***
    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');
***REMOVED***

  getPeer(): string ***REMOVED***
    return this.call?.getPeer() ?? 'unknown';
***REMOVED***

  _read(_size: number): void ***REMOVED***
    this.call?.startRead();
***REMOVED***

  _write(chunk: RequestType, encoding: string, cb: WriteCallback) ***REMOVED***
    const context: MessageContext = ***REMOVED***
      callback: cb,
  ***REMOVED***;
    const flags = Number(encoding);
    if (!Number.isNaN(flags)) ***REMOVED***
      context.flags = flags;
  ***REMOVED***
    this.call?.sendMessageWithContext(context, chunk);
***REMOVED***

  _final(cb: Function) ***REMOVED***
    this.call?.halfClose();
    cb();
***REMOVED***
}
