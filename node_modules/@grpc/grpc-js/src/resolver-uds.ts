/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import ***REMOVED*** Resolver, ResolverListener, registerResolver } from './resolver';
import ***REMOVED*** SubchannelAddress } from './subchannel-address';
import ***REMOVED*** GrpcUri } from './uri-parser';
import ***REMOVED*** ChannelOptions } from './channel-options';

class UdsResolver implements Resolver ***REMOVED***
  private addresses: SubchannelAddress[] = [];
  constructor(
    target: GrpcUri,
    private listener: ResolverListener,
    channelOptions: ChannelOptions
  ) ***REMOVED***
    let path: string;
    if (target.authority === '') ***REMOVED***
      path = '/' + target.path;
  ***REMOVED*** else ***REMOVED***
      path = target.path;
  ***REMOVED***
    this.addresses = [***REMOVED*** path }];
***REMOVED***
  updateResolution(): void ***REMOVED***
    process.nextTick(
      this.listener.onSuccessfulResolution,
      this.addresses,
      null,
      null,
      null,
      ***REMOVED***}
    );
***REMOVED***

  destroy() ***REMOVED***
    // This resolver owns no resources, so we do nothing here.
***REMOVED***

  static getDefaultAuthority(target: GrpcUri): string ***REMOVED***
    return 'localhost';
***REMOVED***
}

export function setup() ***REMOVED***
  registerResolver('unix', UdsResolver);
}
