/*
 * Copyright 2019 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import ***REMOVED*** Call, StatusObject, WriteObject } from './call-stream';
import ***REMOVED*** Metadata } from './metadata';

/**
 * Filter classes represent related per-call logic and state that is primarily
 * used to modify incoming and outgoing data
 */
export interface Filter ***REMOVED***
  sendMetadata(metadata: Promise<Metadata>): Promise<Metadata>;

  receiveMetadata(metadata: Metadata): Metadata;

  sendMessage(message: Promise<WriteObject>): Promise<WriteObject>;

  receiveMessage(message: Promise<Buffer>): Promise<Buffer>;

  receiveTrailers(status: StatusObject): StatusObject;

  refresh(): void;
}

export abstract class BaseFilter implements Filter ***REMOVED***
  async sendMetadata(metadata: Promise<Metadata>): Promise<Metadata> ***REMOVED***
    return metadata;
***REMOVED***

  receiveMetadata(metadata: Metadata): Metadata ***REMOVED***
    return metadata;
***REMOVED***

  async sendMessage(message: Promise<WriteObject>): Promise<WriteObject> ***REMOVED***
    return message;
***REMOVED***

  async receiveMessage(message: Promise<Buffer>): Promise<Buffer> ***REMOVED***
    return message;
***REMOVED***

  receiveTrailers(status: StatusObject): StatusObject ***REMOVED***
    return status;
***REMOVED***

  refresh(): void ***REMOVED***}
}

export interface FilterFactory<T extends Filter> ***REMOVED***
  createFilter(callStream: Call): T;
}
