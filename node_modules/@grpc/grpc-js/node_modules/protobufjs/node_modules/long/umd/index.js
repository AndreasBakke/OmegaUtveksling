// GENERATED FILE. DO NOT EDIT.
var Long = (function(exports) ***REMOVED***
  "use strict";
  
  Object.defineProperty(exports, "__esModule", ***REMOVED***
    value: true
***REMOVED***);
  exports.default = void 0;
  
  /**
   * @license
   * Copyright 2009 The Closure Library Authors
   * Copyright 2020 Daniel Wirtz / The long.js Authors.
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *     http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *
   * SPDX-License-Identifier: Apache-2.0
   */
  // WebAssembly optimizations to do native i64 multiplication and divide
  var wasm = null;
  
  try ***REMOVED***
    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), ***REMOVED***}).exports;
***REMOVED*** catch (e) ***REMOVED***// no wasm support :(
***REMOVED***
  /**
   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
   *  See the from* functions below for more convenient ways of constructing Longs.
   * @exports Long
   * @class A Long class for representing a 64 bit two's-complement integer value.
   * @param ***REMOVED***number} low The low (signed) 32 bits of the long
   * @param ***REMOVED***number} high The high (signed) 32 bits of the long
   * @param ***REMOVED***boolean=} unsigned Whether unsigned or not, defaults to signed
   * @constructor
   */
  
  
  function Long(low, high, unsigned) ***REMOVED***
    /**
     * The low 32 bits as a signed value.
     * @type ***REMOVED***number}
     */
    this.low = low | 0;
    /**
     * The high 32 bits as a signed value.
     * @type ***REMOVED***number}
     */
  
    this.high = high | 0;
    /**
     * Whether unsigned or not.
     * @type ***REMOVED***boolean}
     */
  
    this.unsigned = !!unsigned;
***REMOVED*** // The internal representation of a long is the two given signed, 32-bit values.
  // We use 32-bit pieces because these are the size of integers on which
  // Javascript performs bit-operations.  For operations like addition and
  // multiplication, we split each number into 16 bit pieces, which can easily be
  // multiplied within Javascript's floating-point representation without overflow
  // or change in sign.
  //
  // In the algorithms below, we frequently reduce the negative case to the
  // positive case by negating the input(s) and then post-processing the result.
  // Note that we must ALWAYS check specially whether those values are MIN_VALUE
  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
  // a positive number, it overflows back into a negative).  Not handling this
  // case would often result in infinite recursion.
  //
  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*
  // methods on which they depend.
  
  /**
   * An indicator used to reliably determine if an object is a Long or not.
   * @type ***REMOVED***boolean}
   * @const
   * @private
   */
  
  
  Long.prototype.__isLong__;
  Object.defineProperty(Long.prototype, "__isLong__", ***REMOVED***
    value: true
***REMOVED***);
  /**
   * @function
   * @param ***REMOVED****} obj Object
   * @returns ***REMOVED***boolean}
   * @inner
   */
  
  function isLong(obj) ***REMOVED***
    return (obj && obj["__isLong__"]) === true;
***REMOVED***
  /**
   * @function
   * @param ***REMOVED****} value number
   * @returns ***REMOVED***number}
   * @inner
   */
  
  
  function ctz32(value) ***REMOVED***
    var c = Math.clz32(value & -value);
    return value ? 31 - c : c;
***REMOVED***
  /**
   * Tests if the specified object is a Long.
   * @function
   * @param ***REMOVED****} obj Object
   * @returns ***REMOVED***boolean}
   */
  
  
  Long.isLong = isLong;
  /**
   * A cache of the Long representations of small integer values.
   * @type ***REMOVED***!Object}
   * @inner
   */
  
  var INT_CACHE = ***REMOVED***};
  /**
   * A cache of the Long representations of small unsigned integer values.
   * @type ***REMOVED***!Object}
   * @inner
   */
  
  var UINT_CACHE = ***REMOVED***};
  /**
   * @param ***REMOVED***number} value
   * @param ***REMOVED***boolean=} unsigned
   * @returns ***REMOVED***!Long}
   * @inner
   */
  
  function fromInt(value, unsigned) ***REMOVED***
    var obj, cachedObj, cache;
  
    if (unsigned) ***REMOVED***
      value >>>= 0;
  
      if (cache = 0 <= value && value < 256) ***REMOVED***
        cachedObj = UINT_CACHE[value];
        if (cachedObj) return cachedObj;
    ***REMOVED***
  
      obj = fromBits(value, 0, true);
      if (cache) UINT_CACHE[value] = obj;
      return obj;
  ***REMOVED*** else ***REMOVED***
      value |= 0;
  
      if (cache = -128 <= value && value < 128) ***REMOVED***
        cachedObj = INT_CACHE[value];
        if (cachedObj) return cachedObj;
    ***REMOVED***
  
      obj = fromBits(value, value < 0 ? -1 : 0, false);
      if (cache) INT_CACHE[value] = obj;
      return obj;
  ***REMOVED***
***REMOVED***
  /**
   * Returns a Long representing the given 32 bit integer value.
   * @function
   * @param ***REMOVED***number} value The 32 bit integer in question
   * @param ***REMOVED***boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns ***REMOVED***!Long} The corresponding Long value
   */
  
  
  Long.fromInt = fromInt;
  /**
   * @param ***REMOVED***number} value
   * @param ***REMOVED***boolean=} unsigned
   * @returns ***REMOVED***!Long}
   * @inner
   */
  
  function fromNumber(value, unsigned) ***REMOVED***
    if (isNaN(value)) return unsigned ? UZERO : ZERO;
  
    if (unsigned) ***REMOVED***
      if (value < 0) return UZERO;
      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
  ***REMOVED*** else ***REMOVED***
      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;
      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
  ***REMOVED***
  
    if (value < 0) return fromNumber(-value, unsigned).neg();
    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
***REMOVED***
  /**
   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
   * @function
   * @param ***REMOVED***number} value The number in question
   * @param ***REMOVED***boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns ***REMOVED***!Long} The corresponding Long value
   */
  
  
  Long.fromNumber = fromNumber;
  /**
   * @param ***REMOVED***number} lowBits
   * @param ***REMOVED***number} highBits
   * @param ***REMOVED***boolean=} unsigned
   * @returns ***REMOVED***!Long}
   * @inner
   */
  
  function fromBits(lowBits, highBits, unsigned) ***REMOVED***
    return new Long(lowBits, highBits, unsigned);
***REMOVED***
  /**
   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is
   *  assumed to use 32 bits.
   * @function
   * @param ***REMOVED***number} lowBits The low 32 bits
   * @param ***REMOVED***number} highBits The high 32 bits
   * @param ***REMOVED***boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns ***REMOVED***!Long} The corresponding Long value
   */
  
  
  Long.fromBits = fromBits;
  /**
   * @function
   * @param ***REMOVED***number} base
   * @param ***REMOVED***number} exponent
   * @returns ***REMOVED***number}
   * @inner
   */
  
  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)
  
  /**
   * @param ***REMOVED***string} str
   * @param ***REMOVED***(boolean|number)=} unsigned
   * @param ***REMOVED***number=} radix
   * @returns ***REMOVED***!Long}
   * @inner
   */
  
  function fromString(str, unsigned, radix) ***REMOVED***
    if (str.length === 0) throw Error('empty string');
  
    if (typeof unsigned === 'number') ***REMOVED***
      // For goog.math.long compatibility
      radix = unsigned;
      unsigned = false;
  ***REMOVED*** else ***REMOVED***
      unsigned = !!unsigned;
  ***REMOVED***
  
    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return unsigned ? UZERO : ZERO;
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError('radix');
    var p;
    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) ***REMOVED***
      return fromString(str.substring(1), unsigned, radix).neg();
  ***REMOVED*** // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
  
    var radixToPower = fromNumber(pow_dbl(radix, 8));
    var result = ZERO;
  
    for (var i = 0; i < str.length; i += 8) ***REMOVED***
      var size = Math.min(8, str.length - i),
          value = parseInt(str.substring(i, i + size), radix);
  
      if (size < 8) ***REMOVED***
        var power = fromNumber(pow_dbl(radix, size));
        result = result.mul(power).add(fromNumber(value));
    ***REMOVED*** else ***REMOVED***
        result = result.mul(radixToPower);
        result = result.add(fromNumber(value));
    ***REMOVED***
  ***REMOVED***
  
    result.unsigned = unsigned;
    return result;
***REMOVED***
  /**
   * Returns a Long representation of the given string, written using the specified radix.
   * @function
   * @param ***REMOVED***string} str The textual representation of the Long
   * @param ***REMOVED***(boolean|number)=} unsigned Whether unsigned or not, defaults to signed
   * @param ***REMOVED***number=} radix The radix in which the text is written (2-36), defaults to 10
   * @returns ***REMOVED***!Long} The corresponding Long value
   */
  
  
  Long.fromString = fromString;
  /**
   * @function
   * @param ***REMOVED***!Long|number|string|!***REMOVED***low: number, high: number, unsigned: boolean}} val
   * @param ***REMOVED***boolean=} unsigned
   * @returns ***REMOVED***!Long}
   * @inner
   */
  
  function fromValue(val, unsigned) ***REMOVED***
    if (typeof val === 'number') return fromNumber(val, unsigned);
    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:
  
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
***REMOVED***
  /**
   * Converts the specified value to a Long using the appropriate from* function for its type.
   * @function
   * @param ***REMOVED***!Long|number|string|!***REMOVED***low: number, high: number, unsigned: boolean}} val Value
   * @param ***REMOVED***boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns ***REMOVED***!Long}
   */
  
  
  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be
  // no runtime penalty for these.
  
  /**
   * @type ***REMOVED***number}
   * @const
   * @inner
   */
  
  var TWO_PWR_16_DBL = 1 << 16;
  /**
   * @type ***REMOVED***number}
   * @const
   * @inner
   */
  
  var TWO_PWR_24_DBL = 1 << 24;
  /**
   * @type ***REMOVED***number}
   * @const
   * @inner
   */
  
  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
  /**
   * @type ***REMOVED***number}
   * @const
   * @inner
   */
  
  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
  /**
   * @type ***REMOVED***number}
   * @const
   * @inner
   */
  
  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
  /**
   * @type ***REMOVED***!Long}
   * @const
   * @inner
   */
  
  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
  /**
   * @type ***REMOVED***!Long}
   * @inner
   */
  
  var ZERO = fromInt(0);
  /**
   * Signed zero.
   * @type ***REMOVED***!Long}
   */
  
  Long.ZERO = ZERO;
  /**
   * @type ***REMOVED***!Long}
   * @inner
   */
  
  var UZERO = fromInt(0, true);
  /**
   * Unsigned zero.
   * @type ***REMOVED***!Long}
   */
  
  Long.UZERO = UZERO;
  /**
   * @type ***REMOVED***!Long}
   * @inner
   */
  
  var ONE = fromInt(1);
  /**
   * Signed one.
   * @type ***REMOVED***!Long}
   */
  
  Long.ONE = ONE;
  /**
   * @type ***REMOVED***!Long}
   * @inner
   */
  
  var UONE = fromInt(1, true);
  /**
   * Unsigned one.
   * @type ***REMOVED***!Long}
   */
  
  Long.UONE = UONE;
  /**
   * @type ***REMOVED***!Long}
   * @inner
   */
  
  var NEG_ONE = fromInt(-1);
  /**
   * Signed negative one.
   * @type ***REMOVED***!Long}
   */
  
  Long.NEG_ONE = NEG_ONE;
  /**
   * @type ***REMOVED***!Long}
   * @inner
   */
  
  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);
  /**
   * Maximum signed value.
   * @type ***REMOVED***!Long}
   */
  
  Long.MAX_VALUE = MAX_VALUE;
  /**
   * @type ***REMOVED***!Long}
   * @inner
   */
  
  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);
  /**
   * Maximum unsigned value.
   * @type ***REMOVED***!Long}
   */
  
  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
  /**
   * @type ***REMOVED***!Long}
   * @inner
   */
  
  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);
  /**
   * Minimum signed value.
   * @type ***REMOVED***!Long}
   */
  
  Long.MIN_VALUE = MIN_VALUE;
  /**
   * @alias Long.prototype
   * @inner
   */
  
  var LongPrototype = Long.prototype;
  /**
   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***number}
   */
  
  LongPrototype.toInt = function toInt() ***REMOVED***
    return this.unsigned ? this.low >>> 0 : this.low;
***REMOVED***;
  /**
   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***number}
   */
  
  
  LongPrototype.toNumber = function toNumber() ***REMOVED***
    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
***REMOVED***;
  /**
   * Converts the Long to a string written in the specified radix.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***number=} radix Radix (2-36), defaults to 10
   * @returns ***REMOVED***string}
   * @override
   * @throws ***REMOVED***RangeError} If `radix` is out of range
   */
  
  
  LongPrototype.toString = function toString(radix) ***REMOVED***
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError('radix');
    if (this.isZero()) return '0';
  
    if (this.isNegative()) ***REMOVED***
      // Unsigned Longs are never negative
      if (this.eq(MIN_VALUE)) ***REMOVED***
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = fromNumber(radix),
            div = this.div(radixLong),
            rem1 = div.mul(radixLong).sub(this);
        return div.toString(radix) + rem1.toInt().toString(radix);
    ***REMOVED*** else return '-' + this.neg().toString(radix);
  ***REMOVED*** // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
  
  
    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),
        rem = this;
    var result = '';
  
    while (true) ***REMOVED***
      var remDiv = rem.div(radixToPower),
          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
          digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) return digits + result;else ***REMOVED***
        while (digits.length < 6) digits = '0' + digits;
  
        result = '' + digits + result;
    ***REMOVED***
  ***REMOVED***
***REMOVED***;
  /**
   * Gets the high 32 bits as a signed integer.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***number} Signed high bits
   */
  
  
  LongPrototype.getHighBits = function getHighBits() ***REMOVED***
    return this.high;
***REMOVED***;
  /**
   * Gets the high 32 bits as an unsigned integer.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***number} Unsigned high bits
   */
  
  
  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() ***REMOVED***
    return this.high >>> 0;
***REMOVED***;
  /**
   * Gets the low 32 bits as a signed integer.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***number} Signed low bits
   */
  
  
  LongPrototype.getLowBits = function getLowBits() ***REMOVED***
    return this.low;
***REMOVED***;
  /**
   * Gets the low 32 bits as an unsigned integer.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***number} Unsigned low bits
   */
  
  
  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() ***REMOVED***
    return this.low >>> 0;
***REMOVED***;
  /**
   * Gets the number of bits needed to represent the absolute value of this Long.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***number}
   */
  
  
  LongPrototype.getNumBitsAbs = function getNumBitsAbs() ***REMOVED***
    if (this.isNegative()) // Unsigned Longs are never negative
      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    var val = this.high != 0 ? this.high : this.low;
  
    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;
  
    return this.high != 0 ? bit + 33 : bit + 1;
***REMOVED***;
  /**
   * Tests if this Long's value equals zero.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.isZero = function isZero() ***REMOVED***
    return this.high === 0 && this.low === 0;
***REMOVED***;
  /**
   * Tests if this Long's value equals zero. This is an alias of ***REMOVED***@link Long#isZero}.
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.eqz = LongPrototype.isZero;
  /**
   * Tests if this Long's value is negative.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***boolean}
   */
  
  LongPrototype.isNegative = function isNegative() ***REMOVED***
    return !this.unsigned && this.high < 0;
***REMOVED***;
  /**
   * Tests if this Long's value is positive or zero.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.isPositive = function isPositive() ***REMOVED***
    return this.unsigned || this.high >= 0;
***REMOVED***;
  /**
   * Tests if this Long's value is odd.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.isOdd = function isOdd() ***REMOVED***
    return (this.low & 1) === 1;
***REMOVED***;
  /**
   * Tests if this Long's value is even.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.isEven = function isEven() ***REMOVED***
    return (this.low & 1) === 0;
***REMOVED***;
  /**
   * Tests if this Long's value equals the specified's.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.equals = function equals(other) ***REMOVED***
    if (!isLong(other)) other = fromValue(other);
    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;
    return this.high === other.high && this.low === other.low;
***REMOVED***;
  /**
   * Tests if this Long's value equals the specified's. This is an alias of ***REMOVED***@link Long#equals}.
   * @function
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.eq = LongPrototype.equals;
  /**
   * Tests if this Long's value differs from the specified's.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  LongPrototype.notEquals = function notEquals(other) ***REMOVED***
    return !this.eq(
    /* validates */
    other);
***REMOVED***;
  /**
   * Tests if this Long's value differs from the specified's. This is an alias of ***REMOVED***@link Long#notEquals}.
   * @function
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.neq = LongPrototype.notEquals;
  /**
   * Tests if this Long's value differs from the specified's. This is an alias of ***REMOVED***@link Long#notEquals}.
   * @function
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  LongPrototype.ne = LongPrototype.notEquals;
  /**
   * Tests if this Long's value is less than the specified's.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  LongPrototype.lessThan = function lessThan(other) ***REMOVED***
    return this.comp(
    /* validates */
    other) < 0;
***REMOVED***;
  /**
   * Tests if this Long's value is less than the specified's. This is an alias of ***REMOVED***@link Long#lessThan}.
   * @function
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.lt = LongPrototype.lessThan;
  /**
   * Tests if this Long's value is less than or equal the specified's.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) ***REMOVED***
    return this.comp(
    /* validates */
    other) <= 0;
***REMOVED***;
  /**
   * Tests if this Long's value is less than or equal the specified's. This is an alias of ***REMOVED***@link Long#lessThanOrEqual}.
   * @function
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.lte = LongPrototype.lessThanOrEqual;
  /**
   * Tests if this Long's value is less than or equal the specified's. This is an alias of ***REMOVED***@link Long#lessThanOrEqual}.
   * @function
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  LongPrototype.le = LongPrototype.lessThanOrEqual;
  /**
   * Tests if this Long's value is greater than the specified's.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  LongPrototype.greaterThan = function greaterThan(other) ***REMOVED***
    return this.comp(
    /* validates */
    other) > 0;
***REMOVED***;
  /**
   * Tests if this Long's value is greater than the specified's. This is an alias of ***REMOVED***@link Long#greaterThan}.
   * @function
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.gt = LongPrototype.greaterThan;
  /**
   * Tests if this Long's value is greater than or equal the specified's.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) ***REMOVED***
    return this.comp(
    /* validates */
    other) >= 0;
***REMOVED***;
  /**
   * Tests if this Long's value is greater than or equal the specified's. This is an alias of ***REMOVED***@link Long#greaterThanOrEqual}.
   * @function
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  
  LongPrototype.gte = LongPrototype.greaterThanOrEqual;
  /**
   * Tests if this Long's value is greater than or equal the specified's. This is an alias of ***REMOVED***@link Long#greaterThanOrEqual}.
   * @function
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***boolean}
   */
  
  LongPrototype.ge = LongPrototype.greaterThanOrEqual;
  /**
   * Compares this Long's value with the specified's.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***number} 0 if they are the same, 1 if the this is greater and -1
   *  if the given one is greater
   */
  
  LongPrototype.compare = function compare(other) ***REMOVED***
    if (!isLong(other)) other = fromValue(other);
    if (this.eq(other)) return 0;
    var thisNeg = this.isNegative(),
        otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) return -1;
    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same
  
    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned
  
    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
***REMOVED***;
  /**
   * Compares this Long's value with the specified's. This is an alias of ***REMOVED***@link Long#compare}.
   * @function
   * @param ***REMOVED***!Long|number|string} other Other value
   * @returns ***REMOVED***number} 0 if they are the same, 1 if the this is greater and -1
   *  if the given one is greater
   */
  
  
  LongPrototype.comp = LongPrototype.compare;
  /**
   * Negates this Long's value.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***!Long} Negated Long
   */
  
  LongPrototype.negate = function negate() ***REMOVED***
    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
    return this.not().add(ONE);
***REMOVED***;
  /**
   * Negates this Long's value. This is an alias of ***REMOVED***@link Long#negate}.
   * @function
   * @returns ***REMOVED***!Long} Negated Long
   */
  
  
  LongPrototype.neg = LongPrototype.negate;
  /**
   * Returns the sum of this and the specified Long.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} addend Addend
   * @returns ***REMOVED***!Long} Sum
   */
  
  LongPrototype.add = function add(addend) ***REMOVED***
    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
  
    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;
    var b48 = addend.high >>> 16;
    var b32 = addend.high & 0xFFFF;
    var b16 = addend.low >>> 16;
    var b00 = addend.low & 0xFFFF;
    var c48 = 0,
        c32 = 0,
        c16 = 0,
        c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
***REMOVED***;
  /**
   * Returns the difference of this and the specified Long.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} subtrahend Subtrahend
   * @returns ***REMOVED***!Long} Difference
   */
  
  
  LongPrototype.subtract = function subtract(subtrahend) ***REMOVED***
    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
***REMOVED***;
  /**
   * Returns the difference of this and the specified Long. This is an alias of ***REMOVED***@link Long#subtract}.
   * @function
   * @param ***REMOVED***!Long|number|string} subtrahend Subtrahend
   * @returns ***REMOVED***!Long} Difference
   */
  
  
  LongPrototype.sub = LongPrototype.subtract;
  /**
   * Returns the product of this and the specified Long.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} multiplier Multiplier
   * @returns ***REMOVED***!Long} Product
   */
  
  LongPrototype.multiply = function multiply(multiplier) ***REMOVED***
    if (this.isZero()) return this;
    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present
  
    if (wasm) ***REMOVED***
      var low = wasm["mul"](this.low, this.high, multiplier.low, multiplier.high);
      return fromBits(low, wasm["get_high"](), this.unsigned);
  ***REMOVED***
  
    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;
    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;
  
    if (this.isNegative()) ***REMOVED***
      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();
  ***REMOVED*** else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication
  
  
    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
  
    var a48 = this.high >>> 16;
    var a32 = this.high & 0xFFFF;
    var a16 = this.low >>> 16;
    var a00 = this.low & 0xFFFF;
    var b48 = multiplier.high >>> 16;
    var b32 = multiplier.high & 0xFFFF;
    var b16 = multiplier.low >>> 16;
    var b00 = multiplier.low & 0xFFFF;
    var c48 = 0,
        c32 = 0,
        c16 = 0,
        c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
***REMOVED***;
  /**
   * Returns the product of this and the specified Long. This is an alias of ***REMOVED***@link Long#multiply}.
   * @function
   * @param ***REMOVED***!Long|number|string} multiplier Multiplier
   * @returns ***REMOVED***!Long} Product
   */
  
  
  LongPrototype.mul = LongPrototype.multiply;
  /**
   * Returns this Long divided by the specified. The result is signed if this Long is signed or
   *  unsigned if this Long is unsigned.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} divisor Divisor
   * @returns ***REMOVED***!Long} Quotient
   */
  
  LongPrototype.divide = function divide(divisor) ***REMOVED***
    if (!isLong(divisor)) divisor = fromValue(divisor);
    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present
  
    if (wasm) ***REMOVED***
      // guard against signed division overflow: the largest
      // negative number / -1 would be 1 larger than the largest
      // positive number, due to two's complement.
      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) ***REMOVED***
        // be consistent with non-wasm code path
        return this;
    ***REMOVED***
  
      var low = (this.unsigned ? wasm["div_u"] : wasm["div_s"])(this.low, this.high, divisor.low, divisor.high);
      return fromBits(low, wasm["get_high"](), this.unsigned);
  ***REMOVED***
  
    if (this.isZero()) return this.unsigned ? UZERO : ZERO;
    var approx, rem, res;
  
    if (!this.unsigned) ***REMOVED***
      // This section is only relevant for signed longs and is derived from the
      // closure library as a whole.
      if (this.eq(MIN_VALUE)) ***REMOVED***
        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE
        else if (divisor.eq(MIN_VALUE)) return ONE;else ***REMOVED***
          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
          var halfThis = this.shr(1);
          approx = halfThis.div(divisor).shl(1);
  
          if (approx.eq(ZERO)) ***REMOVED***
            return divisor.isNegative() ? ONE : NEG_ONE;
        ***REMOVED*** else ***REMOVED***
            rem = this.sub(divisor.mul(approx));
            res = approx.add(rem.div(divisor));
            return res;
        ***REMOVED***
      ***REMOVED***
    ***REMOVED*** else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;
  
      if (this.isNegative()) ***REMOVED***
        if (divisor.isNegative()) return this.neg().div(divisor.neg());
        return this.neg().div(divisor).neg();
    ***REMOVED*** else if (divisor.isNegative()) return this.div(divisor.neg()).neg();
  
      res = ZERO;
  ***REMOVED*** else ***REMOVED***
      // The algorithm below has not been made for unsigned longs. It's therefore
      // required to take special care of the MSB prior to running it.
      if (!divisor.unsigned) divisor = divisor.toUnsigned();
      if (divisor.gt(this)) return UZERO;
      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true
        return UONE;
      res = UZERO;
  ***REMOVED*** // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
  
  
    rem = this;
  
    while (rem.gte(divisor)) ***REMOVED***
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
  
      var log2 = Math.ceil(Math.log(approx) / Math.LN2),
          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),
          // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      approxRes = fromNumber(approx),
          approxRem = approxRes.mul(divisor);
  
      while (approxRem.isNegative() || approxRem.gt(rem)) ***REMOVED***
        approx -= delta;
        approxRes = fromNumber(approx, this.unsigned);
        approxRem = approxRes.mul(divisor);
    ***REMOVED*** // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
  
  
      if (approxRes.isZero()) approxRes = ONE;
      res = res.add(approxRes);
      rem = rem.sub(approxRem);
  ***REMOVED***
  
    return res;
***REMOVED***;
  /**
   * Returns this Long divided by the specified. This is an alias of ***REMOVED***@link Long#divide}.
   * @function
   * @param ***REMOVED***!Long|number|string} divisor Divisor
   * @returns ***REMOVED***!Long} Quotient
   */
  
  
  LongPrototype.div = LongPrototype.divide;
  /**
   * Returns this Long modulo the specified.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} divisor Divisor
   * @returns ***REMOVED***!Long} Remainder
   */
  
  LongPrototype.modulo = function modulo(divisor) ***REMOVED***
    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present
  
    if (wasm) ***REMOVED***
      var low = (this.unsigned ? wasm["rem_u"] : wasm["rem_s"])(this.low, this.high, divisor.low, divisor.high);
      return fromBits(low, wasm["get_high"](), this.unsigned);
  ***REMOVED***
  
    return this.sub(this.div(divisor).mul(divisor));
***REMOVED***;
  /**
   * Returns this Long modulo the specified. This is an alias of ***REMOVED***@link Long#modulo}.
   * @function
   * @param ***REMOVED***!Long|number|string} divisor Divisor
   * @returns ***REMOVED***!Long} Remainder
   */
  
  
  LongPrototype.mod = LongPrototype.modulo;
  /**
   * Returns this Long modulo the specified. This is an alias of ***REMOVED***@link Long#modulo}.
   * @function
   * @param ***REMOVED***!Long|number|string} divisor Divisor
   * @returns ***REMOVED***!Long} Remainder
   */
  
  LongPrototype.rem = LongPrototype.modulo;
  /**
   * Returns the bitwise NOT of this Long.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***!Long}
   */
  
  LongPrototype.not = function not() ***REMOVED***
    return fromBits(~this.low, ~this.high, this.unsigned);
***REMOVED***;
  /**
   * Returns count leading zeros of this Long.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***!number}
   */
  
  
  LongPrototype.countLeadingZeros = function countLeadingZeros() ***REMOVED***
    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
***REMOVED***;
  /**
   * Returns count leading zeros. This is an alias of ***REMOVED***@link Long#countLeadingZeros}.
   * @function
   * @param ***REMOVED***!Long}
   * @returns ***REMOVED***!number}
   */
  
  
  LongPrototype.clz = LongPrototype.countLeadingZeros;
  /**
   * Returns count trailing zeros of this Long.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***!number}
   */
  
  LongPrototype.countTrailingZeros = function countTrailingZeros() ***REMOVED***
    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;
***REMOVED***;
  /**
   * Returns count trailing zeros. This is an alias of ***REMOVED***@link Long#countTrailingZeros}.
   * @function
   * @param ***REMOVED***!Long}
   * @returns ***REMOVED***!number}
   */
  
  
  LongPrototype.ctz = LongPrototype.countTrailingZeros;
  /**
   * Returns the bitwise AND of this Long and the specified.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} other Other Long
   * @returns ***REMOVED***!Long}
   */
  
  LongPrototype.and = function and(other) ***REMOVED***
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
***REMOVED***;
  /**
   * Returns the bitwise OR of this Long and the specified.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} other Other Long
   * @returns ***REMOVED***!Long}
   */
  
  
  LongPrototype.or = function or(other) ***REMOVED***
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
***REMOVED***;
  /**
   * Returns the bitwise XOR of this Long and the given one.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***!Long|number|string} other Other Long
   * @returns ***REMOVED***!Long}
   */
  
  
  LongPrototype.xor = function xor(other) ***REMOVED***
    if (!isLong(other)) other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
***REMOVED***;
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***number|!Long} numBits Number of bits
   * @returns ***REMOVED***!Long} Shifted Long
   */
  
  
  LongPrototype.shiftLeft = function shiftLeft(numBits) ***REMOVED***
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);
***REMOVED***;
  /**
   * Returns this Long with bits shifted to the left by the given amount. This is an alias of ***REMOVED***@link Long#shiftLeft}.
   * @function
   * @param ***REMOVED***number|!Long} numBits Number of bits
   * @returns ***REMOVED***!Long} Shifted Long
   */
  
  
  LongPrototype.shl = LongPrototype.shiftLeft;
  /**
   * Returns this Long with bits arithmetically shifted to the right by the given amount.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***number|!Long} numBits Number of bits
   * @returns ***REMOVED***!Long} Shifted Long
   */
  
  LongPrototype.shiftRight = function shiftRight(numBits) ***REMOVED***
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
***REMOVED***;
  /**
   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of ***REMOVED***@link Long#shiftRight}.
   * @function
   * @param ***REMOVED***number|!Long} numBits Number of bits
   * @returns ***REMOVED***!Long} Shifted Long
   */
  
  
  LongPrototype.shr = LongPrototype.shiftRight;
  /**
   * Returns this Long with bits logically shifted to the right by the given amount.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***number|!Long} numBits Number of bits
   * @returns ***REMOVED***!Long} Shifted Long
   */
  
  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) ***REMOVED***
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);
    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);
    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);
***REMOVED***;
  /**
   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of ***REMOVED***@link Long#shiftRightUnsigned}.
   * @function
   * @param ***REMOVED***number|!Long} numBits Number of bits
   * @returns ***REMOVED***!Long} Shifted Long
   */
  
  
  LongPrototype.shru = LongPrototype.shiftRightUnsigned;
  /**
   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of ***REMOVED***@link Long#shiftRightUnsigned}.
   * @function
   * @param ***REMOVED***number|!Long} numBits Number of bits
   * @returns ***REMOVED***!Long} Shifted Long
   */
  
  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;
  /**
   * Returns this Long with bits rotated to the left by the given amount.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***number|!Long} numBits Number of bits
   * @returns ***REMOVED***!Long} Rotated Long
   */
  
  LongPrototype.rotateLeft = function rotateLeft(numBits) ***REMOVED***
    var b;
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);
  
    if (numBits < 32) ***REMOVED***
      b = 32 - numBits;
      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);
  ***REMOVED***
  
    numBits -= 32;
    b = 32 - numBits;
    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);
***REMOVED***;
  /**
   * Returns this Long with bits rotated to the left by the given amount. This is an alias of ***REMOVED***@link Long#rotateLeft}.
   * @function
   * @param ***REMOVED***number|!Long} numBits Number of bits
   * @returns ***REMOVED***!Long} Rotated Long
   */
  
  
  LongPrototype.rotl = LongPrototype.rotateLeft;
  /**
   * Returns this Long with bits rotated to the right by the given amount.
   * @this ***REMOVED***!Long}
   * @param ***REMOVED***number|!Long} numBits Number of bits
   * @returns ***REMOVED***!Long} Rotated Long
   */
  
  LongPrototype.rotateRight = function rotateRight(numBits) ***REMOVED***
    var b;
    if (isLong(numBits)) numBits = numBits.toInt();
    if ((numBits &= 63) === 0) return this;
    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);
  
    if (numBits < 32) ***REMOVED***
      b = 32 - numBits;
      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);
  ***REMOVED***
  
    numBits -= 32;
    b = 32 - numBits;
    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);
***REMOVED***;
  /**
   * Returns this Long with bits rotated to the right by the given amount. This is an alias of ***REMOVED***@link Long#rotateRight}.
   * @function
   * @param ***REMOVED***number|!Long} numBits Number of bits
   * @returns ***REMOVED***!Long} Rotated Long
   */
  
  
  LongPrototype.rotr = LongPrototype.rotateRight;
  /**
   * Converts this Long to signed.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***!Long} Signed long
   */
  
  LongPrototype.toSigned = function toSigned() ***REMOVED***
    if (!this.unsigned) return this;
    return fromBits(this.low, this.high, false);
***REMOVED***;
  /**
   * Converts this Long to unsigned.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***!Long} Unsigned long
   */
  
  
  LongPrototype.toUnsigned = function toUnsigned() ***REMOVED***
    if (this.unsigned) return this;
    return fromBits(this.low, this.high, true);
***REMOVED***;
  /**
   * Converts this Long to its byte representation.
   * @param ***REMOVED***boolean=} le Whether little or big endian, defaults to big endian
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***!Array.<number>} Byte representation
   */
  
  
  LongPrototype.toBytes = function toBytes(le) ***REMOVED***
    return le ? this.toBytesLE() : this.toBytesBE();
***REMOVED***;
  /**
   * Converts this Long to its little endian byte representation.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***!Array.<number>} Little endian byte representation
   */
  
  
  LongPrototype.toBytesLE = function toBytesLE() ***REMOVED***
    var hi = this.high,
        lo = this.low;
    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];
***REMOVED***;
  /**
   * Converts this Long to its big endian byte representation.
   * @this ***REMOVED***!Long}
   * @returns ***REMOVED***!Array.<number>} Big endian byte representation
   */
  
  
  LongPrototype.toBytesBE = function toBytesBE() ***REMOVED***
    var hi = this.high,
        lo = this.low;
    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];
***REMOVED***;
  /**
   * Creates a Long from its byte representation.
   * @param ***REMOVED***!Array.<number>} bytes Byte representation
   * @param ***REMOVED***boolean=} unsigned Whether unsigned or not, defaults to signed
   * @param ***REMOVED***boolean=} le Whether little or big endian, defaults to big endian
   * @returns ***REMOVED***Long} The corresponding Long value
   */
  
  
  Long.fromBytes = function fromBytes(bytes, unsigned, le) ***REMOVED***
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
***REMOVED***;
  /**
   * Creates a Long from its little endian byte representation.
   * @param ***REMOVED***!Array.<number>} bytes Little endian byte representation
   * @param ***REMOVED***boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns ***REMOVED***Long} The corresponding Long value
   */
  
  
  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) ***REMOVED***
    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
***REMOVED***;
  /**
   * Creates a Long from its big endian byte representation.
   * @param ***REMOVED***!Array.<number>} bytes Big endian byte representation
   * @param ***REMOVED***boolean=} unsigned Whether unsigned or not, defaults to signed
   * @returns ***REMOVED***Long} The corresponding Long value
   */
  
  
  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) ***REMOVED***
    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
***REMOVED***;
  
  var _default = Long;
  exports.default = _default;
  return "default" in exports ? exports.default : exports;
})(***REMOVED***});
if (typeof define === 'function' && define.amd) define([], function() ***REMOVED*** return Long; });
else if (typeof module === 'object' && typeof exports==='object') module.exports = Long;
