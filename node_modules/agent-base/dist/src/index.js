"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) ***REMOVED***
    return (mod && mod.__esModule) ? mod : ***REMOVED*** "default": mod };
};
const events_1 = require("events");
const debug_1 = __importDefault(require("debug"));
const promisify_1 = __importDefault(require("./promisify"));
const debug = debug_1.default('agent-base');
function isAgent(v) ***REMOVED***
    return Boolean(v) && typeof v.addRequest === 'function';
}
function isSecureEndpoint() ***REMOVED***
    const ***REMOVED*** stack } = new Error();
    if (typeof stack !== 'string')
        return false;
    return stack.split('\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);
}
function createAgent(callback, opts) ***REMOVED***
    return new createAgent.Agent(callback, opts);
}
(function (createAgent) ***REMOVED***
    /**
     * Base `http.Agent` implementation.
     * No pooling/keep-alive is implemented by default.
     *
     * @param ***REMOVED***Function} callback
     * @api public
     */
    class Agent extends events_1.EventEmitter ***REMOVED***
        constructor(callback, _opts) ***REMOVED***
            super();
            let opts = _opts;
            if (typeof callback === 'function') ***REMOVED***
                this.callback = callback;
          ***REMOVED***
            else if (callback) ***REMOVED***
                opts = callback;
          ***REMOVED***
            // Timeout for the socket to be returned from the callback
            this.timeout = null;
            if (opts && typeof opts.timeout === 'number') ***REMOVED***
                this.timeout = opts.timeout;
          ***REMOVED***
            // These aren't actually used by `agent-base`, but are required
            // for the TypeScript definition files in `@types/node` :/
            this.maxFreeSockets = 1;
            this.maxSockets = 1;
            this.maxTotalSockets = Infinity;
            this.sockets = ***REMOVED***};
            this.freeSockets = ***REMOVED***};
            this.requests = ***REMOVED***};
            this.options = ***REMOVED***};
      ***REMOVED***
        get defaultPort() ***REMOVED***
            if (typeof this.explicitDefaultPort === 'number') ***REMOVED***
                return this.explicitDefaultPort;
          ***REMOVED***
            return isSecureEndpoint() ? 443 : 80;
      ***REMOVED***
        set defaultPort(v) ***REMOVED***
            this.explicitDefaultPort = v;
      ***REMOVED***
        get protocol() ***REMOVED***
            if (typeof this.explicitProtocol === 'string') ***REMOVED***
                return this.explicitProtocol;
          ***REMOVED***
            return isSecureEndpoint() ? 'https:' : 'http:';
      ***REMOVED***
        set protocol(v) ***REMOVED***
            this.explicitProtocol = v;
      ***REMOVED***
        callback(req, opts, fn) ***REMOVED***
            throw new Error('"agent-base" has no default implementation, you must subclass and override `callback()`');
      ***REMOVED***
        /**
         * Called by node-core's "_http_client.js" module when creating
         * a new HTTP request with this Agent instance.
         *
         * @api public
         */
        addRequest(req, _opts) ***REMOVED***
            const opts = Object.assign(***REMOVED***}, _opts);
            if (typeof opts.secureEndpoint !== 'boolean') ***REMOVED***
                opts.secureEndpoint = isSecureEndpoint();
          ***REMOVED***
            if (opts.host == null) ***REMOVED***
                opts.host = 'localhost';
          ***REMOVED***
            if (opts.port == null) ***REMOVED***
                opts.port = opts.secureEndpoint ? 443 : 80;
          ***REMOVED***
            if (opts.protocol == null) ***REMOVED***
                opts.protocol = opts.secureEndpoint ? 'https:' : 'http:';
          ***REMOVED***
            if (opts.host && opts.path) ***REMOVED***
                // If both a `host` and `path` are specified then it's most
                // likely the result of a `url.parse()` call... we need to
                // remove the `path` portion so that `net.connect()` doesn't
                // attempt to open that as a unix socket file.
                delete opts.path;
          ***REMOVED***
            delete opts.agent;
            delete opts.hostname;
            delete opts._defaultAgent;
            delete opts.defaultPort;
            delete opts.createConnection;
            // Hint to use "Connection: close"
            // XXX: non-documented `http` module API :(
            req._last = true;
            req.shouldKeepAlive = false;
            let timedOut = false;
            let timeoutId = null;
            const timeoutMs = opts.timeout || this.timeout;
            const onerror = (err) => ***REMOVED***
                if (req._hadError)
                    return;
                req.emit('error', err);
                // For Safety. Some additional errors might fire later on
                // and we need to make sure we don't double-fire the error event.
                req._hadError = true;
          ***REMOVED***;
            const ontimeout = () => ***REMOVED***
                timeoutId = null;
                timedOut = true;
                const err = new Error(`A "socket" was not created for HTTP request before $***REMOVED***timeoutMs}ms`);
                err.code = 'ETIMEOUT';
                onerror(err);
          ***REMOVED***;
            const callbackError = (err) => ***REMOVED***
                if (timedOut)
                    return;
                if (timeoutId !== null) ***REMOVED***
                    clearTimeout(timeoutId);
                    timeoutId = null;
              ***REMOVED***
                onerror(err);
          ***REMOVED***;
            const onsocket = (socket) => ***REMOVED***
                if (timedOut)
                    return;
                if (timeoutId != null) ***REMOVED***
                    clearTimeout(timeoutId);
                    timeoutId = null;
              ***REMOVED***
                if (isAgent(socket)) ***REMOVED***
                    // `socket` is actually an `http.Agent` instance, so
                    // relinquish responsibility for this `req` to the Agent
                    // from here on
                    debug('Callback returned another Agent instance %o', socket.constructor.name);
                    socket.addRequest(req, opts);
                    return;
              ***REMOVED***
                if (socket) ***REMOVED***
                    socket.once('free', () => ***REMOVED***
                        this.freeSocket(socket, opts);
                  ***REMOVED***);
                    req.onSocket(socket);
                    return;
              ***REMOVED***
                const err = new Error(`no Duplex stream was returned to agent-base for \`$***REMOVED***req.method} $***REMOVED***req.path}\``);
                onerror(err);
          ***REMOVED***;
            if (typeof this.callback !== 'function') ***REMOVED***
                onerror(new Error('`callback` is not defined'));
                return;
          ***REMOVED***
            if (!this.promisifiedCallback) ***REMOVED***
                if (this.callback.length >= 3) ***REMOVED***
                    debug('Converting legacy callback function to promise');
                    this.promisifiedCallback = promisify_1.default(this.callback);
              ***REMOVED***
                else ***REMOVED***
                    this.promisifiedCallback = this.callback;
              ***REMOVED***
          ***REMOVED***
            if (typeof timeoutMs === 'number' && timeoutMs > 0) ***REMOVED***
                timeoutId = setTimeout(ontimeout, timeoutMs);
          ***REMOVED***
            if ('port' in opts && typeof opts.port !== 'number') ***REMOVED***
                opts.port = Number(opts.port);
          ***REMOVED***
            try ***REMOVED***
                debug('Resolving socket for %o request: %o', opts.protocol, `$***REMOVED***req.method} $***REMOVED***req.path}`);
                Promise.resolve(this.promisifiedCallback(req, opts)).then(onsocket, callbackError);
          ***REMOVED***
            catch (err) ***REMOVED***
                Promise.reject(err).catch(callbackError);
          ***REMOVED***
      ***REMOVED***
        freeSocket(socket, opts) ***REMOVED***
            debug('Freeing socket %o %o', socket.constructor.name, opts);
            socket.destroy();
      ***REMOVED***
        destroy() ***REMOVED***
            debug('Destroying agent %o', this.constructor.name);
      ***REMOVED***
  ***REMOVED***
    createAgent.Agent = Agent;
    // So that `instanceof` works correctly
    createAgent.prototype = createAgent.Agent.prototype;
})(createAgent || (createAgent = ***REMOVED***}));
module.exports = createAgent;
//# sourceMappingURL=index.js.map