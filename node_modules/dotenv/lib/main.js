const fs = require('fs')
const path = require('path')
const os = require('os')
const packageJson = require('../package.json')

const version = packageJson.version

const LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg

// Parser src into an Object
function parse (src) ***REMOVED***
  const obj = ***REMOVED***}

  // Convert buffer to string
  let lines = src.toString()

  // Convert line breaks to same format
  lines = lines.replace(/\r\n?/mg, '\n')

  let match
  while ((match = LINE.exec(lines)) != null) ***REMOVED***
    const key = match[1]

    // Default undefined or null to empty string
    let value = (match[2] || '')

    // Remove whitespace
    value = value.trim()

    // Check if double quoted
    const maybeQuote = value[0]

    // Remove surrounding quotes
    value = value.replace(/^(['"`])([\s\S]*)\1$/mg, '$2')

    // Expand newlines if double quoted
    if (maybeQuote === '"') ***REMOVED***
      value = value.replace(/\\n/g, '\n')
      value = value.replace(/\\r/g, '\r')
  ***REMOVED***

    // Add to object
    obj[key] = value
***REMOVED***

  return obj
}

function _log (message) ***REMOVED***
  console.log(`[dotenv@$***REMOVED***version}][DEBUG] $***REMOVED***message}`)
}

function _resolveHome (envPath) ***REMOVED***
  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath
}

// Populates process.env from .env file
function config (options) ***REMOVED***
  let dotenvPath = path.resolve(process.cwd(), '.env')
  let encoding = 'utf8'
  const debug = Boolean(options && options.debug)
  const override = Boolean(options && options.override)

  if (options) ***REMOVED***
    if (options.path != null) ***REMOVED***
      dotenvPath = _resolveHome(options.path)
  ***REMOVED***
    if (options.encoding != null) ***REMOVED***
      encoding = options.encoding
  ***REMOVED***
***REMOVED***

  try ***REMOVED***
    // Specifying an encoding returns a string instead of a buffer
    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, ***REMOVED*** encoding }))

    Object.keys(parsed).forEach(function (key) ***REMOVED***
      if (!Object.prototype.hasOwnProperty.call(process.env, key)) ***REMOVED***
        process.env[key] = parsed[key]
    ***REMOVED*** else ***REMOVED***
        if (override === true) ***REMOVED***
          process.env[key] = parsed[key]
      ***REMOVED***

        if (debug) ***REMOVED***
          if (override === true) ***REMOVED***
            _log(`"$***REMOVED***key}" is already defined in \`process.env\` and WAS overwritten`)
        ***REMOVED*** else ***REMOVED***
            _log(`"$***REMOVED***key}" is already defined in \`process.env\` and was NOT overwritten`)
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***)

    return ***REMOVED*** parsed }
***REMOVED*** catch (e) ***REMOVED***
    if (debug) ***REMOVED***
      _log(`Failed to load $***REMOVED***dotenvPath} $***REMOVED***e.message}`)
  ***REMOVED***

    return ***REMOVED*** error: e }
***REMOVED***
}

const DotenvModule = ***REMOVED***
  config,
  parse
}

module.exports.config = DotenvModule.config
module.exports.parse = DotenvModule.parse
module.exports = DotenvModule
