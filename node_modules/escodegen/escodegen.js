/*
  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>
  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/*global exports:true, require:true, global:true*/
(function () ***REMOVED***
    'use strict';

    var Syntax,
        Precedence,
        BinaryPrecedence,
        SourceNode,
        estraverse,
        esutils,
        base,
        indent,
        json,
        renumber,
        hexadecimal,
        quotes,
        escapeless,
        newline,
        space,
        parentheses,
        semicolons,
        safeConcatenation,
        directive,
        extra,
        parse,
        sourceMap,
        sourceCode,
        preserveBlankLines,
        FORMAT_MINIFY,
        FORMAT_DEFAULTS;

    estraverse = require('estraverse');
    esutils = require('esutils');

    Syntax = estraverse.Syntax;

    // Generation is done by generateExpression.
    function isExpression(node) ***REMOVED***
        return CodeGenerator.Expression.hasOwnProperty(node.type);
  ***REMOVED***

    // Generation is done by generateStatement.
    function isStatement(node) ***REMOVED***
        return CodeGenerator.Statement.hasOwnProperty(node.type);
  ***REMOVED***

    Precedence = ***REMOVED***
        Sequence: 0,
        Yield: 1,
        Assignment: 1,
        Conditional: 2,
        ArrowFunction: 2,
        LogicalOR: 3,
        LogicalAND: 4,
        BitwiseOR: 5,
        BitwiseXOR: 6,
        BitwiseAND: 7,
        Equality: 8,
        Relational: 9,
        BitwiseSHIFT: 10,
        Additive: 11,
        Multiplicative: 12,
        Exponentiation: 13,
        Await: 14,
        Unary: 14,
        Postfix: 15,
        Call: 16,
        New: 17,
        TaggedTemplate: 18,
        Member: 19,
        Primary: 20
  ***REMOVED***;

    BinaryPrecedence = ***REMOVED***
        '||': Precedence.LogicalOR,
        '&&': Precedence.LogicalAND,
        '|': Precedence.BitwiseOR,
        '^': Precedence.BitwiseXOR,
        '&': Precedence.BitwiseAND,
        '==': Precedence.Equality,
        '!=': Precedence.Equality,
        '===': Precedence.Equality,
        '!==': Precedence.Equality,
        'is': Precedence.Equality,
        'isnt': Precedence.Equality,
        '<': Precedence.Relational,
        '>': Precedence.Relational,
        '<=': Precedence.Relational,
        '>=': Precedence.Relational,
        'in': Precedence.Relational,
        'instanceof': Precedence.Relational,
        '<<': Precedence.BitwiseSHIFT,
        '>>': Precedence.BitwiseSHIFT,
        '>>>': Precedence.BitwiseSHIFT,
        '+': Precedence.Additive,
        '-': Precedence.Additive,
        '*': Precedence.Multiplicative,
        '%': Precedence.Multiplicative,
        '/': Precedence.Multiplicative,
        '**': Precedence.Exponentiation
  ***REMOVED***;

    //Flags
    var F_ALLOW_IN = 1,
        F_ALLOW_CALL = 1 << 1,
        F_ALLOW_UNPARATH_NEW = 1 << 2,
        F_FUNC_BODY = 1 << 3,
        F_DIRECTIVE_CTX = 1 << 4,
        F_SEMICOLON_OPT = 1 << 5;

    //Expression flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_ALLOW_CALL
    // F_ALLOW_UNPARATH_NEW
    var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
        E_TTF = F_ALLOW_IN | F_ALLOW_CALL,
        E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
        E_TFF = F_ALLOW_IN,
        E_FFT = F_ALLOW_UNPARATH_NEW,
        E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;

    //Statement flag sets
    //NOTE: Flag order:
    // F_ALLOW_IN
    // F_FUNC_BODY
    // F_DIRECTIVE_CTX
    // F_SEMICOLON_OPT
    var S_TFFF = F_ALLOW_IN,
        S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT,
        S_FFFF = 0x00,
        S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX,
        S_TTFF = F_ALLOW_IN | F_FUNC_BODY;

    function getDefaultOptions() ***REMOVED***
        // default options
        return ***REMOVED***
            indent: null,
            base: null,
            parse: null,
            comment: false,
            format: ***REMOVED***
                indent: ***REMOVED***
                    style: '    ',
                    base: 0,
                    adjustMultilineComment: false
              ***REMOVED***,
                newline: '\n',
                space: ' ',
                json: false,
                renumber: false,
                hexadecimal: false,
                quotes: 'single',
                escapeless: false,
                compact: false,
                parentheses: true,
                semicolons: true,
                safeConcatenation: false,
                preserveBlankLines: false
          ***REMOVED***,
            moz: ***REMOVED***
                comprehensionExpressionStartsWithAssignment: false,
                starlessGenerator: false
          ***REMOVED***,
            sourceMap: null,
            sourceMapRoot: null,
            sourceMapWithCode: false,
            directive: false,
            raw: true,
            verbatim: null,
            sourceCode: null
      ***REMOVED***;
  ***REMOVED***

    function stringRepeat(str, num) ***REMOVED***
        var result = '';

        for (num |= 0; num > 0; num >>>= 1, str += str) ***REMOVED***
            if (num & 1) ***REMOVED***
                result += str;
          ***REMOVED***
      ***REMOVED***

        return result;
  ***REMOVED***

    function hasLineTerminator(str) ***REMOVED***
        return (/[\r\n]/g).test(str);
  ***REMOVED***

    function endsWithLineTerminator(str) ***REMOVED***
        var len = str.length;
        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));
  ***REMOVED***

    function merge(target, override) ***REMOVED***
        var key;
        for (key in override) ***REMOVED***
            if (override.hasOwnProperty(key)) ***REMOVED***
                target[key] = override[key];
          ***REMOVED***
      ***REMOVED***
        return target;
  ***REMOVED***

    function updateDeeply(target, override) ***REMOVED***
        var key, val;

        function isHashObject(target) ***REMOVED***
            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
      ***REMOVED***

        for (key in override) ***REMOVED***
            if (override.hasOwnProperty(key)) ***REMOVED***
                val = override[key];
                if (isHashObject(val)) ***REMOVED***
                    if (isHashObject(target[key])) ***REMOVED***
                        updateDeeply(target[key], val);
                  ***REMOVED*** else ***REMOVED***
                        target[key] = updateDeeply(***REMOVED***}, val);
                  ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                    target[key] = val;
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***
        return target;
  ***REMOVED***

    function generateNumber(value) ***REMOVED***
        var result, point, temp, exponent, pos;

        if (value !== value) ***REMOVED***
            throw new Error('Numeric literal whose value is NaN');
      ***REMOVED***
        if (value < 0 || (value === 0 && 1 / value < 0)) ***REMOVED***
            throw new Error('Numeric literal whose value is negative');
      ***REMOVED***

        if (value === 1 / 0) ***REMOVED***
            return json ? 'null' : renumber ? '1e400' : '1e+400';
      ***REMOVED***

        result = '' + value;
        if (!renumber || result.length < 3) ***REMOVED***
            return result;
      ***REMOVED***

        point = result.indexOf('.');
        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) ***REMOVED***
            point = 0;
            result = result.slice(1);
      ***REMOVED***
        temp = result;
        result = result.replace('e+', 'e');
        exponent = 0;
        if ((pos = temp.indexOf('e')) > 0) ***REMOVED***
            exponent = +temp.slice(pos + 1);
            temp = temp.slice(0, pos);
      ***REMOVED***
        if (point >= 0) ***REMOVED***
            exponent -= temp.length - point - 1;
            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
      ***REMOVED***
        pos = 0;
        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) ***REMOVED***
            --pos;
      ***REMOVED***
        if (pos !== 0) ***REMOVED***
            exponent -= pos;
            temp = temp.slice(0, pos);
      ***REMOVED***
        if (exponent !== 0) ***REMOVED***
            temp += 'e' + exponent;
      ***REMOVED***
        if ((temp.length < result.length ||
                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&
                +temp === value) ***REMOVED***
            result = temp;
      ***REMOVED***

        return result;
  ***REMOVED***

    // Generate valid RegExp expression.
    // This function is based on https://github.com/Constellation/iv Engine

    function escapeRegExpCharacter(ch, previousIsBackslash) ***REMOVED***
        // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
        if ((ch & ~1) === 0x2028) ***REMOVED***
            return (previousIsBackslash ? 'u' : '\\u') + ((ch === 0x2028) ? '2028' : '2029');
      ***REMOVED*** else if (ch === 10 || ch === 13) ***REMOVED***  // \n, \r
            return (previousIsBackslash ? '' : '\\') + ((ch === 10) ? 'n' : 'r');
      ***REMOVED***
        return String.fromCharCode(ch);
  ***REMOVED***

    function generateRegExp(reg) ***REMOVED***
        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;

        result = reg.toString();

        if (reg.source) ***REMOVED***
            // extract flag from toString result
            match = result.match(/\/([^/]*)$/);
            if (!match) ***REMOVED***
                return result;
          ***REMOVED***

            flags = match[1];
            result = '';

            characterInBrack = false;
            previousIsBackslash = false;
            for (i = 0, iz = reg.source.length; i < iz; ++i) ***REMOVED***
                ch = reg.source.charCodeAt(i);

                if (!previousIsBackslash) ***REMOVED***
                    if (characterInBrack) ***REMOVED***
                        if (ch === 93) ***REMOVED***  // ]
                            characterInBrack = false;
                      ***REMOVED***
                  ***REMOVED*** else ***REMOVED***
                        if (ch === 47) ***REMOVED***  // /
                            result += '\\';
                      ***REMOVED*** else if (ch === 91) ***REMOVED***  // [
                            characterInBrack = true;
                      ***REMOVED***
                  ***REMOVED***
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    previousIsBackslash = ch === 92;  // \
              ***REMOVED*** else ***REMOVED***
                    // if new RegExp("\\\n') is provided, create /\n/
                    result += escapeRegExpCharacter(ch, previousIsBackslash);
                    // prevent like /\\[/]/
                    previousIsBackslash = false;
              ***REMOVED***
          ***REMOVED***

            return '/' + result + '/' + flags;
      ***REMOVED***

        return result;
  ***REMOVED***

    function escapeAllowedCharacter(code, next) ***REMOVED***
        var hex;

        if (code === 0x08  /* \b */) ***REMOVED***
            return '\\b';
      ***REMOVED***

        if (code === 0x0C  /* \f */) ***REMOVED***
            return '\\f';
      ***REMOVED***

        if (code === 0x09  /* \t */) ***REMOVED***
            return '\\t';
      ***REMOVED***

        hex = code.toString(16).toUpperCase();
        if (json || code > 0xFF) ***REMOVED***
            return '\\u' + '0000'.slice(hex.length) + hex;
      ***REMOVED*** else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) ***REMOVED***
            return '\\0';
      ***REMOVED*** else if (code === 0x000B  /* \v */) ***REMOVED*** // '\v'
            return '\\x0B';
      ***REMOVED*** else ***REMOVED***
            return '\\x' + '00'.slice(hex.length) + hex;
      ***REMOVED***
  ***REMOVED***

    function escapeDisallowedCharacter(code) ***REMOVED***
        if (code === 0x5C  /* \ */) ***REMOVED***
            return '\\\\';
      ***REMOVED***

        if (code === 0x0A  /* \n */) ***REMOVED***
            return '\\n';
      ***REMOVED***

        if (code === 0x0D  /* \r */) ***REMOVED***
            return '\\r';
      ***REMOVED***

        if (code === 0x2028) ***REMOVED***
            return '\\u2028';
      ***REMOVED***

        if (code === 0x2029) ***REMOVED***
            return '\\u2029';
      ***REMOVED***

        throw new Error('Incorrectly classified character');
  ***REMOVED***

    function escapeDirective(str) ***REMOVED***
        var i, iz, code, quote;

        quote = quotes === 'double' ? '"' : '\'';
        for (i = 0, iz = str.length; i < iz; ++i) ***REMOVED***
            code = str.charCodeAt(i);
            if (code === 0x27  /* ' */) ***REMOVED***
                quote = '"';
                break;
          ***REMOVED*** else if (code === 0x22  /* " */) ***REMOVED***
                quote = '\'';
                break;
          ***REMOVED*** else if (code === 0x5C  /* \ */) ***REMOVED***
                ++i;
          ***REMOVED***
      ***REMOVED***

        return quote + str + quote;
  ***REMOVED***

    function escapeString(str) ***REMOVED***
        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;

        for (i = 0, len = str.length; i < len; ++i) ***REMOVED***
            code = str.charCodeAt(i);
            if (code === 0x27  /* ' */) ***REMOVED***
                ++singleQuotes;
          ***REMOVED*** else if (code === 0x22  /* " */) ***REMOVED***
                ++doubleQuotes;
          ***REMOVED*** else if (code === 0x2F  /* / */ && json) ***REMOVED***
                result += '\\';
          ***REMOVED*** else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \ */) ***REMOVED***
                result += escapeDisallowedCharacter(code);
                continue;
          ***REMOVED*** else if (!esutils.code.isIdentifierPartES5(code) && (json && code < 0x20  /* SP */ || !json && !escapeless && (code < 0x20  /* SP */ || code > 0x7E  /* ~ */))) ***REMOVED***
                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
                continue;
          ***REMOVED***
            result += String.fromCharCode(code);
      ***REMOVED***

        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));
        quote = single ? '\'' : '"';

        if (!(single ? singleQuotes : doubleQuotes)) ***REMOVED***
            return quote + result + quote;
      ***REMOVED***

        str = result;
        result = quote;

        for (i = 0, len = str.length; i < len; ++i) ***REMOVED***
            code = str.charCodeAt(i);
            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* " */ && !single)) ***REMOVED***
                result += '\\';
          ***REMOVED***
            result += String.fromCharCode(code);
      ***REMOVED***

        return result + quote;
  ***REMOVED***

    /**
     * flatten an array to a string, where the array can contain
     * either strings or nested arrays
     */
    function flattenToString(arr) ***REMOVED***
        var i, iz, elem, result = '';
        for (i = 0, iz = arr.length; i < iz; ++i) ***REMOVED***
            elem = arr[i];
            result += Array.isArray(elem) ? flattenToString(elem) : elem;
      ***REMOVED***
        return result;
  ***REMOVED***

    /**
     * convert generated to a SourceNode when source maps are enabled.
     */
    function toSourceNodeWhenNeeded(generated, node) ***REMOVED***
        if (!sourceMap) ***REMOVED***
            // with no source maps, generated is either an
            // array or a string.  if an array, flatten it.
            // if a string, just return it
            if (Array.isArray(generated)) ***REMOVED***
                return flattenToString(generated);
          ***REMOVED*** else ***REMOVED***
                return generated;
          ***REMOVED***
      ***REMOVED***
        if (node == null) ***REMOVED***
            if (generated instanceof SourceNode) ***REMOVED***
                return generated;
          ***REMOVED*** else ***REMOVED***
                node = ***REMOVED***};
          ***REMOVED***
      ***REMOVED***
        if (node.loc == null) ***REMOVED***
            return new SourceNode(null, null, sourceMap, generated, node.name || null);
      ***REMOVED***
        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);
  ***REMOVED***

    function noEmptySpace() ***REMOVED***
        return (space) ? space : ' ';
  ***REMOVED***

    function join(left, right) ***REMOVED***
        var leftSource,
            rightSource,
            leftCharCode,
            rightCharCode;

        leftSource = toSourceNodeWhenNeeded(left).toString();
        if (leftSource.length === 0) ***REMOVED***
            return [right];
      ***REMOVED***

        rightSource = toSourceNodeWhenNeeded(right).toString();
        if (rightSource.length === 0) ***REMOVED***
            return [left];
      ***REMOVED***

        leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
        rightCharCode = rightSource.charCodeAt(0);

        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||
            esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode) ||
            leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) ***REMOVED*** // infix word operators all start with `i`
            return [left, noEmptySpace(), right];
      ***REMOVED*** else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||
                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) ***REMOVED***
            return [left, right];
      ***REMOVED***
        return [left, space, right];
  ***REMOVED***

    function addIndent(stmt) ***REMOVED***
        return [base, stmt];
  ***REMOVED***

    function withIndent(fn) ***REMOVED***
        var previousBase;
        previousBase = base;
        base += indent;
        fn(base);
        base = previousBase;
  ***REMOVED***

    function calculateSpaces(str) ***REMOVED***
        var i;
        for (i = str.length - 1; i >= 0; --i) ***REMOVED***
            if (esutils.code.isLineTerminator(str.charCodeAt(i))) ***REMOVED***
                break;
          ***REMOVED***
      ***REMOVED***
        return (str.length - 1) - i;
  ***REMOVED***

    function adjustMultilineComment(value, specialBase) ***REMOVED***
        var array, i, len, line, j, spaces, previousBase, sn;

        array = value.split(/\r\n|[\r\n]/);
        spaces = Number.MAX_VALUE;

        // first line doesn't have indentation
        for (i = 1, len = array.length; i < len; ++i) ***REMOVED***
            line = array[i];
            j = 0;
            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) ***REMOVED***
                ++j;
          ***REMOVED***
            if (spaces > j) ***REMOVED***
                spaces = j;
          ***REMOVED***
      ***REMOVED***

        if (typeof specialBase !== 'undefined') ***REMOVED***
            // pattern like
            // ***REMOVED***
            //   var t = 20;  /*
            //                 * this is comment
            //                 */
            // }
            previousBase = base;
            if (array[1][spaces] === '*') ***REMOVED***
                specialBase += ' ';
          ***REMOVED***
            base = specialBase;
      ***REMOVED*** else ***REMOVED***
            if (spaces & 1) ***REMOVED***
                // /*
                //  *
                //  */
                // If spaces are odd number, above pattern is considered.
                // We waste 1 space.
                --spaces;
          ***REMOVED***
            previousBase = base;
      ***REMOVED***

        for (i = 1, len = array.length; i < len; ++i) ***REMOVED***
            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));
            array[i] = sourceMap ? sn.join('') : sn;
      ***REMOVED***

        base = previousBase;

        return array.join('\n');
  ***REMOVED***

    function generateComment(comment, specialBase) ***REMOVED***
        if (comment.type === 'Line') ***REMOVED***
            if (endsWithLineTerminator(comment.value)) ***REMOVED***
                return '//' + comment.value;
          ***REMOVED*** else ***REMOVED***
                // Always use LineTerminator
                var result = '//' + comment.value;
                if (!preserveBlankLines) ***REMOVED***
                    result += '\n';
              ***REMOVED***
                return result;
          ***REMOVED***
      ***REMOVED***
        if (extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) ***REMOVED***
            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);
      ***REMOVED***
        return '/*' + comment.value + '*/';
  ***REMOVED***

    function addComments(stmt, result) ***REMOVED***
        var i, len, comment, save, tailingToStatement, specialBase, fragment,
            extRange, range, prevRange, prefix, infix, suffix, count;

        if (stmt.leadingComments && stmt.leadingComments.length > 0) ***REMOVED***
            save = result;

            if (preserveBlankLines) ***REMOVED***
                comment = stmt.leadingComments[0];
                result = [];

                extRange = comment.extendedRange;
                range = comment.range;

                prefix = sourceCode.substring(extRange[0], range[0]);
                count = (prefix.match(/\n/g) || []).length;
                if (count > 0) ***REMOVED***
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));
              ***REMOVED*** else ***REMOVED***
                    result.push(prefix);
                    result.push(generateComment(comment));
              ***REMOVED***

                prevRange = range;

                for (i = 1, len = stmt.leadingComments.length; i < len; i++) ***REMOVED***
                    comment = stmt.leadingComments[i];
                    range = comment.range;

                    infix = sourceCode.substring(prevRange[1], range[0]);
                    count = (infix.match(/\n/g) || []).length;
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));

                    prevRange = range;
              ***REMOVED***

                suffix = sourceCode.substring(range[1], extRange[1]);
                count = (suffix.match(/\n/g) || []).length;
                result.push(stringRepeat('\n', count));
          ***REMOVED*** else ***REMOVED***
                comment = stmt.leadingComments[0];
                result = [];
                if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) ***REMOVED***
                    result.push('\n');
              ***REMOVED***
                result.push(generateComment(comment));
                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) ***REMOVED***
                    result.push('\n');
              ***REMOVED***

                for (i = 1, len = stmt.leadingComments.length; i < len; ++i) ***REMOVED***
                    comment = stmt.leadingComments[i];
                    fragment = [generateComment(comment)];
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) ***REMOVED***
                        fragment.push('\n');
                  ***REMOVED***
                    result.push(addIndent(fragment));
              ***REMOVED***
          ***REMOVED***

            result.push(addIndent(save));
      ***REMOVED***

        if (stmt.trailingComments) ***REMOVED***

            if (preserveBlankLines) ***REMOVED***
                comment = stmt.trailingComments[0];
                extRange = comment.extendedRange;
                range = comment.range;

                prefix = sourceCode.substring(extRange[0], range[0]);
                count = (prefix.match(/\n/g) || []).length;

                if (count > 0) ***REMOVED***
                    result.push(stringRepeat('\n', count));
                    result.push(addIndent(generateComment(comment)));
              ***REMOVED*** else ***REMOVED***
                    result.push(prefix);
                    result.push(generateComment(comment));
              ***REMOVED***
          ***REMOVED*** else ***REMOVED***
                tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
                specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));
                for (i = 0, len = stmt.trailingComments.length; i < len; ++i) ***REMOVED***
                    comment = stmt.trailingComments[i];
                    if (tailingToStatement) ***REMOVED***
                        // We assume target like following script
                        //
                        // var t = 20;  /**
                        //               * This is comment of t
                        //               */
                        if (i === 0) ***REMOVED***
                            // first case
                            result = [result, indent];
                      ***REMOVED*** else ***REMOVED***
                            result = [result, specialBase];
                      ***REMOVED***
                        result.push(generateComment(comment, specialBase));
                  ***REMOVED*** else ***REMOVED***
                        result = [result, addIndent(generateComment(comment))];
                  ***REMOVED***
                    if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) ***REMOVED***
                        result = [result, '\n'];
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***

        return result;
  ***REMOVED***

    function generateBlankLines(start, end, result) ***REMOVED***
        var j, newlineCount = 0;

        for (j = start; j < end; j++) ***REMOVED***
            if (sourceCode[j] === '\n') ***REMOVED***
                newlineCount++;
          ***REMOVED***
      ***REMOVED***

        for (j = 1; j < newlineCount; j++) ***REMOVED***
            result.push(newline);
      ***REMOVED***
  ***REMOVED***

    function parenthesize(text, current, should) ***REMOVED***
        if (current < should) ***REMOVED***
            return ['(', text, ')'];
      ***REMOVED***
        return text;
  ***REMOVED***

    function generateVerbatimString(string) ***REMOVED***
        var i, iz, result;
        result = string.split(/\r\n|\n/);
        for (i = 1, iz = result.length; i < iz; i++) ***REMOVED***
            result[i] = newline + base + result[i];
      ***REMOVED***
        return result;
  ***REMOVED***

    function generateVerbatim(expr, precedence) ***REMOVED***
        var verbatim, result, prec;
        verbatim = expr[extra.verbatim];

        if (typeof verbatim === 'string') ***REMOVED***
            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);
      ***REMOVED*** else ***REMOVED***
            // verbatim is object
            result = generateVerbatimString(verbatim.content);
            prec = (verbatim.precedence != null) ? verbatim.precedence : Precedence.Sequence;
            result = parenthesize(result, prec, precedence);
      ***REMOVED***

        return toSourceNodeWhenNeeded(result, expr);
  ***REMOVED***

    function CodeGenerator() ***REMOVED***
  ***REMOVED***

    // Helpers.

    CodeGenerator.prototype.maybeBlock = function(stmt, flags) ***REMOVED***
        var result, noLeadingComment, that = this;

        noLeadingComment = !extra.comment || !stmt.leadingComments;

        if (stmt.type === Syntax.BlockStatement && noLeadingComment) ***REMOVED***
            return [space, this.generateStatement(stmt, flags)];
      ***REMOVED***

        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) ***REMOVED***
            return ';';
      ***REMOVED***

        withIndent(function () ***REMOVED***
            result = [
                newline,
                addIndent(that.generateStatement(stmt, flags))
            ];
      ***REMOVED***);

        return result;
  ***REMOVED***;

    CodeGenerator.prototype.maybeBlockSuffix = function (stmt, result) ***REMOVED***
        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) ***REMOVED***
            return [result, space];
      ***REMOVED***
        if (ends) ***REMOVED***
            return [result, base];
      ***REMOVED***
        return [result, newline, base];
  ***REMOVED***;

    function generateIdentifier(node) ***REMOVED***
        return toSourceNodeWhenNeeded(node.name, node);
  ***REMOVED***

    function generateAsyncPrefix(node, spaceRequired) ***REMOVED***
        return node.async ? 'async' + (spaceRequired ? noEmptySpace() : space) : '';
  ***REMOVED***

    function generateStarSuffix(node) ***REMOVED***
        var isGenerator = node.generator && !extra.moz.starlessGenerator;
        return isGenerator ? '*' + space : '';
  ***REMOVED***

    function generateMethodPrefix(prop) ***REMOVED***
        var func = prop.value, prefix = '';
        if (func.async) ***REMOVED***
            prefix += generateAsyncPrefix(func, !prop.computed);
      ***REMOVED***
        if (func.generator) ***REMOVED***
            // avoid space before method name
            prefix += generateStarSuffix(func) ? '*' : '';
      ***REMOVED***
        return prefix;
  ***REMOVED***

    CodeGenerator.prototype.generatePattern = function (node, precedence, flags) ***REMOVED***
        if (node.type === Syntax.Identifier) ***REMOVED***
            return generateIdentifier(node);
      ***REMOVED***
        return this.generateExpression(node, precedence, flags);
  ***REMOVED***;

    CodeGenerator.prototype.generateFunctionParams = function (node) ***REMOVED***
        var i, iz, result, hasDefault;

        hasDefault = false;

        if (node.type === Syntax.ArrowFunctionExpression &&
                !node.rest && (!node.defaults || node.defaults.length === 0) &&
                node.params.length === 1 && node.params[0].type === Syntax.Identifier) ***REMOVED***
            // arg => ***REMOVED*** } case
            result = [generateAsyncPrefix(node, true), generateIdentifier(node.params[0])];
      ***REMOVED*** else ***REMOVED***
            result = node.type === Syntax.ArrowFunctionExpression ? [generateAsyncPrefix(node, false)] : [];
            result.push('(');
            if (node.defaults) ***REMOVED***
                hasDefault = true;
          ***REMOVED***
            for (i = 0, iz = node.params.length; i < iz; ++i) ***REMOVED***
                if (hasDefault && node.defaults[i]) ***REMOVED***
                    // Handle default values.
                    result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));
              ***REMOVED*** else ***REMOVED***
                    result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));
              ***REMOVED***
                if (i + 1 < iz) ***REMOVED***
                    result.push(',' + space);
              ***REMOVED***
          ***REMOVED***

            if (node.rest) ***REMOVED***
                if (node.params.length) ***REMOVED***
                    result.push(',' + space);
              ***REMOVED***
                result.push('...');
                result.push(generateIdentifier(node.rest));
          ***REMOVED***

            result.push(')');
      ***REMOVED***

        return result;
  ***REMOVED***;

    CodeGenerator.prototype.generateFunctionBody = function (node) ***REMOVED***
        var result, expr;

        result = this.generateFunctionParams(node);

        if (node.type === Syntax.ArrowFunctionExpression) ***REMOVED***
            result.push(space);
            result.push('=>');
      ***REMOVED***

        if (node.expression) ***REMOVED***
            result.push(space);
            expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);
            if (expr.toString().charAt(0) === '***REMOVED***') ***REMOVED***
                expr = ['(', expr, ')'];
          ***REMOVED***
            result.push(expr);
      ***REMOVED*** else ***REMOVED***
            result.push(this.maybeBlock(node.body, S_TTFF));
      ***REMOVED***

        return result;
  ***REMOVED***;

    CodeGenerator.prototype.generateIterationForStatement = function (operator, stmt, flags) ***REMOVED***
        var result = ['for' + (stmt.await ? noEmptySpace() + 'await' : '') + space + '('], that = this;
        withIndent(function () ***REMOVED***
            if (stmt.left.type === Syntax.VariableDeclaration) ***REMOVED***
                withIndent(function () ***REMOVED***
                    result.push(stmt.left.kind + noEmptySpace());
                    result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));
              ***REMOVED***);
          ***REMOVED*** else ***REMOVED***
                result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));
          ***REMOVED***

            result = join(result, operator);
            result = [join(
                result,
                that.generateExpression(stmt.right, Precedence.Assignment, E_TTT)
            ), ')'];
      ***REMOVED***);
        result.push(this.maybeBlock(stmt.body, flags));
        return result;
  ***REMOVED***;

    CodeGenerator.prototype.generatePropertyKey = function (expr, computed) ***REMOVED***
        var result = [];

        if (computed) ***REMOVED***
            result.push('[');
      ***REMOVED***

        result.push(this.generateExpression(expr, Precedence.Assignment, E_TTT));

        if (computed) ***REMOVED***
            result.push(']');
      ***REMOVED***

        return result;
  ***REMOVED***;

    CodeGenerator.prototype.generateAssignment = function (left, right, operator, precedence, flags) ***REMOVED***
        if (Precedence.Assignment < precedence) ***REMOVED***
            flags |= F_ALLOW_IN;
      ***REMOVED***

        return parenthesize(
            [
                this.generateExpression(left, Precedence.Call, flags),
                space + operator + space,
                this.generateExpression(right, Precedence.Assignment, flags)
            ],
            Precedence.Assignment,
            precedence
        );
  ***REMOVED***;

    CodeGenerator.prototype.semicolon = function (flags) ***REMOVED***
        if (!semicolons && flags & F_SEMICOLON_OPT) ***REMOVED***
            return '';
      ***REMOVED***
        return ';';
  ***REMOVED***;

    // Statements.

    CodeGenerator.Statement = ***REMOVED***

        BlockStatement: function (stmt, flags) ***REMOVED***
            var range, content, result = ['***REMOVED***', newline], that = this;

            withIndent(function () ***REMOVED***
                // handle functions without any code
                if (stmt.body.length === 0 && preserveBlankLines) ***REMOVED***
                    range = stmt.range;
                    if (range[1] - range[0] > 2) ***REMOVED***
                        content = sourceCode.substring(range[0] + 1, range[1] - 1);
                        if (content[0] === '\n') ***REMOVED***
                            result = ['***REMOVED***'];
                      ***REMOVED***
                        result.push(content);
                  ***REMOVED***
              ***REMOVED***

                var i, iz, fragment, bodyFlags;
                bodyFlags = S_TFFF;
                if (flags & F_FUNC_BODY) ***REMOVED***
                    bodyFlags |= F_DIRECTIVE_CTX;
              ***REMOVED***

                for (i = 0, iz = stmt.body.length; i < iz; ++i) ***REMOVED***
                    if (preserveBlankLines) ***REMOVED***
                        // handle spaces before the first line
                        if (i === 0) ***REMOVED***
                            if (stmt.body[0].leadingComments) ***REMOVED***
                                range = stmt.body[0].leadingComments[0].extendedRange;
                                content = sourceCode.substring(range[0], range[1]);
                                if (content[0] === '\n') ***REMOVED***
                                    result = ['***REMOVED***'];
                              ***REMOVED***
                          ***REMOVED***
                            if (!stmt.body[0].leadingComments) ***REMOVED***
                                generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);
                          ***REMOVED***
                      ***REMOVED***

                        // handle spaces between lines
                        if (i > 0) ***REMOVED***
                            if (!stmt.body[i - 1].trailingComments  && !stmt.body[i].leadingComments) ***REMOVED***
                                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                          ***REMOVED***
                      ***REMOVED***
                  ***REMOVED***

                    if (i === iz - 1) ***REMOVED***
                        bodyFlags |= F_SEMICOLON_OPT;
                  ***REMOVED***

                    if (stmt.body[i].leadingComments && preserveBlankLines) ***REMOVED***
                        fragment = that.generateStatement(stmt.body[i], bodyFlags);
                  ***REMOVED*** else ***REMOVED***
                        fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));
                  ***REMOVED***

                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) ***REMOVED***
                        if (preserveBlankLines && i < iz - 1) ***REMOVED***
                            // don't add a new line if there are leading coments
                            // in the next statement
                            if (!stmt.body[i + 1].leadingComments) ***REMOVED***
                                result.push(newline);
                          ***REMOVED***
                      ***REMOVED*** else ***REMOVED***
                            result.push(newline);
                      ***REMOVED***
                  ***REMOVED***

                    if (preserveBlankLines) ***REMOVED***
                        // handle spaces after the last line
                        if (i === iz - 1) ***REMOVED***
                            if (!stmt.body[i].trailingComments) ***REMOVED***
                                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                          ***REMOVED***
                      ***REMOVED***
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***);

            result.push(addIndent('}'));
            return result;
      ***REMOVED***,

        BreakStatement: function (stmt, flags) ***REMOVED***
            if (stmt.label) ***REMOVED***
                return 'break ' + stmt.label.name + this.semicolon(flags);
          ***REMOVED***
            return 'break' + this.semicolon(flags);
      ***REMOVED***,

        ContinueStatement: function (stmt, flags) ***REMOVED***
            if (stmt.label) ***REMOVED***
                return 'continue ' + stmt.label.name + this.semicolon(flags);
          ***REMOVED***
            return 'continue' + this.semicolon(flags);
      ***REMOVED***,

        ClassBody: function (stmt, flags) ***REMOVED***
            var result = [ '***REMOVED***', newline], that = this;

            withIndent(function (indent) ***REMOVED***
                var i, iz;

                for (i = 0, iz = stmt.body.length; i < iz; ++i) ***REMOVED***
                    result.push(indent);
                    result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));
                    if (i + 1 < iz) ***REMOVED***
                        result.push(newline);
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***);

            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) ***REMOVED***
                result.push(newline);
          ***REMOVED***
            result.push(base);
            result.push('}');
            return result;
      ***REMOVED***,

        ClassDeclaration: function (stmt, flags) ***REMOVED***
            var result, fragment;
            result  = ['class'];
            if (stmt.id) ***REMOVED***
                result = join(result, this.generateExpression(stmt.id, Precedence.Sequence, E_TTT));
          ***REMOVED***
            if (stmt.superClass) ***REMOVED***
                fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Unary, E_TTT));
                result = join(result, fragment);
          ***REMOVED***
            result.push(space);
            result.push(this.generateStatement(stmt.body, S_TFFT));
            return result;
      ***REMOVED***,

        DirectiveStatement: function (stmt, flags) ***REMOVED***
            if (extra.raw && stmt.raw) ***REMOVED***
                return stmt.raw + this.semicolon(flags);
          ***REMOVED***
            return escapeDirective(stmt.directive) + this.semicolon(flags);
      ***REMOVED***,

        DoWhileStatement: function (stmt, flags) ***REMOVED***
            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.
            var result = join('do', this.maybeBlock(stmt.body, S_TFFF));
            result = this.maybeBlockSuffix(stmt.body, result);
            return join(result, [
                'while' + space + '(',
                this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                ')' + this.semicolon(flags)
            ]);
      ***REMOVED***,

        CatchClause: function (stmt, flags) ***REMOVED***
            var result, that = this;
            withIndent(function () ***REMOVED***
                var guard;

                if (stmt.param) ***REMOVED***
                    result = [
                        'catch' + space + '(',
                        that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),
                        ')'
                    ];

                    if (stmt.guard) ***REMOVED***
                        guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);
                        result.splice(2, 0, ' if ', guard);
                  ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                    result = ['catch'];
              ***REMOVED***
          ***REMOVED***);
            result.push(this.maybeBlock(stmt.body, S_TFFF));
            return result;
      ***REMOVED***,

        DebuggerStatement: function (stmt, flags) ***REMOVED***
            return 'debugger' + this.semicolon(flags);
      ***REMOVED***,

        EmptyStatement: function (stmt, flags) ***REMOVED***
            return ';';
      ***REMOVED***,

        ExportDefaultDeclaration: function (stmt, flags) ***REMOVED***
            var result = [ 'export' ], bodyFlags;

            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;

            // export default HoistableDeclaration[Default]
            // export default AssignmentExpression[In] ;
            result = join(result, 'default');
            if (isStatement(stmt.declaration)) ***REMOVED***
                result = join(result, this.generateStatement(stmt.declaration, bodyFlags));
          ***REMOVED*** else ***REMOVED***
                result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));
          ***REMOVED***
            return result;
      ***REMOVED***,

        ExportNamedDeclaration: function (stmt, flags) ***REMOVED***
            var result = [ 'export' ], bodyFlags, that = this;

            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;

            // export VariableStatement
            // export Declaration[Default]
            if (stmt.declaration) ***REMOVED***
                return join(result, this.generateStatement(stmt.declaration, bodyFlags));
          ***REMOVED***

            // export ExportClause[NoReference] FromClause ;
            // export ExportClause ;
            if (stmt.specifiers) ***REMOVED***
                if (stmt.specifiers.length === 0) ***REMOVED***
                    result = join(result, '***REMOVED***' + space + '}');
              ***REMOVED*** else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) ***REMOVED***
                    result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));
              ***REMOVED*** else ***REMOVED***
                    result = join(result, '***REMOVED***');
                    withIndent(function (indent) ***REMOVED***
                        var i, iz;
                        result.push(newline);
                        for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) ***REMOVED***
                            result.push(indent);
                            result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                            if (i + 1 < iz) ***REMOVED***
                                result.push(',' + newline);
                          ***REMOVED***
                      ***REMOVED***
                  ***REMOVED***);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) ***REMOVED***
                        result.push(newline);
                  ***REMOVED***
                    result.push(base + '}');
              ***REMOVED***

                if (stmt.source) ***REMOVED***
                    result = join(result, [
                        'from' + space,
                        // ModuleSpecifier
                        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                        this.semicolon(flags)
                    ]);
              ***REMOVED*** else ***REMOVED***
                    result.push(this.semicolon(flags));
              ***REMOVED***
          ***REMOVED***
            return result;
      ***REMOVED***,

        ExportAllDeclaration: function (stmt, flags) ***REMOVED***
            // export * FromClause ;
            return [
                'export' + space,
                '*' + space,
                'from' + space,
                // ModuleSpecifier
                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                this.semicolon(flags)
            ];
      ***REMOVED***,

        ExpressionStatement: function (stmt, flags) ***REMOVED***
            var result, fragment;

            function isClassPrefixed(fragment) ***REMOVED***
                var code;
                if (fragment.slice(0, 5) !== 'class') ***REMOVED***
                    return false;
              ***REMOVED***
                code = fragment.charCodeAt(5);
                return code === 0x7B  /* '***REMOVED***' */ || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);
          ***REMOVED***

            function isFunctionPrefixed(fragment) ***REMOVED***
                var code;
                if (fragment.slice(0, 8) !== 'function') ***REMOVED***
                    return false;
              ***REMOVED***
                code = fragment.charCodeAt(8);
                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);
          ***REMOVED***

            function isAsyncPrefixed(fragment) ***REMOVED***
                var code, i, iz;
                if (fragment.slice(0, 5) !== 'async') ***REMOVED***
                    return false;
              ***REMOVED***
                if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) ***REMOVED***
                    return false;
              ***REMOVED***
                for (i = 6, iz = fragment.length; i < iz; ++i) ***REMOVED***
                    if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) ***REMOVED***
                        break;
                  ***REMOVED***
              ***REMOVED***
                if (i === iz) ***REMOVED***
                    return false;
              ***REMOVED***
                if (fragment.slice(i, i + 8) !== 'function') ***REMOVED***
                    return false;
              ***REMOVED***
                code = fragment.charCodeAt(i + 8);
                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);
          ***REMOVED***

            result = [this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)];
            // 12.4 '***REMOVED***', 'function', 'class' is not allowed in this position.
            // wrap expression with parentheses
            fragment = toSourceNodeWhenNeeded(result).toString();
            if (fragment.charCodeAt(0) === 0x7B  /* '***REMOVED***' */ ||  // ObjectExpression
                    isClassPrefixed(fragment) ||
                    isFunctionPrefixed(fragment) ||
                    isAsyncPrefixed(fragment) ||
                    (directive && (flags & F_DIRECTIVE_CTX) && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) ***REMOVED***
                result = ['(', result, ')' + this.semicolon(flags)];
          ***REMOVED*** else ***REMOVED***
                result.push(this.semicolon(flags));
          ***REMOVED***
            return result;
      ***REMOVED***,

        ImportDeclaration: function (stmt, flags) ***REMOVED***
            // ES6: 15.2.1 valid import declarations:
            //     - import ImportClause FromClause ;
            //     - import ModuleSpecifier ;
            var result, cursor, that = this;

            // If no ImportClause is present,
            // this should be `import ModuleSpecifier` so skip `from`
            // ModuleSpecifier is StringLiteral.
            if (stmt.specifiers.length === 0) ***REMOVED***
                // import ModuleSpecifier ;
                return [
                    'import',
                    space,
                    // ModuleSpecifier
                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                    this.semicolon(flags)
                ];
          ***REMOVED***

            // import ImportClause FromClause ;
            result = [
                'import'
            ];
            cursor = 0;

            // ImportedBinding
            if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) ***REMOVED***
                result = join(result, [
                        this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
                ]);
                ++cursor;
          ***REMOVED***

            if (stmt.specifiers[cursor]) ***REMOVED***
                if (cursor !== 0) ***REMOVED***
                    result.push(',');
              ***REMOVED***

                if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) ***REMOVED***
                    // NameSpaceImport
                    result = join(result, [
                            space,
                            this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
                    ]);
              ***REMOVED*** else ***REMOVED***
                    // NamedImports
                    result.push(space + '***REMOVED***');

                    if ((stmt.specifiers.length - cursor) === 1) ***REMOVED***
                        // import ***REMOVED*** ... } from "...";
                        result.push(space);
                        result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));
                        result.push(space + '}' + space);
                  ***REMOVED*** else ***REMOVED***
                        // import ***REMOVED***
                        //    ...,
                        //    ...,
                        // } from "...";
                        withIndent(function (indent) ***REMOVED***
                            var i, iz;
                            result.push(newline);
                            for (i = cursor, iz = stmt.specifiers.length; i < iz; ++i) ***REMOVED***
                                result.push(indent);
                                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
                                if (i + 1 < iz) ***REMOVED***
                                    result.push(',' + newline);
                              ***REMOVED***
                          ***REMOVED***
                      ***REMOVED***);
                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) ***REMOVED***
                            result.push(newline);
                      ***REMOVED***
                        result.push(base + '}' + space);
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***

            result = join(result, [
                'from' + space,
                // ModuleSpecifier
                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
                this.semicolon(flags)
            ]);
            return result;
      ***REMOVED***,

        VariableDeclarator: function (stmt, flags) ***REMOVED***
            var itemFlags = (flags & F_ALLOW_IN) ? E_TTT : E_FTT;
            if (stmt.init) ***REMOVED***
                return [
                    this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),
                    space,
                    '=',
                    space,
                    this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)
                ];
          ***REMOVED***
            return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);
      ***REMOVED***,

        VariableDeclaration: function (stmt, flags) ***REMOVED***
            // VariableDeclarator is typed as Statement,
            // but joined with comma (not LineTerminator).
            // So if comment is attached to target node, we should specialize.
            var result, i, iz, node, bodyFlags, that = this;

            result = [ stmt.kind ];

            bodyFlags = (flags & F_ALLOW_IN) ? S_TFFF : S_FFFF;

            function block() ***REMOVED***
                node = stmt.declarations[0];
                if (extra.comment && node.leadingComments) ***REMOVED***
                    result.push('\n');
                    result.push(addIndent(that.generateStatement(node, bodyFlags)));
              ***REMOVED*** else ***REMOVED***
                    result.push(noEmptySpace());
                    result.push(that.generateStatement(node, bodyFlags));
              ***REMOVED***

                for (i = 1, iz = stmt.declarations.length; i < iz; ++i) ***REMOVED***
                    node = stmt.declarations[i];
                    if (extra.comment && node.leadingComments) ***REMOVED***
                        result.push(',' + newline);
                        result.push(addIndent(that.generateStatement(node, bodyFlags)));
                  ***REMOVED*** else ***REMOVED***
                        result.push(',' + space);
                        result.push(that.generateStatement(node, bodyFlags));
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***

            if (stmt.declarations.length > 1) ***REMOVED***
                withIndent(block);
          ***REMOVED*** else ***REMOVED***
                block();
          ***REMOVED***

            result.push(this.semicolon(flags));

            return result;
      ***REMOVED***,

        ThrowStatement: function (stmt, flags) ***REMOVED***
            return [join(
                'throw',
                this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)
            ), this.semicolon(flags)];
      ***REMOVED***,

        TryStatement: function (stmt, flags) ***REMOVED***
            var result, i, iz, guardedHandlers;

            result = ['try', this.maybeBlock(stmt.block, S_TFFF)];
            result = this.maybeBlockSuffix(stmt.block, result);

            if (stmt.handlers) ***REMOVED***
                // old interface
                for (i = 0, iz = stmt.handlers.length; i < iz; ++i) ***REMOVED***
                    result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));
                    if (stmt.finalizer || i + 1 !== iz) ***REMOVED***
                        result = this.maybeBlockSuffix(stmt.handlers[i].body, result);
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED*** else ***REMOVED***
                guardedHandlers = stmt.guardedHandlers || [];

                for (i = 0, iz = guardedHandlers.length; i < iz; ++i) ***REMOVED***
                    result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));
                    if (stmt.finalizer || i + 1 !== iz) ***REMOVED***
                        result = this.maybeBlockSuffix(guardedHandlers[i].body, result);
                  ***REMOVED***
              ***REMOVED***

                // new interface
                if (stmt.handler) ***REMOVED***
                    if (Array.isArray(stmt.handler)) ***REMOVED***
                        for (i = 0, iz = stmt.handler.length; i < iz; ++i) ***REMOVED***
                            result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));
                            if (stmt.finalizer || i + 1 !== iz) ***REMOVED***
                                result = this.maybeBlockSuffix(stmt.handler[i].body, result);
                          ***REMOVED***
                      ***REMOVED***
                  ***REMOVED*** else ***REMOVED***
                        result = join(result, this.generateStatement(stmt.handler, S_TFFF));
                        if (stmt.finalizer) ***REMOVED***
                            result = this.maybeBlockSuffix(stmt.handler.body, result);
                      ***REMOVED***
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***
            if (stmt.finalizer) ***REMOVED***
                result = join(result, ['finally', this.maybeBlock(stmt.finalizer, S_TFFF)]);
          ***REMOVED***
            return result;
      ***REMOVED***,

        SwitchStatement: function (stmt, flags) ***REMOVED***
            var result, fragment, i, iz, bodyFlags, that = this;
            withIndent(function () ***REMOVED***
                result = [
                    'switch' + space + '(',
                    that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),
                    ')' + space + '***REMOVED***' + newline
                ];
          ***REMOVED***);
            if (stmt.cases) ***REMOVED***
                bodyFlags = S_TFFF;
                for (i = 0, iz = stmt.cases.length; i < iz; ++i) ***REMOVED***
                    if (i === iz - 1) ***REMOVED***
                        bodyFlags |= F_SEMICOLON_OPT;
                  ***REMOVED***
                    fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));
                    result.push(fragment);
                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) ***REMOVED***
                        result.push(newline);
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***
            result.push(addIndent('}'));
            return result;
      ***REMOVED***,

        SwitchCase: function (stmt, flags) ***REMOVED***
            var result, fragment, i, iz, bodyFlags, that = this;
            withIndent(function () ***REMOVED***
                if (stmt.test) ***REMOVED***
                    result = [
                        join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),
                        ':'
                    ];
              ***REMOVED*** else ***REMOVED***
                    result = ['default:'];
              ***REMOVED***

                i = 0;
                iz = stmt.consequent.length;
                if (iz && stmt.consequent[0].type === Syntax.BlockStatement) ***REMOVED***
                    fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);
                    result.push(fragment);
                    i = 1;
              ***REMOVED***

                if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) ***REMOVED***
                    result.push(newline);
              ***REMOVED***

                bodyFlags = S_TFFF;
                for (; i < iz; ++i) ***REMOVED***
                    if (i === iz - 1 && flags & F_SEMICOLON_OPT) ***REMOVED***
                        bodyFlags |= F_SEMICOLON_OPT;
                  ***REMOVED***
                    fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));
                    result.push(fragment);
                    if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) ***REMOVED***
                        result.push(newline);
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***);
            return result;
      ***REMOVED***,

        IfStatement: function (stmt, flags) ***REMOVED***
            var result, bodyFlags, semicolonOptional, that = this;
            withIndent(function () ***REMOVED***
                result = [
                    'if' + space + '(',
                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                    ')'
                ];
          ***REMOVED***);
            semicolonOptional = flags & F_SEMICOLON_OPT;
            bodyFlags = S_TFFF;
            if (semicolonOptional) ***REMOVED***
                bodyFlags |= F_SEMICOLON_OPT;
          ***REMOVED***
            if (stmt.alternate) ***REMOVED***
                result.push(this.maybeBlock(stmt.consequent, S_TFFF));
                result = this.maybeBlockSuffix(stmt.consequent, result);
                if (stmt.alternate.type === Syntax.IfStatement) ***REMOVED***
                    result = join(result, ['else ', this.generateStatement(stmt.alternate, bodyFlags)]);
              ***REMOVED*** else ***REMOVED***
                    result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));
              ***REMOVED***
          ***REMOVED*** else ***REMOVED***
                result.push(this.maybeBlock(stmt.consequent, bodyFlags));
          ***REMOVED***
            return result;
      ***REMOVED***,

        ForStatement: function (stmt, flags) ***REMOVED***
            var result, that = this;
            withIndent(function () ***REMOVED***
                result = ['for' + space + '('];
                if (stmt.init) ***REMOVED***
                    if (stmt.init.type === Syntax.VariableDeclaration) ***REMOVED***
                        result.push(that.generateStatement(stmt.init, S_FFFF));
                  ***REMOVED*** else ***REMOVED***
                        // F_ALLOW_IN becomes false.
                        result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));
                        result.push(';');
                  ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                    result.push(';');
              ***REMOVED***

                if (stmt.test) ***REMOVED***
                    result.push(space);
                    result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));
                    result.push(';');
              ***REMOVED*** else ***REMOVED***
                    result.push(';');
              ***REMOVED***

                if (stmt.update) ***REMOVED***
                    result.push(space);
                    result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));
                    result.push(')');
              ***REMOVED*** else ***REMOVED***
                    result.push(')');
              ***REMOVED***
          ***REMOVED***);

            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
      ***REMOVED***,

        ForInStatement: function (stmt, flags) ***REMOVED***
            return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
      ***REMOVED***,

        ForOfStatement: function (stmt, flags) ***REMOVED***
            return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
      ***REMOVED***,

        LabeledStatement: function (stmt, flags) ***REMOVED***
            return [stmt.label.name + ':', this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)];
      ***REMOVED***,

        Program: function (stmt, flags) ***REMOVED***
            var result, fragment, i, iz, bodyFlags;
            iz = stmt.body.length;
            result = [safeConcatenation && iz > 0 ? '\n' : ''];
            bodyFlags = S_TFTF;
            for (i = 0; i < iz; ++i) ***REMOVED***
                if (!safeConcatenation && i === iz - 1) ***REMOVED***
                    bodyFlags |= F_SEMICOLON_OPT;
              ***REMOVED***

                if (preserveBlankLines) ***REMOVED***
                    // handle spaces before the first line
                    if (i === 0) ***REMOVED***
                        if (!stmt.body[0].leadingComments) ***REMOVED***
                            generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);
                      ***REMOVED***
                  ***REMOVED***

                    // handle spaces between lines
                    if (i > 0) ***REMOVED***
                        if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) ***REMOVED***
                            generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
                      ***REMOVED***
                  ***REMOVED***
              ***REMOVED***

                fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));
                result.push(fragment);
                if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) ***REMOVED***
                    if (preserveBlankLines) ***REMOVED***
                        if (!stmt.body[i + 1].leadingComments) ***REMOVED***
                            result.push(newline);
                      ***REMOVED***
                  ***REMOVED*** else ***REMOVED***
                        result.push(newline);
                  ***REMOVED***
              ***REMOVED***

                if (preserveBlankLines) ***REMOVED***
                    // handle spaces after the last line
                    if (i === iz - 1) ***REMOVED***
                        if (!stmt.body[i].trailingComments) ***REMOVED***
                            generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
                      ***REMOVED***
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***
            return result;
      ***REMOVED***,

        FunctionDeclaration: function (stmt, flags) ***REMOVED***
            return [
                generateAsyncPrefix(stmt, true),
                'function',
                generateStarSuffix(stmt) || noEmptySpace(),
                stmt.id ? generateIdentifier(stmt.id) : '',
                this.generateFunctionBody(stmt)
            ];
      ***REMOVED***,

        ReturnStatement: function (stmt, flags) ***REMOVED***
            if (stmt.argument) ***REMOVED***
                return [join(
                    'return',
                    this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)
                ), this.semicolon(flags)];
          ***REMOVED***
            return ['return' + this.semicolon(flags)];
      ***REMOVED***,

        WhileStatement: function (stmt, flags) ***REMOVED***
            var result, that = this;
            withIndent(function () ***REMOVED***
                result = [
                    'while' + space + '(',
                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
                    ')'
                ];
          ***REMOVED***);
            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
      ***REMOVED***,

        WithStatement: function (stmt, flags) ***REMOVED***
            var result, that = this;
            withIndent(function () ***REMOVED***
                result = [
                    'with' + space + '(',
                    that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),
                    ')'
                ];
          ***REMOVED***);
            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
            return result;
      ***REMOVED***

  ***REMOVED***;

    merge(CodeGenerator.prototype, CodeGenerator.Statement);

    // Expressions.

    CodeGenerator.Expression = ***REMOVED***

        SequenceExpression: function (expr, precedence, flags) ***REMOVED***
            var result, i, iz;
            if (Precedence.Sequence < precedence) ***REMOVED***
                flags |= F_ALLOW_IN;
          ***REMOVED***
            result = [];
            for (i = 0, iz = expr.expressions.length; i < iz; ++i) ***REMOVED***
                result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));
                if (i + 1 < iz) ***REMOVED***
                    result.push(',' + space);
              ***REMOVED***
          ***REMOVED***
            return parenthesize(result, Precedence.Sequence, precedence);
      ***REMOVED***,

        AssignmentExpression: function (expr, precedence, flags) ***REMOVED***
            return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);
      ***REMOVED***,

        ArrowFunctionExpression: function (expr, precedence, flags) ***REMOVED***
            return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);
      ***REMOVED***,

        ConditionalExpression: function (expr, precedence, flags) ***REMOVED***
            if (Precedence.Conditional < precedence) ***REMOVED***
                flags |= F_ALLOW_IN;
          ***REMOVED***
            return parenthesize(
                [
                    this.generateExpression(expr.test, Precedence.LogicalOR, flags),
                    space + '?' + space,
                    this.generateExpression(expr.consequent, Precedence.Assignment, flags),
                    space + ':' + space,
                    this.generateExpression(expr.alternate, Precedence.Assignment, flags)
                ],
                Precedence.Conditional,
                precedence
            );
      ***REMOVED***,

        LogicalExpression: function (expr, precedence, flags) ***REMOVED***
            return this.BinaryExpression(expr, precedence, flags);
      ***REMOVED***,

        BinaryExpression: function (expr, precedence, flags) ***REMOVED***
            var result, leftPrecedence, rightPrecedence, currentPrecedence, fragment, leftSource;
            currentPrecedence = BinaryPrecedence[expr.operator];
            leftPrecedence = expr.operator === '**' ? Precedence.Postfix : currentPrecedence;
            rightPrecedence = expr.operator === '**' ? currentPrecedence : currentPrecedence + 1;

            if (currentPrecedence < precedence) ***REMOVED***
                flags |= F_ALLOW_IN;
          ***REMOVED***

            fragment = this.generateExpression(expr.left, leftPrecedence, flags);

            leftSource = fragment.toString();

            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPartES5(expr.operator.charCodeAt(0))) ***REMOVED***
                result = [fragment, noEmptySpace(), expr.operator];
          ***REMOVED*** else ***REMOVED***
                result = join(fragment, expr.operator);
          ***REMOVED***

            fragment = this.generateExpression(expr.right, rightPrecedence, flags);

            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||
            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') ***REMOVED***
                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
                result.push(noEmptySpace());
                result.push(fragment);
          ***REMOVED*** else ***REMOVED***
                result = join(result, fragment);
          ***REMOVED***

            if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) ***REMOVED***
                return ['(', result, ')'];
          ***REMOVED***
            return parenthesize(result, currentPrecedence, precedence);
      ***REMOVED***,

        CallExpression: function (expr, precedence, flags) ***REMOVED***
            var result, i, iz;
            // F_ALLOW_UNPARATH_NEW becomes false.
            result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];
            result.push('(');
            for (i = 0, iz = expr['arguments'].length; i < iz; ++i) ***REMOVED***
                result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                if (i + 1 < iz) ***REMOVED***
                    result.push(',' + space);
              ***REMOVED***
          ***REMOVED***
            result.push(')');

            if (!(flags & F_ALLOW_CALL)) ***REMOVED***
                return ['(', result, ')'];
          ***REMOVED***
            return parenthesize(result, Precedence.Call, precedence);
      ***REMOVED***,

        NewExpression: function (expr, precedence, flags) ***REMOVED***
            var result, length, i, iz, itemFlags;
            length = expr['arguments'].length;

            // F_ALLOW_CALL becomes false.
            // F_ALLOW_UNPARATH_NEW may become false.
            itemFlags = (flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0) ? E_TFT : E_TFF;

            result = join(
                'new',
                this.generateExpression(expr.callee, Precedence.New, itemFlags)
            );

            if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) ***REMOVED***
                result.push('(');
                for (i = 0, iz = length; i < iz; ++i) ***REMOVED***
                    result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
                    if (i + 1 < iz) ***REMOVED***
                        result.push(',' + space);
                  ***REMOVED***
              ***REMOVED***
                result.push(')');
          ***REMOVED***

            return parenthesize(result, Precedence.New, precedence);
      ***REMOVED***,

        MemberExpression: function (expr, precedence, flags) ***REMOVED***
            var result, fragment;

            // F_ALLOW_UNPARATH_NEW becomes false.
            result = [this.generateExpression(expr.object, Precedence.Call, (flags & F_ALLOW_CALL) ? E_TTF : E_TFF)];

            if (expr.computed) ***REMOVED***
                result.push('[');
                result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));
                result.push(']');
          ***REMOVED*** else ***REMOVED***
                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') ***REMOVED***
                    fragment = toSourceNodeWhenNeeded(result).toString();
                    // When the following conditions are all true,
                    //   1. No floating point
                    //   2. Don't have exponents
                    //   3. The last character is a decimal digit
                    //   4. Not hexadecimal OR octal number literal
                    // we should add a floating point.
                    if (
                            fragment.indexOf('.') < 0 &&
                            !/[eExX]/.test(fragment) &&
                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&
                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'
                            ) ***REMOVED***
                        result.push(' ');
                  ***REMOVED***
              ***REMOVED***
                result.push('.');
                result.push(generateIdentifier(expr.property));
          ***REMOVED***

            return parenthesize(result, Precedence.Member, precedence);
      ***REMOVED***,

        MetaProperty: function (expr, precedence, flags) ***REMOVED***
            var result;
            result = [];
            result.push(typeof expr.meta === "string" ? expr.meta : generateIdentifier(expr.meta));
            result.push('.');
            result.push(typeof expr.property === "string" ? expr.property : generateIdentifier(expr.property));
            return parenthesize(result, Precedence.Member, precedence);
      ***REMOVED***,

        UnaryExpression: function (expr, precedence, flags) ***REMOVED***
            var result, fragment, rightCharCode, leftSource, leftCharCode;
            fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);

            if (space === '') ***REMOVED***
                result = join(expr.operator, fragment);
          ***REMOVED*** else ***REMOVED***
                result = [expr.operator];
                if (expr.operator.length > 2) ***REMOVED***
                    // delete, void, typeof
                    // get `typeof []`, not `typeof[]`
                    result = join(result, fragment);
              ***REMOVED*** else ***REMOVED***
                    // Prevent inserting spaces between operator and argument if it is unnecessary
                    // like, `!cond`
                    leftSource = toSourceNodeWhenNeeded(result).toString();
                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
                    rightCharCode = fragment.toString().charCodeAt(0);

                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||
                            (esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode))) ***REMOVED***
                        result.push(noEmptySpace());
                        result.push(fragment);
                  ***REMOVED*** else ***REMOVED***
                        result.push(fragment);
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***
            return parenthesize(result, Precedence.Unary, precedence);
      ***REMOVED***,

        YieldExpression: function (expr, precedence, flags) ***REMOVED***
            var result;
            if (expr.delegate) ***REMOVED***
                result = 'yield*';
          ***REMOVED*** else ***REMOVED***
                result = 'yield';
          ***REMOVED***
            if (expr.argument) ***REMOVED***
                result = join(
                    result,
                    this.generateExpression(expr.argument, Precedence.Yield, E_TTT)
                );
          ***REMOVED***
            return parenthesize(result, Precedence.Yield, precedence);
      ***REMOVED***,

        AwaitExpression: function (expr, precedence, flags) ***REMOVED***
            var result = join(
                expr.all ? 'await*' : 'await',
                this.generateExpression(expr.argument, Precedence.Await, E_TTT)
            );
            return parenthesize(result, Precedence.Await, precedence);
      ***REMOVED***,

        UpdateExpression: function (expr, precedence, flags) ***REMOVED***
            if (expr.prefix) ***REMOVED***
                return parenthesize(
                    [
                        expr.operator,
                        this.generateExpression(expr.argument, Precedence.Unary, E_TTT)
                    ],
                    Precedence.Unary,
                    precedence
                );
          ***REMOVED***
            return parenthesize(
                [
                    this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),
                    expr.operator
                ],
                Precedence.Postfix,
                precedence
            );
      ***REMOVED***,

        FunctionExpression: function (expr, precedence, flags) ***REMOVED***
            var result = [
                generateAsyncPrefix(expr, true),
                'function'
            ];
            if (expr.id) ***REMOVED***
                result.push(generateStarSuffix(expr) || noEmptySpace());
                result.push(generateIdentifier(expr.id));
          ***REMOVED*** else ***REMOVED***
                result.push(generateStarSuffix(expr) || space);
          ***REMOVED***
            result.push(this.generateFunctionBody(expr));
            return result;
      ***REMOVED***,

        ArrayPattern: function (expr, precedence, flags) ***REMOVED***
            return this.ArrayExpression(expr, precedence, flags, true);
      ***REMOVED***,

        ArrayExpression: function (expr, precedence, flags, isPattern) ***REMOVED***
            var result, multiline, that = this;
            if (!expr.elements.length) ***REMOVED***
                return '[]';
          ***REMOVED***
            multiline = isPattern ? false : expr.elements.length > 1;
            result = ['[', multiline ? newline : ''];
            withIndent(function (indent) ***REMOVED***
                var i, iz;
                for (i = 0, iz = expr.elements.length; i < iz; ++i) ***REMOVED***
                    if (!expr.elements[i]) ***REMOVED***
                        if (multiline) ***REMOVED***
                            result.push(indent);
                      ***REMOVED***
                        if (i + 1 === iz) ***REMOVED***
                            result.push(',');
                      ***REMOVED***
                  ***REMOVED*** else ***REMOVED***
                        result.push(multiline ? indent : '');
                        result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));
                  ***REMOVED***
                    if (i + 1 < iz) ***REMOVED***
                        result.push(',' + (multiline ? newline : space));
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***);
            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) ***REMOVED***
                result.push(newline);
          ***REMOVED***
            result.push(multiline ? base : '');
            result.push(']');
            return result;
      ***REMOVED***,

        RestElement: function(expr, precedence, flags) ***REMOVED***
            return '...' + this.generatePattern(expr.argument);
      ***REMOVED***,

        ClassExpression: function (expr, precedence, flags) ***REMOVED***
            var result, fragment;
            result = ['class'];
            if (expr.id) ***REMOVED***
                result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));
          ***REMOVED***
            if (expr.superClass) ***REMOVED***
                fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Unary, E_TTT));
                result = join(result, fragment);
          ***REMOVED***
            result.push(space);
            result.push(this.generateStatement(expr.body, S_TFFT));
            return result;
      ***REMOVED***,

        MethodDefinition: function (expr, precedence, flags) ***REMOVED***
            var result, fragment;
            if (expr['static']) ***REMOVED***
                result = ['static' + space];
          ***REMOVED*** else ***REMOVED***
                result = [];
          ***REMOVED***
            if (expr.kind === 'get' || expr.kind === 'set') ***REMOVED***
                fragment = [
                    join(expr.kind, this.generatePropertyKey(expr.key, expr.computed)),
                    this.generateFunctionBody(expr.value)
                ];
          ***REMOVED*** else ***REMOVED***
                fragment = [
                    generateMethodPrefix(expr),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
          ***REMOVED***
            return join(result, fragment);
      ***REMOVED***,

        Property: function (expr, precedence, flags) ***REMOVED***
            if (expr.kind === 'get' || expr.kind === 'set') ***REMOVED***
                return [
                    expr.kind, noEmptySpace(),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
          ***REMOVED***

            if (expr.shorthand) ***REMOVED***
                if (expr.value.type === "AssignmentPattern") ***REMOVED***
                    return this.AssignmentPattern(expr.value, Precedence.Sequence, E_TTT);
              ***REMOVED***
                return this.generatePropertyKey(expr.key, expr.computed);
          ***REMOVED***

            if (expr.method) ***REMOVED***
                return [
                    generateMethodPrefix(expr),
                    this.generatePropertyKey(expr.key, expr.computed),
                    this.generateFunctionBody(expr.value)
                ];
          ***REMOVED***

            return [
                this.generatePropertyKey(expr.key, expr.computed),
                ':' + space,
                this.generateExpression(expr.value, Precedence.Assignment, E_TTT)
            ];
      ***REMOVED***,

        ObjectExpression: function (expr, precedence, flags) ***REMOVED***
            var multiline, result, fragment, that = this;

            if (!expr.properties.length) ***REMOVED***
                return '***REMOVED***}';
          ***REMOVED***
            multiline = expr.properties.length > 1;

            withIndent(function () ***REMOVED***
                fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);
          ***REMOVED***);

            if (!multiline) ***REMOVED***
                // issues 4
                // Do not transform from
                //   dejavu.Class.declare(***REMOVED***
                //       method2: function () ***REMOVED***}
                // ***REMOVED***);
                // to
                //   dejavu.Class.declare(***REMOVED***method2: function () ***REMOVED***
                //     ***REMOVED***});
                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) ***REMOVED***
                    return [ '***REMOVED***', space, fragment, space, '}' ];
              ***REMOVED***
          ***REMOVED***

            withIndent(function (indent) ***REMOVED***
                var i, iz;
                result = [ '***REMOVED***', newline, indent, fragment ];

                if (multiline) ***REMOVED***
                    result.push(',' + newline);
                    for (i = 1, iz = expr.properties.length; i < iz; ++i) ***REMOVED***
                        result.push(indent);
                        result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                        if (i + 1 < iz) ***REMOVED***
                            result.push(',' + newline);
                      ***REMOVED***
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***);

            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) ***REMOVED***
                result.push(newline);
          ***REMOVED***
            result.push(base);
            result.push('}');
            return result;
      ***REMOVED***,

        AssignmentPattern: function(expr, precedence, flags) ***REMOVED***
            return this.generateAssignment(expr.left, expr.right, '=', precedence, flags);
      ***REMOVED***,

        ObjectPattern: function (expr, precedence, flags) ***REMOVED***
            var result, i, iz, multiline, property, that = this;
            if (!expr.properties.length) ***REMOVED***
                return '***REMOVED***}';
          ***REMOVED***

            multiline = false;
            if (expr.properties.length === 1) ***REMOVED***
                property = expr.properties[0];
                if (
                    property.type === Syntax.Property
                    && property.value.type !== Syntax.Identifier
                ) ***REMOVED***
                    multiline = true;
              ***REMOVED***
          ***REMOVED*** else ***REMOVED***
                for (i = 0, iz = expr.properties.length; i < iz; ++i) ***REMOVED***
                    property = expr.properties[i];
                    if (
                        property.type === Syntax.Property
                        && !property.shorthand
                    ) ***REMOVED***
                        multiline = true;
                        break;
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***
            result = ['***REMOVED***', multiline ? newline : '' ];

            withIndent(function (indent) ***REMOVED***
                var i, iz;
                for (i = 0, iz = expr.properties.length; i < iz; ++i) ***REMOVED***
                    result.push(multiline ? indent : '');
                    result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
                    if (i + 1 < iz) ***REMOVED***
                        result.push(',' + (multiline ? newline : space));
                  ***REMOVED***
              ***REMOVED***
          ***REMOVED***);

            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) ***REMOVED***
                result.push(newline);
          ***REMOVED***
            result.push(multiline ? base : '');
            result.push('}');
            return result;
      ***REMOVED***,

        ThisExpression: function (expr, precedence, flags) ***REMOVED***
            return 'this';
      ***REMOVED***,

        Super: function (expr, precedence, flags) ***REMOVED***
            return 'super';
      ***REMOVED***,

        Identifier: function (expr, precedence, flags) ***REMOVED***
            return generateIdentifier(expr);
      ***REMOVED***,

        ImportDefaultSpecifier: function (expr, precedence, flags) ***REMOVED***
            return generateIdentifier(expr.id || expr.local);
      ***REMOVED***,

        ImportNamespaceSpecifier: function (expr, precedence, flags) ***REMOVED***
            var result = ['*'];
            var id = expr.id || expr.local;
            if (id) ***REMOVED***
                result.push(space + 'as' + noEmptySpace() + generateIdentifier(id));
          ***REMOVED***
            return result;
      ***REMOVED***,

        ImportSpecifier: function (expr, precedence, flags) ***REMOVED***
            var imported = expr.imported;
            var result = [ imported.name ];
            var local = expr.local;
            if (local && local.name !== imported.name) ***REMOVED***
                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(local));
          ***REMOVED***
            return result;
      ***REMOVED***,

        ExportSpecifier: function (expr, precedence, flags) ***REMOVED***
            var local = expr.local;
            var result = [ local.name ];
            var exported = expr.exported;
            if (exported && exported.name !== local.name) ***REMOVED***
                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(exported));
          ***REMOVED***
            return result;
      ***REMOVED***,

        Literal: function (expr, precedence, flags) ***REMOVED***
            var raw;
            if (expr.hasOwnProperty('raw') && parse && extra.raw) ***REMOVED***
                try ***REMOVED***
                    raw = parse(expr.raw).body[0].expression;
                    if (raw.type === Syntax.Literal) ***REMOVED***
                        if (raw.value === expr.value) ***REMOVED***
                            return expr.raw;
                      ***REMOVED***
                  ***REMOVED***
              ***REMOVED*** catch (e) ***REMOVED***
                    // not use raw property
              ***REMOVED***
          ***REMOVED***

            if (expr.regex) ***REMOVED***
              return '/' + expr.regex.pattern + '/' + expr.regex.flags;
          ***REMOVED***

            if (expr.value === null) ***REMOVED***
                return 'null';
          ***REMOVED***

            if (typeof expr.value === 'string') ***REMOVED***
                return escapeString(expr.value);
          ***REMOVED***

            if (typeof expr.value === 'number') ***REMOVED***
                return generateNumber(expr.value);
          ***REMOVED***

            if (typeof expr.value === 'boolean') ***REMOVED***
                return expr.value ? 'true' : 'false';
          ***REMOVED***

            return generateRegExp(expr.value);
      ***REMOVED***,

        GeneratorExpression: function (expr, precedence, flags) ***REMOVED***
            return this.ComprehensionExpression(expr, precedence, flags);
      ***REMOVED***,

        ComprehensionExpression: function (expr, precedence, flags) ***REMOVED***
            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6

            var result, i, iz, fragment, that = this;
            result = (expr.type === Syntax.GeneratorExpression) ? ['('] : ['['];

            if (extra.moz.comprehensionExpressionStartsWithAssignment) ***REMOVED***
                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
                result.push(fragment);
          ***REMOVED***

            if (expr.blocks) ***REMOVED***
                withIndent(function () ***REMOVED***
                    for (i = 0, iz = expr.blocks.length; i < iz; ++i) ***REMOVED***
                        fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);
                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) ***REMOVED***
                            result = join(result, fragment);
                      ***REMOVED*** else ***REMOVED***
                            result.push(fragment);
                      ***REMOVED***
                  ***REMOVED***
              ***REMOVED***);
          ***REMOVED***

            if (expr.filter) ***REMOVED***
                result = join(result, 'if' + space);
                fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);
                result = join(result, [ '(', fragment, ')' ]);
          ***REMOVED***

            if (!extra.moz.comprehensionExpressionStartsWithAssignment) ***REMOVED***
                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);

                result = join(result, fragment);
          ***REMOVED***

            result.push((expr.type === Syntax.GeneratorExpression) ? ')' : ']');
            return result;
      ***REMOVED***,

        ComprehensionBlock: function (expr, precedence, flags) ***REMOVED***
            var fragment;
            if (expr.left.type === Syntax.VariableDeclaration) ***REMOVED***
                fragment = [
                    expr.left.kind, noEmptySpace(),
                    this.generateStatement(expr.left.declarations[0], S_FFFF)
                ];
          ***REMOVED*** else ***REMOVED***
                fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);
          ***REMOVED***

            fragment = join(fragment, expr.of ? 'of' : 'in');
            fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));

            return [ 'for' + space + '(', fragment, ')' ];
      ***REMOVED***,

        SpreadElement: function (expr, precedence, flags) ***REMOVED***
            return [
                '...',
                this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)
            ];
      ***REMOVED***,

        TaggedTemplateExpression: function (expr, precedence, flags) ***REMOVED***
            var itemFlags = E_TTF;
            if (!(flags & F_ALLOW_CALL)) ***REMOVED***
                itemFlags = E_TFF;
          ***REMOVED***
            var result = [
                this.generateExpression(expr.tag, Precedence.Call, itemFlags),
                this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)
            ];
            return parenthesize(result, Precedence.TaggedTemplate, precedence);
      ***REMOVED***,

        TemplateElement: function (expr, precedence, flags) ***REMOVED***
            // Don't use "cooked". Since tagged template can use raw template
            // representation. So if we do so, it breaks the script semantics.
            return expr.value.raw;
      ***REMOVED***,

        TemplateLiteral: function (expr, precedence, flags) ***REMOVED***
            var result, i, iz;
            result = [ '`' ];
            for (i = 0, iz = expr.quasis.length; i < iz; ++i) ***REMOVED***
                result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));
                if (i + 1 < iz) ***REMOVED***
                    result.push('$***REMOVED***' + space);
                    result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));
                    result.push(space + '}');
              ***REMOVED***
          ***REMOVED***
            result.push('`');
            return result;
      ***REMOVED***,

        ModuleSpecifier: function (expr, precedence, flags) ***REMOVED***
            return this.Literal(expr, precedence, flags);
      ***REMOVED***,

        ImportExpression: function(expr, precedence, flag) ***REMOVED***
            return parenthesize([
                'import(',
                this.generateExpression(expr.source, Precedence.Assignment, E_TTT),
                ')'
            ], Precedence.Call, precedence);
      ***REMOVED***,

  ***REMOVED***;

    merge(CodeGenerator.prototype, CodeGenerator.Expression);

    CodeGenerator.prototype.generateExpression = function (expr, precedence, flags) ***REMOVED***
        var result, type;

        type = expr.type || Syntax.Property;

        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) ***REMOVED***
            return generateVerbatim(expr, precedence);
      ***REMOVED***

        result = this[type](expr, precedence, flags);


        if (extra.comment) ***REMOVED***
            result = addComments(expr, result);
      ***REMOVED***
        return toSourceNodeWhenNeeded(result, expr);
  ***REMOVED***;

    CodeGenerator.prototype.generateStatement = function (stmt, flags) ***REMOVED***
        var result,
            fragment;

        result = this[stmt.type](stmt, flags);

        // Attach comments

        if (extra.comment) ***REMOVED***
            result = addComments(stmt, result);
      ***REMOVED***

        fragment = toSourceNodeWhenNeeded(result).toString();
        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\n') ***REMOVED***
            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\s+$/, '') : fragment.replace(/\s+$/, '');
      ***REMOVED***

        return toSourceNodeWhenNeeded(result, stmt);
  ***REMOVED***;

    function generateInternal(node) ***REMOVED***
        var codegen;

        codegen = new CodeGenerator();
        if (isStatement(node)) ***REMOVED***
            return codegen.generateStatement(node, S_TFFF);
      ***REMOVED***

        if (isExpression(node)) ***REMOVED***
            return codegen.generateExpression(node, Precedence.Sequence, E_TTT);
      ***REMOVED***

        throw new Error('Unknown node type: ' + node.type);
  ***REMOVED***

    function generate(node, options) ***REMOVED***
        var defaultOptions = getDefaultOptions(), result, pair;

        if (options != null) ***REMOVED***
            // Obsolete options
            //
            //   `options.indent`
            //   `options.base`
            //
            // Instead of them, we can use `option.format.indent`.
            if (typeof options.indent === 'string') ***REMOVED***
                defaultOptions.format.indent.style = options.indent;
          ***REMOVED***
            if (typeof options.base === 'number') ***REMOVED***
                defaultOptions.format.indent.base = options.base;
          ***REMOVED***
            options = updateDeeply(defaultOptions, options);
            indent = options.format.indent.style;
            if (typeof options.base === 'string') ***REMOVED***
                base = options.base;
          ***REMOVED*** else ***REMOVED***
                base = stringRepeat(indent, options.format.indent.base);
          ***REMOVED***
      ***REMOVED*** else ***REMOVED***
            options = defaultOptions;
            indent = options.format.indent.style;
            base = stringRepeat(indent, options.format.indent.base);
      ***REMOVED***
        json = options.format.json;
        renumber = options.format.renumber;
        hexadecimal = json ? false : options.format.hexadecimal;
        quotes = json ? 'double' : options.format.quotes;
        escapeless = options.format.escapeless;
        newline = options.format.newline;
        space = options.format.space;
        if (options.format.compact) ***REMOVED***
            newline = space = indent = base = '';
      ***REMOVED***
        parentheses = options.format.parentheses;
        semicolons = options.format.semicolons;
        safeConcatenation = options.format.safeConcatenation;
        directive = options.directive;
        parse = json ? null : options.parse;
        sourceMap = options.sourceMap;
        sourceCode = options.sourceCode;
        preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;
        extra = options;

        if (sourceMap) ***REMOVED***
            if (!exports.browser) ***REMOVED***
                // We assume environment is node.js
                // And prevent from including source-map by browserify
                SourceNode = require('source-map').SourceNode;
          ***REMOVED*** else ***REMOVED***
                SourceNode = global.sourceMap.SourceNode;
          ***REMOVED***
      ***REMOVED***

        result = generateInternal(node);

        if (!sourceMap) ***REMOVED***
            pair = ***REMOVED***code: result.toString(), map: null};
            return options.sourceMapWithCode ? pair : pair.code;
      ***REMOVED***


        pair = result.toStringWithSourceMap(***REMOVED***
            file: options.file,
            sourceRoot: options.sourceMapRoot
      ***REMOVED***);

        if (options.sourceContent) ***REMOVED***
            pair.map.setSourceContent(options.sourceMap,
                                      options.sourceContent);
      ***REMOVED***

        if (options.sourceMapWithCode) ***REMOVED***
            return pair;
      ***REMOVED***

        return pair.map.toString();
  ***REMOVED***

    FORMAT_MINIFY = ***REMOVED***
        indent: ***REMOVED***
            style: '',
            base: 0
      ***REMOVED***,
        renumber: true,
        hexadecimal: true,
        quotes: 'auto',
        escapeless: true,
        compact: true,
        parentheses: false,
        semicolons: false
  ***REMOVED***;

    FORMAT_DEFAULTS = getDefaultOptions().format;

    exports.version = require('./package.json').version;
    exports.generate = generate;
    exports.attachComments = estraverse.attachComments;
    exports.Precedence = updateDeeply(***REMOVED***}, Precedence);
    exports.browser = false;
    exports.FORMAT_MINIFY = FORMAT_MINIFY;
    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;
}());
/* vim: set sw=4 ts=4 et tw=80 : */
