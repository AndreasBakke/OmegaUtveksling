// Packages
var retrier = require('retry');

function retry(fn, opts) ***REMOVED***
  function run(resolve, reject) ***REMOVED***
    var options = opts || ***REMOVED***};
    var op;

    // Default `randomize` to true
    if (!('randomize' in options)) ***REMOVED***
      options.randomize = true;
  ***REMOVED***

    op = retrier.operation(options);

    // We allow the user to abort retrying
    // this makes sense in the cases where
    // knowledge is obtained that retrying
    // would be futile (e.g.: auth errors)

    function bail(err) ***REMOVED***
      reject(err || new Error('Aborted'));
  ***REMOVED***

    function onError(err, num) ***REMOVED***
      if (err.bail) ***REMOVED***
        bail(err);
        return;
    ***REMOVED***

      if (!op.retry(err)) ***REMOVED***
        reject(op.mainError());
    ***REMOVED*** else if (options.onRetry) ***REMOVED***
        options.onRetry(err, num);
    ***REMOVED***
  ***REMOVED***

    function runAttempt(num) ***REMOVED***
      var val;

      try ***REMOVED***
        val = fn(bail, num);
    ***REMOVED*** catch (err) ***REMOVED***
        onError(err, num);
        return;
    ***REMOVED***

      Promise.resolve(val)
        .then(resolve)
        .catch(function catchIt(err) ***REMOVED***
          onError(err, num);
      ***REMOVED***);
  ***REMOVED***

    op.attempt(runAttempt);
***REMOVED***

  return new Promise(run);
}

module.exports = retry;
