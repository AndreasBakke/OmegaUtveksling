/**
 * marked v4.2.12 - a markdown parser
 * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/markedjs/marked
 */

/**
 * DO NOT EDIT THIS FILE
 * The code in this file is generated from files in ./src/
 */

'use strict';

function _defineProperties(target, props) ***REMOVED***
  for (var i = 0; i < props.length; i++) ***REMOVED***
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
***REMOVED***
}
function _createClass(Constructor, protoProps, staticProps) ***REMOVED***
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", ***REMOVED***
    writable: false
***REMOVED***);
  return Constructor;
}
function _unsupportedIterableToArray(o, minLen) ***REMOVED***
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) ***REMOVED***
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _createForOfIteratorHelperLoose(o, allowArrayLike) ***REMOVED***
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);
  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") ***REMOVED***
    if (it) o = it;
    var i = 0;
    return function () ***REMOVED***
      if (i >= o.length) return ***REMOVED***
        done: true
    ***REMOVED***;
      return ***REMOVED***
        done: false,
        value: o[i++]
    ***REMOVED***;
  ***REMOVED***;
***REMOVED***
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) ***REMOVED***
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) ***REMOVED***
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
***REMOVED***
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) ***REMOVED***
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}

function getDefaults() ***REMOVED***
  return ***REMOVED***
    async: false,
    baseUrl: null,
    breaks: false,
    extensions: null,
    gfm: true,
    headerIds: true,
    headerPrefix: '',
    highlight: null,
    langPrefix: 'language-',
    mangle: true,
    pedantic: false,
    renderer: null,
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartypants: false,
    tokenizer: null,
    walkTokens: null,
    xhtml: false
***REMOVED***;
}
exports.defaults = getDefaults();
function changeDefaults(newDefaults) ***REMOVED***
  exports.defaults = newDefaults;
}

/**
 * Helpers
 */
var escapeTest = /[&<>"']/;
var escapeReplace = new RegExp(escapeTest.source, 'g');
var escapeTestNoEncode = /[<>"']|&(?!(#\d***REMOVED***1,7}|#[Xx][a-fA-F0-9]***REMOVED***1,6}|\w+);)/;
var escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');
var escapeReplacements = ***REMOVED***
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};
var getEscapeReplacement = function getEscapeReplacement(ch) ***REMOVED***
  return escapeReplacements[ch];
};
function escape(html, encode) ***REMOVED***
  if (encode) ***REMOVED***
    if (escapeTest.test(html)) ***REMOVED***
      return html.replace(escapeReplace, getEscapeReplacement);
  ***REMOVED***
***REMOVED*** else ***REMOVED***
    if (escapeTestNoEncode.test(html)) ***REMOVED***
      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
  ***REMOVED***
***REMOVED***
  return html;
}
var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;

/**
 * @param ***REMOVED***string} html
 */
function unescape(html) ***REMOVED***
  // explicitly match decimal, hex, and named HTML entities
  return html.replace(unescapeTest, function (_, n) ***REMOVED***
    n = n.toLowerCase();
    if (n === 'colon') return ':';
    if (n.charAt(0) === '#') ***REMOVED***
      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
  ***REMOVED***
    return '';
***REMOVED***);
}
var caret = /(^|[^\[])\^/g;

/**
 * @param ***REMOVED***string | RegExp} regex
 * @param ***REMOVED***string} opt
 */
function edit(regex, opt) ***REMOVED***
  regex = typeof regex === 'string' ? regex : regex.source;
  opt = opt || '';
  var obj = ***REMOVED***
    replace: function replace(name, val) ***REMOVED***
      val = val.source || val;
      val = val.replace(caret, '$1');
      regex = regex.replace(name, val);
      return obj;
  ***REMOVED***,
    getRegex: function getRegex() ***REMOVED***
      return new RegExp(regex, opt);
  ***REMOVED***
***REMOVED***;
  return obj;
}
var nonWordAndColonTest = /[^\w:]/g;
var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;

/**
 * @param ***REMOVED***boolean} sanitize
 * @param ***REMOVED***string} base
 * @param ***REMOVED***string} href
 */
function cleanUrl(sanitize, base, href) ***REMOVED***
  if (sanitize) ***REMOVED***
    var prot;
    try ***REMOVED***
      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();
  ***REMOVED*** catch (e) ***REMOVED***
      return null;
  ***REMOVED***
    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) ***REMOVED***
      return null;
  ***REMOVED***
***REMOVED***
  if (base && !originIndependentUrl.test(href)) ***REMOVED***
    href = resolveUrl(base, href);
***REMOVED***
  try ***REMOVED***
    href = encodeURI(href).replace(/%25/g, '%');
***REMOVED*** catch (e) ***REMOVED***
    return null;
***REMOVED***
  return href;
}
var baseUrls = ***REMOVED***};
var justDomain = /^[^:]+:\/*[^/]*$/;
var protocol = /^([^:]+:)[\s\S]*$/;
var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;

/**
 * @param ***REMOVED***string} base
 * @param ***REMOVED***string} href
 */
function resolveUrl(base, href) ***REMOVED***
  if (!baseUrls[' ' + base]) ***REMOVED***
    // we can ignore everything in base after the last slash of its path component,
    // but we might need to add _that_
    // https://tools.ietf.org/html/rfc3986#section-3
    if (justDomain.test(base)) ***REMOVED***
      baseUrls[' ' + base] = base + '/';
  ***REMOVED*** else ***REMOVED***
      baseUrls[' ' + base] = rtrim(base, '/', true);
  ***REMOVED***
***REMOVED***
  base = baseUrls[' ' + base];
  var relativeBase = base.indexOf(':') === -1;
  if (href.substring(0, 2) === '//') ***REMOVED***
    if (relativeBase) ***REMOVED***
      return href;
  ***REMOVED***
    return base.replace(protocol, '$1') + href;
***REMOVED*** else if (href.charAt(0) === '/') ***REMOVED***
    if (relativeBase) ***REMOVED***
      return href;
  ***REMOVED***
    return base.replace(domain, '$1') + href;
***REMOVED*** else ***REMOVED***
    return base + href;
***REMOVED***
}
var noopTest = ***REMOVED***
  exec: function noopTest() ***REMOVED***}
};
function merge(obj) ***REMOVED***
  var i = 1,
    target,
    key;
  for (; i < arguments.length; i++) ***REMOVED***
    target = arguments[i];
    for (key in target) ***REMOVED***
      if (Object.prototype.hasOwnProperty.call(target, key)) ***REMOVED***
        obj[key] = target[key];
    ***REMOVED***
  ***REMOVED***
***REMOVED***
  return obj;
}
function splitCells(tableRow, count) ***REMOVED***
  // ensure that every cell-delimiting pipe has a space
  // before it to distinguish it from an escaped pipe
  var row = tableRow.replace(/\|/g, function (match, offset, str) ***REMOVED***
      var escaped = false,
        curr = offset;
      while (--curr >= 0 && str[curr] === '\\') ***REMOVED***
        escaped = !escaped;
    ***REMOVED***
      if (escaped) ***REMOVED***
        // odd number of slashes means | is escaped
        // so we leave it alone
        return '|';
    ***REMOVED*** else ***REMOVED***
        // add space before unescaped |
        return ' |';
    ***REMOVED***
  ***REMOVED***),
    cells = row.split(/ \|/);
  var i = 0;

  // First/last cell in a row cannot be empty if it has no leading/trailing pipe
  if (!cells[0].trim()) ***REMOVED***
    cells.shift();
***REMOVED***
  if (cells.length > 0 && !cells[cells.length - 1].trim()) ***REMOVED***
    cells.pop();
***REMOVED***
  if (cells.length > count) ***REMOVED***
    cells.splice(count);
***REMOVED*** else ***REMOVED***
    while (cells.length < count) ***REMOVED***
      cells.push('');
  ***REMOVED***
***REMOVED***
  for (; i < cells.length; i++) ***REMOVED***
    // leading or trailing whitespace is ignored per the gfm spec
    cells[i] = cells[i].trim().replace(/\\\|/g, '|');
***REMOVED***
  return cells;
}

/**
 * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
 * /c*$/ is vulnerable to REDOS.
 *
 * @param ***REMOVED***string} str
 * @param ***REMOVED***string} c
 * @param ***REMOVED***boolean} invert Remove suffix of non-c chars instead. Default falsey.
 */
function rtrim(str, c, invert) ***REMOVED***
  var l = str.length;
  if (l === 0) ***REMOVED***
    return '';
***REMOVED***

  // Length of suffix matching the invert condition.
  var suffLen = 0;

  // Step left until we fail to match the invert condition.
  while (suffLen < l) ***REMOVED***
    var currChar = str.charAt(l - suffLen - 1);
    if (currChar === c && !invert) ***REMOVED***
      suffLen++;
  ***REMOVED*** else if (currChar !== c && invert) ***REMOVED***
      suffLen++;
  ***REMOVED*** else ***REMOVED***
      break;
  ***REMOVED***
***REMOVED***
  return str.slice(0, l - suffLen);
}
function findClosingBracket(str, b) ***REMOVED***
  if (str.indexOf(b[1]) === -1) ***REMOVED***
    return -1;
***REMOVED***
  var l = str.length;
  var level = 0,
    i = 0;
  for (; i < l; i++) ***REMOVED***
    if (str[i] === '\\') ***REMOVED***
      i++;
  ***REMOVED*** else if (str[i] === b[0]) ***REMOVED***
      level++;
  ***REMOVED*** else if (str[i] === b[1]) ***REMOVED***
      level--;
      if (level < 0) ***REMOVED***
        return i;
    ***REMOVED***
  ***REMOVED***
***REMOVED***
  return -1;
}
function checkSanitizeDeprecation(opt) ***REMOVED***
  if (opt && opt.sanitize && !opt.silent) ***REMOVED***
    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
***REMOVED***
}

// copied from https://stackoverflow.com/a/5450113/806777
/**
 * @param ***REMOVED***string} pattern
 * @param ***REMOVED***number} count
 */
function repeatString(pattern, count) ***REMOVED***
  if (count < 1) ***REMOVED***
    return '';
***REMOVED***
  var result = '';
  while (count > 1) ***REMOVED***
    if (count & 1) ***REMOVED***
      result += pattern;
  ***REMOVED***
    count >>= 1;
    pattern += pattern;
***REMOVED***
  return result + pattern;
}

function outputLink(cap, link, raw, lexer) ***REMOVED***
  var href = link.href;
  var title = link.title ? escape(link.title) : null;
  var text = cap[1].replace(/\\([\[\]])/g, '$1');
  if (cap[0].charAt(0) !== '!') ***REMOVED***
    lexer.state.inLink = true;
    var token = ***REMOVED***
      type: 'link',
      raw: raw,
      href: href,
      title: title,
      text: text,
      tokens: lexer.inlineTokens(text)
  ***REMOVED***;
    lexer.state.inLink = false;
    return token;
***REMOVED***
  return ***REMOVED***
    type: 'image',
    raw: raw,
    href: href,
    title: title,
    text: escape(text)
***REMOVED***;
}
function indentCodeCompensation(raw, text) ***REMOVED***
  var matchIndentToCode = raw.match(/^(\s+)(?:```)/);
  if (matchIndentToCode === null) ***REMOVED***
    return text;
***REMOVED***
  var indentToCode = matchIndentToCode[1];
  return text.split('\n').map(function (node) ***REMOVED***
    var matchIndentInNode = node.match(/^\s+/);
    if (matchIndentInNode === null) ***REMOVED***
      return node;
  ***REMOVED***
    var indentInNode = matchIndentInNode[0];
    if (indentInNode.length >= indentToCode.length) ***REMOVED***
      return node.slice(indentToCode.length);
  ***REMOVED***
    return node;
***REMOVED***).join('\n');
}

/**
 * Tokenizer
 */
var Tokenizer = /*#__PURE__*/function () ***REMOVED***
  function Tokenizer(options) ***REMOVED***
    this.options = options || exports.defaults;
***REMOVED***
  var _proto = Tokenizer.prototype;
  _proto.space = function space(src) ***REMOVED***
    var cap = this.rules.block.newline.exec(src);
    if (cap && cap[0].length > 0) ***REMOVED***
      return ***REMOVED***
        type: 'space',
        raw: cap[0]
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.code = function code(src) ***REMOVED***
    var cap = this.rules.block.code.exec(src);
    if (cap) ***REMOVED***
      var text = cap[0].replace(/^ ***REMOVED***1,4}/gm, '');
      return ***REMOVED***
        type: 'code',
        raw: cap[0],
        codeBlockStyle: 'indented',
        text: !this.options.pedantic ? rtrim(text, '\n') : text
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.fences = function fences(src) ***REMOVED***
    var cap = this.rules.block.fences.exec(src);
    if (cap) ***REMOVED***
      var raw = cap[0];
      var text = indentCodeCompensation(raw, cap[3] || '');
      return ***REMOVED***
        type: 'code',
        raw: raw,
        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],
        text: text
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.heading = function heading(src) ***REMOVED***
    var cap = this.rules.block.heading.exec(src);
    if (cap) ***REMOVED***
      var text = cap[2].trim();

      // remove trailing #s
      if (/#$/.test(text)) ***REMOVED***
        var trimmed = rtrim(text, '#');
        if (this.options.pedantic) ***REMOVED***
          text = trimmed.trim();
      ***REMOVED*** else if (!trimmed || / $/.test(trimmed)) ***REMOVED***
          // CommonMark requires space before trailing #s
          text = trimmed.trim();
      ***REMOVED***
    ***REMOVED***
      return ***REMOVED***
        type: 'heading',
        raw: cap[0],
        depth: cap[1].length,
        text: text,
        tokens: this.lexer.inline(text)
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.hr = function hr(src) ***REMOVED***
    var cap = this.rules.block.hr.exec(src);
    if (cap) ***REMOVED***
      return ***REMOVED***
        type: 'hr',
        raw: cap[0]
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.blockquote = function blockquote(src) ***REMOVED***
    var cap = this.rules.block.blockquote.exec(src);
    if (cap) ***REMOVED***
      var text = cap[0].replace(/^ *>[ \t]?/gm, '');
      var top = this.lexer.state.top;
      this.lexer.state.top = true;
      var tokens = this.lexer.blockTokens(text);
      this.lexer.state.top = top;
      return ***REMOVED***
        type: 'blockquote',
        raw: cap[0],
        tokens: tokens,
        text: text
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.list = function list(src) ***REMOVED***
    var cap = this.rules.block.list.exec(src);
    if (cap) ***REMOVED***
      var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;
      var bull = cap[1].trim();
      var isordered = bull.length > 1;
      var list = ***REMOVED***
        type: 'list',
        raw: '',
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : '',
        loose: false,
        items: []
    ***REMOVED***;
      bull = isordered ? "\\d***REMOVED***1,9}\\" + bull.slice(-1) : "\\" + bull;
      if (this.options.pedantic) ***REMOVED***
        bull = isordered ? bull : '[*+-]';
    ***REMOVED***

      // Get next list item
      var itemRegex = new RegExp("^( ***REMOVED***0,3}" + bull + ")((?:[\t ][^\\n]*)?(?:\\n|$))");

      // Check if current bullet point can start a new List Item
      while (src) ***REMOVED***
        endEarly = false;
        if (!(cap = itemRegex.exec(src))) ***REMOVED***
          break;
      ***REMOVED***
        if (this.rules.block.hr.test(src)) ***REMOVED***
          // End list if bullet was actually HR (possibly move into itemRegex?)
          break;
      ***REMOVED***
        raw = cap[0];
        src = src.substring(raw.length);
        line = cap[2].split('\n', 1)[0].replace(/^\t+/, function (t) ***REMOVED***
          return ' '.repeat(3 * t.length);
      ***REMOVED***);
        nextLine = src.split('\n', 1)[0];
        if (this.options.pedantic) ***REMOVED***
          indent = 2;
          itemContents = line.trimLeft();
      ***REMOVED*** else ***REMOVED***
          indent = cap[2].search(/[^ ]/); // Find first non-space char
          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent
          itemContents = line.slice(indent);
          indent += cap[1].length;
      ***REMOVED***
        blankLine = false;
        if (!line && /^ *$/.test(nextLine)) ***REMOVED***
          // Items begin with at most one blank line
          raw += nextLine + '\n';
          src = src.substring(nextLine.length + 1);
          endEarly = true;
      ***REMOVED***
        if (!endEarly) ***REMOVED***
          var nextBulletRegex = new RegExp("^ ***REMOVED***0," + Math.min(3, indent - 1) + "}(?:[*+-]|\\d***REMOVED***1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))");
          var hrRegex = new RegExp("^ ***REMOVED***0," + Math.min(3, indent - 1) + "}((?:- *)***REMOVED***3,}|(?:_ *)***REMOVED***3,}|(?:\\* *)***REMOVED***3,})(?:\\n+|$)");
          var fencesBeginRegex = new RegExp("^ ***REMOVED***0," + Math.min(3, indent - 1) + "}(?:```|~~~)");
          var headingBeginRegex = new RegExp("^ ***REMOVED***0," + Math.min(3, indent - 1) + "}#");

          // Check if following lines should be included in List Item
          while (src) ***REMOVED***
            rawLine = src.split('\n', 1)[0];
            nextLine = rawLine;

            // Re-align to follow commonmark nesting rules
            if (this.options.pedantic) ***REMOVED***
              nextLine = nextLine.replace(/^ ***REMOVED***1,4}(?=( ***REMOVED***4})*[^ ])/g, '  ');
          ***REMOVED***

            // End list item if found code fences
            if (fencesBeginRegex.test(nextLine)) ***REMOVED***
              break;
          ***REMOVED***

            // End list item if found start of new heading
            if (headingBeginRegex.test(nextLine)) ***REMOVED***
              break;
          ***REMOVED***

            // End list item if found start of new bullet
            if (nextBulletRegex.test(nextLine)) ***REMOVED***
              break;
          ***REMOVED***

            // Horizontal rule found
            if (hrRegex.test(src)) ***REMOVED***
              break;
          ***REMOVED***
            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) ***REMOVED***
              // Dedent if possible
              itemContents += '\n' + nextLine.slice(indent);
          ***REMOVED*** else ***REMOVED***
              // not enough indentation
              if (blankLine) ***REMOVED***
                break;
            ***REMOVED***

              // paragraph continuation unless last line was a different block level element
              if (line.search(/[^ ]/) >= 4) ***REMOVED***
                // indented code block
                break;
            ***REMOVED***
              if (fencesBeginRegex.test(line)) ***REMOVED***
                break;
            ***REMOVED***
              if (headingBeginRegex.test(line)) ***REMOVED***
                break;
            ***REMOVED***
              if (hrRegex.test(line)) ***REMOVED***
                break;
            ***REMOVED***
              itemContents += '\n' + nextLine;
          ***REMOVED***
            if (!blankLine && !nextLine.trim()) ***REMOVED***
              // Check if current line is blank
              blankLine = true;
          ***REMOVED***
            raw += rawLine + '\n';
            src = src.substring(rawLine.length + 1);
            line = nextLine.slice(indent);
        ***REMOVED***
      ***REMOVED***
        if (!list.loose) ***REMOVED***
          // If the previous item ended with a blank line, the list is loose
          if (endsWithBlankLine) ***REMOVED***
            list.loose = true;
        ***REMOVED*** else if (/\n *\n *$/.test(raw)) ***REMOVED***
            endsWithBlankLine = true;
        ***REMOVED***
      ***REMOVED***

        // Check for task list items
        if (this.options.gfm) ***REMOVED***
          istask = /^\[[ xX]\] /.exec(itemContents);
          if (istask) ***REMOVED***
            ischecked = istask[0] !== '[ ] ';
            itemContents = itemContents.replace(/^\[[ xX]\] +/, '');
        ***REMOVED***
      ***REMOVED***
        list.items.push(***REMOVED***
          type: 'list_item',
          raw: raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents
      ***REMOVED***);
        list.raw += raw;
    ***REMOVED***

      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic
      list.items[list.items.length - 1].raw = raw.trimRight();
      list.items[list.items.length - 1].text = itemContents.trimRight();
      list.raw = list.raw.trimRight();
      var l = list.items.length;

      // Item child tokens handled here at end because we needed to have the final item to trim it first
      for (i = 0; i < l; i++) ***REMOVED***
        this.lexer.state.top = false;
        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
        if (!list.loose) ***REMOVED***
          // Check if list should be loose
          var spacers = list.items[i].tokens.filter(function (t) ***REMOVED***
            return t.type === 'space';
        ***REMOVED***);
          var hasMultipleLineBreaks = spacers.length > 0 && spacers.some(function (t) ***REMOVED***
            return /\n.*\n/.test(t.raw);
        ***REMOVED***);
          list.loose = hasMultipleLineBreaks;
      ***REMOVED***
    ***REMOVED***

      // Set all items to loose if list is loose
      if (list.loose) ***REMOVED***
        for (i = 0; i < l; i++) ***REMOVED***
          list.items[i].loose = true;
      ***REMOVED***
    ***REMOVED***
      return list;
  ***REMOVED***
***REMOVED***;
  _proto.html = function html(src) ***REMOVED***
    var cap = this.rules.block.html.exec(src);
    if (cap) ***REMOVED***
      var token = ***REMOVED***
        type: 'html',
        raw: cap[0],
        pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
        text: cap[0]
    ***REMOVED***;
      if (this.options.sanitize) ***REMOVED***
        var text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);
        token.type = 'paragraph';
        token.text = text;
        token.tokens = this.lexer.inline(text);
    ***REMOVED***
      return token;
  ***REMOVED***
***REMOVED***;
  _proto.def = function def(src) ***REMOVED***
    var cap = this.rules.block.def.exec(src);
    if (cap) ***REMOVED***
      var tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
      var href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';
      var title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];
      return ***REMOVED***
        type: 'def',
        tag: tag,
        raw: cap[0],
        href: href,
        title: title
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.table = function table(src) ***REMOVED***
    var cap = this.rules.block.table.exec(src);
    if (cap) ***REMOVED***
      var item = ***REMOVED***
        type: 'table',
        header: splitCells(cap[1]).map(function (c) ***REMOVED***
          return ***REMOVED***
            text: c
        ***REMOVED***;
      ***REMOVED***),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, '').split('\n') : []
    ***REMOVED***;
      if (item.header.length === item.align.length) ***REMOVED***
        item.raw = cap[0];
        var l = item.align.length;
        var i, j, k, row;
        for (i = 0; i < l; i++) ***REMOVED***
          if (/^ *-+: *$/.test(item.align[i])) ***REMOVED***
            item.align[i] = 'right';
        ***REMOVED*** else if (/^ *:-+: *$/.test(item.align[i])) ***REMOVED***
            item.align[i] = 'center';
        ***REMOVED*** else if (/^ *:-+ *$/.test(item.align[i])) ***REMOVED***
            item.align[i] = 'left';
        ***REMOVED*** else ***REMOVED***
            item.align[i] = null;
        ***REMOVED***
      ***REMOVED***
        l = item.rows.length;
        for (i = 0; i < l; i++) ***REMOVED***
          item.rows[i] = splitCells(item.rows[i], item.header.length).map(function (c) ***REMOVED***
            return ***REMOVED***
              text: c
          ***REMOVED***;
        ***REMOVED***);
      ***REMOVED***

        // parse child tokens inside headers and cells

        // header child tokens
        l = item.header.length;
        for (j = 0; j < l; j++) ***REMOVED***
          item.header[j].tokens = this.lexer.inline(item.header[j].text);
      ***REMOVED***

        // cell child tokens
        l = item.rows.length;
        for (j = 0; j < l; j++) ***REMOVED***
          row = item.rows[j];
          for (k = 0; k < row.length; k++) ***REMOVED***
            row[k].tokens = this.lexer.inline(row[k].text);
        ***REMOVED***
      ***REMOVED***
        return item;
    ***REMOVED***
  ***REMOVED***
***REMOVED***;
  _proto.lheading = function lheading(src) ***REMOVED***
    var cap = this.rules.block.lheading.exec(src);
    if (cap) ***REMOVED***
      return ***REMOVED***
        type: 'heading',
        raw: cap[0],
        depth: cap[2].charAt(0) === '=' ? 1 : 2,
        text: cap[1],
        tokens: this.lexer.inline(cap[1])
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.paragraph = function paragraph(src) ***REMOVED***
    var cap = this.rules.block.paragraph.exec(src);
    if (cap) ***REMOVED***
      var text = cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1];
      return ***REMOVED***
        type: 'paragraph',
        raw: cap[0],
        text: text,
        tokens: this.lexer.inline(text)
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.text = function text(src) ***REMOVED***
    var cap = this.rules.block.text.exec(src);
    if (cap) ***REMOVED***
      return ***REMOVED***
        type: 'text',
        raw: cap[0],
        text: cap[0],
        tokens: this.lexer.inline(cap[0])
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.escape = function escape$1(src) ***REMOVED***
    var cap = this.rules.inline.escape.exec(src);
    if (cap) ***REMOVED***
      return ***REMOVED***
        type: 'escape',
        raw: cap[0],
        text: escape(cap[1])
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.tag = function tag(src) ***REMOVED***
    var cap = this.rules.inline.tag.exec(src);
    if (cap) ***REMOVED***
      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) ***REMOVED***
        this.lexer.state.inLink = true;
    ***REMOVED*** else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) ***REMOVED***
        this.lexer.state.inLink = false;
    ***REMOVED***
      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) ***REMOVED***
        this.lexer.state.inRawBlock = true;
    ***REMOVED*** else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) ***REMOVED***
        this.lexer.state.inRawBlock = false;
    ***REMOVED***
      return ***REMOVED***
        type: this.options.sanitize ? 'text' : 'html',
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.link = function link(src) ***REMOVED***
    var cap = this.rules.inline.link.exec(src);
    if (cap) ***REMOVED***
      var trimmedUrl = cap[2].trim();
      if (!this.options.pedantic && /^</.test(trimmedUrl)) ***REMOVED***
        // commonmark requires matching angle brackets
        if (!/>$/.test(trimmedUrl)) ***REMOVED***
          return;
      ***REMOVED***

        // ending angle bracket cannot be escaped
        var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\');
        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) ***REMOVED***
          return;
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        // find closing parenthesis
        var lastParenIndex = findClosingBracket(cap[2], '()');
        if (lastParenIndex > -1) ***REMOVED***
          var start = cap[0].indexOf('!') === 0 ? 5 : 4;
          var linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = '';
      ***REMOVED***
    ***REMOVED***
      var href = cap[2];
      var title = '';
      if (this.options.pedantic) ***REMOVED***
        // split pedantic href and title
        var link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);
        if (link) ***REMOVED***
          href = link[1];
          title = link[3];
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        title = cap[3] ? cap[3].slice(1, -1) : '';
    ***REMOVED***
      href = href.trim();
      if (/^</.test(href)) ***REMOVED***
        if (this.options.pedantic && !/>$/.test(trimmedUrl)) ***REMOVED***
          // pedantic allows starting angle bracket without ending angle bracket
          href = href.slice(1);
      ***REMOVED*** else ***REMOVED***
          href = href.slice(1, -1);
      ***REMOVED***
    ***REMOVED***
      return outputLink(cap, ***REMOVED***
        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,
        title: title ? title.replace(this.rules.inline._escapes, '$1') : title
    ***REMOVED***, cap[0], this.lexer);
  ***REMOVED***
***REMOVED***;
  _proto.reflink = function reflink(src, links) ***REMOVED***
    var cap;
    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) ***REMOVED***
      var link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = links[link.toLowerCase()];
      if (!link) ***REMOVED***
        var text = cap[0].charAt(0);
        return ***REMOVED***
          type: 'text',
          raw: text,
          text: text
      ***REMOVED***;
    ***REMOVED***
      return outputLink(cap, link, cap[0], this.lexer);
  ***REMOVED***
***REMOVED***;
  _proto.emStrong = function emStrong(src, maskedSrc, prevChar) ***REMOVED***
    if (prevChar === void 0) ***REMOVED***
      prevChar = '';
  ***REMOVED***
    var match = this.rules.inline.emStrong.lDelim.exec(src);
    if (!match) return;

    // _ can't be between two alphanumerics. \p***REMOVED***L}\p***REMOVED***N} includes non-english alphabet/numbers as well
    if (match[3] && prevChar.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDF70-\uDF81\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDE70-\uDEBE\uDEC0-\uDEC9\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/)) return;
    var nextChar = match[1] || match[2] || '';
    if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) ***REMOVED***
      var lLength = match[0].length - 1;
      var rDelim,
        rLength,
        delimTotal = lLength,
        midDelimTotal = 0;
      var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      endReg.lastIndex = 0;

      // Clip maskedSrc to same section of string as src (move to lexer?)
      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);
      while ((match = endReg.exec(maskedSrc)) != null) ***REMOVED***
        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
        if (!rDelim) continue; // skip single * in __abc*abc__

        rLength = rDelim.length;
        if (match[3] || match[4]) ***REMOVED***
          // found another Left Delim
          delimTotal += rLength;
          continue;
      ***REMOVED*** else if (match[5] || match[6]) ***REMOVED***
          // either Left or Right Delim
          if (lLength % 3 && !((lLength + rLength) % 3)) ***REMOVED***
            midDelimTotal += rLength;
            continue; // CommonMark Emphasis Rules 9-10
        ***REMOVED***
      ***REMOVED***

        delimTotal -= rLength;
        if (delimTotal > 0) continue; // Haven't found enough closing delimiters

        // Remove extra characters. *a*** -> *a*
        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);
        var raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);

        // Create `em` if smallest delimiter has odd char count. *a***
        if (Math.min(lLength, rLength) % 2) ***REMOVED***
          var _text = raw.slice(1, -1);
          return ***REMOVED***
            type: 'em',
            raw: raw,
            text: _text,
            tokens: this.lexer.inlineTokens(_text)
        ***REMOVED***;
      ***REMOVED***

        // Create 'strong' if smallest delimiter has even char count. **a***
        var text = raw.slice(2, -2);
        return ***REMOVED***
          type: 'strong',
          raw: raw,
          text: text,
          tokens: this.lexer.inlineTokens(text)
      ***REMOVED***;
    ***REMOVED***
  ***REMOVED***
***REMOVED***;
  _proto.codespan = function codespan(src) ***REMOVED***
    var cap = this.rules.inline.code.exec(src);
    if (cap) ***REMOVED***
      var text = cap[2].replace(/\n/g, ' ');
      var hasNonSpaceChars = /[^ ]/.test(text);
      var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);
      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) ***REMOVED***
        text = text.substring(1, text.length - 1);
    ***REMOVED***
      text = escape(text, true);
      return ***REMOVED***
        type: 'codespan',
        raw: cap[0],
        text: text
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.br = function br(src) ***REMOVED***
    var cap = this.rules.inline.br.exec(src);
    if (cap) ***REMOVED***
      return ***REMOVED***
        type: 'br',
        raw: cap[0]
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.del = function del(src) ***REMOVED***
    var cap = this.rules.inline.del.exec(src);
    if (cap) ***REMOVED***
      return ***REMOVED***
        type: 'del',
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2])
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.autolink = function autolink(src, mangle) ***REMOVED***
    var cap = this.rules.inline.autolink.exec(src);
    if (cap) ***REMOVED***
      var text, href;
      if (cap[2] === '@') ***REMOVED***
        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);
        href = 'mailto:' + text;
    ***REMOVED*** else ***REMOVED***
        text = escape(cap[1]);
        href = text;
    ***REMOVED***
      return ***REMOVED***
        type: 'link',
        raw: cap[0],
        text: text,
        href: href,
        tokens: [***REMOVED***
          type: 'text',
          raw: text,
          text: text
      ***REMOVED***]
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.url = function url(src, mangle) ***REMOVED***
    var cap;
    if (cap = this.rules.inline.url.exec(src)) ***REMOVED***
      var text, href;
      if (cap[2] === '@') ***REMOVED***
        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);
        href = 'mailto:' + text;
    ***REMOVED*** else ***REMOVED***
        // do extended autolink path validation
        var prevCapZero;
        do ***REMOVED***
          prevCapZero = cap[0];
          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
      ***REMOVED*** while (prevCapZero !== cap[0]);
        text = escape(cap[0]);
        if (cap[1] === 'www.') ***REMOVED***
          href = 'http://' + cap[0];
      ***REMOVED*** else ***REMOVED***
          href = cap[0];
      ***REMOVED***
    ***REMOVED***
      return ***REMOVED***
        type: 'link',
        raw: cap[0],
        text: text,
        href: href,
        tokens: [***REMOVED***
          type: 'text',
          raw: text,
          text: text
      ***REMOVED***]
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  _proto.inlineText = function inlineText(src, smartypants) ***REMOVED***
    var cap = this.rules.inline.text.exec(src);
    if (cap) ***REMOVED***
      var text;
      if (this.lexer.state.inRawBlock) ***REMOVED***
        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];
    ***REMOVED*** else ***REMOVED***
        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);
    ***REMOVED***
      return ***REMOVED***
        type: 'text',
        raw: cap[0],
        text: text
    ***REMOVED***;
  ***REMOVED***
***REMOVED***;
  return Tokenizer;
}();

/**
 * Block-Level Grammar
 */
var block = ***REMOVED***
  newline: /^(?: *(?:\n|$))+/,
  code: /^( ***REMOVED***4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ ***REMOVED***0,3}(`***REMOVED***3,}(?=[^`\n]*\n)|~***REMOVED***3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: ***REMOVED***0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ ***REMOVED***0,3}((?:-[\t ]*)***REMOVED***3,}|(?:_[ \t]*)***REMOVED***3,}|(?:\*[ \t]*)***REMOVED***3,})(?:\n+|$)/,
  heading: /^ ***REMOVED***0,3}(#***REMOVED***1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( ***REMOVED***0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( ***REMOVED***0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
  html: '^ ***REMOVED***0,3}(?:' // optional indentation
  + '<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
  + '|comment[^\\n]*(\\n+|$)' // (2)
  + '|<\\?[\\s\\S]*?(?:\\?>\\n*|$)' // (3)
  + '|<![A-Z][\\s\\S]*?(?:>\\n*|$)' // (4)
  + '|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)' // (5)
  + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (6)
  + '|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) open tag
  + '|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) closing tag
  + ')',
  def: /^ ***REMOVED***0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
  table: noopTest,
  lheading: /^((?:.|\n(?!\n))+?)\n ***REMOVED***0,3}(=+|-+) *(?:\n+|$)/,
  // regex template, placeholders will be replaced according to different paragraph
  // interruption rules of commonmark and the original markdown spec:
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();
block.bullet = /(?:[*+-]|\d***REMOVED***1,9}[.)])/;
block.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();
block.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\n+(?=\\1?(?:(?:- *)***REMOVED***3,}|(?:_ *)***REMOVED***3,}|(?:\\* *)***REMOVED***3,})(?:\\n+|$))').replace('def', '\\n+(?=' + block.def.source + ')').getRegex();
block._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';
block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
block.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
block.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' ***REMOVED***0,3}#***REMOVED***1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
.replace('|table', '').replace('blockquote', ' ***REMOVED***0,3}>').replace('fences', ' ***REMOVED***0,3}(?:`***REMOVED***3,}(?=[^`\\n]*\\n)|~***REMOVED***3,})[^\\n]*\\n').replace('list', ' ***REMOVED***0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
.replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
.getRegex();
block.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();

/**
 * Normal Block Grammar
 */

block.normal = merge(***REMOVED***}, block);

/**
 * GFM Block Grammar
 */

block.gfm = merge(***REMOVED***}, block.normal, ***REMOVED***
  table: '^ *([^\\n ].*\\|.*)\\n' // Header
  + ' ***REMOVED***0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?' // Align
  + '(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)' // Cells
});

block.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' ***REMOVED***0,3}#***REMOVED***1,6} ').replace('blockquote', ' ***REMOVED***0,3}>').replace('code', ' ***REMOVED***4}[^\\n]').replace('fences', ' ***REMOVED***0,3}(?:`***REMOVED***3,}(?=[^`\\n]*\\n)|~***REMOVED***3,})[^\\n]*\\n').replace('list', ' ***REMOVED***0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
.replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
.getRegex();
block.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' ***REMOVED***0,3}#***REMOVED***1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
.replace('table', block.gfm.table) // interrupt paragraphs with table
.replace('blockquote', ' ***REMOVED***0,3}>').replace('fences', ' ***REMOVED***0,3}(?:`***REMOVED***3,}(?=[^`\\n]*\\n)|~***REMOVED***3,})[^\\n]*\\n').replace('list', ' ***REMOVED***0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
.replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
.getRegex();
/**
 * Pedantic grammar (original John Gruber's loose markdown specification)
 */

block.pedantic = merge(***REMOVED***}, block.normal, ***REMOVED***
  html: edit('^ *(?:comment *(?:\\n|\\s*$)' + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n***REMOVED***2,}|\\s*$)' // closed tag
  + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n***REMOVED***2,}|\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b').getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#***REMOVED***1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  // fences not supported
  lheading: /^(.+?)\n ***REMOVED***0,3}(=+|-+) *(?:\n+|$)/,
  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#***REMOVED***1,6} *[^\n]').replace('lheading', block.lheading).replace('blockquote', ' ***REMOVED***0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()
});

/**
 * Inline-Level Grammar
 */
var inline = ***REMOVED***
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`***REMOVED***|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noopTest,
  tag: '^comment' + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
  + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
  + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
  + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
  + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>',
  // CDATA section
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(ref)\]/,
  nolink: /^!?\[(ref)\](?:\[\])?/,
  reflinkSearch: 'reflink|nolink(?!\\()',
  emStrong: ***REMOVED***
    lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a
    rDelimAst: /^(?:[^_*\\]|\\.)*?\_\_(?:[^_*\\]|\\.)*?\*(?:[^_*\\]|\\.)*?(?=\_\_)|(?:[^*\\]|\\.)+(?=[^*])|[punct_](\*+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|(?:[^punct*_\s\\]|\\.)(\*+)(?=[^punct*_\s])/,
    rDelimUnd: /^(?:[^_*\\]|\\.)*?\*\*(?:[^_*\\]|\\.)*?\_(?:[^_*\\]|\\.)*?(?=\*\*)|(?:[^_\\]|\\.)+(?=[^_])|[punct*](\_+)(?=[\s]|$)|(?:[^punct*_\s\\]|\\.)(\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/ // ^- Not allowed for _
***REMOVED***,

  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( ***REMOVED***2,}|\\)\n(?!\s*$)/,
  del: noopTest,
  text: /^(`+|[^`])(?:(?= ***REMOVED***2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= ***REMOVED***2,}\n)))/,
  punctuation: /^([\spunctuation])/
};

// list of punctuation marks from CommonMark spec
// without * and _ to handle the different emphasis markers * and _
inline._punctuation = '!"#$%&\'()+\\-.,/:;<=>?@\\[\\]`^***REMOVED***|}~';
inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();

// sequences em should skip over [title](link), `code`, <html>
inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
// lookbehind is not available on Safari as of version 16
// inline.escapedEmSt = /(?<=(?:^|[^\\)(?:\\[^])*)\\[*_]/g;
inline.escapedEmSt = /(?:^|[^\\])(?:\\\\)*\\[*_]/g;
inline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();
inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();
inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`***REMOVED***|}~])/g;
inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]***REMOVED***1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`***REMOVED***|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]***REMOVED***0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]***REMOVED***0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();
inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
inline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();
inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
inline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();
inline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();
inline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();
inline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();

/**
 * Normal Inline Grammar
 */

inline.normal = merge(***REMOVED***}, inline);

/**
 * Pedantic Inline Grammar
 */

inline.pedantic = merge(***REMOVED***}, inline.normal, ***REMOVED***
  strong: ***REMOVED***
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
***REMOVED***,
  em: ***REMOVED***
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
***REMOVED***,
  link: edit(/^!?\[(label)\]\((.*?)\)/).replace('label', inline._label).getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace('label', inline._label).getRegex()
});

/**
 * GFM Inline Grammar
 */

inline.gfm = merge(***REMOVED***}, inline.normal, ***REMOVED***
  escape: edit(inline.escape).replace('])', '~|])').getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= ***REMOVED***2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`***REMOVED***\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= ***REMOVED***2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`***REMOVED***\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`***REMOVED***\|}~-]+@)))/
});
inline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();
/**
 * GFM + Line Breaks Inline Grammar
 */

inline.breaks = merge(***REMOVED***}, inline.gfm, ***REMOVED***
  br: edit(inline.br).replace('***REMOVED***2,}', '*').getRegex(),
  text: edit(inline.gfm.text).replace('\\b_', '\\b_| ***REMOVED***2,}\\n').replace(/\***REMOVED***2,\}/g, '*').getRegex()
});

/**
 * smartypants text replacement
 * @param ***REMOVED***string} text
 */
function smartypants(text) ***REMOVED***
  return text
  // em-dashes
  .replace(/---/g, "\u2014")
  // en-dashes
  .replace(/--/g, "\u2013")
  // opening singles
  .replace(/(^|[-\u2014/(\[***REMOVED***"\s])'/g, "$1\u2018")
  // closing singles & apostrophes
  .replace(/'/g, "\u2019")
  // opening doubles
  .replace(/(^|[-\u2014/(\[***REMOVED***\u2018\s])"/g, "$1\u201C")
  // closing doubles
  .replace(/"/g, "\u201D")
  // ellipses
  .replace(/\.***REMOVED***3}/g, "\u2026");
}

/**
 * mangle email addresses
 * @param ***REMOVED***string} text
 */
function mangle(text) ***REMOVED***
  var out = '',
    i,
    ch;
  var l = text.length;
  for (i = 0; i < l; i++) ***REMOVED***
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) ***REMOVED***
      ch = 'x' + ch.toString(16);
  ***REMOVED***
    out += '&#' + ch + ';';
***REMOVED***
  return out;
}

/**
 * Block Lexer
 */
var Lexer = /*#__PURE__*/function () ***REMOVED***
  function Lexer(options) ***REMOVED***
    this.tokens = [];
    this.tokens.links = Object.create(null);
    this.options = options || exports.defaults;
    this.options.tokenizer = this.options.tokenizer || new Tokenizer();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = ***REMOVED***
      inLink: false,
      inRawBlock: false,
      top: true
  ***REMOVED***;
    var rules = ***REMOVED***
      block: block.normal,
      inline: inline.normal
  ***REMOVED***;
    if (this.options.pedantic) ***REMOVED***
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
  ***REMOVED*** else if (this.options.gfm) ***REMOVED***
      rules.block = block.gfm;
      if (this.options.breaks) ***REMOVED***
        rules.inline = inline.breaks;
    ***REMOVED*** else ***REMOVED***
        rules.inline = inline.gfm;
    ***REMOVED***
  ***REMOVED***
    this.tokenizer.rules = rules;
***REMOVED***

  /**
   * Expose Rules
   */
  /**
   * Static Lex Method
   */
  Lexer.lex = function lex(src, options) ***REMOVED***
    var lexer = new Lexer(options);
    return lexer.lex(src);
***REMOVED***

  /**
   * Static Lex Inline Method
   */;
  Lexer.lexInline = function lexInline(src, options) ***REMOVED***
    var lexer = new Lexer(options);
    return lexer.inlineTokens(src);
***REMOVED***

  /**
   * Preprocessing
   */;
  var _proto = Lexer.prototype;
  _proto.lex = function lex(src) ***REMOVED***
    src = src.replace(/\r\n|\r/g, '\n');
    this.blockTokens(src, this.tokens);
    var next;
    while (next = this.inlineQueue.shift()) ***REMOVED***
      this.inlineTokens(next.src, next.tokens);
  ***REMOVED***
    return this.tokens;
***REMOVED***

  /**
   * Lexing
   */;
  _proto.blockTokens = function blockTokens(src, tokens) ***REMOVED***
    var _this = this;
    if (tokens === void 0) ***REMOVED***
      tokens = [];
  ***REMOVED***
    if (this.options.pedantic) ***REMOVED***
      src = src.replace(/\t/g, '    ').replace(/^ +$/gm, '');
  ***REMOVED*** else ***REMOVED***
      src = src.replace(/^( *)(\t+)/gm, function (_, leading, tabs) ***REMOVED***
        return leading + '    '.repeat(tabs.length);
    ***REMOVED***);
  ***REMOVED***
    var token, lastToken, cutSrc, lastParagraphClipped;
    while (src) ***REMOVED***
      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(function (extTokenizer) ***REMOVED***
        if (token = extTokenizer.call(***REMOVED***
          lexer: _this
      ***REMOVED***, src, tokens)) ***REMOVED***
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
      ***REMOVED***
        return false;
    ***REMOVED***)) ***REMOVED***
        continue;
    ***REMOVED***

      // newline
      if (token = this.tokenizer.space(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        if (token.raw.length === 1 && tokens.length > 0) ***REMOVED***
          // if there's a single \n as a spacer, it's terminating the last line,
          // so move it there so that we don't get unecessary paragraph tags
          tokens[tokens.length - 1].raw += '\n';
      ***REMOVED*** else ***REMOVED***
          tokens.push(token);
      ***REMOVED***
        continue;
    ***REMOVED***

      // code
      if (token = this.tokenizer.code(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        // An indented code block cannot interrupt a paragraph.
        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) ***REMOVED***
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.text;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
      ***REMOVED*** else ***REMOVED***
          tokens.push(token);
      ***REMOVED***
        continue;
    ***REMOVED***

      // fences
      if (token = this.tokenizer.fences(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // heading
      if (token = this.tokenizer.heading(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // hr
      if (token = this.tokenizer.hr(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // blockquote
      if (token = this.tokenizer.blockquote(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // list
      if (token = this.tokenizer.list(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // html
      if (token = this.tokenizer.html(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // def
      if (token = this.tokenizer.def(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) ***REMOVED***
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.raw;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
      ***REMOVED*** else if (!this.tokens.links[token.tag]) ***REMOVED***
          this.tokens.links[token.tag] = ***REMOVED***
            href: token.href,
            title: token.title
        ***REMOVED***;
      ***REMOVED***
        continue;
    ***REMOVED***

      // table (gfm)
      if (token = this.tokenizer.table(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // lheading
      if (token = this.tokenizer.lheading(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // top-level paragraph
      // prevent paragraph consuming extensions by clipping 'src' to extension start
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startBlock) ***REMOVED***
        (function () ***REMOVED***
          var startIndex = Infinity;
          var tempSrc = src.slice(1);
          var tempStart = void 0;
          _this.options.extensions.startBlock.forEach(function (getStartIndex) ***REMOVED***
            tempStart = getStartIndex.call(***REMOVED***
              lexer: this
          ***REMOVED***, tempSrc);
            if (typeof tempStart === 'number' && tempStart >= 0) ***REMOVED***
              startIndex = Math.min(startIndex, tempStart);
          ***REMOVED***
        ***REMOVED***);
          if (startIndex < Infinity && startIndex >= 0) ***REMOVED***
            cutSrc = src.substring(0, startIndex + 1);
        ***REMOVED***
      ***REMOVED***)();
    ***REMOVED***
      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) ***REMOVED***
        lastToken = tokens[tokens.length - 1];
        if (lastParagraphClipped && lastToken.type === 'paragraph') ***REMOVED***
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
      ***REMOVED*** else ***REMOVED***
          tokens.push(token);
      ***REMOVED***
        lastParagraphClipped = cutSrc.length !== src.length;
        src = src.substring(token.raw.length);
        continue;
    ***REMOVED***

      // text
      if (token = this.tokenizer.text(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === 'text') ***REMOVED***
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
      ***REMOVED*** else ***REMOVED***
          tokens.push(token);
      ***REMOVED***
        continue;
    ***REMOVED***
      if (src) ***REMOVED***
        var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
        if (this.options.silent) ***REMOVED***
          console.error(errMsg);
          break;
      ***REMOVED*** else ***REMOVED***
          throw new Error(errMsg);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
    this.state.top = true;
    return tokens;
***REMOVED***;
  _proto.inline = function inline(src, tokens) ***REMOVED***
    if (tokens === void 0) ***REMOVED***
      tokens = [];
  ***REMOVED***
    this.inlineQueue.push(***REMOVED***
      src: src,
      tokens: tokens
  ***REMOVED***);
    return tokens;
***REMOVED***

  /**
   * Lexing/Compiling
   */;
  _proto.inlineTokens = function inlineTokens(src, tokens) ***REMOVED***
    var _this2 = this;
    if (tokens === void 0) ***REMOVED***
      tokens = [];
  ***REMOVED***
    var token, lastToken, cutSrc;

    // String with links masked to avoid interference with em and strong
    var maskedSrc = src;
    var match;
    var keepPrevChar, prevChar;

    // Mask out reflinks
    if (this.tokens.links) ***REMOVED***
      var links = Object.keys(this.tokens.links);
      if (links.length > 0) ***REMOVED***
        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) ***REMOVED***
          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) ***REMOVED***
            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
    // Mask out other blocks
    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) ***REMOVED***
      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
  ***REMOVED***

    // Mask out escaped em & strong delimiters
    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) ***REMOVED***
      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;
  ***REMOVED***
    while (src) ***REMOVED***
      if (!keepPrevChar) ***REMOVED***
        prevChar = '';
    ***REMOVED***
      keepPrevChar = false;

      // extensions
      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(function (extTokenizer) ***REMOVED***
        if (token = extTokenizer.call(***REMOVED***
          lexer: _this2
      ***REMOVED***, src, tokens)) ***REMOVED***
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
      ***REMOVED***
        return false;
    ***REMOVED***)) ***REMOVED***
        continue;
    ***REMOVED***

      // escape
      if (token = this.tokenizer.escape(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // tag
      if (token = this.tokenizer.tag(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === 'text' && lastToken.type === 'text') ***REMOVED***
          lastToken.raw += token.raw;
          lastToken.text += token.text;
      ***REMOVED*** else ***REMOVED***
          tokens.push(token);
      ***REMOVED***
        continue;
    ***REMOVED***

      // link
      if (token = this.tokenizer.link(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // reflink, nolink
      if (token = this.tokenizer.reflink(src, this.tokens.links)) ***REMOVED***
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];
        if (lastToken && token.type === 'text' && lastToken.type === 'text') ***REMOVED***
          lastToken.raw += token.raw;
          lastToken.text += token.text;
      ***REMOVED*** else ***REMOVED***
          tokens.push(token);
      ***REMOVED***
        continue;
    ***REMOVED***

      // em & strong
      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // code
      if (token = this.tokenizer.codespan(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // br
      if (token = this.tokenizer.br(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // del (gfm)
      if (token = this.tokenizer.del(src)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // autolink
      if (token = this.tokenizer.autolink(src, mangle)) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // url (gfm)
      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) ***REMOVED***
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
    ***REMOVED***

      // text
      // prevent inlineText consuming extensions by clipping 'src' to extension start
      cutSrc = src;
      if (this.options.extensions && this.options.extensions.startInline) ***REMOVED***
        (function () ***REMOVED***
          var startIndex = Infinity;
          var tempSrc = src.slice(1);
          var tempStart = void 0;
          _this2.options.extensions.startInline.forEach(function (getStartIndex) ***REMOVED***
            tempStart = getStartIndex.call(***REMOVED***
              lexer: this
          ***REMOVED***, tempSrc);
            if (typeof tempStart === 'number' && tempStart >= 0) ***REMOVED***
              startIndex = Math.min(startIndex, tempStart);
          ***REMOVED***
        ***REMOVED***);
          if (startIndex < Infinity && startIndex >= 0) ***REMOVED***
            cutSrc = src.substring(0, startIndex + 1);
        ***REMOVED***
      ***REMOVED***)();
    ***REMOVED***
      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) ***REMOVED***
        src = src.substring(token.raw.length);
        if (token.raw.slice(-1) !== '_') ***REMOVED***
          // Track prevChar before string of ____ started
          prevChar = token.raw.slice(-1);
      ***REMOVED***
        keepPrevChar = true;
        lastToken = tokens[tokens.length - 1];
        if (lastToken && lastToken.type === 'text') ***REMOVED***
          lastToken.raw += token.raw;
          lastToken.text += token.text;
      ***REMOVED*** else ***REMOVED***
          tokens.push(token);
      ***REMOVED***
        continue;
    ***REMOVED***
      if (src) ***REMOVED***
        var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);
        if (this.options.silent) ***REMOVED***
          console.error(errMsg);
          break;
      ***REMOVED*** else ***REMOVED***
          throw new Error(errMsg);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
    return tokens;
***REMOVED***;
  _createClass(Lexer, null, [***REMOVED***
    key: "rules",
    get: function get() ***REMOVED***
      return ***REMOVED***
        block: block,
        inline: inline
    ***REMOVED***;
  ***REMOVED***
***REMOVED***]);
  return Lexer;
}();

/**
 * Renderer
 */
var Renderer = /*#__PURE__*/function () ***REMOVED***
  function Renderer(options) ***REMOVED***
    this.options = options || exports.defaults;
***REMOVED***
  var _proto = Renderer.prototype;
  _proto.code = function code(_code, infostring, escaped) ***REMOVED***
    var lang = (infostring || '').match(/\S*/)[0];
    if (this.options.highlight) ***REMOVED***
      var out = this.options.highlight(_code, lang);
      if (out != null && out !== _code) ***REMOVED***
        escaped = true;
        _code = out;
    ***REMOVED***
  ***REMOVED***
    _code = _code.replace(/\n$/, '') + '\n';
    if (!lang) ***REMOVED***
      return '<pre><code>' + (escaped ? _code : escape(_code, true)) + '</code></pre>\n';
  ***REMOVED***
    return '<pre><code class="' + this.options.langPrefix + escape(lang) + '">' + (escaped ? _code : escape(_code, true)) + '</code></pre>\n';
***REMOVED***

  /**
   * @param ***REMOVED***string} quote
   */;
  _proto.blockquote = function blockquote(quote) ***REMOVED***
    return "<blockquote>\n" + quote + "</blockquote>\n";
***REMOVED***;
  _proto.html = function html(_html) ***REMOVED***
    return _html;
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   * @param ***REMOVED***string} level
   * @param ***REMOVED***string} raw
   * @param ***REMOVED***any} slugger
   */;
  _proto.heading = function heading(text, level, raw, slugger) ***REMOVED***
    if (this.options.headerIds) ***REMOVED***
      var id = this.options.headerPrefix + slugger.slug(raw);
      return "<h" + level + " id=\"" + id + "\">" + text + "</h" + level + ">\n";
  ***REMOVED***

    // ignore IDs
    return "<h" + level + ">" + text + "</h" + level + ">\n";
***REMOVED***;
  _proto.hr = function hr() ***REMOVED***
    return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
***REMOVED***;
  _proto.list = function list(body, ordered, start) ***REMOVED***
    var type = ordered ? 'ol' : 'ul',
      startatt = ordered && start !== 1 ? ' start="' + start + '"' : '';
    return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   */;
  _proto.listitem = function listitem(text) ***REMOVED***
    return "<li>" + text + "</li>\n";
***REMOVED***;
  _proto.checkbox = function checkbox(checked) ***REMOVED***
    return '<input ' + (checked ? 'checked="" ' : '') + 'disabled="" type="checkbox"' + (this.options.xhtml ? ' /' : '') + '> ';
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   */;
  _proto.paragraph = function paragraph(text) ***REMOVED***
    return "<p>" + text + "</p>\n";
***REMOVED***

  /**
   * @param ***REMOVED***string} header
   * @param ***REMOVED***string} body
   */;
  _proto.table = function table(header, body) ***REMOVED***
    if (body) body = "<tbody>" + body + "</tbody>";
    return '<table>\n' + '<thead>\n' + header + '</thead>\n' + body + '</table>\n';
***REMOVED***

  /**
   * @param ***REMOVED***string} content
   */;
  _proto.tablerow = function tablerow(content) ***REMOVED***
    return "<tr>\n" + content + "</tr>\n";
***REMOVED***;
  _proto.tablecell = function tablecell(content, flags) ***REMOVED***
    var type = flags.header ? 'th' : 'td';
    var tag = flags.align ? "<" + type + " align=\"" + flags.align + "\">" : "<" + type + ">";
    return tag + content + ("</" + type + ">\n");
***REMOVED***

  /**
   * span level renderer
   * @param ***REMOVED***string} text
   */;
  _proto.strong = function strong(text) ***REMOVED***
    return "<strong>" + text + "</strong>";
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   */;
  _proto.em = function em(text) ***REMOVED***
    return "<em>" + text + "</em>";
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   */;
  _proto.codespan = function codespan(text) ***REMOVED***
    return "<code>" + text + "</code>";
***REMOVED***;
  _proto.br = function br() ***REMOVED***
    return this.options.xhtml ? '<br/>' : '<br>';
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   */;
  _proto.del = function del(text) ***REMOVED***
    return "<del>" + text + "</del>";
***REMOVED***

  /**
   * @param ***REMOVED***string} href
   * @param ***REMOVED***string} title
   * @param ***REMOVED***string} text
   */;
  _proto.link = function link(href, title, text) ***REMOVED***
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) ***REMOVED***
      return text;
  ***REMOVED***
    var out = '<a href="' + href + '"';
    if (title) ***REMOVED***
      out += ' title="' + title + '"';
  ***REMOVED***
    out += '>' + text + '</a>';
    return out;
***REMOVED***

  /**
   * @param ***REMOVED***string} href
   * @param ***REMOVED***string} title
   * @param ***REMOVED***string} text
   */;
  _proto.image = function image(href, title, text) ***REMOVED***
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) ***REMOVED***
      return text;
  ***REMOVED***
    var out = "<img src=\"" + href + "\" alt=\"" + text + "\"";
    if (title) ***REMOVED***
      out += " title=\"" + title + "\"";
  ***REMOVED***
    out += this.options.xhtml ? '/>' : '>';
    return out;
***REMOVED***;
  _proto.text = function text(_text) ***REMOVED***
    return _text;
***REMOVED***;
  return Renderer;
}();

/**
 * TextRenderer
 * returns only the textual part of the token
 */
var TextRenderer = /*#__PURE__*/function () ***REMOVED***
  function TextRenderer() ***REMOVED***}
  var _proto = TextRenderer.prototype;
  // no need for block level renderers
  _proto.strong = function strong(text) ***REMOVED***
    return text;
***REMOVED***;
  _proto.em = function em(text) ***REMOVED***
    return text;
***REMOVED***;
  _proto.codespan = function codespan(text) ***REMOVED***
    return text;
***REMOVED***;
  _proto.del = function del(text) ***REMOVED***
    return text;
***REMOVED***;
  _proto.html = function html(text) ***REMOVED***
    return text;
***REMOVED***;
  _proto.text = function text(_text) ***REMOVED***
    return _text;
***REMOVED***;
  _proto.link = function link(href, title, text) ***REMOVED***
    return '' + text;
***REMOVED***;
  _proto.image = function image(href, title, text) ***REMOVED***
    return '' + text;
***REMOVED***;
  _proto.br = function br() ***REMOVED***
    return '';
***REMOVED***;
  return TextRenderer;
}();

/**
 * Slugger generates header id
 */
var Slugger = /*#__PURE__*/function () ***REMOVED***
  function Slugger() ***REMOVED***
    this.seen = ***REMOVED***};
***REMOVED***

  /**
   * @param ***REMOVED***string} value
   */
  var _proto = Slugger.prototype;
  _proto.serialize = function serialize(value) ***REMOVED***
    return value.toLowerCase().trim()
    // remove html tags
    .replace(/<[!\/a-z].*?>/ig, '')
    // remove unwanted chars
    .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`***REMOVED***|}~]/g, '').replace(/\s/g, '-');
***REMOVED***

  /**
   * Finds the next safe (unique) slug to use
   * @param ***REMOVED***string} originalSlug
   * @param ***REMOVED***boolean} isDryRun
   */;
  _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) ***REMOVED***
    var slug = originalSlug;
    var occurenceAccumulator = 0;
    if (this.seen.hasOwnProperty(slug)) ***REMOVED***
      occurenceAccumulator = this.seen[originalSlug];
      do ***REMOVED***
        occurenceAccumulator++;
        slug = originalSlug + '-' + occurenceAccumulator;
    ***REMOVED*** while (this.seen.hasOwnProperty(slug));
  ***REMOVED***
    if (!isDryRun) ***REMOVED***
      this.seen[originalSlug] = occurenceAccumulator;
      this.seen[slug] = 0;
  ***REMOVED***
    return slug;
***REMOVED***

  /**
   * Convert string to unique id
   * @param ***REMOVED***object} [options]
   * @param ***REMOVED***boolean} [options.dryrun] Generates the next unique slug without
   * updating the internal accumulator.
   */;
  _proto.slug = function slug(value, options) ***REMOVED***
    if (options === void 0) ***REMOVED***
      options = ***REMOVED***};
  ***REMOVED***
    var slug = this.serialize(value);
    return this.getNextSafeSlug(slug, options.dryrun);
***REMOVED***;
  return Slugger;
}();

/**
 * Parsing & Compiling
 */
var Parser = /*#__PURE__*/function () ***REMOVED***
  function Parser(options) ***REMOVED***
    this.options = options || exports.defaults;
    this.options.renderer = this.options.renderer || new Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.textRenderer = new TextRenderer();
    this.slugger = new Slugger();
***REMOVED***

  /**
   * Static Parse Method
   */
  Parser.parse = function parse(tokens, options) ***REMOVED***
    var parser = new Parser(options);
    return parser.parse(tokens);
***REMOVED***

  /**
   * Static Parse Inline Method
   */;
  Parser.parseInline = function parseInline(tokens, options) ***REMOVED***
    var parser = new Parser(options);
    return parser.parseInline(tokens);
***REMOVED***

  /**
   * Parse Loop
   */;
  var _proto = Parser.prototype;
  _proto.parse = function parse(tokens, top) ***REMOVED***
    if (top === void 0) ***REMOVED***
      top = true;
  ***REMOVED***
    var out = '',
      i,
      j,
      k,
      l2,
      l3,
      row,
      cell,
      header,
      body,
      token,
      ordered,
      start,
      loose,
      itemBody,
      item,
      checked,
      task,
      checkbox,
      ret;
    var l = tokens.length;
    for (i = 0; i < l; i++) ***REMOVED***
      token = tokens[i];

      // Run any renderer extensions
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) ***REMOVED***
        ret = this.options.extensions.renderers[token.type].call(***REMOVED***
          parser: this
      ***REMOVED***, token);
        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) ***REMOVED***
          out += ret || '';
          continue;
      ***REMOVED***
    ***REMOVED***
      switch (token.type) ***REMOVED***
        case 'space':
          ***REMOVED***
            continue;
        ***REMOVED***
        case 'hr':
          ***REMOVED***
            out += this.renderer.hr();
            continue;
        ***REMOVED***
        case 'heading':
          ***REMOVED***
            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
            continue;
        ***REMOVED***
        case 'code':
          ***REMOVED***
            out += this.renderer.code(token.text, token.lang, token.escaped);
            continue;
        ***REMOVED***
        case 'table':
          ***REMOVED***
            header = '';

            // header
            cell = '';
            l2 = token.header.length;
            for (j = 0; j < l2; j++) ***REMOVED***
              cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), ***REMOVED***
                header: true,
                align: token.align[j]
            ***REMOVED***);
          ***REMOVED***
            header += this.renderer.tablerow(cell);
            body = '';
            l2 = token.rows.length;
            for (j = 0; j < l2; j++) ***REMOVED***
              row = token.rows[j];
              cell = '';
              l3 = row.length;
              for (k = 0; k < l3; k++) ***REMOVED***
                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), ***REMOVED***
                  header: false,
                  align: token.align[k]
              ***REMOVED***);
            ***REMOVED***
              body += this.renderer.tablerow(cell);
          ***REMOVED***
            out += this.renderer.table(header, body);
            continue;
        ***REMOVED***
        case 'blockquote':
          ***REMOVED***
            body = this.parse(token.tokens);
            out += this.renderer.blockquote(body);
            continue;
        ***REMOVED***
        case 'list':
          ***REMOVED***
            ordered = token.ordered;
            start = token.start;
            loose = token.loose;
            l2 = token.items.length;
            body = '';
            for (j = 0; j < l2; j++) ***REMOVED***
              item = token.items[j];
              checked = item.checked;
              task = item.task;
              itemBody = '';
              if (item.task) ***REMOVED***
                checkbox = this.renderer.checkbox(checked);
                if (loose) ***REMOVED***
                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') ***REMOVED***
                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;
                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') ***REMOVED***
                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
                  ***REMOVED***
                ***REMOVED*** else ***REMOVED***
                    item.tokens.unshift(***REMOVED***
                      type: 'text',
                      text: checkbox
                  ***REMOVED***);
                ***REMOVED***
              ***REMOVED*** else ***REMOVED***
                  itemBody += checkbox;
              ***REMOVED***
            ***REMOVED***
              itemBody += this.parse(item.tokens, loose);
              body += this.renderer.listitem(itemBody, task, checked);
          ***REMOVED***
            out += this.renderer.list(body, ordered, start);
            continue;
        ***REMOVED***
        case 'html':
          ***REMOVED***
            // TODO parse inline content if parameter markdown=1
            out += this.renderer.html(token.text);
            continue;
        ***REMOVED***
        case 'paragraph':
          ***REMOVED***
            out += this.renderer.paragraph(this.parseInline(token.tokens));
            continue;
        ***REMOVED***
        case 'text':
          ***REMOVED***
            body = token.tokens ? this.parseInline(token.tokens) : token.text;
            while (i + 1 < l && tokens[i + 1].type === 'text') ***REMOVED***
              token = tokens[++i];
              body += '\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);
          ***REMOVED***
            out += top ? this.renderer.paragraph(body) : body;
            continue;
        ***REMOVED***
        default:
          ***REMOVED***
            var errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) ***REMOVED***
              console.error(errMsg);
              return;
          ***REMOVED*** else ***REMOVED***
              throw new Error(errMsg);
          ***REMOVED***
        ***REMOVED***
    ***REMOVED***
  ***REMOVED***
    return out;
***REMOVED***

  /**
   * Parse Inline Tokens
   */;
  _proto.parseInline = function parseInline(tokens, renderer) ***REMOVED***
    renderer = renderer || this.renderer;
    var out = '',
      i,
      token,
      ret;
    var l = tokens.length;
    for (i = 0; i < l; i++) ***REMOVED***
      token = tokens[i];

      // Run any renderer extensions
      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) ***REMOVED***
        ret = this.options.extensions.renderers[token.type].call(***REMOVED***
          parser: this
      ***REMOVED***, token);
        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) ***REMOVED***
          out += ret || '';
          continue;
      ***REMOVED***
    ***REMOVED***
      switch (token.type) ***REMOVED***
        case 'escape':
          ***REMOVED***
            out += renderer.text(token.text);
            break;
        ***REMOVED***
        case 'html':
          ***REMOVED***
            out += renderer.html(token.text);
            break;
        ***REMOVED***
        case 'link':
          ***REMOVED***
            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
            break;
        ***REMOVED***
        case 'image':
          ***REMOVED***
            out += renderer.image(token.href, token.title, token.text);
            break;
        ***REMOVED***
        case 'strong':
          ***REMOVED***
            out += renderer.strong(this.parseInline(token.tokens, renderer));
            break;
        ***REMOVED***
        case 'em':
          ***REMOVED***
            out += renderer.em(this.parseInline(token.tokens, renderer));
            break;
        ***REMOVED***
        case 'codespan':
          ***REMOVED***
            out += renderer.codespan(token.text);
            break;
        ***REMOVED***
        case 'br':
          ***REMOVED***
            out += renderer.br();
            break;
        ***REMOVED***
        case 'del':
          ***REMOVED***
            out += renderer.del(this.parseInline(token.tokens, renderer));
            break;
        ***REMOVED***
        case 'text':
          ***REMOVED***
            out += renderer.text(token.text);
            break;
        ***REMOVED***
        default:
          ***REMOVED***
            var errMsg = 'Token with "' + token.type + '" type was not found.';
            if (this.options.silent) ***REMOVED***
              console.error(errMsg);
              return;
          ***REMOVED*** else ***REMOVED***
              throw new Error(errMsg);
          ***REMOVED***
        ***REMOVED***
    ***REMOVED***
  ***REMOVED***
    return out;
***REMOVED***;
  return Parser;
}();

/**
 * Marked
 */
function marked(src, opt, callback) ***REMOVED***
  // throw error in case of non string input
  if (typeof src === 'undefined' || src === null) ***REMOVED***
    throw new Error('marked(): input parameter is undefined or null');
***REMOVED***
  if (typeof src !== 'string') ***REMOVED***
    throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
***REMOVED***
  if (typeof opt === 'function') ***REMOVED***
    callback = opt;
    opt = null;
***REMOVED***
  opt = merge(***REMOVED***}, marked.defaults, opt || ***REMOVED***});
  checkSanitizeDeprecation(opt);
  if (callback) ***REMOVED***
    var highlight = opt.highlight;
    var tokens;
    try ***REMOVED***
      tokens = Lexer.lex(src, opt);
  ***REMOVED*** catch (e) ***REMOVED***
      return callback(e);
  ***REMOVED***
    var done = function done(err) ***REMOVED***
      var out;
      if (!err) ***REMOVED***
        try ***REMOVED***
          if (opt.walkTokens) ***REMOVED***
            marked.walkTokens(tokens, opt.walkTokens);
        ***REMOVED***
          out = Parser.parse(tokens, opt);
      ***REMOVED*** catch (e) ***REMOVED***
          err = e;
      ***REMOVED***
    ***REMOVED***
      opt.highlight = highlight;
      return err ? callback(err) : callback(null, out);
  ***REMOVED***;
    if (!highlight || highlight.length < 3) ***REMOVED***
      return done();
  ***REMOVED***
    delete opt.highlight;
    if (!tokens.length) return done();
    var pending = 0;
    marked.walkTokens(tokens, function (token) ***REMOVED***
      if (token.type === 'code') ***REMOVED***
        pending++;
        setTimeout(function () ***REMOVED***
          highlight(token.text, token.lang, function (err, code) ***REMOVED***
            if (err) ***REMOVED***
              return done(err);
          ***REMOVED***
            if (code != null && code !== token.text) ***REMOVED***
              token.text = code;
              token.escaped = true;
          ***REMOVED***
            pending--;
            if (pending === 0) ***REMOVED***
              done();
          ***REMOVED***
        ***REMOVED***);
      ***REMOVED***, 0);
    ***REMOVED***
  ***REMOVED***);
    if (pending === 0) ***REMOVED***
      done();
  ***REMOVED***
    return;
***REMOVED***
  function onError(e) ***REMOVED***
    e.message += '\nPlease report this to https://github.com/markedjs/marked.';
    if (opt.silent) ***REMOVED***
      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';
  ***REMOVED***
    throw e;
***REMOVED***
  try ***REMOVED***
    var _tokens = Lexer.lex(src, opt);
    if (opt.walkTokens) ***REMOVED***
      if (opt.async) ***REMOVED***
        return Promise.all(marked.walkTokens(_tokens, opt.walkTokens)).then(function () ***REMOVED***
          return Parser.parse(_tokens, opt);
      ***REMOVED***)["catch"](onError);
    ***REMOVED***
      marked.walkTokens(_tokens, opt.walkTokens);
  ***REMOVED***
    return Parser.parse(_tokens, opt);
***REMOVED*** catch (e) ***REMOVED***
    onError(e);
***REMOVED***
}

/**
 * Options
 */

marked.options = marked.setOptions = function (opt) ***REMOVED***
  merge(marked.defaults, opt);
  changeDefaults(marked.defaults);
  return marked;
};
marked.getDefaults = getDefaults;
marked.defaults = exports.defaults;

/**
 * Use Extension
 */

marked.use = function () ***REMOVED***
  var extensions = marked.defaults.extensions || ***REMOVED***
    renderers: ***REMOVED***},
    childTokens: ***REMOVED***}
***REMOVED***;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) ***REMOVED***
    args[_key] = arguments[_key];
***REMOVED***
  args.forEach(function (pack) ***REMOVED***
    // copy options to new object
    var opts = merge(***REMOVED***}, pack);

    // set async to true if it was set to true before
    opts.async = marked.defaults.async || opts.async;

    // ==-- Parse "addon" extensions --== //
    if (pack.extensions) ***REMOVED***
      pack.extensions.forEach(function (ext) ***REMOVED***
        if (!ext.name) ***REMOVED***
          throw new Error('extension name required');
      ***REMOVED***
        if (ext.renderer) ***REMOVED***
          // Renderer extensions
          var prevRenderer = extensions.renderers[ext.name];
          if (prevRenderer) ***REMOVED***
            // Replace extension with func to run new extension but fall back if false
            extensions.renderers[ext.name] = function () ***REMOVED***
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) ***REMOVED***
                args[_key2] = arguments[_key2];
            ***REMOVED***
              var ret = ext.renderer.apply(this, args);
              if (ret === false) ***REMOVED***
                ret = prevRenderer.apply(this, args);
            ***REMOVED***
              return ret;
          ***REMOVED***;
        ***REMOVED*** else ***REMOVED***
            extensions.renderers[ext.name] = ext.renderer;
        ***REMOVED***
      ***REMOVED***
        if (ext.tokenizer) ***REMOVED***
          // Tokenizer Extensions
          if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') ***REMOVED***
            throw new Error("extension level must be 'block' or 'inline'");
        ***REMOVED***
          if (extensions[ext.level]) ***REMOVED***
            extensions[ext.level].unshift(ext.tokenizer);
        ***REMOVED*** else ***REMOVED***
            extensions[ext.level] = [ext.tokenizer];
        ***REMOVED***
          if (ext.start) ***REMOVED***
            // Function to check for start of token
            if (ext.level === 'block') ***REMOVED***
              if (extensions.startBlock) ***REMOVED***
                extensions.startBlock.push(ext.start);
            ***REMOVED*** else ***REMOVED***
                extensions.startBlock = [ext.start];
            ***REMOVED***
          ***REMOVED*** else if (ext.level === 'inline') ***REMOVED***
              if (extensions.startInline) ***REMOVED***
                extensions.startInline.push(ext.start);
            ***REMOVED*** else ***REMOVED***
                extensions.startInline = [ext.start];
            ***REMOVED***
          ***REMOVED***
        ***REMOVED***
      ***REMOVED***
        if (ext.childTokens) ***REMOVED***
          // Child tokens to be visited by walkTokens
          extensions.childTokens[ext.name] = ext.childTokens;
      ***REMOVED***
    ***REMOVED***);
      opts.extensions = extensions;
  ***REMOVED***

    // ==-- Parse "overwrite" extensions --== //
    if (pack.renderer) ***REMOVED***
      (function () ***REMOVED***
        var renderer = marked.defaults.renderer || new Renderer();
        var _loop = function _loop(prop) ***REMOVED***
          var prevRenderer = renderer[prop];
          // Replace renderer with func to run extension, but fall back if false
          renderer[prop] = function () ***REMOVED***
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) ***REMOVED***
              args[_key3] = arguments[_key3];
          ***REMOVED***
            var ret = pack.renderer[prop].apply(renderer, args);
            if (ret === false) ***REMOVED***
              ret = prevRenderer.apply(renderer, args);
          ***REMOVED***
            return ret;
        ***REMOVED***;
      ***REMOVED***;
        for (var prop in pack.renderer) ***REMOVED***
          _loop(prop);
      ***REMOVED***
        opts.renderer = renderer;
    ***REMOVED***)();
  ***REMOVED***
    if (pack.tokenizer) ***REMOVED***
      (function () ***REMOVED***
        var tokenizer = marked.defaults.tokenizer || new Tokenizer();
        var _loop2 = function _loop2(prop) ***REMOVED***
          var prevTokenizer = tokenizer[prop];
          // Replace tokenizer with func to run extension, but fall back if false
          tokenizer[prop] = function () ***REMOVED***
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) ***REMOVED***
              args[_key4] = arguments[_key4];
          ***REMOVED***
            var ret = pack.tokenizer[prop].apply(tokenizer, args);
            if (ret === false) ***REMOVED***
              ret = prevTokenizer.apply(tokenizer, args);
          ***REMOVED***
            return ret;
        ***REMOVED***;
      ***REMOVED***;
        for (var prop in pack.tokenizer) ***REMOVED***
          _loop2(prop);
      ***REMOVED***
        opts.tokenizer = tokenizer;
    ***REMOVED***)();
  ***REMOVED***

    // ==-- Parse WalkTokens extensions --== //
    if (pack.walkTokens) ***REMOVED***
      var _walkTokens = marked.defaults.walkTokens;
      opts.walkTokens = function (token) ***REMOVED***
        var values = [];
        values.push(pack.walkTokens.call(this, token));
        if (_walkTokens) ***REMOVED***
          values = values.concat(_walkTokens.call(this, token));
      ***REMOVED***
        return values;
    ***REMOVED***;
  ***REMOVED***
    marked.setOptions(opts);
***REMOVED***);
};

/**
 * Run callback for every token
 */

marked.walkTokens = function (tokens, callback) ***REMOVED***
  var values = [];
  var _loop3 = function _loop3() ***REMOVED***
    var token = _step.value;
    values = values.concat(callback.call(marked, token));
    switch (token.type) ***REMOVED***
      case 'table':
        ***REMOVED***
          for (var _iterator2 = _createForOfIteratorHelperLoose(token.header), _step2; !(_step2 = _iterator2()).done;) ***REMOVED***
            var cell = _step2.value;
            values = values.concat(marked.walkTokens(cell.tokens, callback));
        ***REMOVED***
          for (var _iterator3 = _createForOfIteratorHelperLoose(token.rows), _step3; !(_step3 = _iterator3()).done;) ***REMOVED***
            var row = _step3.value;
            for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) ***REMOVED***
              var _cell = _step4.value;
              values = values.concat(marked.walkTokens(_cell.tokens, callback));
          ***REMOVED***
        ***REMOVED***
          break;
      ***REMOVED***
      case 'list':
        ***REMOVED***
          values = values.concat(marked.walkTokens(token.items, callback));
          break;
      ***REMOVED***
      default:
        ***REMOVED***
          if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) ***REMOVED***
            // Walk any extensions
            marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) ***REMOVED***
              values = values.concat(marked.walkTokens(token[childTokens], callback));
          ***REMOVED***);
        ***REMOVED*** else if (token.tokens) ***REMOVED***
            values = values.concat(marked.walkTokens(token.tokens, callback));
        ***REMOVED***
      ***REMOVED***
  ***REMOVED***
***REMOVED***;
  for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) ***REMOVED***
    _loop3();
***REMOVED***
  return values;
};

/**
 * Parse Inline
 * @param ***REMOVED***string} src
 */
marked.parseInline = function (src, opt) ***REMOVED***
  // throw error in case of non string input
  if (typeof src === 'undefined' || src === null) ***REMOVED***
    throw new Error('marked.parseInline(): input parameter is undefined or null');
***REMOVED***
  if (typeof src !== 'string') ***REMOVED***
    throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
***REMOVED***
  opt = merge(***REMOVED***}, marked.defaults, opt || ***REMOVED***});
  checkSanitizeDeprecation(opt);
  try ***REMOVED***
    var tokens = Lexer.lexInline(src, opt);
    if (opt.walkTokens) ***REMOVED***
      marked.walkTokens(tokens, opt.walkTokens);
  ***REMOVED***
    return Parser.parseInline(tokens, opt);
***REMOVED*** catch (e) ***REMOVED***
    e.message += '\nPlease report this to https://github.com/markedjs/marked.';
    if (opt.silent) ***REMOVED***
      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';
  ***REMOVED***
    throw e;
***REMOVED***
};

/**
 * Expose
 */
marked.Parser = Parser;
marked.parser = Parser.parse;
marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;
marked.Lexer = Lexer;
marked.lexer = Lexer.lex;
marked.Tokenizer = Tokenizer;
marked.Slugger = Slugger;
marked.parse = marked;
var options = marked.options;
var setOptions = marked.setOptions;
var use = marked.use;
var walkTokens = marked.walkTokens;
var parseInline = marked.parseInline;
var parse = marked;
var parser = Parser.parse;
var lexer = Lexer.lex;

exports.Lexer = Lexer;
exports.Parser = Parser;
exports.Renderer = Renderer;
exports.Slugger = Slugger;
exports.TextRenderer = TextRenderer;
exports.Tokenizer = Tokenizer;
exports.getDefaults = getDefaults;
exports.lexer = lexer;
exports.marked = marked;
exports.options = options;
exports.parse = parse;
exports.parseInline = parseInline;
exports.parser = parser;
exports.setOptions = setOptions;
exports.use = use;
exports.walkTokens = walkTokens;
