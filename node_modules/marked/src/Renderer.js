import ***REMOVED*** defaults } from './defaults.js';
import ***REMOVED***
  cleanUrl,
  escape
} from './helpers.js';

/**
 * Renderer
 */
export class Renderer ***REMOVED***
  constructor(options) ***REMOVED***
    this.options = options || defaults;
***REMOVED***

  code(code, infostring, escaped) ***REMOVED***
    const lang = (infostring || '').match(/\S*/)[0];
    if (this.options.highlight) ***REMOVED***
      const out = this.options.highlight(code, lang);
      if (out != null && out !== code) ***REMOVED***
        escaped = true;
        code = out;
    ***REMOVED***
  ***REMOVED***

    code = code.replace(/\n$/, '') + '\n';

    if (!lang) ***REMOVED***
      return '<pre><code>'
        + (escaped ? code : escape(code, true))
        + '</code></pre>\n';
  ***REMOVED***

    return '<pre><code class="'
      + this.options.langPrefix
      + escape(lang)
      + '">'
      + (escaped ? code : escape(code, true))
      + '</code></pre>\n';
***REMOVED***

  /**
   * @param ***REMOVED***string} quote
   */
  blockquote(quote) ***REMOVED***
    return `<blockquote>\n$***REMOVED***quote}</blockquote>\n`;
***REMOVED***

  html(html) ***REMOVED***
    return html;
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   * @param ***REMOVED***string} level
   * @param ***REMOVED***string} raw
   * @param ***REMOVED***any} slugger
   */
  heading(text, level, raw, slugger) ***REMOVED***
    if (this.options.headerIds) ***REMOVED***
      const id = this.options.headerPrefix + slugger.slug(raw);
      return `<h$***REMOVED***level} id="$***REMOVED***id}">$***REMOVED***text}</h$***REMOVED***level}>\n`;
  ***REMOVED***

    // ignore IDs
    return `<h$***REMOVED***level}>$***REMOVED***text}</h$***REMOVED***level}>\n`;
***REMOVED***

  hr() ***REMOVED***
    return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
***REMOVED***

  list(body, ordered, start) ***REMOVED***
    const type = ordered ? 'ol' : 'ul',
      startatt = (ordered && start !== 1) ? (' start="' + start + '"') : '';
    return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   */
  listitem(text) ***REMOVED***
    return `<li>$***REMOVED***text}</li>\n`;
***REMOVED***

  checkbox(checked) ***REMOVED***
    return '<input '
      + (checked ? 'checked="" ' : '')
      + 'disabled="" type="checkbox"'
      + (this.options.xhtml ? ' /' : '')
      + '> ';
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   */
  paragraph(text) ***REMOVED***
    return `<p>$***REMOVED***text}</p>\n`;
***REMOVED***

  /**
   * @param ***REMOVED***string} header
   * @param ***REMOVED***string} body
   */
  table(header, body) ***REMOVED***
    if (body) body = `<tbody>$***REMOVED***body}</tbody>`;

    return '<table>\n'
      + '<thead>\n'
      + header
      + '</thead>\n'
      + body
      + '</table>\n';
***REMOVED***

  /**
   * @param ***REMOVED***string} content
   */
  tablerow(content) ***REMOVED***
    return `<tr>\n$***REMOVED***content}</tr>\n`;
***REMOVED***

  tablecell(content, flags) ***REMOVED***
    const type = flags.header ? 'th' : 'td';
    const tag = flags.align
      ? `<$***REMOVED***type} align="$***REMOVED***flags.align}">`
      : `<$***REMOVED***type}>`;
    return tag + content + `</$***REMOVED***type}>\n`;
***REMOVED***

  /**
   * span level renderer
   * @param ***REMOVED***string} text
   */
  strong(text) ***REMOVED***
    return `<strong>$***REMOVED***text}</strong>`;
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   */
  em(text) ***REMOVED***
    return `<em>$***REMOVED***text}</em>`;
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   */
  codespan(text) ***REMOVED***
    return `<code>$***REMOVED***text}</code>`;
***REMOVED***

  br() ***REMOVED***
    return this.options.xhtml ? '<br/>' : '<br>';
***REMOVED***

  /**
   * @param ***REMOVED***string} text
   */
  del(text) ***REMOVED***
    return `<del>$***REMOVED***text}</del>`;
***REMOVED***

  /**
   * @param ***REMOVED***string} href
   * @param ***REMOVED***string} title
   * @param ***REMOVED***string} text
   */
  link(href, title, text) ***REMOVED***
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) ***REMOVED***
      return text;
  ***REMOVED***
    let out = '<a href="' + href + '"';
    if (title) ***REMOVED***
      out += ' title="' + title + '"';
  ***REMOVED***
    out += '>' + text + '</a>';
    return out;
***REMOVED***

  /**
   * @param ***REMOVED***string} href
   * @param ***REMOVED***string} title
   * @param ***REMOVED***string} text
   */
  image(href, title, text) ***REMOVED***
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);
    if (href === null) ***REMOVED***
      return text;
  ***REMOVED***

    let out = `<img src="$***REMOVED***href}" alt="$***REMOVED***text}"`;
    if (title) ***REMOVED***
      out += ` title="$***REMOVED***title}"`;
  ***REMOVED***
    out += this.options.xhtml ? '/>' : '>';
    return out;
***REMOVED***

  text(text) ***REMOVED***
    return text;
***REMOVED***
}
