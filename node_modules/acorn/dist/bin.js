'use strict';

var path = require('path');
var fs = require('fs');
var acorn = require('./acorn.js');

function _interopNamespace(e) ***REMOVED***
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) ***REMOVED***
    Object.keys(e).forEach(function (k) ***REMOVED***
      if (k !== 'default') ***REMOVED***
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : ***REMOVED***
          enumerable: true,
          get: function () ***REMOVED*** return e[k]; }
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED***);
***REMOVED***
  n["default"] = e;
  return Object.freeze(n);
}

var acorn__namespace = /*#__PURE__*/_interopNamespace(acorn);

var inputFilePaths = [], forceFileName = false, fileMode = false, silent = false, compact = false, tokenize = false;
var options = ***REMOVED***};

function help(status) ***REMOVED***
  var print = (status === 0) ? console.log : console.error;
  print("usage: " + path.basename(process.argv[1]) + " [--ecma3|--ecma5|--ecma6|--ecma7|--ecma8|--ecma9|...|--ecma2015|--ecma2016|--ecma2017|--ecma2018|...]");
  print("        [--tokenize] [--locations] [--allow-hash-bang] [--allow-await-outside-function] [--compact] [--silent] [--module] [--help] [--] [<infile>...]");
  process.exit(status);
}

for (var i = 2; i < process.argv.length; ++i) ***REMOVED***
  var arg = process.argv[i];
  if (arg[0] !== "-" || arg === "-") ***REMOVED*** inputFilePaths.push(arg); }
  else if (arg === "--") ***REMOVED***
    inputFilePaths.push.apply(inputFilePaths, process.argv.slice(i + 1));
    forceFileName = true;
    break
***REMOVED*** else if (arg === "--locations") ***REMOVED*** options.locations = true; }
  else if (arg === "--allow-hash-bang") ***REMOVED*** options.allowHashBang = true; }
  else if (arg === "--allow-await-outside-function") ***REMOVED*** options.allowAwaitOutsideFunction = true; }
  else if (arg === "--silent") ***REMOVED*** silent = true; }
  else if (arg === "--compact") ***REMOVED*** compact = true; }
  else if (arg === "--help") ***REMOVED*** help(0); }
  else if (arg === "--tokenize") ***REMOVED*** tokenize = true; }
  else if (arg === "--module") ***REMOVED*** options.sourceType = "module"; }
  else ***REMOVED***
    var match = arg.match(/^--ecma(\d+)$/);
    if (match)
      ***REMOVED*** options.ecmaVersion = +match[1]; }
    else
      ***REMOVED*** help(1); }
***REMOVED***
}

function run(codeList) ***REMOVED***
  var result = [], fileIdx = 0;
  try ***REMOVED***
    codeList.forEach(function (code, idx) ***REMOVED***
      fileIdx = idx;
      if (!tokenize) ***REMOVED***
        result = acorn__namespace.parse(code, options);
        options.program = result;
    ***REMOVED*** else ***REMOVED***
        var tokenizer = acorn__namespace.tokenizer(code, options), token;
        do ***REMOVED***
          token = tokenizer.getToken();
          result.push(token);
      ***REMOVED*** while (token.type !== acorn__namespace.tokTypes.eof)
    ***REMOVED***
  ***REMOVED***);
***REMOVED*** catch (e) ***REMOVED***
    console.error(fileMode ? e.message.replace(/\(\d+:\d+\)$/, function (m) ***REMOVED*** return m.slice(0, 1) + inputFilePaths[fileIdx] + " " + m.slice(1); }) : e.message);
    process.exit(1);
***REMOVED***
  if (!silent) ***REMOVED*** console.log(JSON.stringify(result, null, compact ? null : 2)); }
}

if (fileMode = inputFilePaths.length && (forceFileName || !inputFilePaths.includes("-") || inputFilePaths.length !== 1)) ***REMOVED***
  run(inputFilePaths.map(function (path) ***REMOVED*** return fs.readFileSync(path, "utf8"); }));
} else ***REMOVED***
  var code = "";
  process.stdin.resume();
  process.stdin.on("data", function (chunk) ***REMOVED*** return code += chunk; });
  process.stdin.on("end", function () ***REMOVED*** return run([code]); });
}
