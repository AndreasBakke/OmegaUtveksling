"use strict";
/**
 * Copyright (C) 2016-2020 Michael Kourlas
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.WrapHandlers = exports.TypeHandlers = exports.FormatOptions = exports.DtdOptions = exports.DeclarationOptions = exports.Options = void 0;
var utils_1 = require("./utils");
/**
 * Implementation of the IOptions interface used to provide default values
 * to fields.
 */
var Options = /** @class */ (function () ***REMOVED***
    function Options(options) ***REMOVED***
        if (options === void 0) ***REMOVED*** options = ***REMOVED***}; }
        this.aliasString = "=";
        this.attributeString = "@";
        this.cdataInvalidChars = false;
        this.cdataKeys = [];
        this.replaceInvalidChars = false;
        this.useSelfClosingTagIfEmpty = true;
        this.validation = true;
        this.valueString = "#";
        if (!(0, utils_1.isUndefined)(options.validation)) ***REMOVED***
            this.validation = options.validation;
      ***REMOVED***
        if (!(0, utils_1.isUndefined)(options.aliasString)) ***REMOVED***
            this.aliasString = options.aliasString;
      ***REMOVED***
        if (!(0, utils_1.isUndefined)(options.attributeString)) ***REMOVED***
            this.attributeString = options.attributeString;
      ***REMOVED***
        if (!(0, utils_1.isUndefined)(options.cdataInvalidChars)) ***REMOVED***
            this.cdataInvalidChars = options.cdataInvalidChars;
      ***REMOVED***
        if (!(0, utils_1.isUndefined)(options.cdataKeys)) ***REMOVED***
            this.cdataKeys = options.cdataKeys;
      ***REMOVED***
        this.declaration = new DeclarationOptions(options.declaration);
        this.dtd = new DtdOptions(this.validation, options.dtd);
        this.format = new FormatOptions(options.format);
        if (!(0, utils_1.isUndefined)(options.replaceInvalidChars)) ***REMOVED***
            this.replaceInvalidChars = options.replaceInvalidChars;
      ***REMOVED***
        this.typeHandlers = new TypeHandlers(options.typeHandlers);
        if (!(0, utils_1.isUndefined)(options.useSelfClosingTagIfEmpty)) ***REMOVED***
            this.useSelfClosingTagIfEmpty = options.useSelfClosingTagIfEmpty;
      ***REMOVED***
        if (!(0, utils_1.isUndefined)(options.valueString)) ***REMOVED***
            this.valueString = options.valueString;
      ***REMOVED***
        this.wrapHandlers = new WrapHandlers(options.wrapHandlers);
  ***REMOVED***
    return Options;
}());
exports.Options = Options;
/**
 * Implementation of the IDeclarationOptions interface used to provide default
 * values to fields.
 */
var DeclarationOptions = /** @class */ (function () ***REMOVED***
    function DeclarationOptions(declarationOptions) ***REMOVED***
        if (declarationOptions === void 0) ***REMOVED*** declarationOptions = ***REMOVED***}; }
        this.include = true;
        if (!(0, utils_1.isUndefined)(declarationOptions.include)) ***REMOVED***
            this.include = declarationOptions.include;
      ***REMOVED***
        // Validation performed by xmlcreate
        this.encoding = declarationOptions.encoding;
        this.standalone = declarationOptions.standalone;
        this.version = declarationOptions.version;
  ***REMOVED***
    return DeclarationOptions;
}());
exports.DeclarationOptions = DeclarationOptions;
/**
 * Implementation of the IDtdOptions interface used to provide default values
 * to fields.
 */
var DtdOptions = /** @class */ (function () ***REMOVED***
    function DtdOptions(validation, dtdOptions) ***REMOVED***
        if (dtdOptions === void 0) ***REMOVED*** dtdOptions = ***REMOVED***}; }
        this.include = false;
        if (!(0, utils_1.isUndefined)(dtdOptions.include)) ***REMOVED***
            this.include = dtdOptions.include;
      ***REMOVED***
        if (validation && (0, utils_1.isUndefined)(dtdOptions.name) && this.include) ***REMOVED***
            throw new Error("options.dtd.name should be defined if" +
                " options.dtd.include is true");
      ***REMOVED***
        this.name = dtdOptions.name;
        this.sysId = dtdOptions.sysId;
        this.pubId = dtdOptions.pubId;
  ***REMOVED***
    return DtdOptions;
}());
exports.DtdOptions = DtdOptions;
/**
 * Implementation of the IFormatOptions interface used to provide default values
 * to fields.
 */
var FormatOptions = /** @class */ (function () ***REMOVED***
    function FormatOptions(formatOptions) ***REMOVED***
        if (formatOptions === void 0) ***REMOVED*** formatOptions = ***REMOVED***}; }
        this.doubleQuotes = formatOptions.doubleQuotes;
        this.indent = formatOptions.indent;
        this.newline = formatOptions.newline;
        this.pretty = formatOptions.pretty;
  ***REMOVED***
    return FormatOptions;
}());
exports.FormatOptions = FormatOptions;
/**
 * Implementation of the ITypeHandlers interface used to provide default values
 * to fields.
 */
var TypeHandlers = /** @class */ (function () ***REMOVED***
    function TypeHandlers(typeHandlers) ***REMOVED***
        if (typeHandlers === void 0) ***REMOVED*** typeHandlers = ***REMOVED***}; }
        for (var key in typeHandlers) ***REMOVED***
            if (Object.prototype.hasOwnProperty.call(typeHandlers, key)) ***REMOVED***
                this[key] = typeHandlers[key];
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    return TypeHandlers;
}());
exports.TypeHandlers = TypeHandlers;
/**
 * Implementation of the IWrapHandlers interface used to provide default values
 * to fields.
 */
var WrapHandlers = /** @class */ (function () ***REMOVED***
    function WrapHandlers(wrapHandlers) ***REMOVED***
        if (wrapHandlers === void 0) ***REMOVED*** wrapHandlers = ***REMOVED***}; }
        for (var key in wrapHandlers) ***REMOVED***
            if (Object.prototype.hasOwnProperty.call(wrapHandlers, key)) ***REMOVED***
                this[key] = wrapHandlers[key];
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    return WrapHandlers;
}());
exports.WrapHandlers = WrapHandlers;
