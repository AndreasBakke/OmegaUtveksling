// Process ![image](<src> "title")

'use strict';

var normalizeReference   = require('../common/utils').normalizeReference;
var isSpace              = require('../common/utils').isSpace;


module.exports = function image(state, silent) ***REMOVED***
  var attrs,
      code,
      content,
      label,
      labelEnd,
      labelStart,
      pos,
      ref,
      res,
      title,
      token,
      tokens,
      start,
      href = '',
      oldPos = state.pos,
      max = state.posMax;

  if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) ***REMOVED*** return false; }
  if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) ***REMOVED*** return false; }

  labelStart = state.pos + 2;
  labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);

  // parser failed to find ']', so it's not a valid link
  if (labelEnd < 0) ***REMOVED*** return false; }

  pos = labelEnd + 1;
  if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) ***REMOVED***
    //
    // Inline link
    //

    // [link](  <href>  "title"  )
    //        ^^ skipping these spaces
    pos++;
    for (; pos < max; pos++) ***REMOVED***
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) ***REMOVED*** break; }
  ***REMOVED***
    if (pos >= max) ***REMOVED*** return false; }

    // [link](  <href>  "title"  )
    //          ^^^^^^ parsing link destination
    start = pos;
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
    if (res.ok) ***REMOVED***
      href = state.md.normalizeLink(res.str);
      if (state.md.validateLink(href)) ***REMOVED***
        pos = res.pos;
    ***REMOVED*** else ***REMOVED***
        href = '';
    ***REMOVED***
  ***REMOVED***

    // [link](  <href>  "title"  )
    //                ^^ skipping these spaces
    start = pos;
    for (; pos < max; pos++) ***REMOVED***
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) ***REMOVED*** break; }
  ***REMOVED***

    // [link](  <href>  "title"  )
    //                  ^^^^^^^ parsing link title
    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
    if (pos < max && start !== pos && res.ok) ***REMOVED***
      title = res.str;
      pos = res.pos;

      // [link](  <href>  "title"  )
      //                         ^^ skipping these spaces
      for (; pos < max; pos++) ***REMOVED***
        code = state.src.charCodeAt(pos);
        if (!isSpace(code) && code !== 0x0A) ***REMOVED*** break; }
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
      title = '';
  ***REMOVED***

    if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) ***REMOVED***
      state.pos = oldPos;
      return false;
  ***REMOVED***
    pos++;
***REMOVED*** else ***REMOVED***
    //
    // Link reference
    //
    if (typeof state.env.references === 'undefined') ***REMOVED*** return false; }

    if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) ***REMOVED***
      start = pos + 1;
      pos = state.md.helpers.parseLinkLabel(state, pos);
      if (pos >= 0) ***REMOVED***
        label = state.src.slice(start, pos++);
    ***REMOVED*** else ***REMOVED***
        pos = labelEnd + 1;
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
      pos = labelEnd + 1;
  ***REMOVED***

    // covers label === '' and label === undefined
    // (collapsed reference link and shortcut reference link respectively)
    if (!label) ***REMOVED*** label = state.src.slice(labelStart, labelEnd); }

    ref = state.env.references[normalizeReference(label)];
    if (!ref) ***REMOVED***
      state.pos = oldPos;
      return false;
  ***REMOVED***
    href = ref.href;
    title = ref.title;
***REMOVED***

  //
  // We found the end of the link, and know for a fact it's a valid link;
  // so all that's left to do is to call tokenizer.
  //
  if (!silent) ***REMOVED***
    content = state.src.slice(labelStart, labelEnd);

    state.md.inline.parse(
      content,
      state.md,
      state.env,
      tokens = []
    );

    token          = state.push('image', 'img', 0);
    token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];
    token.children = tokens;
    token.content  = content;

    if (title) ***REMOVED***
      attrs.push([ 'title', title ]);
  ***REMOVED***
***REMOVED***

  state.pos = pos;
  state.posMax = max;
  return true;
};
