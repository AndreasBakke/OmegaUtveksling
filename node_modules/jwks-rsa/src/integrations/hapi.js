const ***REMOVED*** ArgumentError } = require('../errors');
const ***REMOVED*** JwksClient } = require('../JwksClient');
const supportedAlg = require('./config');

const handleSigningKeyError = (err, cb) => ***REMOVED***
  // If we didn't find a match, can't provide a key.
  if (err && err.name === 'SigningKeyNotFoundError') ***REMOVED***
    return cb(err, null, null);
***REMOVED***

  // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.
  if (err) ***REMOVED***
    return cb(err, null, null);
***REMOVED***
};

/**
 * Call hapiJwt2Key as a Promise
 * @param ***REMOVED***object} options 
 * @returns ***REMOVED***Promise}
 */
module.exports.hapiJwt2KeyAsync = (options) => ***REMOVED***
  const secretProvider = module.exports.hapiJwt2Key(options);
  return function(decoded) ***REMOVED***
    return new Promise((resolve, reject) => ***REMOVED***
      const cb = (err, key) => ***REMOVED***
        (!key || err) ? reject(err) : resolve(***REMOVED*** key });
    ***REMOVED***;
      secretProvider(decoded, cb);
  ***REMOVED***);
***REMOVED***;
}; 

module.exports.hapiJwt2Key = function (options) ***REMOVED***
  if (options === null || options === undefined) ***REMOVED***
    throw new ArgumentError('An options object must be provided when initializing hapiJwt2Key');
***REMOVED***

  const client = new JwksClient(options);
  const onError = options.handleSigningKeyError || handleSigningKeyError;

  return function secretProvider(decoded, cb) ***REMOVED***
    // We cannot find a signing certificate if there is no header (no kid).
    if (!decoded || !decoded.header) ***REMOVED***
      return cb(new Error('Cannot find a signing certificate if there is no header'), null, null);
  ***REMOVED***

    if (!supportedAlg.includes(decoded.header.alg)) ***REMOVED***
      return cb(new Error('Unsupported algorithm ' + decoded.header.alg + ' supplied.'), null, null);
  ***REMOVED***

    client.getSigningKey(decoded.header.kid)
      .then(key => ***REMOVED***
        return cb(null, key.publicKey || key.rsaPublicKey, key);
    ***REMOVED***).catch(err => ***REMOVED***
        return onError(err, (newError) => cb(newError, null, null));
    ***REMOVED***);
***REMOVED***;
};
