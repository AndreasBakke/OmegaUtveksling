const jose = require('jose');
const ***REMOVED*** ArgumentError } = require('../errors');
const ***REMOVED*** JwksClient } = require('../JwksClient');
const supportedAlg = require('./config');

const handleSigningKeyError = (err, cb) => ***REMOVED***
  // If we didn't find a match, can't provide a key.
  if (err && err.name === 'SigningKeyNotFoundError') ***REMOVED***
    return cb(null);
***REMOVED***

  // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.
  if (err) ***REMOVED***
    return cb(err);
***REMOVED***
};

module.exports.passportJwtSecret = function (options) ***REMOVED***
  if (options === null || options === undefined) ***REMOVED***
    throw new ArgumentError('An options object must be provided when initializing passportJwtSecret');
***REMOVED***

  if (!options.jwksUri) ***REMOVED***
    throw new ArgumentError('No JWKS provided. Please provide a jwksUri');
***REMOVED***

  const client = new JwksClient(options);
  const onError = options.handleSigningKeyError || handleSigningKeyError;

  return function secretProvider(req, rawJwtToken, cb) ***REMOVED***
    let decoded;
    try ***REMOVED***
      decoded = ***REMOVED***
        payload: jose.decodeJwt(rawJwtToken),
        header: jose.decodeProtectedHeader(rawJwtToken)
    ***REMOVED***;
  ***REMOVED*** catch (err) ***REMOVED***
      decoded = null;
  ***REMOVED***

    if (!decoded || !supportedAlg.includes(decoded.header.alg)) ***REMOVED***
      return cb(null, null);
  ***REMOVED***

    client.getSigningKey(decoded.header.kid)
      .then(key => ***REMOVED***
        cb(null, key.publicKey || key.rsaPublicKey);
    ***REMOVED***).catch(err => ***REMOVED***
        onError(err, (newError) => cb(newError, null));
    ***REMOVED***);
***REMOVED***;
};
