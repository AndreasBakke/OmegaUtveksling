const logger = require('debug')('jwks');
const ***REMOVED*** RateLimiter } = require('limiter');

const JwksRateLimitError = require('../errors/JwksRateLimitError');

function rateLimitWrapper(client, ***REMOVED*** jwksRequestsPerMinute = 10 }) ***REMOVED***
  const getSigningKey = client.getSigningKey.bind(client);

  const limiter = new RateLimiter(jwksRequestsPerMinute, 'minute', true);
  logger(`Configured rate limiting to JWKS endpoint at $***REMOVED***jwksRequestsPerMinute}/minute`);

  return async (kid) => await new Promise((resolve, reject) => ***REMOVED***
    limiter.removeTokens(1, async (err, remaining) => ***REMOVED***
      if (err) ***REMOVED***
        reject(err);
    ***REMOVED***

      logger('Requests to the JWKS endpoint available for the next minute:', remaining);
      if (remaining < 0) ***REMOVED***
        logger('Too many requests to the JWKS endpoint');
        reject(new JwksRateLimitError('Too many requests to the JWKS endpoint'));
    ***REMOVED*** else ***REMOVED***
        try ***REMOVED***
          const key = await getSigningKey(kid);
          resolve(key);
      ***REMOVED*** catch (error) ***REMOVED***
          reject(error);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***);
***REMOVED***);
}

module.exports.default = rateLimitWrapper;
