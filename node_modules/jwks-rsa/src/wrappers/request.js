const http = require('http');
const https = require('https');
const urlUtil = require('url');

module.exports.default =  (options) => ***REMOVED***
  if (options.fetcher) ***REMOVED***
    return options.fetcher(options.uri);
***REMOVED***

  return new Promise((resolve, reject) => ***REMOVED***
    const ***REMOVED***
      hostname,
      path,
      port,
      protocol
  ***REMOVED*** = urlUtil.parse(options.uri);

    const requestOptions = ***REMOVED***
      hostname,
      path,
      port,
      method: 'GET',
      ...(options.headers && ***REMOVED*** headers: ***REMOVED*** ...options.headers } }),
      ...(options.timeout && ***REMOVED*** timeout: options.timeout }),
      ...(options.agent && ***REMOVED*** agent: options.agent })
  ***REMOVED***;

    const httpRequestLib = protocol === 'https:' ? https : http;
    const httpRequest = httpRequestLib.request(requestOptions, (res) => ***REMOVED***
      let rawData = '';
      res.setEncoding('utf8');
      res.on('data', (chunk) => ***REMOVED*** rawData += chunk; });
      res.on('end', () => ***REMOVED***
        if (res.statusCode < 200 || res.statusCode >= 300) ***REMOVED***
          const errorMsg = res.body && (res.body.message || res.body) || res.statusMessage || `Http Error $***REMOVED***res.statusCode}`;
          reject(***REMOVED*** errorMsg });
      ***REMOVED*** else ***REMOVED***
          try ***REMOVED***
            resolve(rawData && JSON.parse(rawData));
        ***REMOVED*** catch (error) ***REMOVED***
            reject(error);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***);

    httpRequest
      .on('timeout', () => httpRequest.destroy())
      .on('error', (e) => reject(e))
      .end();
***REMOVED***);
};
