const jose = require('jose');
const crypto = require('crypto');

async function retrieveSigningKeys(jwks) ***REMOVED***
  const results = [];

  jwks = jwks
    .filter((***REMOVED*** use }) => use === 'sig' || use === undefined)
    .filter((***REMOVED*** kty }) => kty === 'RSA' || kty === 'EC' || kty === 'OKP');

  for (const jwk of jwks) ***REMOVED***
    try ***REMOVED***
      // The algorithm is actually not used in the Node.js KeyObject-based runtime
      // passing an arbitrary value here and checking that KeyObject was returned
      // later
      const keyObject = await jose.importJWK(jwk, 'RS256');
      if (!(keyObject instanceof crypto.KeyObject) || keyObject.type !== 'public') ***REMOVED***
        continue;
    ***REMOVED***
      const getSpki = () => keyObject.export(***REMOVED*** format: 'pem', type: 'spki' });
      results.push(***REMOVED***
        get publicKey() ***REMOVED*** return getSpki(); },
        get rsaPublicKey() ***REMOVED*** return getSpki(); },
        getPublicKey() ***REMOVED*** return getSpki(); },
        ...(typeof jwk.kid === 'string' && jwk.kid ? ***REMOVED*** kid: jwk.kid } : undefined),
        ...(typeof jwk.alg === 'string' && jwk.alg ? ***REMOVED*** alg: jwk.alg } : undefined)
    ***REMOVED***);
  ***REMOVED*** catch (err) ***REMOVED***
      continue;
  ***REMOVED***
***REMOVED***

  return results;
}

module.exports = ***REMOVED***
  retrieveSigningKeys
};
