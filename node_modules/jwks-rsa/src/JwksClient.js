const logger = require('debug')('jwks');
const ***REMOVED*** retrieveSigningKeys } = require('./utils') ;
const ***REMOVED*** request, cacheSigningKey, rateLimitSigningKey, getKeysInterceptor, callbackSupport } = require('./wrappers');
const JwksError = require('./errors/JwksError');
const SigningKeyNotFoundError = require('./errors/SigningKeyNotFoundError');

class JwksClient ***REMOVED***
  constructor(options) ***REMOVED***
    this.options = ***REMOVED***
      rateLimit: false,
      cache: true,
      timeout: 30000,
      ...options
  ***REMOVED***;

    // Initialize wrappers.
    if (this.options.getKeysInterceptor) ***REMOVED***
      this.getSigningKey = getKeysInterceptor(this, options);
  ***REMOVED***

    if (this.options.rateLimit) ***REMOVED***
      this.getSigningKey = rateLimitSigningKey(this, options);
  ***REMOVED***
    if (this.options.cache) ***REMOVED***
      this.getSigningKey = cacheSigningKey(this, options);
  ***REMOVED***

    this.getSigningKey = callbackSupport(this, options);
***REMOVED***

  async getKeys() ***REMOVED***
    logger(`Fetching keys from '$***REMOVED***this.options.jwksUri}'`);

    try ***REMOVED***
      const res = await request(***REMOVED***
        uri: this.options.jwksUri,
        headers: this.options.requestHeaders,
        agent: this.options.requestAgent,
        timeout: this.options.timeout,
        fetcher: this.options.fetcher
    ***REMOVED***);

      logger('Keys:', res.keys);
      return res.keys;
  ***REMOVED*** catch (err) ***REMOVED***
      const ***REMOVED*** errorMsg } = err;
      logger('Failure:', errorMsg || err);
      throw (errorMsg ? new JwksError(errorMsg) : err);
  ***REMOVED***
***REMOVED***

  async getSigningKeys() ***REMOVED***
    const keys = await this.getKeys();

    if (!keys || !keys.length) ***REMOVED***
      throw new JwksError('The JWKS endpoint did not contain any keys');
  ***REMOVED***

    const signingKeys = await retrieveSigningKeys(keys);

    if (!signingKeys.length) ***REMOVED***
      throw new JwksError('The JWKS endpoint did not contain any signing keys');
  ***REMOVED***

    logger('Signing Keys:', signingKeys);
    return signingKeys;
***REMOVED***

  async getSigningKey (kid) ***REMOVED***
    logger(`Fetching signing key for '$***REMOVED***kid}'`);
    const keys = await this.getSigningKeys();

    const kidDefined = kid !== undefined && kid !== null;
    if (!kidDefined && keys.length > 1) ***REMOVED***
      logger('No KID specified and JWKS endpoint returned more than 1 key');
      throw new SigningKeyNotFoundError('No KID specified and JWKS endpoint returned more than 1 key');
  ***REMOVED***

    const key = keys.find(k => !kidDefined || k.kid === kid);
    if (key) ***REMOVED***
      return key;
  ***REMOVED*** else ***REMOVED***
      logger(`Unable to find a signing key that matches '$***REMOVED***kid}'`);
      throw new SigningKeyNotFoundError(`Unable to find a signing key that matches '$***REMOVED***kid}'`);
  ***REMOVED***
***REMOVED***
}

module.exports = ***REMOVED***
  JwksClient
};
