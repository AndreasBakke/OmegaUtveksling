var memoizer = require('./..');
var assert = require('chai').assert;

describe('lru-memoizer (itemMaxAge)', function () ***REMOVED***
  var loadTimes = 0, memoized;

  beforeEach(function () ***REMOVED***
    loadTimes = 0;
***REMOVED***);

  it('should use default behavior if not configured', function (done) ***REMOVED***
    memoized = memoizer(***REMOVED***
      load: function (a, b, callback) ***REMOVED***
        loadTimes++;
        setTimeout(function () ***REMOVED***
          callback(null, a + b);
      ***REMOVED***, 100);
    ***REMOVED***,
      hash: function (a, b) ***REMOVED***
        return a + '-' + b;
    ***REMOVED***,
      max: 10,
      maxAge: 500
  ***REMOVED***);

    memoized(1,2, function (err, result) ***REMOVED***
      assert.isNull(err);
      assert.strictEqual(result, 3);
      assert.strictEqual(loadTimes, 1);

      // Not expired yet.
      setTimeout(function() ***REMOVED***
        memoized(1,2, function (err, result) ***REMOVED***
          assert.isNull(err);
          assert.strictEqual(result, 3);
          assert.strictEqual(loadTimes, 1);

          // Expired, load times will increase.
          setTimeout(function() ***REMOVED***
            memoized(1,2, function (err, result) ***REMOVED***
              assert.isNull(err);
              assert.strictEqual(result, 3);
              assert.strictEqual(loadTimes, 2);
              done();
          ***REMOVED***);
        ***REMOVED***, 200);
      ***REMOVED***);
    ***REMOVED***, 400);
  ***REMOVED***);
***REMOVED***);

  it('should return all args and the result in the itemMaxAge function', function (done) ***REMOVED***
    var args;
    memoized = memoizer(***REMOVED***
      load: function (a, b, callback) ***REMOVED***
        loadTimes++;
        setTimeout(function () ***REMOVED***
          callback(null, a + b);
      ***REMOVED***, 100);
    ***REMOVED***,
      itemMaxAge: function (a, b, result) ***REMOVED***
        args = arguments;
        return 1000;
    ***REMOVED***,
      hash: function (a, b) ***REMOVED***
        return a + '-' + b;
    ***REMOVED***,
      max: 10,
      maxAge: 600
  ***REMOVED***);

    memoized(1,2, function (err, result) ***REMOVED***
      assert.isNull(err);
      assert.strictEqual(args[0], 1);
      assert.strictEqual(args[1], 2);
      assert.strictEqual(args[2], 3);
      done();
  ***REMOVED***);
***REMOVED***);

  it('should overwrite the default behavior if configured', function (done) ***REMOVED***
    var maxAge = 0;
    var lastKey = null;
    memoized = memoizer(***REMOVED***
      load: function (a, b, callback) ***REMOVED***
        loadTimes++;
        setTimeout(function () ***REMOVED***
          callback(null, a + b);
      ***REMOVED***, 100);
    ***REMOVED***,
      itemMaxAge: function (a, b, result) ***REMOVED***
        lastKey = a + '-' + b;
        // In this test, we set the maxAge of the current item to (result*100).
        // If the result is 3, the max age of this item will be 300.
        maxAge = result * 100;
        return maxAge;
    ***REMOVED***,
      hash: function (a, b) ***REMOVED***
        return a + '-' + b;
    ***REMOVED***,
      max: 10,
      maxAge: 600
  ***REMOVED***);

    memoized(1,2, function (err, result) ***REMOVED***
      assert.isNull(err);
      assert.strictEqual(maxAge, 300);
      assert.strictEqual(lastKey, '1-2');
      assert.strictEqual(result, 3);
      assert.strictEqual(loadTimes, 1);

      // Not expired yet after 200 ms, because the expiration is 300
      setTimeout(function() ***REMOVED***
        memoized(1,2, function (err, result) ***REMOVED***
          assert.isNull(err);
          assert.strictEqual(maxAge, 300);
          assert.strictEqual(lastKey, '1-2');
          assert.strictEqual(result, 3);
          assert.strictEqual(loadTimes, 1);

          // Expired because now we are at 350 ms (even though gloabl expiration has been set to 600)
          setTimeout(function() ***REMOVED***
            memoized(1,2, function (err, result) ***REMOVED***
              assert.isNull(err);
              assert.strictEqual(maxAge, 300);
              assert.strictEqual(lastKey, '1-2');
              assert.strictEqual(result, 3);
              assert.strictEqual(loadTimes, 2);

              // Expired again, because 350ms have passed again.
              setTimeout(function() ***REMOVED***
                memoized(1,2, function (err, result) ***REMOVED***
                  assert.isNull(err);
                  assert.strictEqual(maxAge, 300);
                  assert.strictEqual(lastKey, '1-2');
                  assert.strictEqual(result, 3);
                  assert.strictEqual(loadTimes, 3);
                  done();
              ***REMOVED***);
            ***REMOVED***, 350);
          ***REMOVED***);
        ***REMOVED***, 150);
      ***REMOVED***);
    ***REMOVED***, 200);
  ***REMOVED***);
***REMOVED***);

  it('should overwrite the default behavior if configured (sync)', function (done) ***REMOVED***
    var maxAge = 0;
    var lastKey = null;
    memoized = memoizer.sync(***REMOVED***
      load: function (a, b) ***REMOVED***
        loadTimes++;
        return a + b;
    ***REMOVED***,
      itemMaxAge: function (a, b, result) ***REMOVED***
        lastKey = a + '-' + b;
        // In this test, we set the maxAge of the current item to (result*100).
        // If the result is 3, the max age of this item will be 300.
        maxAge = result * 100;
        return maxAge;
    ***REMOVED***,
      hash: function (a, b) ***REMOVED***
        return a + '-' + b;
    ***REMOVED***,
      max: 10,
      maxAge: 600
  ***REMOVED***);

    var result = memoized(1, 2);
    assert.strictEqual(maxAge, 300);
    assert.strictEqual(lastKey, '1-2');
    assert.strictEqual(result, 3);
    assert.strictEqual(loadTimes, 1);

    // Not expired yet after 200 ms, because the expiration is 300
    setTimeout(function() ***REMOVED***
      result = memoized(1, 2);
      assert.strictEqual(maxAge, 300);
      assert.strictEqual(lastKey, '1-2');
      assert.strictEqual(result, 3);
      assert.strictEqual(loadTimes, 1);

      // Expired because now we are at 350 ms (even though gloabl expiration has been set to 600)
      setTimeout(function() ***REMOVED***
        result = memoized(1,2);
        assert.strictEqual(maxAge, 300);
        assert.strictEqual(lastKey, '1-2');
        assert.strictEqual(result, 3);
        assert.strictEqual(loadTimes, 2);

          // Expired again, because 350ms have passed again.
          setTimeout(function() ***REMOVED***
            result = memoized(1,2);
            assert.strictEqual(maxAge, 300);
            assert.strictEqual(lastKey, '1-2');
            assert.strictEqual(result, 3);
            assert.strictEqual(loadTimes, 3);
            done();
        ***REMOVED***, 350);
    ***REMOVED***, 150);
  ***REMOVED***, 200);
***REMOVED***);
});
