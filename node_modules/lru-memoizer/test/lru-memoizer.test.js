var memoizer = require('./..');
var assert = require('chai').assert;

describe('lru-memoizer', function () ***REMOVED***
  var loadTimes = 0, memoized;

  beforeEach(function () ***REMOVED***
    loadTimes = 0;

    memoized = memoizer(***REMOVED***
      load: function (a, b, callback) ***REMOVED***
        loadTimes++;
        return setTimeout(function () ***REMOVED***
          if (a === 0) ***REMOVED***
            return callback(new Error('a cant be 0'));
        ***REMOVED***
          callback(null, a+b);
      ***REMOVED***, 10);
    ***REMOVED***,
      hash: function (a, b) ***REMOVED***
        return a + '-' + b;
    ***REMOVED***,
      max: 10
  ***REMOVED***);
***REMOVED***);

  it('should cache the result of an async function', function (done) ***REMOVED***
    memoized(1,2, function (err, result) ***REMOVED***
      assert.isNull(err);
      assert.strictEqual(result, 3);
      assert.strictEqual(loadTimes, 1);
      memoized(1,2, function (err, result) ***REMOVED***
        assert.isNull(err);
        assert.strictEqual(result, 3);
        assert.strictEqual(loadTimes, 1);
        done();
    ***REMOVED***);
  ***REMOVED***);

***REMOVED***);

  it('should use the hash function for keys', function (done) ***REMOVED***
    memoized(1, 2, function () ***REMOVED***
      memoized(2,3, function () ***REMOVED***
        assert.includeMembers(memoized.keys(), ['1-2', '2-3']);
        done();
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***);

  it('should not cache errored funcs', function (done) ***REMOVED***
    memoized(0, 2, function (err) ***REMOVED***
      assert.isNotNull(err);
      assert.notInclude(memoized.keys(), ['0-2']);
      done();
  ***REMOVED***);
***REMOVED***);

  it('should expose the hash function', function() ***REMOVED***
    assert.equal(memoized.hash(0, 2), '0-2');
***REMOVED***);

  it('should expose the load function', function(done) ***REMOVED***
    memoized.load(1, 2, (err, result) => ***REMOVED***
      assert.equal(result, 3);
      done();
  ***REMOVED***);
***REMOVED***);

  it('should expose the max prop', function() ***REMOVED***
    assert.equal(memoized.max, 10);
***REMOVED***);

  it('should allow to del a key', function(done) ***REMOVED***
    memoized(1,2, () => ***REMOVED***
      assert.strictEqual(loadTimes, 1);
      memoized.del(1,2);
      memoized(1,2, (err, result) => ***REMOVED***
        assert.isNull(err);
        assert.strictEqual(result, 3);
        assert.strictEqual(loadTimes, 2);
        done();
    ***REMOVED***);
  ***REMOVED***);
***REMOVED***);

});

