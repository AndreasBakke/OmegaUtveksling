var memoizer = require('./..');
var assert = require('chai').assert;

describe('lru-memoizer sync', function () ***REMOVED***
  var loadTimes = 0, memoized;

  beforeEach(function () ***REMOVED***
    loadTimes = 0;

    memoized = memoizer.sync(***REMOVED***
      load: function (a, b) ***REMOVED***
        loadTimes++;
        if (a === 0) ***REMOVED***
          throw new Error('a cant be 0');
      ***REMOVED***
        return a + b;
    ***REMOVED***,
      hash: function (a, b) ***REMOVED***
        return a + '-' + b;
    ***REMOVED***,
      max: 10
  ***REMOVED***);
***REMOVED***);

  it('should cache the result of an async function', function () ***REMOVED***
    var result = memoized(1, 2);
    assert.equal(result, 3);
    assert.equal(loadTimes, 1);

    var result2 = memoized(1,2);
    assert.equal(result2, 3);
    assert.equal(loadTimes, 1);
***REMOVED***);

  it('shuld use the hash function for keys', function () ***REMOVED***
    memoized(1, 2);
    memoized(2, 3);
    assert.includeMembers(memoized.keys(), ['1-2', '2-3']);
***REMOVED***);

  it('should not cache errored funcs', function () ***REMOVED***
    try ***REMOVED***
      memoized(0, 2);
  ***REMOVED*** catch(err) ***REMOVED***}
    assert.notInclude(memoized.keys(), ['0-2']);
***REMOVED***);
});