const memoizer = require('./..');
const assert = require('chai').assert;

describe('lru-memoizer (disabled)', function () ***REMOVED***
  var loadTimes = 0, memoized;

  beforeEach(function () ***REMOVED***
    loadTimes = 0;

    memoized = memoizer(***REMOVED***
      disable: true,
      load: function (a, b, callback) ***REMOVED***
        loadTimes++;
        return setTimeout(function () ***REMOVED***
          if (a === 0) ***REMOVED***
            return callback(new Error('a cant be 0'));
        ***REMOVED***
          callback(null, a+b);
      ***REMOVED***, 10);
    ***REMOVED***,
      hash: function (a, b) ***REMOVED***
        return a + '-' + b;
    ***REMOVED***,
      max: 10
  ***REMOVED***);
***REMOVED***);

  it('should call the load function every time', function (done) ***REMOVED***
    memoized(1,2, function (err, result) ***REMOVED***
      assert.isNull(err);
      assert.strictEqual(result, 3);
      assert.strictEqual(loadTimes, 1);
      memoized(1,2, function (err, result) ***REMOVED***
        assert.isNull(err);
        assert.strictEqual(result, 3);
        assert.strictEqual(loadTimes, 2);
        done();
    ***REMOVED***);
  ***REMOVED***);

***REMOVED***);


  it('should expose hash function', function() ***REMOVED***
    assert.equal(memoized.hash(1, 2), '1-2');
***REMOVED***);

});

