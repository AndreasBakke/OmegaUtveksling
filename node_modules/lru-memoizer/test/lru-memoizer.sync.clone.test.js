const memoizer = require('./..');
const assert = require('chai').assert;

describe('lru-memoizer sync (clone)', () => ***REMOVED***

  describe('call', () => ***REMOVED***
    let loadTimes = 0, memoized;

    beforeEach(() => ***REMOVED***
      loadTimes = 0;

      memoized = memoizer.sync(***REMOVED***
        load: (key) => ***REMOVED***
          loadTimes++;
          return ***REMOVED*** foo: key , buffer: Buffer.from('1234') };
      ***REMOVED***,
        hash: (key) => ***REMOVED***
          return key;
      ***REMOVED***,
        clone: true
    ***REMOVED***);
  ***REMOVED***);

    it('should return a clone every time with the same cached structure', () => ***REMOVED***
      const r1 = memoized('bar');
      assert.strictEqual(loadTimes, 1);
      assert.equal(r1.foo, 'bar');
      r1.foo = 'bax';

      const r2 = memoized('bar');
      assert.strictEqual(loadTimes, 1);
      assert.equal(r2.foo, 'bar');
      assert.notStrictEqual(r1, r2);
      assert.notEqual(r1, r2);
  ***REMOVED***);
***REMOVED***);

  describe('Promise', () => ***REMOVED***
    let loadTimes = 0, memoized;

    beforeEach(() => ***REMOVED***
      loadTimes = 0;

      memoized = memoizer.sync(***REMOVED***
        load: (key) => ***REMOVED***
          loadTimes++;
          return Promise.resolve(***REMOVED*** foo: key, buffer: Buffer.from('1234') });
      ***REMOVED***,
        hash: (key) => ***REMOVED***
          return key;
      ***REMOVED***,
        clone: true
    ***REMOVED***);
  ***REMOVED***);

    it('should return a clone every time with the same cached structure', (done) => ***REMOVED***
      memoized('bar').then(r1 => ***REMOVED***
        assert.strictEqual(loadTimes, 1);
        assert.equal(r1.foo, 'bar');
        r1.foo = 'bax';

        memoized('bar').then(r2 => ***REMOVED***
          assert.strictEqual(loadTimes, 1);
          assert.equal(r2.foo, 'bar');
          assert.notStrictEqual(r1, r2);
          assert.notEqual(r1, r2);

          done();
      ***REMOVED***);
    ***REMOVED***)
      .catch(done);
  ***REMOVED***);
***REMOVED***);

});

