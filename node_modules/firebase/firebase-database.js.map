***REMOVED***"version":3,"file":"firebase-database.js","sources":["../util/src/constants.ts","../util/src/assert.ts","../util/src/crypt.ts","../util/src/deepCopy.ts","../util/src/defaults.ts","../util/src/global.ts","../util/src/deferred.ts","../util/src/environment.ts","../util/src/json.ts","../util/src/jwt.ts","../util/src/obj.ts","../util/src/sha1.ts","../util/src/validation.ts","../util/src/utf8.ts","../util/src/compat.ts","../component/src/component.ts","../logger/src/logger.ts","../database/src/core/version.ts","../database/src/core/storage/DOMStorageWrapper.ts","../database/src/core/storage/MemoryStorage.ts","../database/src/core/storage/storage.ts","../database/src/core/util/util.ts","../database/src/core/AppCheckTokenProvider.ts","../database/src/core/AuthTokenProvider.ts","../database/src/realtime/Constants.ts","../database/src/core/RepoInfo.ts","../database/src/core/stats/StatsCollection.ts","../database/src/core/stats/StatsManager.ts","../database/src/realtime/polling/PacketReceiver.ts","../database/src/realtime/BrowserPollConnection.ts","../database/src/realtime/WebSocketConnection.ts","../database/src/realtime/TransportManager.ts","../database/src/realtime/Connection.ts","../database/src/core/ServerActions.ts","../database/src/core/util/EventEmitter.ts","../database/src/core/util/OnlineMonitor.ts","../database/src/core/util/Path.ts","../database/src/core/util/VisibilityMonitor.ts","../database/src/core/PersistentConnection.ts","../database/src/core/snap/Node.ts","../database/src/core/snap/indexes/Index.ts","../database/src/core/snap/indexes/KeyIndex.ts","../database/src/core/util/SortedMap.ts","../database/src/core/snap/comparators.ts","../database/src/core/snap/snap.ts","../database/src/core/snap/LeafNode.ts","../database/src/core/snap/indexes/PriorityIndex.ts","../database/src/core/snap/childSet.ts","../database/src/core/snap/IndexMap.ts","../database/src/core/snap/ChildrenNode.ts","../database/src/core/snap/nodeFromJSON.ts","../database/src/core/snap/indexes/PathIndex.ts","../database/src/core/snap/indexes/ValueIndex.ts","../database/src/core/view/Change.ts","../database/src/core/view/filter/IndexedFilter.ts","../database/src/core/view/filter/RangedFilter.ts","../database/src/core/view/filter/LimitedFilter.ts","../database/src/core/view/QueryParams.ts","../database/src/core/ReadonlyRestClient.ts","../util/src/query.ts","../database/src/core/SnapshotHolder.ts","../database/src/core/SparseSnapshotTree.ts","../database/src/core/stats/StatsListener.ts","../database/src/core/stats/StatsReporter.ts","../database/src/core/operation/Operation.ts","../database/src/core/operation/AckUserWrite.ts","../database/src/core/operation/ListenComplete.ts","../database/src/core/operation/Overwrite.ts","../database/src/core/operation/Merge.ts","../database/src/core/view/CacheNode.ts","../database/src/core/view/EventGenerator.ts","../database/src/core/view/ViewCache.ts","../database/src/core/util/ImmutableTree.ts","../database/src/core/CompoundWrite.ts","../database/src/core/WriteTree.ts","../database/src/core/view/ChildChangeAccumulator.ts","../database/src/core/view/CompleteChildSource.ts","../database/src/core/view/ViewProcessor.ts","../database/src/core/view/View.ts","../database/src/core/SyncPoint.ts","../database/src/core/SyncTree.ts","../database/src/core/util/ServerValues.ts","../database/src/core/util/Tree.ts","../database/src/core/util/validation.ts","../database/src/core/view/EventQueue.ts","../database/src/core/Repo.ts","../database/src/core/util/libs/parser.ts","../database/src/core/util/NextPushId.ts","../database/src/core/view/Event.ts","../database/src/core/view/EventRegistration.ts","../database/src/api/OnDisconnect.ts","../database/src/api/Reference_impl.ts","../database/src/api/Database.ts","../util/src/emulator.ts","../database/src/api/ServerValue.ts","../database/src/api/Transaction.ts","../database/src/api/test_access.ts","../database/src/register.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = ***REMOVED***\n  /**\n   * @define ***REMOVED***boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define ***REMOVED***boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '$***REMOVED***JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void ***REMOVED***\n  if (!assertion) ***REMOVED***\n    throw assertionError(message);\n***REMOVED***\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error ***REMOVED***\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] ***REMOVED***\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) ***REMOVED***\n    let c = str.charCodeAt(i);\n    if (c < 128) ***REMOVED***\n      out[p++] = c;\n  ***REMOVED*** else if (c < 2048) ***REMOVED***\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n  ***REMOVED*** else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) ***REMOVED***\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n  ***REMOVED*** else ***REMOVED***\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n  ***REMOVED***\n***REMOVED***\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string ***REMOVED***\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) ***REMOVED***\n    const c1 = bytes[pos++];\n    if (c1 < 128) ***REMOVED***\n      out[c++] = String.fromCharCode(c1);\n  ***REMOVED*** else if (c1 > 191 && c1 < 224) ***REMOVED***\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n  ***REMOVED*** else if (c1 > 239 && c1 < 365) ***REMOVED***\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n  ***REMOVED*** else ***REMOVED***\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n  ***REMOVED***\n***REMOVED***\n  return out.join('');\n};\n\ninterface Base64 ***REMOVED***\n  byteToCharMap_: ***REMOVED*** [key: number]: string } | null;\n  charToByteMap_: ***REMOVED*** [key: string]: number } | null;\n  byteToCharMapWebSafe_: ***REMOVED*** [key: number]: string } | null;\n  charToByteMapWebSafe_: ***REMOVED*** [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = ***REMOVED***\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() ***REMOVED***\n    return this.ENCODED_VALS_BASE + '+/=';\n***REMOVED***,\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() ***REMOVED***\n    return this.ENCODED_VALS_BASE + '-_.';\n***REMOVED***,\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string ***REMOVED***\n    if (!Array.isArray(input)) ***REMOVED***\n      throw Error('encodeByteArray takes an array as a parameter');\n  ***REMOVED***\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) ***REMOVED***\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) ***REMOVED***\n        outByte4 = 64;\n\n        if (!haveByte2) ***REMOVED***\n          outByte3 = 64;\n      ***REMOVED***\n    ***REMOVED***\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n  ***REMOVED***\n\n    return output.join('');\n***REMOVED***,\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string ***REMOVED***\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) ***REMOVED***\n      return btoa(input);\n  ***REMOVED***\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n***REMOVED***,\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string ***REMOVED***\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) ***REMOVED***\n      return atob(input);\n  ***REMOVED***\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n***REMOVED***,\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] ***REMOVED***\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) ***REMOVED***\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) ***REMOVED***\n        throw Error();\n    ***REMOVED***\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) ***REMOVED***\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) ***REMOVED***\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n\n    return output;\n***REMOVED***,\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() ***REMOVED***\n    if (!this.byteToCharMap_) ***REMOVED***\n      this.byteToCharMap_ = ***REMOVED***};\n      this.charToByteMap_ = ***REMOVED***};\n      this.byteToCharMapWebSafe_ = ***REMOVED***};\n      this.charToByteMapWebSafe_ = ***REMOVED***};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) ***REMOVED***\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) ***REMOVED***\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string ***REMOVED***\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string ***REMOVED***\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null ***REMOVED***\n  try ***REMOVED***\n    return base64.decodeString(str, true);\n***REMOVED*** catch (e) ***REMOVED***\n    console.error('base64Decode failed: ', e);\n***REMOVED***\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T ***REMOVED***\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown ***REMOVED***\n  if (!(source instanceof Object)) ***REMOVED***\n    return source;\n***REMOVED***\n\n  switch (source.constructor) ***REMOVED***\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) ***REMOVED***\n        target = ***REMOVED***};\n    ***REMOVED***\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n***REMOVED***\n\n  for (const prop in source) ***REMOVED***\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) ***REMOVED***\n      continue;\n  ***REMOVED***\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n***REMOVED***\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean ***REMOVED***\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** base64Decode } from './crypt';\nimport ***REMOVED*** getGlobal } from './global';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults ***REMOVED***\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global ***REMOVED***\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => ***REMOVED***\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') ***REMOVED***\n    return;\n***REMOVED***\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) ***REMOVED***\n    return JSON.parse(defaultsJsonString);\n***REMOVED***\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => ***REMOVED***\n  if (typeof document === 'undefined') ***REMOVED***\n    return;\n***REMOVED***\n  let match;\n  try ***REMOVED***\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n***REMOVED*** catch (e) ***REMOVED***\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n***REMOVED***\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => ***REMOVED***\n  try ***REMOVED***\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n***REMOVED*** catch (e) ***REMOVED***\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: $***REMOVED***e}`);\n    return;\n***REMOVED***\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => ***REMOVED***\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) ***REMOVED***\n    return undefined;\n***REMOVED***\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) ***REMOVED***\n    throw new Error(`Invalid host $***REMOVED***host} with no separate hostname and port!`);\n***REMOVED***\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') ***REMOVED***\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n***REMOVED*** else ***REMOVED***\n    return [host.substring(0, separatorIndex), port];\n***REMOVED***\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_$***REMOVED***T}`] =>\n  getDefaults()?.[`_$***REMOVED***name}`] as FirebaseDefaults[`_$***REMOVED***T}`];\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis ***REMOVED***\n  if (typeof self !== 'undefined') ***REMOVED***\n    return self;\n***REMOVED***\n  if (typeof window !== 'undefined') ***REMOVED***\n    return window;\n***REMOVED***\n  if (typeof global !== 'undefined') ***REMOVED***\n    return global;\n***REMOVED***\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> ***REMOVED***\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => ***REMOVED***};\n  resolve: (value?: unknown) => void = () => ***REMOVED***};\n  constructor() ***REMOVED***\n    this.promise = new Promise((resolve, reject) => ***REMOVED***\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n  ***REMOVED***);\n***REMOVED***\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void ***REMOVED***\n    return (error, value?) => ***REMOVED***\n      if (error) ***REMOVED***\n        this.reject(error);\n    ***REMOVED*** else ***REMOVED***\n        this.resolve(value);\n    ***REMOVED***\n      if (typeof callback === 'function') ***REMOVED***\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => ***REMOVED***});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) ***REMOVED***\n          callback(error);\n      ***REMOVED*** else ***REMOVED***\n          callback(error, value);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** CONSTANTS } from './constants';\nimport ***REMOVED*** getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string ***REMOVED***\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) ***REMOVED***\n    return navigator['userAgent'];\n***REMOVED*** else ***REMOVED***\n    return '';\n***REMOVED***\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean ***REMOVED***\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean ***REMOVED***\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') ***REMOVED***\n    return true;\n***REMOVED*** else if (forceEnvironment === 'browser') ***REMOVED***\n    return false;\n***REMOVED***\n\n  try ***REMOVED***\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n***REMOVED*** catch (e) ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean ***REMOVED***\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime ***REMOVED***\n  id?: unknown;\n}\ndeclare const chrome: ***REMOVED*** runtime?: BrowserRuntime };\ndeclare const browser: ***REMOVED*** runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean ***REMOVED***\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean ***REMOVED***\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean ***REMOVED***\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean ***REMOVED***\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean ***REMOVED***\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean ***REMOVED***\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean ***REMOVED***\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean ***REMOVED***\n  try ***REMOVED***\n    return typeof indexedDB === 'object';\n***REMOVED*** catch (e) ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> ***REMOVED***\n  return new Promise((resolve, reject) => ***REMOVED***\n    try ***REMOVED***\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => ***REMOVED***\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) ***REMOVED***\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n      ***REMOVED***\n        resolve(true);\n    ***REMOVED***;\n      request.onupgradeneeded = () => ***REMOVED***\n        preExist = false;\n    ***REMOVED***;\n\n      request.onerror = () => ***REMOVED***\n        reject(request.error?.message || '');\n    ***REMOVED***;\n  ***REMOVED*** catch (error) ***REMOVED***\n      reject(error);\n  ***REMOVED***\n***REMOVED***);\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean ***REMOVED***\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) ***REMOVED***\n    return false;\n***REMOVED***\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param ***REMOVED***string} str A string containing JSON.\n * @return ***REMOVED****} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown ***REMOVED***\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param ***REMOVED****} data Javascript object to be stringified.\n * @return ***REMOVED***string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string ***REMOVED***\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** base64Decode } from './crypt';\nimport ***REMOVED*** jsonEval } from './json';\n\ninterface Claims ***REMOVED***\n  [key: string]: ***REMOVED***};\n}\n\ninterface DecodedToken ***REMOVED***\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken ***REMOVED***\n  let header = ***REMOVED***},\n    claims: Claims = ***REMOVED***},\n    data = ***REMOVED***},\n    signature = '';\n\n  try ***REMOVED***\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || ***REMOVED***};\n    delete claims['d'];\n***REMOVED*** catch (e) ***REMOVED***}\n\n  return ***REMOVED***\n    header,\n    claims,\n    data,\n    signature\n***REMOVED***;\n};\n\ninterface DecodedToken ***REMOVED***\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean ***REMOVED***\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') ***REMOVED***\n    if (claims.hasOwnProperty('nbf')) ***REMOVED***\n      validSince = claims['nbf'] as number;\n  ***REMOVED*** else if (claims.hasOwnProperty('iat')) ***REMOVED***\n      validSince = claims['iat'] as number;\n  ***REMOVED***\n\n    if (claims.hasOwnProperty('exp')) ***REMOVED***\n      validUntil = claims['exp'] as number;\n  ***REMOVED*** else ***REMOVED***\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n  ***REMOVED***\n***REMOVED***\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null ***REMOVED***\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) ***REMOVED***\n    return claims['iat'] as number;\n***REMOVED***\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean ***REMOVED***\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean ***REMOVED***\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean ***REMOVED***\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined ***REMOVED***\n  if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***\n    return obj[key];\n***REMOVED*** else ***REMOVED***\n    return undefined;\n***REMOVED***\n}\n\nexport function isEmpty(obj: object): obj is ***REMOVED***} ***REMOVED***\n  for (const key in obj) ***REMOVED***\n    if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***\n      return false;\n  ***REMOVED***\n***REMOVED***\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: ***REMOVED*** [key in K]: V },\n  fn: (value: V, key: K, obj: ***REMOVED*** [key in K]: V }) => U,\n  contextObj?: unknown\n): ***REMOVED*** [key in K]: U } ***REMOVED***\n  const res: Partial<***REMOVED*** [key in K]: U }> = ***REMOVED***};\n  for (const key in obj) ***REMOVED***\n    if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n  ***REMOVED***\n***REMOVED***\n  return res as ***REMOVED*** [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean ***REMOVED***\n  if (a === b) ***REMOVED***\n    return true;\n***REMOVED***\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) ***REMOVED***\n    if (!bKeys.includes(k)) ***REMOVED***\n      return false;\n  ***REMOVED***\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) ***REMOVED***\n      if (!deepEqual(aProp, bProp)) ***REMOVED***\n        return false;\n    ***REMOVED***\n  ***REMOVED*** else if (aProp !== bProp) ***REMOVED***\n      return false;\n  ***REMOVED***\n***REMOVED***\n\n  for (const k of bKeys) ***REMOVED***\n    if (!aKeys.includes(k)) ***REMOVED***\n      return false;\n  ***REMOVED***\n***REMOVED***\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object ***REMOVED***\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 ***REMOVED***\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private ***REMOVED***number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private ***REMOVED***number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() ***REMOVED***\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) ***REMOVED***\n      this.pad_[i] = 0;\n  ***REMOVED***\n\n    this.reset();\n***REMOVED***\n\n  reset(): void ***REMOVED***\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n***REMOVED***\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void ***REMOVED***\n    if (!offset) ***REMOVED***\n      offset = 0;\n  ***REMOVED***\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') ***REMOVED***\n      for (let i = 0; i < 16; i++) ***REMOVED***\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      for (let i = 0; i < 16; i++) ***REMOVED***\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n    ***REMOVED***\n  ***REMOVED***\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) ***REMOVED***\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n  ***REMOVED***\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) ***REMOVED***\n      if (i < 40) ***REMOVED***\n        if (i < 20) ***REMOVED***\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n      ***REMOVED*** else ***REMOVED***\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n      ***REMOVED***\n    ***REMOVED*** else ***REMOVED***\n        if (i < 60) ***REMOVED***\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n      ***REMOVED*** else ***REMOVED***\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n      ***REMOVED***\n    ***REMOVED***\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n  ***REMOVED***\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n***REMOVED***\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void ***REMOVED***\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) ***REMOVED***\n      return;\n  ***REMOVED***\n\n    if (length === undefined) ***REMOVED***\n      length = bytes.length;\n  ***REMOVED***\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) ***REMOVED***\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) ***REMOVED***\n        while (n <= lengthMinusBlock) ***REMOVED***\n          this.compress_(bytes, n);\n          n += this.blockSize;\n      ***REMOVED***\n    ***REMOVED***\n\n      if (typeof bytes === 'string') ***REMOVED***\n        while (n < length) ***REMOVED***\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) ***REMOVED***\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n        ***REMOVED***\n      ***REMOVED***\n    ***REMOVED*** else ***REMOVED***\n        while (n < length) ***REMOVED***\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) ***REMOVED***\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n        ***REMOVED***\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n***REMOVED***\n\n  /** @override */\n  digest(): number[] ***REMOVED***\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) ***REMOVED***\n      this.update(this.pad_, 56 - this.inbuf_);\n  ***REMOVED*** else ***REMOVED***\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n  ***REMOVED***\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) ***REMOVED***\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n  ***REMOVED***\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) ***REMOVED***\n      for (let j = 24; j >= 0; j -= 8) ***REMOVED***\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n    ***REMOVED***\n  ***REMOVED***\n    return digest;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void ***REMOVED***\n  let argError;\n  if (argCount < minCount) ***REMOVED***\n    argError = 'at least ' + minCount;\n***REMOVED*** else if (argCount > maxCount) ***REMOVED***\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n***REMOVED***\n  if (argError) ***REMOVED***\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n***REMOVED***\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string ***REMOVED***\n  return `$***REMOVED***fnName} failed: $***REMOVED***argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void ***REMOVED***\n  if (optional && !namespace) ***REMOVED***\n    return;\n***REMOVED***\n  if (typeof namespace !== 'string') ***REMOVED***\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n***REMOVED***\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void ***REMOVED***\n  if (optional && !callback) ***REMOVED***\n    return;\n***REMOVED***\n  if (typeof callback !== 'function') ***REMOVED***\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n***REMOVED***\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void ***REMOVED***\n  if (optional && !context) ***REMOVED***\n    return;\n***REMOVED***\n  if (typeof context !== 'object' || context === null) ***REMOVED***\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param ***REMOVED***string} str\n * @return ***REMOVED***Array}\n */\nexport const stringToByteArray = function (str: string): number[] ***REMOVED***\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) ***REMOVED***\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) ***REMOVED***\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n  ***REMOVED***\n\n    if (c < 128) ***REMOVED***\n      out[p++] = c;\n  ***REMOVED*** else if (c < 2048) ***REMOVED***\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n  ***REMOVED*** else if (c < 65536) ***REMOVED***\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n  ***REMOVED*** else ***REMOVED***\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n  ***REMOVED***\n***REMOVED***\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param ***REMOVED***string} str\n * @return ***REMOVED***number}\n */\nexport const stringLength = function (str: string): number ***REMOVED***\n  let p = 0;\n  for (let i = 0; i < str.length; i++) ***REMOVED***\n    const c = str.charCodeAt(i);\n    if (c < 128) ***REMOVED***\n      p++;\n  ***REMOVED*** else if (c < 2048) ***REMOVED***\n      p += 2;\n  ***REMOVED*** else if (c >= 0xd800 && c <= 0xdbff) ***REMOVED***\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n  ***REMOVED*** else ***REMOVED***\n      p += 3;\n  ***REMOVED***\n***REMOVED***\n  return p;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> ***REMOVED***\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService ***REMOVED***\n  if (service && (service as Compat<ExpService>)._delegate) ***REMOVED***\n    return (service as Compat<ExpService>)._delegate;\n***REMOVED*** else ***REMOVED***\n    return service as ExpService;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport ***REMOVED***\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> ***REMOVED***\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = ***REMOVED***};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) ***REMOVED***}\n\n  setInstantiationMode(mode: InstantiationMode): this ***REMOVED***\n    this.instantiationMode = mode;\n    return this;\n***REMOVED***\n\n  setMultipleInstances(multipleInstances: boolean): this ***REMOVED***\n    this.multipleInstances = multipleInstances;\n    return this;\n***REMOVED***\n\n  setServiceProps(props: Dictionary): this ***REMOVED***\n    this.serviceProps = props;\n    return this;\n***REMOVED***\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this ***REMOVED***\n    this.onInstanceCreated = callback;\n    return this;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions ***REMOVED***\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams ***REMOVED***\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel ***REMOVED***\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: ***REMOVED*** [key in LogLevelString]: LogLevel } = ***REMOVED***\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = ***REMOVED***\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => ***REMOVED***\n  if (logType < instance.logLevel) ***REMOVED***\n    return;\n***REMOVED***\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) ***REMOVED***\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[$***REMOVED***now}]  $***REMOVED***instance.name}:`,\n      ...args\n    );\n***REMOVED*** else ***REMOVED***\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: $***REMOVED***logType})`\n    );\n***REMOVED***\n};\n\nexport class Logger ***REMOVED***\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) ***REMOVED***\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n***REMOVED***\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel ***REMOVED***\n    return this._logLevel;\n***REMOVED***\n\n  set logLevel(val: LogLevel) ***REMOVED***\n    if (!(val in LogLevel)) ***REMOVED***\n      throw new TypeError(`Invalid value \"$***REMOVED***val}\" assigned to \\`logLevel\\``);\n  ***REMOVED***\n    this._logLevel = val;\n***REMOVED***\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void ***REMOVED***\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n***REMOVED***\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler ***REMOVED***\n    return this._logHandler;\n***REMOVED***\n  set logHandler(val: LogHandler) ***REMOVED***\n    if (typeof val !== 'function') ***REMOVED***\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n  ***REMOVED***\n    this._logHandler = val;\n***REMOVED***\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null ***REMOVED***\n    return this._userLogHandler;\n***REMOVED***\n  set userLogHandler(val: LogHandler | null) ***REMOVED***\n    this._userLogHandler = val;\n***REMOVED***\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n***REMOVED***\n  log(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n***REMOVED***\n  info(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n***REMOVED***\n  warn(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n***REMOVED***\n  error(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n***REMOVED***\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void ***REMOVED***\n  instances.forEach(inst => ***REMOVED***\n    inst.setLogLevel(level);\n***REMOVED***);\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void ***REMOVED***\n  for (const instance of instances) ***REMOVED***\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) ***REMOVED***\n      customLogLevel = levelStringToEnum[options.level];\n  ***REMOVED***\n    if (logCallback === null) ***REMOVED***\n      instance.userLogHandler = null;\n  ***REMOVED*** else ***REMOVED***\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => ***REMOVED***\n        const message = args\n          .map(arg => ***REMOVED***\n            if (arg == null) ***REMOVED***\n              return null;\n          ***REMOVED*** else if (typeof arg === 'string') ***REMOVED***\n              return arg;\n          ***REMOVED*** else if (typeof arg === 'number' || typeof arg === 'boolean') ***REMOVED***\n              return arg.toString();\n          ***REMOVED*** else if (arg instanceof Error) ***REMOVED***\n              return arg.message;\n          ***REMOVED*** else ***REMOVED***\n              try ***REMOVED***\n                return JSON.stringify(arg);\n            ***REMOVED*** catch (ignored) ***REMOVED***\n                return null;\n            ***REMOVED***\n          ***REMOVED***\n        ***REMOVED***)\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) ***REMOVED***\n          logCallback(***REMOVED***\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n        ***REMOVED***);\n      ***REMOVED***\n    ***REMOVED***;\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void ***REMOVED***\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper ***REMOVED***\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) ***REMOVED***}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) ***REMOVED***\n    if (value == null) ***REMOVED***\n      this.domStorage_.removeItem(this.prefixedName_(key));\n  ***REMOVED*** else ***REMOVED***\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown ***REMOVED***\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) ***REMOVED***\n      return null;\n  ***REMOVED*** else ***REMOVED***\n      return jsonEval(storedVal);\n  ***REMOVED***\n***REMOVED***\n\n  remove(key: string) ***REMOVED***\n    this.domStorage_.removeItem(this.prefixedName_(key));\n***REMOVED***\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string ***REMOVED***\n    return this.prefix_ + name;\n***REMOVED***\n\n  toString(): string ***REMOVED***\n    return this.domStorage_.toString();\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage ***REMOVED***\n  private cache_: ***REMOVED*** [k: string]: unknown } = ***REMOVED***};\n\n  set(key: string, value: unknown | null) ***REMOVED***\n    if (value == null) ***REMOVED***\n      delete this.cache_[key];\n  ***REMOVED*** else ***REMOVED***\n      this.cache_[key] = value;\n  ***REMOVED***\n***REMOVED***\n\n  get(key: string): unknown ***REMOVED***\n    if (contains(this.cache_, key)) ***REMOVED***\n      return this.cache_[key];\n  ***REMOVED***\n    return null;\n***REMOVED***\n\n  remove(key: string) ***REMOVED***\n    delete this.cache_[key];\n***REMOVED***\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** DOMStorageWrapper } from './DOMStorageWrapper';\nimport ***REMOVED*** MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage ***REMOVED***\n  try ***REMOVED***\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) ***REMOVED***\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n  ***REMOVED***\n***REMOVED*** catch (e) ***REMOVED***}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Logger, LogLevel } from '@firebase/logger';\nimport ***REMOVED***\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport ***REMOVED*** SessionStorage } from '../storage/storage';\nimport ***REMOVED*** QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () ***REMOVED***\n  let id = 1;\n  return function () ***REMOVED***\n    return id++;\n***REMOVED***;\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns ***REMOVED***!string} The resulting hash\n */\nexport const sha1 = function (str: string): string ***REMOVED***\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string ***REMOVED***\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) ***REMOVED***\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) ***REMOVED***\n      message += buildLogMessage_.apply(null, arg);\n  ***REMOVED*** else if (typeof arg === 'object') ***REMOVED***\n      message += stringify(arg);\n  ***REMOVED*** else ***REMOVED***\n      message += arg;\n  ***REMOVED***\n    message += ' ';\n***REMOVED***\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) ***REMOVED***\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) ***REMOVED***\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) ***REMOVED***\n      SessionStorage.set('logging_enabled', true);\n  ***REMOVED***\n***REMOVED*** else if (typeof logger_ === 'function') ***REMOVED***\n    logger = logger_;\n***REMOVED*** else ***REMOVED***\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n***REMOVED***\n};\n\nexport const log = function (...varArgs: unknown[]) ***REMOVED***\n  if (firstLog_ === true) ***REMOVED***\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) ***REMOVED***\n      enableLogging(true);\n  ***REMOVED***\n***REMOVED***\n\n  if (logger) ***REMOVED***\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n***REMOVED***\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void ***REMOVED***\n  return function (...varArgs: unknown[]) ***REMOVED***\n    log(prefix, ...varArgs);\n***REMOVED***;\n};\n\nexport const error = function (...varArgs: string[]) ***REMOVED***\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) ***REMOVED***\n  const message = `FIREBASE FATAL ERROR: $***REMOVED***buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) ***REMOVED***\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () ***REMOVED***\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) ***REMOVED***\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n***REMOVED***\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) ***REMOVED***\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean ***REMOVED***\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) ***REMOVED***\n  if (isNodeSdk() || document.readyState === 'complete') ***REMOVED***\n    fn();\n***REMOVED*** else ***REMOVED***\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () ***REMOVED***\n      if (!document.body) ***REMOVED***\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n    ***REMOVED***\n\n      if (!called) ***REMOVED***\n        called = true;\n        fn();\n    ***REMOVED***\n  ***REMOVED***;\n\n    if (document.addEventListener) ***REMOVED***\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ***REMOVED*** else if ((document as any).attachEvent) ***REMOVED***\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => ***REMOVED***\n        if (document.readyState === 'complete') ***REMOVED***\n          wrappedFn();\n      ***REMOVED***\n    ***REMOVED***);\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n  ***REMOVED***\n***REMOVED***\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number ***REMOVED***\n  if (a === b) ***REMOVED***\n    return 0;\n***REMOVED*** else if (a === MIN_NAME || b === MAX_NAME) ***REMOVED***\n    return -1;\n***REMOVED*** else if (b === MIN_NAME || a === MAX_NAME) ***REMOVED***\n    return 1;\n***REMOVED*** else ***REMOVED***\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) ***REMOVED***\n      if (bAsInt !== null) ***REMOVED***\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n    ***REMOVED*** else ***REMOVED***\n        return -1;\n    ***REMOVED***\n  ***REMOVED*** else if (bAsInt !== null) ***REMOVED***\n      return 1;\n  ***REMOVED*** else ***REMOVED***\n      return a < b ? -1 : 1;\n  ***REMOVED***\n***REMOVED***\n};\n\n/**\n * @returns ***REMOVED***!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number ***REMOVED***\n  if (a === b) ***REMOVED***\n    return 0;\n***REMOVED*** else if (a < b) ***REMOVED***\n    return -1;\n***REMOVED*** else ***REMOVED***\n    return 1;\n***REMOVED***\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: ***REMOVED*** [k: string]: unknown }\n): unknown ***REMOVED***\n  if (obj && key in obj) ***REMOVED***\n    return obj[key];\n***REMOVED*** else ***REMOVED***\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n***REMOVED***\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string ***REMOVED***\n  if (typeof obj !== 'object' || obj === null) ***REMOVED***\n    return stringify(obj);\n***REMOVED***\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) ***REMOVED***\n    keys.push(k);\n***REMOVED***\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '***REMOVED***';\n  for (let i = 0; i < keys.length; i++) ***REMOVED***\n    if (i !== 0) ***REMOVED***\n      key += ',';\n  ***REMOVED***\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n***REMOVED***\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] ***REMOVED***\n  const len = str.length;\n\n  if (len <= segsize) ***REMOVED***\n    return [str];\n***REMOVED***\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) ***REMOVED***\n    if (c + segsize > len) ***REMOVED***\n      dataSegs.push(str.substring(c, len));\n  ***REMOVED*** else ***REMOVED***\n      dataSegs.push(str.substring(c, c + segsize));\n  ***REMOVED***\n***REMOVED***\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) ***REMOVED***\n  for (const key in obj) ***REMOVED***\n    if (obj.hasOwnProperty(key)) ***REMOVED***\n      fn(key, obj[key]);\n  ***REMOVED***\n***REMOVED***\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void ***REMOVED***\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string ***REMOVED***\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) ***REMOVED***\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n***REMOVED*** else ***REMOVED***\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) ***REMOVED***\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n  ***REMOVED*** else ***REMOVED***\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n  ***REMOVED***\n***REMOVED***\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) ***REMOVED***\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n***REMOVED***\n  for (i = ebits; i; i -= 1) ***REMOVED***\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n***REMOVED***\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) ***REMOVED***\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) ***REMOVED***\n      hexByte = '0' + hexByte;\n  ***REMOVED***\n    hexByteString = hexByteString + hexByte;\n***REMOVED***\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean ***REMOVED***\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean ***REMOVED***\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error ***REMOVED***\n  let reason = 'Unknown Error';\n  if (code === 'too_big') ***REMOVED***\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n***REMOVED*** else if (code === 'permission_denied') ***REMOVED***\n    reason = \"Client doesn't have permission to access the desired data.\";\n***REMOVED*** else if (code === 'unavailable') ***REMOVED***\n    reason = 'The service is unavailable';\n***REMOVED***\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d***REMOVED***1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null ***REMOVED***\n  if (INTEGER_REGEXP_.test(str)) ***REMOVED***\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) ***REMOVED***\n      return intVal;\n  ***REMOVED***\n***REMOVED***\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) ***REMOVED***\n  try ***REMOVED***\n    fn();\n***REMOVED*** catch (e) ***REMOVED***\n    // Re-throw exception when it's safe.\n    setTimeout(() => ***REMOVED***\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n  ***REMOVED***, Math.floor(0));\n***REMOVED***\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) ***REMOVED***\n  if (typeof callback === 'function') ***REMOVED***\n    exceptionGuard(() => ***REMOVED***\n      callback(...varArgs);\n  ***REMOVED***);\n***REMOVED***\n};\n\n/**\n * @returns ***REMOVED***boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean ***REMOVED***\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) ***REMOVED***\n  Object.defineProperty(object, name, ***REMOVED*** get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object ***REMOVED***\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) ***REMOVED***\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n***REMOVED*** else if (typeof timeout === 'object' && (timeout as any)['unref']) ***REMOVED***\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n***REMOVED***\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport ***REMOVED*** Provider } from '@firebase/component';\n\nimport ***REMOVED*** warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider ***REMOVED***\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) ***REMOVED***\n    this.appCheck = appCheckProvider?.getImmediate(***REMOVED*** optional: true });\n    if (!this.appCheck) ***REMOVED***\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n  ***REMOVED***\n***REMOVED***\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> ***REMOVED***\n    if (!this.appCheck) ***REMOVED***\n      return new Promise<AppCheckTokenResult>((resolve, reject) => ***REMOVED***\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => ***REMOVED***\n          if (this.appCheck) ***REMOVED***\n            this.getToken(forceRefresh).then(resolve, reject);\n        ***REMOVED*** else ***REMOVED***\n            resolve(null);\n        ***REMOVED***\n      ***REMOVED***, 0);\n    ***REMOVED***);\n  ***REMOVED***\n    return this.appCheck.getToken(forceRefresh);\n***REMOVED***\n\n  addTokenChangeListener(listener: AppCheckTokenListener) ***REMOVED***\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n***REMOVED***\n\n  notifyForInvalidToken(): void ***REMOVED***\n    warn(\n      `Provided AppCheck credentials for the app named \"$***REMOVED***this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport ***REMOVED***\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport ***REMOVED*** Provider } from '@firebase/component';\n\nimport ***REMOVED*** log, warn } from './util/util';\n\nexport interface AuthTokenProvider ***REMOVED***\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider ***REMOVED***\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) ***REMOVED***\n    this.auth_ = authProvider_.getImmediate(***REMOVED*** optional: true });\n    if (!this.auth_) ***REMOVED***\n      authProvider_.onInit(auth => (this.auth_ = auth));\n  ***REMOVED***\n***REMOVED***\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> ***REMOVED***\n    if (!this.auth_) ***REMOVED***\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => ***REMOVED***\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => ***REMOVED***\n          if (this.auth_) ***REMOVED***\n            this.getToken(forceRefresh).then(resolve, reject);\n        ***REMOVED*** else ***REMOVED***\n            resolve(null);\n        ***REMOVED***\n      ***REMOVED***, 0);\n    ***REMOVED***);\n  ***REMOVED***\n\n    return this.auth_.getToken(forceRefresh).catch(error => ***REMOVED***\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') ***REMOVED***\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n    ***REMOVED*** else ***REMOVED***\n        return Promise.reject(error);\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n\n  addTokenChangeListener(listener: (token: string | null) => void): void ***REMOVED***\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) ***REMOVED***\n      this.auth_.addAuthTokenListener(listener);\n  ***REMOVED*** else ***REMOVED***\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n  ***REMOVED***\n***REMOVED***\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void ***REMOVED***\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n***REMOVED***\n\n  notifyForInvalidToken(): void ***REMOVED***\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) ***REMOVED***\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n  ***REMOVED*** else if ('serviceAccount' in this.firebaseOptions_) ***REMOVED***\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n  ***REMOVED*** else ***REMOVED***\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n  ***REMOVED***\n    warn(errorMessage);\n***REMOVED***\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider ***REMOVED***\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) ***REMOVED***}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> ***REMOVED***\n    return Promise.resolve(***REMOVED***\n      accessToken: this.accessToken\n  ***REMOVED***);\n***REMOVED***\n\n  addTokenChangeListener(listener: (token: string | null) => void): void ***REMOVED***\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n***REMOVED***\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void ***REMOVED***}\n\n  notifyForInvalidToken(): void ***REMOVED***}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport ***REMOVED*** PersistentStorage } from './storage/storage';\nimport ***REMOVED*** each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo ***REMOVED***\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) ***REMOVED***\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n***REMOVED***\n\n  isCacheableHost(): boolean ***REMOVED***\n    return this.internalHost.substr(0, 2) === 's-';\n***REMOVED***\n\n  isCustomHost() ***REMOVED***\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n***REMOVED***\n\n  get host() ***REMOVED***\n    return this._host;\n***REMOVED***\n\n  set host(newHost: string) ***REMOVED***\n    if (newHost !== this.internalHost) ***REMOVED***\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) ***REMOVED***\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  toString(): string ***REMOVED***\n    let str = this.toURLString();\n    if (this.persistenceKey) ***REMOVED***\n      str += '<' + this.persistenceKey + '>';\n  ***REMOVED***\n    return str;\n***REMOVED***\n\n  toURLString(): string ***REMOVED***\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=$***REMOVED***this.namespace}`\n      : '';\n    return `$***REMOVED***protocol}$***REMOVED***this.host}/$***REMOVED***query}`;\n***REMOVED***\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean ***REMOVED***\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: ***REMOVED*** [k: string]: string }\n): string ***REMOVED***\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) ***REMOVED***\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n***REMOVED*** else if (type === LONG_POLLING) ***REMOVED***\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n***REMOVED*** else ***REMOVED***\n    throw new Error('Unknown connection type: ' + type);\n***REMOVED***\n  if (repoInfoNeedsQueryParam(repoInfo)) ***REMOVED***\n    params['ns'] = repoInfo.namespace;\n***REMOVED***\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => ***REMOVED***\n    pairs.push(key + '=' + value);\n***REMOVED***);\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection ***REMOVED***\n  private counters_: ***REMOVED*** [k: string]: number } = ***REMOVED***};\n\n  incrementCounter(name: string, amount: number = 1) ***REMOVED***\n    if (!contains(this.counters_, name)) ***REMOVED***\n      this.counters_[name] = 0;\n  ***REMOVED***\n\n    this.counters_[name] += amount;\n***REMOVED***\n\n  get() ***REMOVED***\n    return deepCopy(this.counters_);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** RepoInfo } from '../RepoInfo';\n\nimport ***REMOVED*** StatsCollection } from './StatsCollection';\n\nconst collections: ***REMOVED*** [k: string]: StatsCollection } = ***REMOVED***};\nconst reporters: ***REMOVED*** [k: string]: unknown } = ***REMOVED***};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection ***REMOVED***\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) ***REMOVED***\n    collections[hashString] = new StatsCollection();\n***REMOVED***\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T ***REMOVED***\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) ***REMOVED***\n    reporters[hashString] = creatorFunction();\n***REMOVED***\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver ***REMOVED***\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: ***REMOVED***}) => void) ***REMOVED***}\n\n  closeAfter(responseNum: number, callback: () => void) ***REMOVED***\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) ***REMOVED***\n      this.onClose();\n      this.onClose = null;\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) ***REMOVED***\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) ***REMOVED***\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) ***REMOVED***\n        if (toProcess[i]) ***REMOVED***\n          exceptionGuard(() => ***REMOVED***\n            this.onMessage_(toProcess[i]);\n        ***REMOVED***);\n      ***REMOVED***\n    ***REMOVED***\n      if (this.currentResponseNum === this.closeAfterResponse) ***REMOVED***\n        if (this.onClose) ***REMOVED***\n          this.onClose();\n          this.onClose = null;\n      ***REMOVED***\n        break;\n    ***REMOVED***\n      this.currentResponseNum++;\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport ***REMOVED*** RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport ***REMOVED*** StatsCollection } from '../core/stats/StatsCollection';\nimport ***REMOVED*** statsManagerGetCollection } from '../core/stats/StatsManager';\nimport ***REMOVED***\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport ***REMOVED***\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport ***REMOVED*** PacketReceiver } from './polling/PacketReceiver';\nimport ***REMOVED*** Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport ***REMOVED***\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) ***REMOVED***\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: ***REMOVED*** [k: string]: string }) => ***REMOVED***\n      // Always add the token if we have one.\n      if (this.appCheckToken) ***REMOVED***\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n    ***REMOVED***\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n  ***REMOVED***;\n***REMOVED***\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: ***REMOVED***}) => void, onDisconnect: (a?: boolean) => void) ***REMOVED***\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => ***REMOVED***\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ***REMOVED***, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => ***REMOVED***\n      if (this.isClosed_) ***REMOVED***\n        return;\n    ***REMOVED***\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => ***REMOVED***\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) ***REMOVED***\n            return; // we closed the connection.\n        ***REMOVED***\n\n          if (this.connectTimeoutTimer_) ***REMOVED***\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n        ***REMOVED***\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) ***REMOVED***\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n        ***REMOVED*** else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) ***REMOVED***\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) ***REMOVED***\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => ***REMOVED***\n                this.onClosed_();\n            ***REMOVED***);\n          ***REMOVED*** else ***REMOVED***\n              this.onClosed_();\n          ***REMOVED***\n        ***REMOVED*** else ***REMOVED***\n            throw new Error('Unrecognized command received: ' + command);\n        ***REMOVED***\n      ***REMOVED***,\n        (...args) => ***REMOVED***\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n      ***REMOVED***,\n        () => ***REMOVED***\n          this.onClosed_();\n      ***REMOVED***,\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: ***REMOVED*** [k: string]: string | number } = ***REMOVED***};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) ***REMOVED***\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n    ***REMOVED***\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) ***REMOVED***\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n    ***REMOVED***\n      if (this.lastSessionId) ***REMOVED***\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n    ***REMOVED***\n      if (this.applicationId) ***REMOVED***\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n    ***REMOVED***\n      if (this.appCheckToken) ***REMOVED***\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n    ***REMOVED***\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) ***REMOVED***\n        urlParams[REFERER_PARAM] = FORGE_REF;\n    ***REMOVED***\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => ***REMOVED***\n        /* do nothing */\n    ***REMOVED***);\n  ***REMOVED***);\n***REMOVED***\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() ***REMOVED***\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n***REMOVED***\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() ***REMOVED***\n    BrowserPollConnection.forceAllow_ = true;\n***REMOVED***\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() ***REMOVED***\n    BrowserPollConnection.forceDisallow_ = true;\n***REMOVED***\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() ***REMOVED***\n    if (isNodeSdk()) ***REMOVED***\n      return false;\n  ***REMOVED*** else if (BrowserPollConnection.forceAllow_) ***REMOVED***\n      return true;\n  ***REMOVED*** else ***REMOVED***\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() ***REMOVED***}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() ***REMOVED***\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) ***REMOVED***\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n  ***REMOVED***\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) ***REMOVED***\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n  ***REMOVED***\n\n    if (this.connectTimeoutTimer_) ***REMOVED***\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() ***REMOVED***\n    if (!this.isClosed_) ***REMOVED***\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) ***REMOVED***\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() ***REMOVED***\n    if (!this.isClosed_) ***REMOVED***\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: ***REMOVED***}) ***REMOVED***\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) ***REMOVED***\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) ***REMOVED***\n    if (isNodeSdk()) ***REMOVED***\n      return;\n  ***REMOVED***\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: ***REMOVED*** [k: string]: string } = ***REMOVED***};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n***REMOVED***\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) ***REMOVED***\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n***REMOVED***\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement ***REMOVED***\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder ***REMOVED***\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<***REMOVED*** seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) ***REMOVED***\n    if (!isNodeSdk()) ***REMOVED***\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) ***REMOVED***\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n    ***REMOVED***\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try ***REMOVED***\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n    ***REMOVED*** catch (e) ***REMOVED***\n        log('frame writing exception');\n        if (e.stack) ***REMOVED***\n          log(e.stack);\n      ***REMOVED***\n        log(e);\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement ***REMOVED***\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) ***REMOVED***\n      document.body.appendChild(iframe);\n      try ***REMOVED***\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) ***REMOVED***\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n      ***REMOVED***\n    ***REMOVED*** catch (e) ***REMOVED***\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function()***REMOVED***document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n  ***REMOVED***\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) ***REMOVED***\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n  ***REMOVED*** else if (iframe.contentWindow) ***REMOVED***\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ***REMOVED*** else if ((iframe as any).document) ***REMOVED***\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n  ***REMOVED***\n\n    return iframe;\n***REMOVED***\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() ***REMOVED***\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) ***REMOVED***\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting textContent seems to be the safest way to do this.\n      this.myIFrame.doc.body.textContent = '';\n      setTimeout(() => ***REMOVED***\n        if (this.myIFrame !== null) ***REMOVED***\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n      ***REMOVED***\n    ***REMOVED***, Math.floor(0));\n  ***REMOVED***\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) ***REMOVED***\n      this.onDisconnect = null;\n      onDisconnect();\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) ***REMOVED***\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) ***REMOVED***}\n***REMOVED***\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() ***REMOVED***\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) ***REMOVED***\n      //construct our url\n      this.currentSerial++;\n      const urlParams: ***REMOVED*** [k: string]: string | number } = ***REMOVED***};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) ***REMOVED***\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) ***REMOVED***\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n      ***REMOVED*** else ***REMOVED***\n          break;\n      ***REMOVED***\n    ***REMOVED***\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n  ***REMOVED*** else ***REMOVED***\n      return false;\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) ***REMOVED***\n    //add this to the queue of segments to send.\n    this.pendingSegs.push(***REMOVED*** seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) ***REMOVED***\n      this.newRequest_();\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) ***REMOVED***\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => ***REMOVED***\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n  ***REMOVED***;\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => ***REMOVED***\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n  ***REMOVED***;\n\n    this.addTag(url, readyStateCB);\n***REMOVED***\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) ***REMOVED***\n    if (isNodeSdk()) ***REMOVED***\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n  ***REMOVED*** else ***REMOVED***\n      setTimeout(() => ***REMOVED***\n        try ***REMOVED***\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) ***REMOVED***\n            return;\n        ***REMOVED***\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () ***REMOVED***\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') ***REMOVED***\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) ***REMOVED***\n                  newScript.parentNode.removeChild(newScript);\n              ***REMOVED***\n                loadCB();\n            ***REMOVED***\n          ***REMOVED***;\n          newScript.onerror = () => ***REMOVED***\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n        ***REMOVED***;\n          this.myIFrame.doc.body.appendChild(newScript);\n      ***REMOVED*** catch (e) ***REMOVED***\n          // TODO: we should make this error visible somehow\n      ***REMOVED***\n    ***REMOVED***, Math.floor(1));\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport ***REMOVED*** RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport ***REMOVED*** StatsCollection } from '../core/stats/StatsCollection';\nimport ***REMOVED*** statsManagerGetCollection } from '../core/stats/StatsManager';\nimport ***REMOVED*** PersistentStorage } from '../core/storage/storage';\nimport ***REMOVED*** logWrapper, splitStringBySize } from '../core/util/util';\nimport ***REMOVED*** SDK_VERSION } from '../core/version';\n\nimport ***REMOVED***\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport ***REMOVED*** Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') ***REMOVED***\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') ***REMOVED***\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) ***REMOVED***\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport ***REMOVED***\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: ***REMOVED***}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) ***REMOVED***\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n***REMOVED***\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string ***REMOVED***\n    const urlParams: ***REMOVED*** [k: string]: string } = ***REMOVED***};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) ***REMOVED***\n      urlParams[REFERER_PARAM] = FORGE_REF;\n  ***REMOVED***\n    if (transportSessionId) ***REMOVED***\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n  ***REMOVED***\n    if (lastSessionId) ***REMOVED***\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n  ***REMOVED***\n    if (appCheckToken) ***REMOVED***\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n  ***REMOVED***\n    if (applicationId) ***REMOVED***\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n  ***REMOVED***\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n***REMOVED***\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: ***REMOVED***}) => void, onDisconnect: (a?: boolean) => void) ***REMOVED***\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try ***REMOVED***\n      let options: ***REMOVED*** [k: string]: object };\n      if (isNodeSdk()) ***REMOVED***\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = ***REMOVED***\n          headers: ***REMOVED***\n            'User-Agent': `Firebase/$***REMOVED***PROTOCOL_VERSION}/$***REMOVED***SDK_VERSION}/$***REMOVED***process.platform}/$***REMOVED***device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n        ***REMOVED***\n      ***REMOVED***;\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) ***REMOVED***\n          options.headers['Authorization'] = `Bearer $***REMOVED***this.authToken}`;\n      ***REMOVED***\n        if (this.appCheckToken) ***REMOVED***\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n      ***REMOVED***\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) ***REMOVED***\n          options['proxy'] = ***REMOVED*** origin: proxy };\n      ***REMOVED***\n    ***REMOVED***\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n  ***REMOVED*** catch (e) ***REMOVED***\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) ***REMOVED***\n        this.log_(error);\n    ***REMOVED***\n      this.onClosed_();\n      return;\n  ***REMOVED***\n\n    this.mySock.onopen = () => ***REMOVED***\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n  ***REMOVED***;\n\n    this.mySock.onclose = () => ***REMOVED***\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n  ***REMOVED***;\n\n    this.mySock.onmessage = m => ***REMOVED***\n      this.handleIncomingFrame(m as ***REMOVED***});\n  ***REMOVED***;\n\n    this.mySock.onerror = e => ***REMOVED***\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) ***REMOVED***\n        this.log_(error);\n    ***REMOVED***\n      this.onClosed_();\n  ***REMOVED***;\n***REMOVED***\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() ***REMOVED***}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() ***REMOVED***\n    WebSocketConnection.forceDisallow_ = true;\n***REMOVED***\n\n  static isAvailable(): boolean ***REMOVED***\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) ***REMOVED***\n      const oldAndroidRegex = /Android ([0-9]***REMOVED***0,}\\.[0-9]***REMOVED***0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) ***REMOVED***\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) ***REMOVED***\n          isOldAndroid = true;\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n***REMOVED***\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean ***REMOVED***\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n***REMOVED***\n\n  markConnectionHealthy() ***REMOVED***\n    PersistentStorage.remove('previous_websocket_failure');\n***REMOVED***\n\n  private appendFrame_(data: string) ***REMOVED***\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) ***REMOVED***\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) ***REMOVED***\n    this.totalFrames = frameCount;\n    this.frames = [];\n***REMOVED***\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null ***REMOVED***\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) ***REMOVED***\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) ***REMOVED***\n        this.handleNewFrameCount_(frameCount);\n        return null;\n    ***REMOVED***\n  ***REMOVED***\n    this.handleNewFrameCount_(1);\n    return data;\n***REMOVED***\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: ***REMOVED*** [k: string]: unknown }) ***REMOVED***\n    if (this.mySock === null) ***REMOVED***\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n  ***REMOVED***\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) ***REMOVED***\n      // we're buffering\n      this.appendFrame_(data);\n  ***REMOVED*** else ***REMOVED***\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) ***REMOVED***\n        this.appendFrame_(remainingData);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: ***REMOVED***}) ***REMOVED***\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) ***REMOVED***\n      this.sendString_(String(dataSegs.length));\n  ***REMOVED***\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) ***REMOVED***\n      this.sendString_(dataSegs[i]);\n  ***REMOVED***\n***REMOVED***\n\n  private shutdown_() ***REMOVED***\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) ***REMOVED***\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n  ***REMOVED***\n\n    if (this.mySock) ***REMOVED***\n      this.mySock.close();\n      this.mySock = null;\n  ***REMOVED***\n***REMOVED***\n\n  private onClosed_() ***REMOVED***\n    if (!this.isClosed_) ***REMOVED***\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) ***REMOVED***\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() ***REMOVED***\n    if (!this.isClosed_) ***REMOVED***\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() ***REMOVED***\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => ***REMOVED***\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) ***REMOVED***\n        this.sendString_('0');\n    ***REMOVED***\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ***REMOVED***, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n***REMOVED***\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) ***REMOVED***\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try ***REMOVED***\n      this.mySock.send(str);\n  ***REMOVED*** catch (e) ***REMOVED***\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** RepoInfo } from '../core/RepoInfo';\nimport ***REMOVED*** warn } from '../core/util/util';\n\nimport ***REMOVED*** BrowserPollConnection } from './BrowserPollConnection';\nimport ***REMOVED*** TransportConstructor } from './Transport';\nimport ***REMOVED*** WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager ***REMOVED***\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() ***REMOVED***\n    return [BrowserPollConnection, WebSocketConnection];\n***REMOVED***\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() ***REMOVED***\n    return this.globalTransportInitialized_;\n***REMOVED***\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) ***REMOVED***\n    this.initTransports_(repoInfo);\n***REMOVED***\n\n  private initTransports_(repoInfo: RepoInfo) ***REMOVED***\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) ***REMOVED***\n      if (!isWebSocketsAvailable) ***REMOVED***\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n    ***REMOVED***\n\n      isSkipPollConnection = true;\n  ***REMOVED***\n\n    if (isSkipPollConnection) ***REMOVED***\n      this.transports_ = [WebSocketConnection];\n  ***REMOVED*** else ***REMOVED***\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) ***REMOVED***\n        if (transport && transport['isAvailable']()) ***REMOVED***\n          transports.push(transport);\n      ***REMOVED***\n    ***REMOVED***\n      TransportManager.globalTransportInitialized_ = true;\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor ***REMOVED***\n    if (this.transports_.length > 0) ***REMOVED***\n      return this.transports_[0];\n  ***REMOVED*** else ***REMOVED***\n      throw new Error('No transports available');\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null ***REMOVED***\n    if (this.transports_.length > 1) ***REMOVED***\n      return this.transports_[1];\n  ***REMOVED*** else ***REMOVED***\n      return null;\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** RepoInfo } from '../core/RepoInfo';\nimport ***REMOVED*** PersistentStorage } from '../core/storage/storage';\nimport ***REMOVED*** Indexable } from '../core/util/misc';\nimport ***REMOVED***\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport ***REMOVED*** PROTOCOL_VERSION } from './Constants';\nimport ***REMOVED*** Transport, TransportConstructor } from './Transport';\nimport ***REMOVED*** TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState ***REMOVED***\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection ***REMOVED***\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: ***REMOVED***}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) ***REMOVED***\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n***REMOVED***\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void ***REMOVED***\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => ***REMOVED***\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n  ***REMOVED***, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) ***REMOVED***\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => ***REMOVED***\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) ***REMOVED***\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) ***REMOVED***\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n        ***REMOVED*** else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) ***REMOVED***\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n        ***REMOVED*** else ***REMOVED***\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n        ***REMOVED***\n      ***REMOVED***\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ***REMOVED***, Math.floor(healthyTimeoutMS)) as any;\n  ***REMOVED***\n***REMOVED***\n\n  private nextTransportId_(): string ***REMOVED***\n    return 'c:' + this.id + ':' + this.connectionCount++;\n***REMOVED***\n\n  private disconnReceiver_(conn) ***REMOVED***\n    return everConnected => ***REMOVED***\n      if (conn === this.conn_) ***REMOVED***\n        this.onConnectionLost_(everConnected);\n    ***REMOVED*** else if (conn === this.secondaryConn_) ***REMOVED***\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n    ***REMOVED*** else ***REMOVED***\n        this.log_('closing an old connection');\n    ***REMOVED***\n  ***REMOVED***;\n***REMOVED***\n\n  private connReceiver_(conn: Transport) ***REMOVED***\n    return (message: Indexable) => ***REMOVED***\n      if (this.state_ !== RealtimeState.DISCONNECTED) ***REMOVED***\n        if (conn === this.rx_) ***REMOVED***\n          this.onPrimaryMessageReceived_(message);\n      ***REMOVED*** else if (conn === this.secondaryConn_) ***REMOVED***\n          this.onSecondaryMessageReceived_(message);\n      ***REMOVED*** else ***REMOVED***\n          this.log_('message on old connection');\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***;\n***REMOVED***\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) ***REMOVED***\n    // wrap in a data message envelope and send it on\n    const msg = ***REMOVED*** t: 'd', d: dataMsg };\n    this.sendData_(msg);\n***REMOVED***\n\n  tryCleanupConnection() ***REMOVED***\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) ***REMOVED***\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n  ***REMOVED***\n***REMOVED***\n\n  private onSecondaryControl_(controlData: ***REMOVED*** [k: string]: unknown }) ***REMOVED***\n    if (MESSAGE_TYPE in controlData) ***REMOVED***\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) ***REMOVED***\n        this.upgradeIfSecondaryHealthy_();\n    ***REMOVED*** else if (cmd === CONTROL_RESET) ***REMOVED***\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) ***REMOVED***\n          this.close();\n      ***REMOVED***\n    ***REMOVED*** else if (cmd === CONTROL_PONG) ***REMOVED***\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) ***REMOVED***\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') ***REMOVED***\n      this.onSecondaryControl_(data as Indexable);\n  ***REMOVED*** else if (layer === 'd') ***REMOVED***\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n  ***REMOVED*** else ***REMOVED***\n      throw new Error('Unknown protocol layer: ' + layer);\n  ***REMOVED***\n***REMOVED***\n\n  private upgradeIfSecondaryHealthy_() ***REMOVED***\n    if (this.secondaryResponsesRequired_ <= 0) ***REMOVED***\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n  ***REMOVED*** else ***REMOVED***\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send(***REMOVED*** t: 'c', d: ***REMOVED*** t: PING, d: ***REMOVED***} } });\n  ***REMOVED***\n***REMOVED***\n\n  private proceedWithUpgrade_() ***REMOVED***\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send(***REMOVED*** t: 'c', d: ***REMOVED*** t: SWITCH_ACK, d: ***REMOVED***} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send(***REMOVED*** t: 'c', d: ***REMOVED*** t: END_TRANSMISSION, d: ***REMOVED***} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n***REMOVED***\n\n  private onPrimaryMessageReceived_(parsedData: ***REMOVED*** [k: string]: unknown }) ***REMOVED***\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') ***REMOVED***\n      this.onControl_(data as ***REMOVED*** [k: string]: unknown });\n  ***REMOVED*** else if (layer === 'd') ***REMOVED***\n      this.onDataMessage_(data);\n  ***REMOVED***\n***REMOVED***\n\n  private onDataMessage_(message: unknown) ***REMOVED***\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n***REMOVED***\n\n  private onPrimaryResponse_() ***REMOVED***\n    if (!this.isHealthy_) ***REMOVED***\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) ***REMOVED***\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  private onControl_(controlData: ***REMOVED*** [k: string]: unknown }) ***REMOVED***\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) ***REMOVED***\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) ***REMOVED***\n        this.onHandshake_(\n          payload as ***REMOVED***\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n        ***REMOVED***\n        );\n    ***REMOVED*** else if (cmd === END_TRANSMISSION) ***REMOVED***\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) ***REMOVED***\n          this.onDataMessage_(this.pendingDataMessages[i]);\n      ***REMOVED***\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n    ***REMOVED*** else if (cmd === CONTROL_SHUTDOWN) ***REMOVED***\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n    ***REMOVED*** else if (cmd === CONTROL_RESET) ***REMOVED***\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n    ***REMOVED*** else if (cmd === CONTROL_ERROR) ***REMOVED***\n        error('Server Error: ' + payload);\n    ***REMOVED*** else if (cmd === CONTROL_PONG) ***REMOVED***\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n    ***REMOVED*** else ***REMOVED***\n        error('Unknown control packet command: ' + cmd);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: ***REMOVED***\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n***REMOVED***): void ***REMOVED***\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) ***REMOVED***\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) ***REMOVED***\n        warn('Protocol version mismatch detected');\n    ***REMOVED***\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n  ***REMOVED***\n***REMOVED***\n\n  private tryStartUpgrade_() ***REMOVED***\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) ***REMOVED***\n      this.startUpgrade_(conn);\n  ***REMOVED***\n***REMOVED***\n\n  private startUpgrade_(conn: TransportConstructor) ***REMOVED***\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => ***REMOVED***\n      if (this.secondaryConn_) ***REMOVED***\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n    ***REMOVED***\n  ***REMOVED***, Math.floor(UPGRADE_TIMEOUT));\n***REMOVED***\n\n  private onReset_(host: string) ***REMOVED***\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) ***REMOVED***\n      this.close();\n  ***REMOVED*** else ***REMOVED***\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n  ***REMOVED***\n***REMOVED***\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) ***REMOVED***\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) ***REMOVED***\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n  ***REMOVED***\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) ***REMOVED***\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n  ***REMOVED*** else ***REMOVED***\n      setTimeoutNonBlocking(() => ***REMOVED***\n        this.sendPingOnPrimaryIfNecessary_();\n    ***REMOVED***, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n  ***REMOVED***\n***REMOVED***\n\n  private sendPingOnPrimaryIfNecessary_() ***REMOVED***\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) ***REMOVED***\n      this.log_('sending ping on primary.');\n      this.sendData_(***REMOVED*** t: 'c', d: ***REMOVED*** t: PING, d: ***REMOVED***} } });\n  ***REMOVED***\n***REMOVED***\n\n  private onSecondaryConnectionLost_() ***REMOVED***\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) ***REMOVED***\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) ***REMOVED***\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) ***REMOVED***\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) ***REMOVED***\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n    ***REMOVED***\n  ***REMOVED*** else if (this.state_ === RealtimeState.CONNECTED) ***REMOVED***\n      this.log_('Realtime connection lost.');\n  ***REMOVED***\n\n    this.close();\n***REMOVED***\n\n  private onConnectionShutdown_(reason: string) ***REMOVED***\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) ***REMOVED***\n      this.onKill_(reason);\n      this.onKill_ = null;\n  ***REMOVED***\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n***REMOVED***\n\n  private sendData_(data: object) ***REMOVED***\n    if (this.state_ !== RealtimeState.CONNECTED) ***REMOVED***\n      throw 'Connection is not connected';\n  ***REMOVED*** else ***REMOVED***\n      this.tx_.send(data);\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() ***REMOVED***\n    if (this.state_ !== RealtimeState.DISCONNECTED) ***REMOVED***\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) ***REMOVED***\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  private closeConnections_() ***REMOVED***\n    this.log_('Shutting down all connections');\n    if (this.conn_) ***REMOVED***\n      this.conn_.close();\n      this.conn_ = null;\n  ***REMOVED***\n\n    if (this.secondaryConn_) ***REMOVED***\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n  ***REMOVED***\n\n    if (this.healthyTimeout_) ***REMOVED***\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions ***REMOVED***\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) ***REMOVED***}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) ***REMOVED***}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) ***REMOVED***}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) ***REMOVED***}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) ***REMOVED***}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) ***REMOVED***}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) ***REMOVED***}\n\n  reportStats(stats: ***REMOVED*** [k: string]: unknown }) ***REMOVED***}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter ***REMOVED***\n  private listeners_: ***REMOVED***\n    [eventType: string]: Array<***REMOVED***\n      callback(...args: unknown[]): void;\n      context: unknown;\n  ***REMOVED***>;\n***REMOVED*** = ***REMOVED***};\n\n  constructor(private allowedEvents_: string[]) ***REMOVED***\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n***REMOVED***\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns ***REMOVED***Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) ***REMOVED***\n    if (Array.isArray(this.listeners_[eventType])) ***REMOVED***\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) ***REMOVED***\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) ***REMOVED***\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push(***REMOVED*** callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) ***REMOVED***\n      callback.apply(context, eventData);\n  ***REMOVED***\n***REMOVED***\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) ***REMOVED***\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) ***REMOVED***\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) ***REMOVED***\n        listeners.splice(i, 1);\n        return;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  private validateEventType_(eventType: string) ***REMOVED***\n    assert(\n      this.allowedEvents_.find(et => ***REMOVED***\n        return et === eventType;\n    ***REMOVED***),\n      'Unknown event: ' + eventType\n    );\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert, isMobileCordova } from '@firebase/util';\n\nimport ***REMOVED*** EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter ***REMOVED***\n  private online_ = true;\n\n  static getInstance() ***REMOVED***\n    return new OnlineMonitor();\n***REMOVED***\n\n  constructor() ***REMOVED***\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) ***REMOVED***\n      window.addEventListener(\n        'online',\n        () => ***REMOVED***\n          if (!this.online_) ***REMOVED***\n            this.online_ = true;\n            this.trigger('online', true);\n        ***REMOVED***\n      ***REMOVED***,\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => ***REMOVED***\n          if (this.online_) ***REMOVED***\n            this.online_ = false;\n            this.trigger('online', false);\n        ***REMOVED***\n      ***REMOVED***,\n        false\n      );\n  ***REMOVED***\n***REMOVED***\n\n  getInitialEvent(eventType: string): boolean[] ***REMOVED***\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n***REMOVED***\n\n  currentlyOnline(): boolean ***REMOVED***\n    return this.online_;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** stringLength } from '@firebase/util';\n\nimport ***REMOVED*** nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path ***REMOVED***\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) ***REMOVED***\n    if (pieceNum === void 0) ***REMOVED***\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) ***REMOVED***\n        if (this.pieces_[i].length > 0) ***REMOVED***\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n      ***REMOVED***\n    ***REMOVED***\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n  ***REMOVED*** else ***REMOVED***\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n  ***REMOVED***\n***REMOVED***\n\n  toString(): string ***REMOVED***\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) ***REMOVED***\n      if (this.pieces_[i] !== '') ***REMOVED***\n        pathString += '/' + this.pieces_[i];\n    ***REMOVED***\n  ***REMOVED***\n\n    return pathString || '/';\n***REMOVED***\n}\n\nexport function newEmptyPath(): Path ***REMOVED***\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null ***REMOVED***\n  if (path.pieceNum_ >= path.pieces_.length) ***REMOVED***\n    return null;\n***REMOVED***\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number ***REMOVED***\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path ***REMOVED***\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) ***REMOVED***\n    pieceNum++;\n***REMOVED***\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null ***REMOVED***\n  if (path.pieceNum_ < path.pieces_.length) ***REMOVED***\n    return path.pieces_[path.pieces_.length - 1];\n***REMOVED***\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string ***REMOVED***\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) ***REMOVED***\n    if (path.pieces_[i] !== '') ***REMOVED***\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n  ***REMOVED***\n***REMOVED***\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] ***REMOVED***\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null ***REMOVED***\n  if (path.pieceNum_ >= path.pieces_.length) ***REMOVED***\n    return null;\n***REMOVED***\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) ***REMOVED***\n    pieces.push(path.pieces_[i]);\n***REMOVED***\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path ***REMOVED***\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) ***REMOVED***\n    pieces.push(path.pieces_[i]);\n***REMOVED***\n\n  if (childPathObj instanceof Path) ***REMOVED***\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) ***REMOVED***\n      pieces.push(childPathObj.pieces_[i]);\n  ***REMOVED***\n***REMOVED*** else ***REMOVED***\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) ***REMOVED***\n      if (childPieces[i].length > 0) ***REMOVED***\n        pieces.push(childPieces[i]);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean ***REMOVED***\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path ***REMOVED***\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) ***REMOVED***\n    return innerPath;\n***REMOVED*** else if (outer === inner) ***REMOVED***\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n***REMOVED*** else ***REMOVED***\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n***REMOVED***\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number ***REMOVED***\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) ***REMOVED***\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) ***REMOVED***\n      return cmp;\n  ***REMOVED***\n***REMOVED***\n  if (leftKeys.length === rightKeys.length) ***REMOVED***\n    return 0;\n***REMOVED***\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean ***REMOVED***\n  if (pathGetLength(path) !== pathGetLength(other)) ***REMOVED***\n    return false;\n***REMOVED***\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) ***REMOVED***\n    if (path.pieces_[i] !== other.pieces_[j]) ***REMOVED***\n      return false;\n  ***REMOVED***\n***REMOVED***\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean ***REMOVED***\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) ***REMOVED***\n    return false;\n***REMOVED***\n  while (i < path.pieces_.length) ***REMOVED***\n    if (path.pieces_[i] !== other.pieces_[j]) ***REMOVED***\n      return false;\n  ***REMOVED***\n    ++i;\n    ++j;\n***REMOVED***\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath ***REMOVED***\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) ***REMOVED***\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) ***REMOVED***\n      this.byteLength_ += stringLength(this.parts_[i]);\n  ***REMOVED***\n    validationPathCheckValid(this);\n***REMOVED***\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void ***REMOVED***\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) ***REMOVED***\n    validationPath.byteLength_ += 1;\n***REMOVED***\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void ***REMOVED***\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) ***REMOVED***\n    validationPath.byteLength_ -= 1;\n***REMOVED***\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void ***REMOVED***\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) ***REMOVED***\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n***REMOVED***\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) ***REMOVED***\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n***REMOVED***\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string ***REMOVED***\n  if (validationPath.parts_.length === 0) ***REMOVED***\n    return '';\n***REMOVED***\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter ***REMOVED***\n  private visible_: boolean;\n\n  static getInstance() ***REMOVED***\n    return new VisibilityMonitor();\n***REMOVED***\n\n  constructor() ***REMOVED***\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) ***REMOVED***\n      if (typeof document['hidden'] !== 'undefined') ***REMOVED***\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n    ***REMOVED*** else if (typeof document['mozHidden'] !== 'undefined') ***REMOVED***\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n    ***REMOVED*** else if (typeof document['msHidden'] !== 'undefined') ***REMOVED***\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n    ***REMOVED*** else if (typeof document['webkitHidden'] !== 'undefined') ***REMOVED***\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n    ***REMOVED***\n  ***REMOVED***\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) ***REMOVED***\n      document.addEventListener(\n        visibilityChange,\n        () => ***REMOVED***\n          const visible = !document[hidden];\n          if (visible !== this.visible_) ***REMOVED***\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n        ***REMOVED***\n      ***REMOVED***,\n        false\n      );\n  ***REMOVED***\n***REMOVED***\n\n  getInitialEvent(eventType: string): boolean[] ***REMOVED***\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport ***REMOVED*** Connection } from '../realtime/Connection';\n\nimport ***REMOVED*** AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport ***REMOVED*** AuthTokenProvider } from './AuthTokenProvider';\nimport ***REMOVED*** RepoInfo } from './RepoInfo';\nimport ***REMOVED*** ServerActions } from './ServerActions';\nimport ***REMOVED*** OnlineMonitor } from './util/OnlineMonitor';\nimport ***REMOVED*** Path } from './util/Path';\nimport ***REMOVED*** error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport ***REMOVED*** VisibilityMonitor } from './util/VisibilityMonitor';\nimport ***REMOVED*** SDK_VERSION } from './version';\nimport ***REMOVED*** QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec ***REMOVED***\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest ***REMOVED***\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut ***REMOVED***\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet ***REMOVED***\n  request: object;\n  onComplete: (response: ***REMOVED*** [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions ***REMOVED***\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: ***REMOVED*** [reason: string]: boolean } = ***REMOVED***};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: ***REMOVED*** [k: number]: (a: unknown) => void } = ***REMOVED***};\n  private requestNumber_ = 0;\n\n  private realtime_: ***REMOVED***\n    sendRequest(a: object): void;\n    close(): void;\n***REMOVED*** | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) ***REMOVED***\n    super();\n\n    if (authOverride_ && !isNodeSdk()) ***REMOVED***\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n  ***REMOVED***\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) ***REMOVED***\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n  ***REMOVED***\n***REMOVED***\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) ***REMOVED***\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = ***REMOVED*** r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) ***REMOVED***\n      this.requestCBHash_[curReqNum] = onResponse;\n  ***REMOVED***\n***REMOVED***\n\n  get(query: QueryContext): Promise<string> ***REMOVED***\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = ***REMOVED***\n      p: query._path.toString(),\n      q: query._queryObject\n  ***REMOVED***;\n    const outstandingGet = ***REMOVED***\n      action: 'g',\n      request,\n      onComplete: (message: ***REMOVED*** [k: string]: unknown }) => ***REMOVED***\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') ***REMOVED***\n          deferred.resolve(payload);\n      ***REMOVED*** else ***REMOVED***\n          deferred.reject(payload);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***;\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) ***REMOVED***\n      this.sendGet_(index);\n  ***REMOVED***\n\n    return deferred.promise;\n***REMOVED***\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) ***REMOVED***\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) ***REMOVED***\n      this.listens.set(pathString, new Map());\n  ***REMOVED***\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = ***REMOVED***\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n  ***REMOVED***;\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) ***REMOVED***\n      this.sendListen_(listenSpec);\n  ***REMOVED***\n***REMOVED***\n\n  private sendGet_(index: number) ***REMOVED***\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: ***REMOVED*** [k: string]: unknown }) => ***REMOVED***\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) ***REMOVED***\n        this.outstandingGets_ = [];\n    ***REMOVED***\n      if (get.onComplete) ***REMOVED***\n        get.onComplete(message);\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n\n  private sendListen_(listenSpec: ListenSpec) ***REMOVED***\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: ***REMOVED*** [k: string]: unknown } = ***REMOVED*** /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) ***REMOVED***\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n  ***REMOVED***\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: ***REMOVED*** [k: string]: unknown }) => ***REMOVED***\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) ***REMOVED***\n        this.log_('listen response', message);\n\n        if (status !== 'ok') ***REMOVED***\n          this.removeListen_(pathString, queryId);\n      ***REMOVED***\n\n        if (listenSpec.onComplete) ***REMOVED***\n          listenSpec.onComplete(status, payload);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) ***REMOVED***\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) ***REMOVED***\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) ***REMOVED***\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding $***REMOVED***indexSpec} at ` +\n            `$***REMOVED***indexPath} to your security rules for better performance.`\n        );\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  refreshAuthToken(token: string) ***REMOVED***\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) ***REMOVED***\n      this.tryAuth();\n  ***REMOVED*** else ***REMOVED***\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) ***REMOVED***\n        this.sendRequest('unauth', ***REMOVED***}, () => ***REMOVED***});\n    ***REMOVED***\n  ***REMOVED***\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n***REMOVED***\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) ***REMOVED***\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) ***REMOVED***\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n  ***REMOVED***\n***REMOVED***\n\n  refreshAppCheckToken(token: string | null) ***REMOVED***\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) ***REMOVED***\n      this.tryAppCheck();\n  ***REMOVED*** else ***REMOVED***\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) ***REMOVED***\n        this.sendRequest('unappeck', ***REMOVED***}, () => ***REMOVED***});\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() ***REMOVED***\n    if (this.connected_ && this.authToken_) ***REMOVED***\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: ***REMOVED*** [k: string]: unknown } = ***REMOVED*** cred: token };\n      if (this.authOverride_ === null) ***REMOVED***\n        requestData['noauth'] = true;\n    ***REMOVED*** else if (typeof this.authOverride_ === 'object') ***REMOVED***\n        requestData['authvar'] = this.authOverride_;\n    ***REMOVED***\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: ***REMOVED*** [k: string]: unknown }) => ***REMOVED***\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) ***REMOVED***\n            if (status === 'ok') ***REMOVED***\n              this.invalidAuthTokenCount_ = 0;\n          ***REMOVED*** else ***REMOVED***\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n          ***REMOVED***\n        ***REMOVED***\n      ***REMOVED***\n      );\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() ***REMOVED***\n    if (this.connected_ && this.appCheckToken_) ***REMOVED***\n      this.sendRequest(\n        'appcheck',\n        ***REMOVED*** 'token': this.appCheckToken_ },\n        (res: ***REMOVED*** [k: string]: unknown }) => ***REMOVED***\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') ***REMOVED***\n            this.invalidAppCheckTokenCount_ = 0;\n        ***REMOVED*** else ***REMOVED***\n            this.onAppCheckRevoked_(status, data);\n        ***REMOVED***\n      ***REMOVED***\n      );\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) ***REMOVED***\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) ***REMOVED***\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n  ***REMOVED***\n***REMOVED***\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) ***REMOVED***\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: ***REMOVED*** [k: string]: unknown } = ***REMOVED*** /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) ***REMOVED***\n      req['q'] = queryObj;\n      req['t'] = tag;\n  ***REMOVED***\n\n    this.sendRequest(action, req);\n***REMOVED***\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) ***REMOVED***\n    this.initConnection_();\n\n    if (this.connected_) ***REMOVED***\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n  ***REMOVED*** else ***REMOVED***\n      this.onDisconnectRequestQueue_.push(***REMOVED***\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n    ***REMOVED***);\n  ***REMOVED***\n***REMOVED***\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) ***REMOVED***\n    this.initConnection_();\n\n    if (this.connected_) ***REMOVED***\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n  ***REMOVED*** else ***REMOVED***\n      this.onDisconnectRequestQueue_.push(***REMOVED***\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n    ***REMOVED***);\n  ***REMOVED***\n***REMOVED***\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) ***REMOVED***\n    this.initConnection_();\n\n    if (this.connected_) ***REMOVED***\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n  ***REMOVED*** else ***REMOVED***\n      this.onDisconnectRequestQueue_.push(***REMOVED***\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n    ***REMOVED***);\n  ***REMOVED***\n***REMOVED***\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) ***REMOVED***\n    const request = ***REMOVED*** /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: ***REMOVED*** [k: string]: unknown }) => ***REMOVED***\n      if (onComplete) ***REMOVED***\n        setTimeout(() => ***REMOVED***\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n      ***REMOVED***, Math.floor(0));\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) ***REMOVED***\n    this.putInternal('p', pathString, data, onComplete, hash);\n***REMOVED***\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) ***REMOVED***\n    this.putInternal('m', pathString, data, onComplete, hash);\n***REMOVED***\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) ***REMOVED***\n    this.initConnection_();\n\n    const request: ***REMOVED*** [k: string]: unknown } = ***REMOVED***\n      /*path*/ p: pathString,\n      /*data*/ d: data\n  ***REMOVED***;\n\n    if (hash !== undefined) ***REMOVED***\n      request[/*hash*/ 'h'] = hash;\n  ***REMOVED***\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push(***REMOVED***\n      action,\n      request,\n      onComplete\n  ***REMOVED***);\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) ***REMOVED***\n      this.sendPut_(index);\n  ***REMOVED*** else ***REMOVED***\n      this.log_('Buffering put: ' + pathString);\n  ***REMOVED***\n***REMOVED***\n\n  private sendPut_(index: number) ***REMOVED***\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: ***REMOVED*** [k: string]: unknown }) => ***REMOVED***\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) ***REMOVED***\n        this.outstandingPuts_ = [];\n    ***REMOVED***\n\n      if (onComplete) ***REMOVED***\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n\n  reportStats(stats: ***REMOVED*** [k: string]: unknown }) ***REMOVED***\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) ***REMOVED***\n      const request = ***REMOVED*** /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => ***REMOVED***\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') ***REMOVED***\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n      ***REMOVED***\n    ***REMOVED***);\n  ***REMOVED***\n***REMOVED***\n\n  private onDataMessage_(message: ***REMOVED*** [k: string]: unknown }) ***REMOVED***\n    if ('r' in message) ***REMOVED***\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) ***REMOVED***\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n    ***REMOVED***\n  ***REMOVED*** else if ('error' in message) ***REMOVED***\n      throw 'A server-side error has occurred: ' + message['error'];\n  ***REMOVED*** else if ('a' in message) ***REMOVED***\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as ***REMOVED***});\n  ***REMOVED***\n***REMOVED***\n\n  private onDataPush_(action: string, body: ***REMOVED*** [k: string]: unknown }) ***REMOVED***\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') ***REMOVED***\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n  ***REMOVED*** else if (action === 'm') ***REMOVED***\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n  ***REMOVED*** else if (action === 'c') ***REMOVED***\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n  ***REMOVED*** else if (action === 'ac') ***REMOVED***\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n  ***REMOVED*** else if (action === 'apc') ***REMOVED***\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n  ***REMOVED*** else if (action === 'sd') ***REMOVED***\n      this.onSecurityDebugPacket_(body);\n  ***REMOVED*** else ***REMOVED***\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n  ***REMOVED***\n***REMOVED***\n\n  private onReady_(timestamp: number, sessionId: string) ***REMOVED***\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) ***REMOVED***\n      this.sendConnectStats_();\n  ***REMOVED***\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n***REMOVED***\n\n  private scheduleConnect_(timeout: number) ***REMOVED***\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) ***REMOVED***\n      clearTimeout(this.establishConnectionTimer_);\n  ***REMOVED***\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => ***REMOVED***\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ***REMOVED***, Math.floor(timeout)) as any;\n***REMOVED***\n\n  private initConnection_() ***REMOVED***\n    if (!this.realtime_ && this.firstConnection_) ***REMOVED***\n      this.scheduleConnect_(0);\n  ***REMOVED***\n***REMOVED***\n\n  private onVisible_(visible: boolean) ***REMOVED***\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) ***REMOVED***\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) ***REMOVED***\n        this.scheduleConnect_(0);\n    ***REMOVED***\n  ***REMOVED***\n    this.visible_ = visible;\n***REMOVED***\n\n  private onOnline_(online: boolean) ***REMOVED***\n    if (online) ***REMOVED***\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) ***REMOVED***\n        this.scheduleConnect_(0);\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) ***REMOVED***\n        this.realtime_.close();\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  private onRealtimeDisconnect_() ***REMOVED***\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = ***REMOVED***};\n\n    if (this.shouldReconnect_()) ***REMOVED***\n      if (!this.visible_) ***REMOVED***\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n    ***REMOVED*** else if (this.lastConnectionEstablishedTime_) ***REMOVED***\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) ***REMOVED***\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      ***REMOVED***\n        this.lastConnectionEstablishedTime_ = null;\n    ***REMOVED***\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n  ***REMOVED***\n    this.onConnectStatus_(false);\n***REMOVED***\n\n  private async establishConnection_() ***REMOVED***\n    if (this.shouldReconnect_()) ***REMOVED***\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () ***REMOVED***\n        if (connection) ***REMOVED***\n          connection.close();\n      ***REMOVED*** else ***REMOVED***\n          canceled = true;\n          onDisconnect();\n      ***REMOVED***\n    ***REMOVED***;\n      const sendRequestFn = function (msg: object) ***REMOVED***\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n    ***REMOVED***;\n\n      this.realtime_ = ***REMOVED***\n        close: closeFn,\n        sendRequest: sendRequestFn\n    ***REMOVED***;\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try ***REMOVED***\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) ***REMOVED***\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => ***REMOVED***\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n          ***REMOVED***,\n            lastSessionId\n          );\n      ***REMOVED*** else ***REMOVED***\n          log('getToken() completed but was canceled');\n      ***REMOVED***\n    ***REMOVED*** catch (error) ***REMOVED***\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) ***REMOVED***\n          if (this.repoInfo_.nodeAdmin) ***REMOVED***\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n        ***REMOVED***\n          closeFn();\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  interrupt(reason: string) ***REMOVED***\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) ***REMOVED***\n      this.realtime_.close();\n  ***REMOVED*** else ***REMOVED***\n      if (this.establishConnectionTimer_) ***REMOVED***\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n    ***REMOVED***\n      if (this.connected_) ***REMOVED***\n        this.onRealtimeDisconnect_();\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  resume(reason: string) ***REMOVED***\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) ***REMOVED***\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) ***REMOVED***\n        this.scheduleConnect_(0);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  private handleTimestamp_(timestamp: number) ***REMOVED***\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_(***REMOVED*** serverTimeOffset: delta });\n***REMOVED***\n\n  private cancelSentTransactions_() ***REMOVED***\n    for (let i = 0; i < this.outstandingPuts_.length; i++) ***REMOVED***\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) ***REMOVED***\n        if (put.onComplete) ***REMOVED***\n          put.onComplete('disconnect');\n      ***REMOVED***\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n    ***REMOVED***\n  ***REMOVED***\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) ***REMOVED***\n      this.outstandingPuts_ = [];\n  ***REMOVED***\n***REMOVED***\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) ***REMOVED***\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) ***REMOVED***\n      queryId = 'default';\n  ***REMOVED*** else ***REMOVED***\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n  ***REMOVED***\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) ***REMOVED***\n      listen.onComplete('permission_denied');\n  ***REMOVED***\n***REMOVED***\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec ***REMOVED***\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) ***REMOVED***\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) ***REMOVED***\n        this.listens.delete(normalizedPathString);\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      // all listens for this path has already been removed\n      listen = undefined;\n  ***REMOVED***\n    return listen;\n***REMOVED***\n\n  private onAuthRevoked_(statusCode: string, explanation: string) ***REMOVED***\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') ***REMOVED***\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) ***REMOVED***\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) ***REMOVED***\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') ***REMOVED***\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) ***REMOVED***\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  private onSecurityDebugPacket_(body: ***REMOVED*** [k: string]: unknown }) ***REMOVED***\n    if (this.securityDebugCallback_) ***REMOVED***\n      this.securityDebugCallback_(body);\n  ***REMOVED*** else ***REMOVED***\n      if ('msg' in body) ***REMOVED***\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  private restoreState_() ***REMOVED***\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) ***REMOVED***\n      for (const listenSpec of queries.values()) ***REMOVED***\n        this.sendListen_(listenSpec);\n    ***REMOVED***\n  ***REMOVED***\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) ***REMOVED***\n      if (this.outstandingPuts_[i]) ***REMOVED***\n        this.sendPut_(i);\n    ***REMOVED***\n  ***REMOVED***\n\n    while (this.onDisconnectRequestQueue_.length) ***REMOVED***\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n  ***REMOVED***\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) ***REMOVED***\n      if (this.outstandingGets_[i]) ***REMOVED***\n        this.sendGet_(i);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() ***REMOVED***\n    const stats: ***REMOVED*** [k: string]: number } = ***REMOVED***};\n\n    let clientName = 'js';\n    if (isNodeSdk()) ***REMOVED***\n      if (this.repoInfo_.nodeAdmin) ***REMOVED***\n        clientName = 'admin_node';\n    ***REMOVED*** else ***REMOVED***\n        clientName = 'node';\n    ***REMOVED***\n  ***REMOVED***\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) ***REMOVED***\n      stats['framework.cordova'] = 1;\n  ***REMOVED*** else if (isReactNative()) ***REMOVED***\n      stats['framework.reactnative'] = 1;\n  ***REMOVED***\n    this.reportStats(stats);\n***REMOVED***\n\n  private shouldReconnect_(): boolean ***REMOVED***\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Path } from '../util/Path';\n\nimport ***REMOVED*** Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node ***REMOVED***\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode ***REMOVED***\n  constructor(public name: string, public node: Node) ***REMOVED***}\n\n  static Wrap(name: string, node: Node) ***REMOVED***\n    return new NamedNode(name, node);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Comparator } from '../../util/SortedMap';\nimport ***REMOVED*** MIN_NAME } from '../../util/util';\nimport ***REMOVED*** Node, NamedNode } from '../Node';\n\nexport abstract class Index ***REMOVED***\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> ***REMOVED***\n    return this.compare.bind(this);\n***REMOVED***\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean ***REMOVED***\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n***REMOVED***\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode ***REMOVED***\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n***REMOVED***\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert, assertionError } from '@firebase/util';\n\nimport ***REMOVED*** nameCompare, MAX_NAME } from '../../util/util';\nimport ***REMOVED*** ChildrenNode } from '../ChildrenNode';\nimport ***REMOVED*** Node, NamedNode } from '../Node';\n\nimport ***REMOVED*** Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index ***REMOVED***\n  static get __EMPTY_NODE() ***REMOVED***\n    return __EMPTY_NODE;\n***REMOVED***\n\n  static set __EMPTY_NODE(val) ***REMOVED***\n    __EMPTY_NODE = val;\n***REMOVED***\n  compare(a: NamedNode, b: NamedNode): number ***REMOVED***\n    return nameCompare(a.name, b.name);\n***REMOVED***\n  isDefinedOn(node: Node): boolean ***REMOVED***\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n***REMOVED***\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean ***REMOVED***\n    return false; // The key for a node never changes.\n***REMOVED***\n  minPost() ***REMOVED***\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n***REMOVED***\n  maxPost(): NamedNode ***REMOVED***\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n***REMOVED***\n\n  makePost(indexValue: string, name: string): NamedNode ***REMOVED***\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n***REMOVED***\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string ***REMOVED***\n    return '.key';\n***REMOVED***\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> ***REMOVED***\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) ***REMOVED***\n    let cmp = 1;\n    while (!node.isEmpty()) ***REMOVED***\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) ***REMOVED***\n        cmp *= -1;\n    ***REMOVED***\n\n      if (cmp < 0) ***REMOVED***\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) ***REMOVED***\n          node = node.left;\n      ***REMOVED*** else ***REMOVED***\n          node = node.right;\n      ***REMOVED***\n    ***REMOVED*** else if (cmp === 0) ***REMOVED***\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n    ***REMOVED*** else ***REMOVED***\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) ***REMOVED***\n          node = node.right;\n      ***REMOVED*** else ***REMOVED***\n          node = node.left;\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  getNext(): T ***REMOVED***\n    if (this.nodeStack_.length === 0) ***REMOVED***\n      return null;\n  ***REMOVED***\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) ***REMOVED***\n      result = this.resultGenerator_(node.key, node.value);\n  ***REMOVED*** else ***REMOVED***\n      result = ***REMOVED*** key: node.key, value: node.value } as unknown as T;\n  ***REMOVED***\n\n    if (this.isReverse_) ***REMOVED***\n      node = node.left;\n      while (!node.isEmpty()) ***REMOVED***\n        this.nodeStack_.push(node);\n        node = node.right;\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      node = node.right;\n      while (!node.isEmpty()) ***REMOVED***\n        this.nodeStack_.push(node);\n        node = node.left;\n    ***REMOVED***\n  ***REMOVED***\n\n    return result;\n***REMOVED***\n\n  hasNext(): boolean ***REMOVED***\n    return this.nodeStack_.length > 0;\n***REMOVED***\n\n  peek(): T ***REMOVED***\n    if (this.nodeStack_.length === 0) ***REMOVED***\n      return null;\n  ***REMOVED***\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) ***REMOVED***\n      return this.resultGenerator_(node.key, node.value);\n  ***REMOVED*** else ***REMOVED***\n      return ***REMOVED*** key: node.key, value: node.value } as unknown as T;\n  ***REMOVED***\n***REMOVED***\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> ***REMOVED***\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) ***REMOVED***\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n***REMOVED***\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> ***REMOVED***\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n***REMOVED***\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number ***REMOVED***\n    return this.left.count() + 1 + this.right.count();\n***REMOVED***\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean ***REMOVED***\n    return false;\n***REMOVED***\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean ***REMOVED***\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n***REMOVED***\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean ***REMOVED***\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n***REMOVED***\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> ***REMOVED***\n    if (this.left.isEmpty()) ***REMOVED***\n      return this;\n  ***REMOVED*** else ***REMOVED***\n      return (this.left as LLRBNode<K, V>).min_();\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K ***REMOVED***\n    return this.min_().key;\n***REMOVED***\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K ***REMOVED***\n    if (this.right.isEmpty()) ***REMOVED***\n      return this.key;\n  ***REMOVED*** else ***REMOVED***\n      return this.right.maxKey();\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> ***REMOVED***\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) ***REMOVED***\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n  ***REMOVED*** else if (cmp === 0) ***REMOVED***\n      n = n.copy(null, value, null, null, null);\n  ***REMOVED*** else ***REMOVED***\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n  ***REMOVED***\n    return n.fixUp_();\n***REMOVED***\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> ***REMOVED***\n    if (this.left.isEmpty()) ***REMOVED***\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n  ***REMOVED***\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) ***REMOVED***\n      n = n.moveRedLeft_();\n  ***REMOVED***\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n***REMOVED***\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> ***REMOVED***\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) ***REMOVED***\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) ***REMOVED***\n        n = n.moveRedLeft_();\n    ***REMOVED***\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n  ***REMOVED*** else ***REMOVED***\n      if (n.left.isRed_()) ***REMOVED***\n        n = n.rotateRight_();\n    ***REMOVED***\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) ***REMOVED***\n        n = n.moveRedRight_();\n    ***REMOVED***\n      if (comparator(key, n.key) === 0) ***REMOVED***\n        if (n.right.isEmpty()) ***REMOVED***\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n      ***REMOVED*** else ***REMOVED***\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n      ***REMOVED***\n    ***REMOVED***\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n  ***REMOVED***\n    return n.fixUp_();\n***REMOVED***\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean ***REMOVED***\n    return this.color;\n***REMOVED***\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> ***REMOVED***\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) ***REMOVED***\n      n = n.rotateLeft_();\n  ***REMOVED***\n    if (n.left.isRed_() && n.left.left.isRed_()) ***REMOVED***\n      n = n.rotateRight_();\n  ***REMOVED***\n    if (n.left.isRed_() && n.right.isRed_()) ***REMOVED***\n      n = n.colorFlip_();\n  ***REMOVED***\n    return n;\n***REMOVED***\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> ***REMOVED***\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) ***REMOVED***\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n  ***REMOVED***\n    return n;\n***REMOVED***\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> ***REMOVED***\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) ***REMOVED***\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n  ***REMOVED***\n    return n;\n***REMOVED***\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> ***REMOVED***\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n***REMOVED***\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> ***REMOVED***\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n***REMOVED***\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> ***REMOVED***\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n***REMOVED***\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean ***REMOVED***\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n***REMOVED***\n\n  check_(): number ***REMOVED***\n    if (this.isRed_() && this.left.isRed_()) ***REMOVED***\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n  ***REMOVED***\n    if (this.right.isRed_()) ***REMOVED***\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n  ***REMOVED***\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) ***REMOVED***\n      throw new Error('Black depths differ');\n  ***REMOVED*** else ***REMOVED***\n      return blackDepth + (this.isRed_() ? 0 : 1);\n  ***REMOVED***\n***REMOVED***\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> ***REMOVED***\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> ***REMOVED***\n    return this;\n***REMOVED***\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> ***REMOVED***\n    return new LLRBNode(key, value, null);\n***REMOVED***\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> ***REMOVED***\n    return this;\n***REMOVED***\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number ***REMOVED***\n    return 0;\n***REMOVED***\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean ***REMOVED***\n    return true;\n***REMOVED***\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean ***REMOVED***\n    return false;\n***REMOVED***\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean ***REMOVED***\n    return false;\n***REMOVED***\n\n  minKey(): null ***REMOVED***\n    return null;\n***REMOVED***\n\n  maxKey(): null ***REMOVED***\n    return null;\n***REMOVED***\n\n  check_(): number ***REMOVED***\n    return 0;\n***REMOVED***\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> ***REMOVED***\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) ***REMOVED***}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> ***REMOVED***\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n***REMOVED***\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> ***REMOVED***\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n***REMOVED***\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null ***REMOVED***\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) ***REMOVED***\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) ***REMOVED***\n        return node.value;\n    ***REMOVED*** else if (cmp < 0) ***REMOVED***\n        node = node.left;\n    ***REMOVED*** else if (cmp > 0) ***REMOVED***\n        node = node.right;\n    ***REMOVED***\n  ***REMOVED***\n    return null;\n***REMOVED***\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null ***REMOVED***\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) ***REMOVED***\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) ***REMOVED***\n        if (!node.left.isEmpty()) ***REMOVED***\n          node = node.left;\n          while (!node.right.isEmpty()) ***REMOVED***\n            node = node.right;\n        ***REMOVED***\n          return node.key;\n      ***REMOVED*** else if (rightParent) ***REMOVED***\n          return rightParent.key;\n      ***REMOVED*** else ***REMOVED***\n          return null; // first item.\n      ***REMOVED***\n    ***REMOVED*** else if (cmp < 0) ***REMOVED***\n        node = node.left;\n    ***REMOVED*** else if (cmp > 0) ***REMOVED***\n        rightParent = node;\n        node = node.right;\n    ***REMOVED***\n  ***REMOVED***\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n***REMOVED***\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean ***REMOVED***\n    return this.root_.isEmpty();\n***REMOVED***\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number ***REMOVED***\n    return this.root_.count();\n***REMOVED***\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null ***REMOVED***\n    return this.root_.minKey();\n***REMOVED***\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null ***REMOVED***\n    return this.root_.maxKey();\n***REMOVED***\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean ***REMOVED***\n    return this.root_.inorderTraversal(action);\n***REMOVED***\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean ***REMOVED***\n    return this.root_.reverseTraversal(action);\n***REMOVED***\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> ***REMOVED***\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n***REMOVED***\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> ***REMOVED***\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n***REMOVED***\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> ***REMOVED***\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n***REMOVED***\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> ***REMOVED***\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** nameCompare } from '../util/util';\n\nimport ***REMOVED*** NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) ***REMOVED***\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) ***REMOVED***\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert, contains } from '@firebase/util';\n\nimport ***REMOVED*** Indexable } from '../util/misc';\nimport ***REMOVED*** doubleToIEEE754String } from '../util/util';\n\nimport ***REMOVED*** Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) ***REMOVED***\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string ***REMOVED***\n  if (typeof priority === 'number') ***REMOVED***\n    return 'number:' + doubleToIEEE754String(priority);\n***REMOVED*** else ***REMOVED***\n    return 'string:' + priority;\n***REMOVED***\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) ***REMOVED***\n  if (priorityNode.isLeafNode()) ***REMOVED***\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n***REMOVED*** else ***REMOVED***\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n***REMOVED***\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** Indexable } from '../util/misc';\nimport ***REMOVED***\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport ***REMOVED*** doubleToIEEE754String, sha1 } from '../util/util';\n\nimport ***REMOVED*** ChildrenNodeConstructor } from './ChildrenNode';\nimport ***REMOVED*** Index } from './indexes/Index';\nimport ***REMOVED*** Node } from './Node';\nimport ***REMOVED*** priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node ***REMOVED***\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) ***REMOVED***\n    __childrenNodeConstructor = val;\n***REMOVED***\n\n  static get __childrenNodeConstructor() ***REMOVED***\n    return __childrenNodeConstructor;\n***REMOVED***\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) ***REMOVED***\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n***REMOVED***\n\n  /** @inheritDoc */\n  isLeafNode(): boolean ***REMOVED***\n    return true;\n***REMOVED***\n\n  /** @inheritDoc */\n  getPriority(): Node ***REMOVED***\n    return this.priorityNode_;\n***REMOVED***\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node ***REMOVED***\n    return new LeafNode(this.value_, newPriorityNode);\n***REMOVED***\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node ***REMOVED***\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') ***REMOVED***\n      return this.priorityNode_;\n  ***REMOVED*** else ***REMOVED***\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n  ***REMOVED***\n***REMOVED***\n\n  /** @inheritDoc */\n  getChild(path: Path): Node ***REMOVED***\n    if (pathIsEmpty(path)) ***REMOVED***\n      return this;\n  ***REMOVED*** else if (pathGetFront(path) === '.priority') ***REMOVED***\n      return this.priorityNode_;\n  ***REMOVED*** else ***REMOVED***\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n  ***REMOVED***\n***REMOVED***\n  hasChild(): boolean ***REMOVED***\n    return false;\n***REMOVED***\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null ***REMOVED***\n    return null;\n***REMOVED***\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node ***REMOVED***\n    if (childName === '.priority') ***REMOVED***\n      return this.updatePriority(newChildNode);\n  ***REMOVED*** else if (newChildNode.isEmpty() && childName !== '.priority') ***REMOVED***\n      return this;\n  ***REMOVED*** else ***REMOVED***\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n  ***REMOVED***\n***REMOVED***\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node ***REMOVED***\n    const front = pathGetFront(path);\n    if (front === null) ***REMOVED***\n      return newChildNode;\n  ***REMOVED*** else if (newChildNode.isEmpty() && front !== '.priority') ***REMOVED***\n      return this;\n  ***REMOVED*** else ***REMOVED***\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n  ***REMOVED***\n***REMOVED***\n\n  /** @inheritDoc */\n  isEmpty(): boolean ***REMOVED***\n    return false;\n***REMOVED***\n\n  /** @inheritDoc */\n  numChildren(): number ***REMOVED***\n    return 0;\n***REMOVED***\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean ***REMOVED***\n    return false;\n***REMOVED***\n  val(exportFormat?: boolean): ***REMOVED***} ***REMOVED***\n    if (exportFormat && !this.getPriority().isEmpty()) ***REMOVED***\n      return ***REMOVED***\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n    ***REMOVED***;\n  ***REMOVED*** else ***REMOVED***\n      return this.getValue();\n  ***REMOVED***\n***REMOVED***\n\n  /** @inheritDoc */\n  hash(): string ***REMOVED***\n    if (this.lazyHash_ === null) ***REMOVED***\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) ***REMOVED***\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n    ***REMOVED***\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') ***REMOVED***\n        toHash += doubleToIEEE754String(this.value_ as number);\n    ***REMOVED*** else ***REMOVED***\n        toHash += this.value_;\n    ***REMOVED***\n      this.lazyHash_ = sha1(toHash);\n  ***REMOVED***\n    return this.lazyHash_;\n***REMOVED***\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean ***REMOVED***\n    return this.value_;\n***REMOVED***\n  compareTo(other: Node): number ***REMOVED***\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) ***REMOVED***\n      return 1;\n  ***REMOVED*** else if (other instanceof LeafNode.__childrenNodeConstructor) ***REMOVED***\n      return -1;\n  ***REMOVED*** else ***REMOVED***\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number ***REMOVED***\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) ***REMOVED***\n      // Same type, compare values\n      if (thisLeafType === 'object') ***REMOVED***\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n    ***REMOVED*** else ***REMOVED***\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) ***REMOVED***\n          return -1;\n      ***REMOVED*** else if (this.value_ === otherLeaf.value_) ***REMOVED***\n          return 0;\n      ***REMOVED*** else ***REMOVED***\n          return 1;\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      return thisIndex - otherIndex;\n  ***REMOVED***\n***REMOVED***\n  withIndex(): Node ***REMOVED***\n    return this;\n***REMOVED***\n  isIndexed(): boolean ***REMOVED***\n    return true;\n***REMOVED***\n  equals(other: Node): boolean ***REMOVED***\n    if (other === this) ***REMOVED***\n      return true;\n  ***REMOVED*** else if (other.isLeafNode()) ***REMOVED***\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n  ***REMOVED*** else ***REMOVED***\n      return false;\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** nameCompare, MAX_NAME } from '../../util/util';\nimport ***REMOVED*** LeafNode } from '../LeafNode';\nimport ***REMOVED*** NamedNode, Node } from '../Node';\n\nimport ***REMOVED*** Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) ***REMOVED***\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) ***REMOVED***\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index ***REMOVED***\n  compare(a: NamedNode, b: NamedNode): number ***REMOVED***\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) ***REMOVED***\n      return nameCompare(a.name, b.name);\n  ***REMOVED*** else ***REMOVED***\n      return indexCmp;\n  ***REMOVED***\n***REMOVED***\n  isDefinedOn(node: Node): boolean ***REMOVED***\n    return !node.getPriority().isEmpty();\n***REMOVED***\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean ***REMOVED***\n    return !oldNode.getPriority().equals(newNode.getPriority());\n***REMOVED***\n  minPost(): NamedNode ***REMOVED***\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n***REMOVED***\n  maxPost(): NamedNode ***REMOVED***\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n***REMOVED***\n\n  makePost(indexValue: unknown, name: string): NamedNode ***REMOVED***\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n***REMOVED***\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string ***REMOVED***\n    return '.priority';\n***REMOVED***\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport ***REMOVED*** NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num ***REMOVED***\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) ***REMOVED***\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n***REMOVED***\n\n  nextBitIsOne(): boolean ***REMOVED***\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n***REMOVED***\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> ***REMOVED***\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null ***REMOVED***\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) ***REMOVED***\n      return null;\n  ***REMOVED*** else if (length === 1) ***REMOVED***\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n  ***REMOVED*** else ***REMOVED***\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n  ***REMOVED***\n***REMOVED***;\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> ***REMOVED***\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) ***REMOVED***\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n  ***REMOVED***;\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) ***REMOVED***\n      if (node) ***REMOVED***\n        node.left = pennant;\n        node = pennant;\n    ***REMOVED*** else ***REMOVED***\n        root = pennant;\n        node = pennant;\n    ***REMOVED***\n  ***REMOVED***;\n\n    for (let i = 0; i < base12.count; ++i) ***REMOVED***\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) ***REMOVED***\n        buildPennant(chunkSize, LLRBNode.BLACK);\n    ***REMOVED*** else ***REMOVED***\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n    ***REMOVED***\n  ***REMOVED***\n    return root;\n***REMOVED***;\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert, contains, map, safeGet } from '@firebase/util';\n\nimport ***REMOVED*** SortedMap } from '../util/SortedMap';\n\nimport ***REMOVED*** buildChildSet } from './childSet';\nimport ***REMOVED*** Index } from './indexes/Index';\nimport ***REMOVED*** KEY_INDEX } from './indexes/KeyIndex';\nimport ***REMOVED*** PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport ***REMOVED*** NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = ***REMOVED***};\n\nexport class IndexMap ***REMOVED***\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap ***REMOVED***\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        ***REMOVED*** '.priority': fallbackObject },\n        ***REMOVED*** '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n***REMOVED***\n\n  constructor(\n    private indexes_: ***REMOVED***\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n  ***REMOVED***,\n    private indexSet_: ***REMOVED*** [k: string]: Index }\n  ) ***REMOVED***}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null ***REMOVED***\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) ***REMOVED***\n      throw new Error('No index defined for ' + indexKey);\n  ***REMOVED***\n\n    if (sortedMap instanceof SortedMap) ***REMOVED***\n      return sortedMap;\n  ***REMOVED*** else ***REMOVED***\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n  ***REMOVED***\n***REMOVED***\n\n  hasIndex(indexDefinition: Index): boolean ***REMOVED***\n    return contains(this.indexSet_, indexDefinition.toString());\n***REMOVED***\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap ***REMOVED***\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) ***REMOVED***\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n  ***REMOVED***\n    let newIndex;\n    if (sawIndexedValue) ***REMOVED***\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n  ***REMOVED*** else ***REMOVED***\n      newIndex = fallbackObject;\n  ***REMOVED***\n    const indexName = indexDefinition.toString();\n    const newIndexSet = ***REMOVED*** ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = ***REMOVED*** ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n***REMOVED***\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap ***REMOVED***\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => ***REMOVED***\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) ***REMOVED***\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) ***REMOVED***\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) ***REMOVED***\n              if (next.name !== namedNode.name) ***REMOVED***\n                childList.push(next);\n            ***REMOVED***\n              next = iter.getNext();\n          ***REMOVED***\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n        ***REMOVED*** else ***REMOVED***\n            // No change, this remains a fallback\n            return fallbackObject;\n        ***REMOVED***\n      ***REMOVED*** else ***REMOVED***\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) ***REMOVED***\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n        ***REMOVED***\n          return newChildren.insert(namedNode, namedNode.node);\n      ***REMOVED***\n    ***REMOVED***\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n***REMOVED***\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap ***REMOVED***\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => ***REMOVED***\n        if (indexedChildren === fallbackObject) ***REMOVED***\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n      ***REMOVED*** else ***REMOVED***\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) ***REMOVED***\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n        ***REMOVED*** else ***REMOVED***\n            // No record of this child\n            return indexedChildren;\n        ***REMOVED***\n      ***REMOVED***\n    ***REMOVED***\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport ***REMOVED*** SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport ***REMOVED*** MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport ***REMOVED*** NAME_COMPARATOR } from './comparators';\nimport ***REMOVED*** Index } from './indexes/Index';\nimport ***REMOVED*** KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport ***REMOVED***\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport ***REMOVED*** IndexMap } from './IndexMap';\nimport ***REMOVED*** LeafNode } from './LeafNode';\nimport ***REMOVED*** NamedNode, Node } from './Node';\nimport ***REMOVED*** priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor ***REMOVED***\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node ***REMOVED***\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode ***REMOVED***\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n***REMOVED***\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) ***REMOVED***\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) ***REMOVED***\n      validatePriorityNode(this.priorityNode_);\n  ***REMOVED***\n\n    if (this.children_.isEmpty()) ***REMOVED***\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n  ***REMOVED***\n***REMOVED***\n\n  /** @inheritDoc */\n  isLeafNode(): boolean ***REMOVED***\n    return false;\n***REMOVED***\n\n  /** @inheritDoc */\n  getPriority(): Node ***REMOVED***\n    return this.priorityNode_ || EMPTY_NODE;\n***REMOVED***\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node ***REMOVED***\n    if (this.children_.isEmpty()) ***REMOVED***\n      // Don't allow priorities on empty nodes\n      return this;\n  ***REMOVED*** else ***REMOVED***\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n  ***REMOVED***\n***REMOVED***\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node ***REMOVED***\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') ***REMOVED***\n      return this.getPriority();\n  ***REMOVED*** else ***REMOVED***\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n  ***REMOVED***\n***REMOVED***\n\n  /** @inheritDoc */\n  getChild(path: Path): Node ***REMOVED***\n    const front = pathGetFront(path);\n    if (front === null) ***REMOVED***\n      return this;\n  ***REMOVED***\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n***REMOVED***\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean ***REMOVED***\n    return this.children_.get(childName) !== null;\n***REMOVED***\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node ***REMOVED***\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') ***REMOVED***\n      return this.updatePriority(newChildNode);\n  ***REMOVED*** else ***REMOVED***\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) ***REMOVED***\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n    ***REMOVED*** else ***REMOVED***\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n    ***REMOVED***\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n  ***REMOVED***\n***REMOVED***\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node ***REMOVED***\n    const front = pathGetFront(path);\n    if (front === null) ***REMOVED***\n      return newChildNode;\n  ***REMOVED*** else ***REMOVED***\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n  ***REMOVED***\n***REMOVED***\n\n  /** @inheritDoc */\n  isEmpty(): boolean ***REMOVED***\n    return this.children_.isEmpty();\n***REMOVED***\n\n  /** @inheritDoc */\n  numChildren(): number ***REMOVED***\n    return this.children_.count();\n***REMOVED***\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object ***REMOVED***\n    if (this.isEmpty()) ***REMOVED***\n      return null;\n  ***REMOVED***\n\n    const obj: ***REMOVED*** [k: string]: unknown } = ***REMOVED***};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => ***REMOVED***\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) ***REMOVED***\n        maxKey = Math.max(maxKey, Number(key));\n    ***REMOVED*** else ***REMOVED***\n        allIntegerKeys = false;\n    ***REMOVED***\n  ***REMOVED***);\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) ***REMOVED***\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) ***REMOVED***\n        array[key as unknown as number] = obj[key];\n    ***REMOVED***\n\n      return array;\n  ***REMOVED*** else ***REMOVED***\n      if (exportFormat && !this.getPriority().isEmpty()) ***REMOVED***\n        obj['.priority'] = this.getPriority().val();\n    ***REMOVED***\n      return obj;\n  ***REMOVED***\n***REMOVED***\n\n  /** @inheritDoc */\n  hash(): string ***REMOVED***\n    if (this.lazyHash_ === null) ***REMOVED***\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) ***REMOVED***\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n    ***REMOVED***\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => ***REMOVED***\n        const childHash = childNode.hash();\n        if (childHash !== '') ***REMOVED***\n          toHash += ':' + key + ':' + childHash;\n      ***REMOVED***\n    ***REMOVED***);\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n  ***REMOVED***\n    return this.lazyHash_;\n***REMOVED***\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string ***REMOVED***\n    const idx = this.resolveIndex_(index);\n    if (idx) ***REMOVED***\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n  ***REMOVED*** else ***REMOVED***\n      return this.children_.getPredecessorKey(childName);\n  ***REMOVED***\n***REMOVED***\n\n  getFirstChildName(indexDefinition: Index): string | null ***REMOVED***\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) ***REMOVED***\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n  ***REMOVED*** else ***REMOVED***\n      return this.children_.minKey();\n  ***REMOVED***\n***REMOVED***\n\n  getFirstChild(indexDefinition: Index): NamedNode | null ***REMOVED***\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) ***REMOVED***\n      return new NamedNode(minKey, this.children_.get(minKey));\n  ***REMOVED*** else ***REMOVED***\n      return null;\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null ***REMOVED***\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) ***REMOVED***\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n  ***REMOVED*** else ***REMOVED***\n      return this.children_.maxKey();\n  ***REMOVED***\n***REMOVED***\n\n  getLastChild(indexDefinition: Index): NamedNode | null ***REMOVED***\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) ***REMOVED***\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n  ***REMOVED*** else ***REMOVED***\n      return null;\n  ***REMOVED***\n***REMOVED***\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean ***REMOVED***\n    const idx = this.resolveIndex_(index);\n    if (idx) ***REMOVED***\n      return idx.inorderTraversal(wrappedNode => ***REMOVED***\n        return action(wrappedNode.name, wrappedNode.node);\n    ***REMOVED***);\n  ***REMOVED*** else ***REMOVED***\n      return this.children_.inorderTraversal(action);\n  ***REMOVED***\n***REMOVED***\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> ***REMOVED***\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n***REMOVED***\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> ***REMOVED***\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) ***REMOVED***\n      return idx.getIteratorFrom(startPost, key => key);\n  ***REMOVED*** else ***REMOVED***\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) ***REMOVED***\n        iterator.getNext();\n        next = iterator.peek();\n    ***REMOVED***\n      return iterator;\n  ***REMOVED***\n***REMOVED***\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> ***REMOVED***\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n***REMOVED***\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> ***REMOVED***\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) ***REMOVED***\n      return idx.getReverseIteratorFrom(endPost, key => ***REMOVED***\n        return key;\n    ***REMOVED***);\n  ***REMOVED*** else ***REMOVED***\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) ***REMOVED***\n        iterator.getNext();\n        next = iterator.peek();\n    ***REMOVED***\n      return iterator;\n  ***REMOVED***\n***REMOVED***\n  compareTo(other: ChildrenNode): number ***REMOVED***\n    if (this.isEmpty()) ***REMOVED***\n      if (other.isEmpty()) ***REMOVED***\n        return 0;\n    ***REMOVED*** else ***REMOVED***\n        return -1;\n    ***REMOVED***\n  ***REMOVED*** else if (other.isLeafNode() || other.isEmpty()) ***REMOVED***\n      return 1;\n  ***REMOVED*** else if (other === MAX_NODE) ***REMOVED***\n      return -1;\n  ***REMOVED*** else ***REMOVED***\n      // Must be another node with children.\n      return 0;\n  ***REMOVED***\n***REMOVED***\n  withIndex(indexDefinition: Index): Node ***REMOVED***\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) ***REMOVED***\n      return this;\n  ***REMOVED*** else ***REMOVED***\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n  ***REMOVED***\n***REMOVED***\n  isIndexed(index: Index): boolean ***REMOVED***\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n***REMOVED***\n  equals(other: Node): boolean ***REMOVED***\n    if (other === this) ***REMOVED***\n      return true;\n  ***REMOVED*** else if (other.isLeafNode()) ***REMOVED***\n      return false;\n  ***REMOVED*** else ***REMOVED***\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) ***REMOVED***\n        return false;\n    ***REMOVED*** else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) ***REMOVED***\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) ***REMOVED***\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) ***REMOVED***\n            return false;\n        ***REMOVED***\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n      ***REMOVED***\n        return thisCurrent === null && otherCurrent === null;\n    ***REMOVED*** else ***REMOVED***\n        return false;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null ***REMOVED***\n    if (indexDefinition === KEY_INDEX) ***REMOVED***\n      return null;\n  ***REMOVED*** else ***REMOVED***\n      return this.indexMap_.get(indexDefinition.toString());\n  ***REMOVED***\n***REMOVED***\n}\n\nexport class MaxNode extends ChildrenNode ***REMOVED***\n  constructor() ***REMOVED***\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n***REMOVED***\n\n  compareTo(other: Node): number ***REMOVED***\n    if (other === this) ***REMOVED***\n      return 0;\n  ***REMOVED*** else ***REMOVED***\n      return 1;\n  ***REMOVED***\n***REMOVED***\n\n  equals(other: Node): boolean ***REMOVED***\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n***REMOVED***\n\n  getPriority(): MaxNode ***REMOVED***\n    return this;\n***REMOVED***\n\n  getImmediateChild(childName: string): ChildrenNode ***REMOVED***\n    return ChildrenNode.EMPTY_NODE;\n***REMOVED***\n\n  isEmpty(): boolean ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' ***REMOVED***\n  interface NamedNode ***REMOVED***\n    MIN: NamedNode;\n    MAX: NamedNode;\n***REMOVED***\n}\n\nObject.defineProperties(NamedNode, ***REMOVED***\n  MIN: ***REMOVED***\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n***REMOVED***,\n  MAX: ***REMOVED***\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n***REMOVED***\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** contains, assert } from '@firebase/util';\n\nimport ***REMOVED*** Indexable } from '../util/misc';\nimport ***REMOVED*** SortedMap } from '../util/SortedMap';\nimport ***REMOVED*** each } from '../util/util';\n\nimport ***REMOVED*** ChildrenNode } from './ChildrenNode';\nimport ***REMOVED*** buildChildSet } from './childSet';\nimport ***REMOVED*** NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport ***REMOVED*** PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport ***REMOVED*** IndexMap } from './IndexMap';\nimport ***REMOVED*** LeafNode } from './LeafNode';\nimport ***REMOVED*** NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node ***REMOVED***\n  if (json === null) ***REMOVED***\n    return ChildrenNode.EMPTY_NODE;\n***REMOVED***\n\n  if (typeof json === 'object' && '.priority' in json) ***REMOVED***\n    priority = json['.priority'];\n***REMOVED***\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) ***REMOVED***\n    json = json['.value'];\n***REMOVED***\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) ***REMOVED***\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n***REMOVED***\n\n  if (!(json instanceof Array) && USE_HINZE) ***REMOVED***\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => ***REMOVED***\n      if (key.substring(0, 1) !== '.') ***REMOVED***\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) ***REMOVED***\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***);\n\n    if (children.length === 0) ***REMOVED***\n      return ChildrenNode.EMPTY_NODE;\n  ***REMOVED***\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) ***REMOVED***\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          ***REMOVED*** '.priority': sortedChildSet },\n          ***REMOVED*** '.priority': PRIORITY_INDEX }\n        )\n      );\n  ***REMOVED*** else ***REMOVED***\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n  ***REMOVED***\n***REMOVED*** else ***REMOVED***\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => ***REMOVED***\n      if (contains(json as object, key)) ***REMOVED***\n        if (key.substring(0, 1) !== '.') ***REMOVED***\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) ***REMOVED***\n            node = node.updateImmediateChild(key, childNode);\n        ***REMOVED***\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***);\n\n    return node.updatePriority(nodeFromJSON(priority));\n***REMOVED***\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport ***REMOVED*** MAX_NAME, nameCompare } from '../../util/util';\nimport ***REMOVED*** ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport ***REMOVED*** NamedNode, Node } from '../Node';\nimport ***REMOVED*** nodeFromJSON } from '../nodeFromJSON';\n\nimport ***REMOVED*** Index } from './Index';\n\nexport class PathIndex extends Index ***REMOVED***\n  constructor(private indexPath_: Path) ***REMOVED***\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n***REMOVED***\n\n  protected extractChild(snap: Node): Node ***REMOVED***\n    return snap.getChild(this.indexPath_);\n***REMOVED***\n  isDefinedOn(node: Node): boolean ***REMOVED***\n    return !node.getChild(this.indexPath_).isEmpty();\n***REMOVED***\n  compare(a: NamedNode, b: NamedNode): number ***REMOVED***\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) ***REMOVED***\n      return nameCompare(a.name, b.name);\n  ***REMOVED*** else ***REMOVED***\n      return indexCmp;\n  ***REMOVED***\n***REMOVED***\n  makePost(indexValue: object, name: string): NamedNode ***REMOVED***\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n***REMOVED***\n  maxPost(): NamedNode ***REMOVED***\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n***REMOVED***\n  toString(): string ***REMOVED***\n    return pathSlice(this.indexPath_, 0).join('/');\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** nameCompare } from '../../util/util';\nimport ***REMOVED*** NamedNode, Node } from '../Node';\nimport ***REMOVED*** nodeFromJSON } from '../nodeFromJSON';\n\nimport ***REMOVED*** Index } from './Index';\n\nexport class ValueIndex extends Index ***REMOVED***\n  compare(a: NamedNode, b: NamedNode): number ***REMOVED***\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) ***REMOVED***\n      return nameCompare(a.name, b.name);\n  ***REMOVED*** else ***REMOVED***\n      return indexCmp;\n  ***REMOVED***\n***REMOVED***\n  isDefinedOn(node: Node): boolean ***REMOVED***\n    return true;\n***REMOVED***\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean ***REMOVED***\n    return !oldNode.equals(newNode);\n***REMOVED***\n  minPost(): NamedNode ***REMOVED***\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n***REMOVED***\n  maxPost(): NamedNode ***REMOVED***\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n***REMOVED***\n\n  makePost(indexValue: object, name: string): NamedNode ***REMOVED***\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n***REMOVED***\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string ***REMOVED***\n    return '.value';\n***REMOVED***\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Node } from '../snap/Node';\n\nexport const enum ChangeType ***REMOVED***\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change ***REMOVED***\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change ***REMOVED***\n  return ***REMOVED*** type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change ***REMOVED***\n  return ***REMOVED*** type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change ***REMOVED***\n  return ***REMOVED*** type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change ***REMOVED***\n  return ***REMOVED***\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n***REMOVED***;\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change ***REMOVED***\n  return ***REMOVED*** type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** ChildrenNode } from '../../snap/ChildrenNode';\nimport ***REMOVED*** Index } from '../../snap/indexes/Index';\nimport ***REMOVED*** PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport ***REMOVED*** Node } from '../../snap/Node';\nimport ***REMOVED*** Path } from '../../util/Path';\nimport ***REMOVED***\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport ***REMOVED*** ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport ***REMOVED*** CompleteChildSource } from '../CompleteChildSource';\n\nimport ***REMOVED*** NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter ***REMOVED***\n  constructor(private readonly index_: Index) ***REMOVED***}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node ***REMOVED***\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) ***REMOVED***\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) ***REMOVED***\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n    ***REMOVED***\n  ***REMOVED***\n\n    if (optChangeAccumulator != null) ***REMOVED***\n      if (newChild.isEmpty()) ***REMOVED***\n        if (snap.hasChild(key)) ***REMOVED***\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n      ***REMOVED*** else ***REMOVED***\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n      ***REMOVED***\n    ***REMOVED*** else if (oldChild.isEmpty()) ***REMOVED***\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n    ***REMOVED*** else ***REMOVED***\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n    ***REMOVED***\n  ***REMOVED***\n    if (snap.isLeafNode() && newChild.isEmpty()) ***REMOVED***\n      return snap;\n  ***REMOVED*** else ***REMOVED***\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n  ***REMOVED***\n***REMOVED***\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node ***REMOVED***\n    if (optChangeAccumulator != null) ***REMOVED***\n      if (!oldSnap.isLeafNode()) ***REMOVED***\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => ***REMOVED***\n          if (!newSnap.hasChild(key)) ***REMOVED***\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n        ***REMOVED***\n      ***REMOVED***);\n    ***REMOVED***\n      if (!newSnap.isLeafNode()) ***REMOVED***\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => ***REMOVED***\n          if (oldSnap.hasChild(key)) ***REMOVED***\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) ***REMOVED***\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n          ***REMOVED***\n        ***REMOVED*** else ***REMOVED***\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n        ***REMOVED***\n      ***REMOVED***);\n    ***REMOVED***\n  ***REMOVED***\n    return newSnap.withIndex(this.index_);\n***REMOVED***\n  updatePriority(oldSnap: Node, newPriority: Node): Node ***REMOVED***\n    if (oldSnap.isEmpty()) ***REMOVED***\n      return ChildrenNode.EMPTY_NODE;\n  ***REMOVED*** else ***REMOVED***\n      return oldSnap.updatePriority(newPriority);\n  ***REMOVED***\n***REMOVED***\n  filtersNodes(): boolean ***REMOVED***\n    return false;\n***REMOVED***\n  getIndexedFilter(): IndexedFilter ***REMOVED***\n    return this;\n***REMOVED***\n  getIndex(): Index ***REMOVED***\n    return this.index_;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** NamedNode, Node } from '../../../core/snap/Node';\nimport ***REMOVED*** ChildrenNode } from '../../snap/ChildrenNode';\nimport ***REMOVED*** Index } from '../../snap/indexes/Index';\nimport ***REMOVED*** PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport ***REMOVED*** Path } from '../../util/Path';\nimport ***REMOVED*** ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport ***REMOVED*** CompleteChildSource } from '../CompleteChildSource';\nimport ***REMOVED*** QueryParams } from '../QueryParams';\n\nimport ***REMOVED*** IndexedFilter } from './IndexedFilter';\nimport ***REMOVED*** NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter ***REMOVED***\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) ***REMOVED***\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n***REMOVED***\n\n  getStartPost(): NamedNode ***REMOVED***\n    return this.startPost_;\n***REMOVED***\n\n  getEndPost(): NamedNode ***REMOVED***\n    return this.endPost_;\n***REMOVED***\n\n  matches(node: NamedNode): boolean ***REMOVED***\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n***REMOVED***\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node ***REMOVED***\n    if (!this.matches(new NamedNode(key, newChild))) ***REMOVED***\n      newChild = ChildrenNode.EMPTY_NODE;\n  ***REMOVED***\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n***REMOVED***\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node ***REMOVED***\n    if (newSnap.isLeafNode()) ***REMOVED***\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n  ***REMOVED***\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => ***REMOVED***\n      if (!self.matches(new NamedNode(key, childNode))) ***REMOVED***\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n    ***REMOVED***\n  ***REMOVED***);\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n***REMOVED***\n  updatePriority(oldSnap: Node, newPriority: Node): Node ***REMOVED***\n    // Don't support priorities on queries\n    return oldSnap;\n***REMOVED***\n  filtersNodes(): boolean ***REMOVED***\n    return true;\n***REMOVED***\n  getIndexedFilter(): IndexedFilter ***REMOVED***\n    return this.indexedFilter_;\n***REMOVED***\n  getIndex(): Index ***REMOVED***\n    return this.index_;\n***REMOVED***\n\n  private static getStartPost_(params: QueryParams): NamedNode ***REMOVED***\n    if (params.hasStart()) ***REMOVED***\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n  ***REMOVED*** else ***REMOVED***\n      return params.getIndex().minPost();\n  ***REMOVED***\n***REMOVED***\n\n  private static getEndPost_(params: QueryParams): NamedNode ***REMOVED***\n    if (params.hasEnd()) ***REMOVED***\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n  ***REMOVED*** else ***REMOVED***\n      return params.getIndex().maxPost();\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** ChildrenNode } from '../../snap/ChildrenNode';\nimport ***REMOVED*** Index } from '../../snap/indexes/Index';\nimport ***REMOVED*** NamedNode, Node } from '../../snap/Node';\nimport ***REMOVED*** Path } from '../../util/Path';\nimport ***REMOVED***\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport ***REMOVED*** ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport ***REMOVED*** CompleteChildSource } from '../CompleteChildSource';\nimport ***REMOVED*** QueryParams } from '../QueryParams';\n\nimport ***REMOVED*** IndexedFilter } from './IndexedFilter';\nimport ***REMOVED*** NodeFilter } from './NodeFilter';\nimport ***REMOVED*** RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter ***REMOVED***\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) ***REMOVED***\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n***REMOVED***\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node ***REMOVED***\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) ***REMOVED***\n      newChild = ChildrenNode.EMPTY_NODE;\n  ***REMOVED***\n    if (snap.getImmediateChild(key).equals(newChild)) ***REMOVED***\n      // No change\n      return snap;\n  ***REMOVED*** else if (snap.numChildren() < this.limit_) ***REMOVED***\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n  ***REMOVED*** else ***REMOVED***\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n  ***REMOVED***\n***REMOVED***\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node ***REMOVED***\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) ***REMOVED***\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n  ***REMOVED*** else ***REMOVED***\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) ***REMOVED***\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) ***REMOVED***\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n      ***REMOVED*** else ***REMOVED***\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n      ***REMOVED***\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) ***REMOVED***\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) ***REMOVED***\n            // if we have not reached the start, skip to the next element\n            continue;\n        ***REMOVED*** else if (!this.withinDirectionalEnd(next)) ***REMOVED***\n            // if we have reached the end, stop adding elements\n            break;\n        ***REMOVED*** else ***REMOVED***\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n        ***REMOVED***\n      ***REMOVED***\n    ***REMOVED*** else ***REMOVED***\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) ***REMOVED***\n          iterator = filtered.getReverseIterator(this.index_);\n      ***REMOVED*** else ***REMOVED***\n          iterator = filtered.getIterator(this.index_);\n      ***REMOVED***\n\n        let count = 0;\n        while (iterator.hasNext()) ***REMOVED***\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) ***REMOVED***\n            count++;\n        ***REMOVED*** else ***REMOVED***\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n        ***REMOVED***\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n***REMOVED***\n  updatePriority(oldSnap: Node, newPriority: Node): Node ***REMOVED***\n    // Don't support priorities on queries\n    return oldSnap;\n***REMOVED***\n  filtersNodes(): boolean ***REMOVED***\n    return true;\n***REMOVED***\n  getIndexedFilter(): IndexedFilter ***REMOVED***\n    return this.rangedFilter_.getIndexedFilter();\n***REMOVED***\n  getIndex(): Index ***REMOVED***\n    return this.index_;\n***REMOVED***\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node ***REMOVED***\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) ***REMOVED***\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n  ***REMOVED*** else ***REMOVED***\n      cmp = this.index_.getCompare();\n  ***REMOVED***\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) ***REMOVED***\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) ***REMOVED***\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n    ***REMOVED***\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) ***REMOVED***\n        if (changeAccumulator != null) ***REMOVED***\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n      ***REMOVED***\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n    ***REMOVED*** else ***REMOVED***\n        if (changeAccumulator != null) ***REMOVED***\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n      ***REMOVED***\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) ***REMOVED***\n          if (changeAccumulator != null) ***REMOVED***\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n        ***REMOVED***\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n      ***REMOVED*** else ***REMOVED***\n          return newEventCache;\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED*** else if (childSnap.isEmpty()) ***REMOVED***\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n  ***REMOVED*** else if (inRange) ***REMOVED***\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) ***REMOVED***\n        if (changeAccumulator != null) ***REMOVED***\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n      ***REMOVED***\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n    ***REMOVED*** else ***REMOVED***\n        return snap;\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      return snap;\n  ***REMOVED***\n***REMOVED***\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => ***REMOVED***\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n***REMOVED***;\n\n  private withinEndPost = (node: NamedNode) => ***REMOVED***\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n***REMOVED***;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert, stringify } from '@firebase/util';\n\nimport ***REMOVED*** Index } from '../snap/indexes/Index';\nimport ***REMOVED*** KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport ***REMOVED*** PathIndex } from '../snap/indexes/PathIndex';\nimport ***REMOVED*** PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport ***REMOVED*** VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport ***REMOVED*** MAX_NAME, MIN_NAME } from '../util/util';\n\nimport ***REMOVED*** IndexedFilter } from './filter/IndexedFilter';\nimport ***REMOVED*** LimitedFilter } from './filter/LimitedFilter';\nimport ***REMOVED*** NodeFilter } from './filter/NodeFilter';\nimport ***REMOVED*** RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS ***REMOVED***\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS ***REMOVED***\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams ***REMOVED***\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean ***REMOVED***\n    return this.startSet_;\n***REMOVED***\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean ***REMOVED***\n    if (this.viewFrom_ === '') ***REMOVED***\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n  ***REMOVED*** else ***REMOVED***\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown ***REMOVED***\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n***REMOVED***\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string ***REMOVED***\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) ***REMOVED***\n      return this.indexStartName_;\n  ***REMOVED*** else ***REMOVED***\n      return MIN_NAME;\n  ***REMOVED***\n***REMOVED***\n\n  hasEnd(): boolean ***REMOVED***\n    return this.endSet_;\n***REMOVED***\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown ***REMOVED***\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n***REMOVED***\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string ***REMOVED***\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) ***REMOVED***\n      return this.indexEndName_;\n  ***REMOVED*** else ***REMOVED***\n      return MAX_NAME;\n  ***REMOVED***\n***REMOVED***\n\n  hasLimit(): boolean ***REMOVED***\n    return this.limitSet_;\n***REMOVED***\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean ***REMOVED***\n    return this.limitSet_ && this.viewFrom_ !== '';\n***REMOVED***\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number ***REMOVED***\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n***REMOVED***\n\n  getIndex(): Index ***REMOVED***\n    return this.index_;\n***REMOVED***\n\n  loadsAllData(): boolean ***REMOVED***\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n***REMOVED***\n\n  isDefault(): boolean ***REMOVED***\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n***REMOVED***\n\n  copy(): QueryParams ***REMOVED***\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n***REMOVED***\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter ***REMOVED***\n  if (queryParams.loadsAllData()) ***REMOVED***\n    return new IndexedFilter(queryParams.getIndex());\n***REMOVED*** else if (queryParams.hasLimit()) ***REMOVED***\n    return new LimitedFilter(queryParams);\n***REMOVED*** else ***REMOVED***\n    return new RangedFilter(queryParams);\n***REMOVED***\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams ***REMOVED***\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams ***REMOVED***\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams ***REMOVED***\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams ***REMOVED***\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) ***REMOVED***\n    indexValue = null;\n***REMOVED***\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) ***REMOVED***\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n***REMOVED*** else ***REMOVED***\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n***REMOVED***\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams ***REMOVED***\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) ***REMOVED***\n    params = queryParamsStartAt(queryParams, indexValue, key);\n***REMOVED*** else ***REMOVED***\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n***REMOVED***\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams ***REMOVED***\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) ***REMOVED***\n    indexValue = null;\n***REMOVED***\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) ***REMOVED***\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n***REMOVED*** else ***REMOVED***\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n***REMOVED***\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams ***REMOVED***\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) ***REMOVED***\n    params = queryParamsEndAt(queryParams, indexValue, key);\n***REMOVED*** else ***REMOVED***\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n***REMOVED***\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams ***REMOVED***\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> ***REMOVED***\n  const qs: Record<string, string | number> = ***REMOVED***};\n\n  if (queryParams.isDefault()) ***REMOVED***\n    return qs;\n***REMOVED***\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) ***REMOVED***\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n***REMOVED*** else if (queryParams.index_ === VALUE_INDEX) ***REMOVED***\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n***REMOVED*** else if (queryParams.index_ === KEY_INDEX) ***REMOVED***\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n***REMOVED*** else ***REMOVED***\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n***REMOVED***\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) ***REMOVED***\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) ***REMOVED***\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n  ***REMOVED***\n***REMOVED***\n\n  if (queryParams.endSet_) ***REMOVED***\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) ***REMOVED***\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n  ***REMOVED***\n***REMOVED***\n\n  if (queryParams.limitSet_) ***REMOVED***\n    if (queryParams.isViewFromLeft()) ***REMOVED***\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n  ***REMOVED*** else ***REMOVED***\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n  ***REMOVED***\n***REMOVED***\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> ***REMOVED***\n  const obj: Record<string, unknown> = ***REMOVED***};\n  if (queryParams.startSet_) ***REMOVED***\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) ***REMOVED***\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n  ***REMOVED***\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n***REMOVED***\n  if (queryParams.endSet_) ***REMOVED***\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) ***REMOVED***\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n  ***REMOVED***\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n***REMOVED***\n  if (queryParams.limitSet_) ***REMOVED***\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') ***REMOVED***\n      if (queryParams.isViewFromLeft()) ***REMOVED***\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    ***REMOVED*** else ***REMOVED***\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n    ***REMOVED***\n  ***REMOVED***\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n***REMOVED***\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) ***REMOVED***\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n***REMOVED***\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport ***REMOVED*** AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport ***REMOVED*** AuthTokenProvider } from './AuthTokenProvider';\nimport ***REMOVED*** RepoInfo } from './RepoInfo';\nimport ***REMOVED*** ServerActions } from './ServerActions';\nimport ***REMOVED*** logWrapper, warn } from './util/util';\nimport ***REMOVED*** QueryContext } from './view/EventRegistration';\nimport ***REMOVED*** queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions ***REMOVED***\n  reportStats(stats: ***REMOVED*** [k: string]: unknown }): void ***REMOVED***\n    throw new Error('Method not implemented.');\n***REMOVED***\n\n  /** @private ***REMOVED***function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: ***REMOVED*** [k: string]: object } = ***REMOVED***};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string ***REMOVED***\n    if (tag !== undefined) ***REMOVED***\n      return 'tag$' + tag;\n  ***REMOVED*** else ***REMOVED***\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) ***REMOVED***\n    super();\n***REMOVED***\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) ***REMOVED***\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = ***REMOVED***};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => ***REMOVED***\n        let data = result;\n\n        if (error === 404) ***REMOVED***\n          data = null;\n          error = null;\n      ***REMOVED***\n\n        if (error === null) ***REMOVED***\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n      ***REMOVED***\n\n        if (safeGet(this.listens_, listenId) === thisListen) ***REMOVED***\n          let status;\n          if (!error) ***REMOVED***\n            status = 'ok';\n        ***REMOVED*** else if (error === 401) ***REMOVED***\n            status = 'permission_denied';\n        ***REMOVED*** else ***REMOVED***\n            status = 'rest_error:' + error;\n        ***REMOVED***\n\n          onComplete(status, null);\n      ***REMOVED***\n    ***REMOVED***\n    );\n***REMOVED***\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) ***REMOVED***\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n***REMOVED***\n\n  get(query: QueryContext): Promise<string> ***REMOVED***\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => ***REMOVED***\n        let data = result;\n\n        if (error === 404) ***REMOVED***\n          data = null;\n          error = null;\n      ***REMOVED***\n\n        if (error === null) ***REMOVED***\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n      ***REMOVED*** else ***REMOVED***\n          deferred.reject(new Error(data as string));\n      ***REMOVED***\n    ***REMOVED***\n    );\n    return deferred.promise;\n***REMOVED***\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) ***REMOVED***\n    // no-op since we just always call getToken.\n***REMOVED***\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: ***REMOVED*** [k: string]: string | number } = ***REMOVED***},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) ***REMOVED***\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => ***REMOVED***\n      if (authToken && authToken.accessToken) ***REMOVED***\n        queryStringParameters['auth'] = authToken.accessToken;\n    ***REMOVED***\n      if (appCheckToken && appCheckToken.token) ***REMOVED***\n        queryStringParameters['ac'] = appCheckToken.token;\n    ***REMOVED***\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => ***REMOVED***\n        if (callback && xhr.readyState === 4) ***REMOVED***\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) ***REMOVED***\n            try ***REMOVED***\n              res = jsonEval(xhr.responseText);\n          ***REMOVED*** catch (e) ***REMOVED***\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n          ***REMOVED***\n            callback(null, res);\n        ***REMOVED*** else ***REMOVED***\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) ***REMOVED***\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n          ***REMOVED***\n            callback(xhr.status);\n        ***REMOVED***\n          callback = null;\n      ***REMOVED***\n    ***REMOVED***;\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n  ***REMOVED***);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. ***REMOVED***arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: ***REMOVED***\n  [key: string]: string | number;\n}): string ***REMOVED***\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) ***REMOVED***\n    if (Array.isArray(value)) ***REMOVED***\n      value.forEach(arrayVal => ***REMOVED***\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n    ***REMOVED***);\n  ***REMOVED*** else ***REMOVED***\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n  ***REMOVED***\n***REMOVED***\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. ***REMOVED***arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> ***REMOVED***\n  const obj: Record<string, string> = ***REMOVED***};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => ***REMOVED***\n    if (token) ***REMOVED***\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n  ***REMOVED***\n***REMOVED***);\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string ***REMOVED***\n  const queryStart = url.indexOf('?');\n  if (!queryStart) ***REMOVED***\n    return '';\n***REMOVED***\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ChildrenNode } from './snap/ChildrenNode';\nimport ***REMOVED*** Node } from './snap/Node';\nimport ***REMOVED*** Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder ***REMOVED***\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node ***REMOVED***\n    return this.rootNode_.getChild(path);\n***REMOVED***\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) ***REMOVED***\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport ***REMOVED*** Node } from './snap/Node';\nimport ***REMOVED*** Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree ***REMOVED***\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree ***REMOVED***\n  return ***REMOVED***\n    value: null,\n    children: new Map()\n***REMOVED***;\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null ***REMOVED***\n  if (sparseSnapshotTree.value != null) ***REMOVED***\n    return sparseSnapshotTree.value.getChild(path);\n***REMOVED*** else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) ***REMOVED***\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) ***REMOVED***\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n  ***REMOVED*** else ***REMOVED***\n      return null;\n  ***REMOVED***\n***REMOVED*** else ***REMOVED***\n    return null;\n***REMOVED***\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void ***REMOVED***\n  if (pathIsEmpty(path)) ***REMOVED***\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n***REMOVED*** else if (sparseSnapshotTree.value !== null) ***REMOVED***\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n***REMOVED*** else ***REMOVED***\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) ***REMOVED***\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n  ***REMOVED***\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n***REMOVED***\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean ***REMOVED***\n  if (pathIsEmpty(path)) ***REMOVED***\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n***REMOVED*** else ***REMOVED***\n    if (sparseSnapshotTree.value !== null) ***REMOVED***\n      if (sparseSnapshotTree.value.isLeafNode()) ***REMOVED***\n        // We're trying to forget a node that doesn't exist\n        return false;\n    ***REMOVED*** else ***REMOVED***\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => ***REMOVED***\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n      ***REMOVED***);\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n    ***REMOVED***\n  ***REMOVED*** else if (sparseSnapshotTree.children.size > 0) ***REMOVED***\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) ***REMOVED***\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) ***REMOVED***\n          sparseSnapshotTree.children.delete(childKey);\n      ***REMOVED***\n    ***REMOVED***\n\n      return sparseSnapshotTree.children.size === 0;\n  ***REMOVED*** else ***REMOVED***\n      return true;\n  ***REMOVED***\n***REMOVED***\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void ***REMOVED***\n  if (sparseSnapshotTree.value !== null) ***REMOVED***\n    func(prefixPath, sparseSnapshotTree.value);\n***REMOVED*** else ***REMOVED***\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => ***REMOVED***\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n  ***REMOVED***);\n***REMOVED***\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void ***REMOVED***\n  sparseSnapshotTree.children.forEach((tree, key) => ***REMOVED***\n    func(key, tree);\n***REMOVED***);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** each } from '../util/util';\n\nimport ***REMOVED*** StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener ***REMOVED***\n  private last_: ***REMOVED*** [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) ***REMOVED***}\n\n  get(): ***REMOVED*** [k: string]: number } ***REMOVED***\n    const newStats = this.collection_.get();\n\n    const delta = ***REMOVED*** ...newStats };\n    if (this.last_) ***REMOVED***\n      each(this.last_, (stat: string, value: number) => ***REMOVED***\n        delta[stat] = delta[stat] - value;\n    ***REMOVED***);\n  ***REMOVED***\n    this.last_ = newStats;\n\n    return delta;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** contains } from '@firebase/util';\n\nimport ***REMOVED*** ServerActions } from '../ServerActions';\nimport ***REMOVED*** setTimeoutNonBlocking, each } from '../util/util';\n\nimport ***REMOVED*** StatsCollection } from './StatsCollection';\nimport ***REMOVED*** StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter ***REMOVED***\n  private statsListener_: StatsListener;\n  statsToReport_: ***REMOVED*** [k: string]: boolean } = ***REMOVED***};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) ***REMOVED***\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n***REMOVED***\n\n  private reportStats_() ***REMOVED***\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = ***REMOVED***};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => ***REMOVED***\n      if (value > 0 && contains(this.statsToReport_, stat)) ***REMOVED***\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n    ***REMOVED***\n  ***REMOVED***);\n\n    if (haveStatsToReport) ***REMOVED***\n      this.server_.reportStats(reportedStats);\n  ***REMOVED***\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n***REMOVED***\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) ***REMOVED***\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType ***REMOVED***\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation ***REMOVED***\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource ***REMOVED***\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource ***REMOVED***\n  return ***REMOVED***\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n***REMOVED***;\n}\n\nexport function newOperationSourceServer(): OperationSource ***REMOVED***\n  return ***REMOVED***\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n***REMOVED***;\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource ***REMOVED***\n  return ***REMOVED***\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n***REMOVED***;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** ImmutableTree } from '../util/ImmutableTree';\nimport ***REMOVED***\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport ***REMOVED*** newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation ***REMOVED***\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) ***REMOVED***}\n  operationForChild(childName: string): AckUserWrite ***REMOVED***\n    if (!pathIsEmpty(this.path)) ***REMOVED***\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n  ***REMOVED*** else if (this.affectedTree.value != null) ***REMOVED***\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n  ***REMOVED*** else ***REMOVED***\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport ***REMOVED*** Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation ***REMOVED***\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) ***REMOVED***}\n\n  operationForChild(childName: string): ListenComplete ***REMOVED***\n    if (pathIsEmpty(this.path)) ***REMOVED***\n      return new ListenComplete(this.source, newEmptyPath());\n  ***REMOVED*** else ***REMOVED***\n      return new ListenComplete(this.source, pathPopFront(this.path));\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Node } from '../snap/Node';\nimport ***REMOVED*** newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport ***REMOVED*** Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation ***REMOVED***\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) ***REMOVED***}\n\n  operationForChild(childName: string): Overwrite ***REMOVED***\n    if (pathIsEmpty(this.path)) ***REMOVED***\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n  ***REMOVED*** else ***REMOVED***\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** Node } from '../snap/Node';\nimport ***REMOVED*** ImmutableTree } from '../util/ImmutableTree';\nimport ***REMOVED***\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport ***REMOVED*** Operation, OperationSource, OperationType } from './Operation';\nimport ***REMOVED*** Overwrite } from './Overwrite';\n\nexport class Merge implements Operation ***REMOVED***\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) ***REMOVED***}\n  operationForChild(childName: string): Operation ***REMOVED***\n    if (pathIsEmpty(this.path)) ***REMOVED***\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) ***REMOVED***\n        // This child is unaffected\n        return null;\n    ***REMOVED*** else if (childTree.value) ***REMOVED***\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n    ***REMOVED*** else ***REMOVED***\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n  ***REMOVED***\n***REMOVED***\n  toString(): string ***REMOVED***\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Node } from '../snap/Node';\nimport ***REMOVED*** Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode ***REMOVED***\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) ***REMOVED***}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean ***REMOVED***\n    return this.fullyInitialized_;\n***REMOVED***\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean ***REMOVED***\n    return this.filtered_;\n***REMOVED***\n\n  isCompleteForPath(path: Path): boolean ***REMOVED***\n    if (pathIsEmpty(path)) ***REMOVED***\n      return this.isFullyInitialized() && !this.filtered_;\n  ***REMOVED***\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n***REMOVED***\n\n  isCompleteForChild(key: string): boolean ***REMOVED***\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n***REMOVED***\n\n  getNode(): Node ***REMOVED***\n    return this.node_;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assertionError } from '@firebase/util';\n\nimport ***REMOVED*** Index } from '../snap/indexes/Index';\nimport ***REMOVED*** NamedNode, Node } from '../snap/Node';\n\nimport ***REMOVED*** Change, ChangeType, changeChildMoved } from './Change';\nimport ***REMOVED*** Event } from './Event';\nimport ***REMOVED*** EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator ***REMOVED***\n  index_: Index;\n\n  constructor(public query_: QueryContext) ***REMOVED***\n    this.index_ = this.query_._queryParams.getIndex();\n***REMOVED***\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] ***REMOVED***\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => ***REMOVED***\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) ***REMOVED***\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n  ***REMOVED***\n***REMOVED***);\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) ***REMOVED***\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => ***REMOVED***\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => ***REMOVED***\n      if (registration.respondsTo(change.type)) ***REMOVED***\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***);\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change ***REMOVED***\n  if (change.type === 'value' || change.type === 'child_removed') ***REMOVED***\n    return change;\n***REMOVED*** else ***REMOVED***\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n***REMOVED***\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) ***REMOVED***\n  if (a.childName == null || b.childName == null) ***REMOVED***\n    throw assertionError('Should only compare child_ events.');\n***REMOVED***\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Node } from '../snap/Node';\n\nimport ***REMOVED*** CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache ***REMOVED***\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache ***REMOVED***\n  return ***REMOVED*** eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache ***REMOVED***\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache ***REMOVED***\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null ***REMOVED***\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null ***REMOVED***\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport ***REMOVED*** SortedMap } from './SortedMap';\nimport ***REMOVED*** each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => ***REMOVED***\n  if (!emptyChildrenSingleton) ***REMOVED***\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n***REMOVED***\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> ***REMOVED***\n  static fromObject<T>(obj: ***REMOVED*** [k: string]: T }): ImmutableTree<T> ***REMOVED***\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => ***REMOVED***\n      tree = tree.set(new Path(childPath), childSnap);\n  ***REMOVED***);\n    return tree;\n***REMOVED***\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) ***REMOVED***}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean ***REMOVED***\n    return this.value === null && this.children.isEmpty();\n***REMOVED***\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `***REMOVED***path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): ***REMOVED*** path: Path; value: T } | null ***REMOVED***\n    if (this.value != null && predicate(this.value)) ***REMOVED***\n      return ***REMOVED*** path: newEmptyPath(), value: this.value };\n  ***REMOVED*** else ***REMOVED***\n      if (pathIsEmpty(relativePath)) ***REMOVED***\n        return null;\n    ***REMOVED*** else ***REMOVED***\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) ***REMOVED***\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) ***REMOVED***\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return ***REMOVED*** path: fullPath, value: childExistingPathAndValue.value };\n        ***REMOVED*** else ***REMOVED***\n            return null;\n        ***REMOVED***\n      ***REMOVED*** else ***REMOVED***\n          return null;\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): ***REMOVED*** path: Path; value: T } | null ***REMOVED***\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n***REMOVED***\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> ***REMOVED***\n    if (pathIsEmpty(relativePath)) ***REMOVED***\n      return this;\n  ***REMOVED*** else ***REMOVED***\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) ***REMOVED***\n        return childTree.subtree(pathPopFront(relativePath));\n    ***REMOVED*** else ***REMOVED***\n        return new ImmutableTree<T>(null);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> ***REMOVED***\n    if (pathIsEmpty(relativePath)) ***REMOVED***\n      return new ImmutableTree(toSet, this.children);\n  ***REMOVED*** else ***REMOVED***\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> ***REMOVED***\n    if (pathIsEmpty(relativePath)) ***REMOVED***\n      if (this.children.isEmpty()) ***REMOVED***\n        return new ImmutableTree<T>(null);\n    ***REMOVED*** else ***REMOVED***\n        return new ImmutableTree(null, this.children);\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) ***REMOVED***\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) ***REMOVED***\n          newChildren = this.children.remove(front);\n      ***REMOVED*** else ***REMOVED***\n          newChildren = this.children.insert(front, newChild);\n      ***REMOVED***\n        if (this.value === null && newChildren.isEmpty()) ***REMOVED***\n          return new ImmutableTree<T>(null);\n      ***REMOVED*** else ***REMOVED***\n          return new ImmutableTree(this.value, newChildren);\n      ***REMOVED***\n    ***REMOVED*** else ***REMOVED***\n        return this;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null ***REMOVED***\n    if (pathIsEmpty(relativePath)) ***REMOVED***\n      return this.value;\n  ***REMOVED*** else ***REMOVED***\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) ***REMOVED***\n        return child.get(pathPopFront(relativePath));\n    ***REMOVED*** else ***REMOVED***\n        return null;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> ***REMOVED***\n    if (pathIsEmpty(relativePath)) ***REMOVED***\n      return newTree;\n  ***REMOVED*** else ***REMOVED***\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) ***REMOVED***\n        newChildren = this.children.remove(front);\n    ***REMOVED*** else ***REMOVED***\n        newChildren = this.children.insert(front, newChild);\n    ***REMOVED***\n      return new ImmutableTree(this.value, newChildren);\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: ***REMOVED*** [k: string]: V }) => V): V ***REMOVED***\n    return this.fold_(newEmptyPath(), fn);\n***REMOVED***\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: ***REMOVED*** [k: string]: V }) => V\n  ): V ***REMOVED***\n    const accum: ***REMOVED*** [k: string]: V } = ***REMOVED***};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => ***REMOVED***\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n    ***REMOVED***\n    );\n    return fn(pathSoFar, this.value, accum);\n***REMOVED***\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null ***REMOVED***\n    return this.findOnPath_(path, newEmptyPath(), f);\n***REMOVED***\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null ***REMOVED***\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) ***REMOVED***\n      return result;\n  ***REMOVED*** else ***REMOVED***\n      if (pathIsEmpty(pathToFollow)) ***REMOVED***\n        return null;\n    ***REMOVED*** else ***REMOVED***\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) ***REMOVED***\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n      ***REMOVED*** else ***REMOVED***\n          return null;\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> ***REMOVED***\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n***REMOVED***\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> ***REMOVED***\n    if (pathIsEmpty(pathToFollow)) ***REMOVED***\n      return this;\n  ***REMOVED*** else ***REMOVED***\n      if (this.value) ***REMOVED***\n        f(currentRelativePath, this.value);\n    ***REMOVED***\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) ***REMOVED***\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n    ***REMOVED*** else ***REMOVED***\n        return new ImmutableTree<T>(null);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) ***REMOVED***\n    this.foreach_(newEmptyPath(), f);\n***REMOVED***\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) ***REMOVED***\n    this.children.inorderTraversal((childName, childTree) => ***REMOVED***\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n  ***REMOVED***);\n    if (this.value) ***REMOVED***\n      f(currentRelativePath, this.value);\n  ***REMOVED***\n***REMOVED***\n\n  foreachChild(f: (name: string, value: T) => void) ***REMOVED***\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => ***REMOVED***\n        if (childTree.value) ***REMOVED***\n          f(childName, childTree.value);\n      ***REMOVED***\n    ***REMOVED***\n    );\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** ChildrenNode } from './snap/ChildrenNode';\nimport ***REMOVED*** PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport ***REMOVED*** NamedNode, Node } from './snap/Node';\nimport ***REMOVED*** ImmutableTree } from './util/ImmutableTree';\nimport ***REMOVED***\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport ***REMOVED*** each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite ***REMOVED***\n  constructor(public writeTree_: ImmutableTree<Node>) ***REMOVED***}\n\n  static empty(): CompoundWrite ***REMOVED***\n    return new CompoundWrite(new ImmutableTree(null));\n***REMOVED***\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite ***REMOVED***\n  if (pathIsEmpty(path)) ***REMOVED***\n    return new CompoundWrite(new ImmutableTree(node));\n***REMOVED*** else ***REMOVED***\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) ***REMOVED***\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n  ***REMOVED*** else ***REMOVED***\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n  ***REMOVED***\n***REMOVED***\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: ***REMOVED*** [name: string]: Node }\n): CompoundWrite ***REMOVED***\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => ***REMOVED***\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n***REMOVED***);\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite ***REMOVED***\n  if (pathIsEmpty(path)) ***REMOVED***\n    return CompoundWrite.empty();\n***REMOVED*** else ***REMOVED***\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n***REMOVED***\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean ***REMOVED***\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null ***REMOVED***\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) ***REMOVED***\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n***REMOVED*** else ***REMOVED***\n    return null;\n***REMOVED***\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] ***REMOVED***\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) ***REMOVED***\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) ***REMOVED***\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => ***REMOVED***\n          children.push(new NamedNode(childName, childNode));\n      ***REMOVED***\n      );\n  ***REMOVED***\n***REMOVED*** else ***REMOVED***\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => ***REMOVED***\n        if (childTree.value != null) ***REMOVED***\n          children.push(new NamedNode(childName, childTree.value));\n      ***REMOVED***\n    ***REMOVED***\n    );\n***REMOVED***\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite ***REMOVED***\n  if (pathIsEmpty(path)) ***REMOVED***\n    return compoundWrite;\n***REMOVED*** else ***REMOVED***\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) ***REMOVED***\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n  ***REMOVED*** else ***REMOVED***\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n  ***REMOVED***\n***REMOVED***\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean ***REMOVED***\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node ***REMOVED***\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node ***REMOVED***\n  if (writeTree.value != null) ***REMOVED***\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n***REMOVED*** else ***REMOVED***\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => ***REMOVED***\n      if (childKey === '.priority') ***REMOVED***\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n    ***REMOVED*** else ***REMOVED***\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n    ***REMOVED***\n  ***REMOVED***);\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) ***REMOVED***\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n  ***REMOVED***\n    return node;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert, assertionError, safeGet } from '@firebase/util';\n\nimport ***REMOVED***\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport ***REMOVED*** ChildrenNode } from './snap/ChildrenNode';\nimport ***REMOVED*** Index } from './snap/indexes/Index';\nimport ***REMOVED*** PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport ***REMOVED*** NamedNode, Node } from './snap/Node';\nimport ***REMOVED***\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport ***REMOVED*** each } from './util/util';\nimport ***REMOVED*** CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord ***REMOVED***\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: ***REMOVED*** [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef ***REMOVED***\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) ***REMOVED***\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) ***REMOVED***\n    visible = true;\n***REMOVED***\n  writeTree.allWrites.push(***REMOVED***\n    path,\n    snap,\n    writeId,\n    visible\n***REMOVED***);\n\n  if (visible) ***REMOVED***\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n***REMOVED***\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: ***REMOVED*** [k: string]: Node },\n  writeId: number\n) ***REMOVED***\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push(***REMOVED***\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n***REMOVED***);\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null ***REMOVED***\n  for (let i = 0; i < writeTree.allWrites.length; i++) ***REMOVED***\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) ***REMOVED***\n      return record;\n  ***REMOVED***\n***REMOVED***\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean ***REMOVED***\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => ***REMOVED***\n    return s.writeId === writeId;\n***REMOVED***);\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) ***REMOVED***\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) ***REMOVED***\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) ***REMOVED***\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n    ***REMOVED*** else if (pathContains(writeToRemove.path, currentWrite.path)) ***REMOVED***\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n    ***REMOVED***\n  ***REMOVED***\n    i--;\n***REMOVED***\n\n  if (!removedWriteWasVisible) ***REMOVED***\n    return false;\n***REMOVED*** else if (removedWriteOverlapsWithOtherWrites) ***REMOVED***\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n***REMOVED*** else ***REMOVED***\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) ***REMOVED***\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n  ***REMOVED*** else ***REMOVED***\n      const children = writeToRemove.children;\n      each(children, (childName: string) => ***REMOVED***\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n    ***REMOVED***);\n  ***REMOVED***\n    return true;\n***REMOVED***\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean ***REMOVED***\n  if (writeRecord.snap) ***REMOVED***\n    return pathContains(writeRecord.path, path);\n***REMOVED*** else ***REMOVED***\n    for (const childName in writeRecord.children) ***REMOVED***\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) ***REMOVED***\n        return true;\n    ***REMOVED***\n  ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) ***REMOVED***\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) ***REMOVED***\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n***REMOVED*** else ***REMOVED***\n    writeTree.lastWriteId = -1;\n***REMOVED***\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) ***REMOVED***\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite ***REMOVED***\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) ***REMOVED***\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) ***REMOVED***\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) ***REMOVED***\n        if (pathContains(treeRoot, writePath)) ***REMOVED***\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n      ***REMOVED*** else if (pathContains(writePath, treeRoot)) ***REMOVED***\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n      ***REMOVED*** else ***REMOVED***\n          // There is no overlap between root path and write path, ignore write\n      ***REMOVED***\n    ***REMOVED*** else if (write.children) ***REMOVED***\n        if (pathContains(treeRoot, writePath)) ***REMOVED***\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n      ***REMOVED*** else if (pathContains(writePath, treeRoot)) ***REMOVED***\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) ***REMOVED***\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n        ***REMOVED*** else ***REMOVED***\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) ***REMOVED***\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n          ***REMOVED***\n        ***REMOVED***\n      ***REMOVED*** else ***REMOVED***\n          // There is no overlap between root path and write path, ignore write\n      ***REMOVED***\n    ***REMOVED*** else ***REMOVED***\n        throw assertionError('WriteRecord should have .snap or .children');\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null ***REMOVED***\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null ***REMOVED***\n  if (!writeIdsToExclude && !includeHiddenWrites) ***REMOVED***\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) ***REMOVED***\n      return shadowingNode;\n  ***REMOVED*** else ***REMOVED***\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) ***REMOVED***\n        return completeServerCache;\n    ***REMOVED*** else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) ***REMOVED***\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n    ***REMOVED*** else ***REMOVED***\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED*** else ***REMOVED***\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) ***REMOVED***\n      return completeServerCache;\n  ***REMOVED*** else ***REMOVED***\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) ***REMOVED***\n        return null;\n    ***REMOVED*** else ***REMOVED***\n        const filter = function (write: WriteRecord) ***REMOVED***\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n      ***REMOVED***;\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) ***REMOVED***\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) ***REMOVED***\n    if (!topLevelSet.isLeafNode()) ***REMOVED***\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => ***REMOVED***\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n    ***REMOVED***);\n  ***REMOVED***\n    return completeChildren;\n***REMOVED*** else if (completeServerChildren) ***REMOVED***\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => ***REMOVED***\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n    ***REMOVED***\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => ***REMOVED***\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n  ***REMOVED***);\n    return completeChildren;\n***REMOVED*** else ***REMOVED***\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => ***REMOVED***\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n  ***REMOVED***);\n    return completeChildren;\n***REMOVED***\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null ***REMOVED***\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) ***REMOVED***\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n***REMOVED*** else ***REMOVED***\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) ***REMOVED***\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n  ***REMOVED*** else ***REMOVED***\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n  ***REMOVED***\n***REMOVED***\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null ***REMOVED***\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) ***REMOVED***\n    return shadowingNode;\n***REMOVED*** else ***REMOVED***\n    if (existingServerSnap.isCompleteForChild(childKey)) ***REMOVED***\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n  ***REMOVED*** else ***REMOVED***\n      return null;\n  ***REMOVED***\n***REMOVED***\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null ***REMOVED***\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] ***REMOVED***\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) ***REMOVED***\n    toIterate = shadowingNode;\n***REMOVED*** else if (completeServerData != null) ***REMOVED***\n    toIterate = compoundWriteApply(merge, completeServerData);\n***REMOVED*** else ***REMOVED***\n    // no children to iterate on\n    return [];\n***REMOVED***\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) ***REMOVED***\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) ***REMOVED***\n      if (cmp(next, startPost) !== 0) ***REMOVED***\n        nodes.push(next);\n    ***REMOVED***\n      next = iter.getNext();\n  ***REMOVED***\n    return nodes;\n***REMOVED*** else ***REMOVED***\n    return [];\n***REMOVED***\n}\n\nexport function newWriteTree(): WriteTree ***REMOVED***\n  return ***REMOVED***\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n***REMOVED***;\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree ***REMOVED***\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null ***REMOVED***\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode ***REMOVED***\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null ***REMOVED***\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null ***REMOVED***\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] ***REMOVED***\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null ***REMOVED***\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef ***REMOVED***\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef ***REMOVED***\n  return ***REMOVED***\n    treePath: path,\n    writeTree\n***REMOVED***;\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef ***REMOVED***\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert, assertionError } from '@firebase/util';\n\nimport ***REMOVED***\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator ***REMOVED***\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) ***REMOVED***\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) ***REMOVED***\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) ***REMOVED***\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n    ***REMOVED*** else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) ***REMOVED***\n        this.changeMap.delete(childKey);\n    ***REMOVED*** else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) ***REMOVED***\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n    ***REMOVED*** else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) ***REMOVED***\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n    ***REMOVED*** else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) ***REMOVED***\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n    ***REMOVED*** else ***REMOVED***\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      this.changeMap.set(childKey, change);\n  ***REMOVED***\n***REMOVED***\n\n  getChanges(): Change[] ***REMOVED***\n    return Array.from(this.changeMap.values());\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Index } from '../snap/indexes/Index';\nimport ***REMOVED*** NamedNode, Node } from '../snap/Node';\nimport ***REMOVED***\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport ***REMOVED*** CacheNode } from './CacheNode';\nimport ***REMOVED*** ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource ***REMOVED***\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource ***REMOVED***\n  getCompleteChild(childKey?: string): Node | null ***REMOVED***\n    return null;\n***REMOVED***\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null ***REMOVED***\n    return null;\n***REMOVED***\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource ***REMOVED***\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) ***REMOVED***}\n  getCompleteChild(childKey: string): Node | null ***REMOVED***\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) ***REMOVED***\n      return node.getNode().getImmediateChild(childKey);\n  ***REMOVED*** else ***REMOVED***\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n  ***REMOVED***\n***REMOVED***\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null ***REMOVED***\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) ***REMOVED***\n      return null;\n  ***REMOVED*** else ***REMOVED***\n      return nodes[0];\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert, assertionError } from '@firebase/util';\n\nimport ***REMOVED*** AckUserWrite } from '../operation/AckUserWrite';\nimport ***REMOVED*** Merge } from '../operation/Merge';\nimport ***REMOVED*** Operation, OperationType } from '../operation/Operation';\nimport ***REMOVED*** Overwrite } from '../operation/Overwrite';\nimport ***REMOVED*** ChildrenNode } from '../snap/ChildrenNode';\nimport ***REMOVED*** KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport ***REMOVED*** Node } from '../snap/Node';\nimport ***REMOVED*** ImmutableTree } from '../util/ImmutableTree';\nimport ***REMOVED***\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport ***REMOVED***\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport ***REMOVED*** Change, changeValue } from './Change';\nimport ***REMOVED*** ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport ***REMOVED***\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport ***REMOVED*** NodeFilter } from './filter/NodeFilter';\nimport ***REMOVED***\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult ***REMOVED***\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor ***REMOVED***\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor ***REMOVED***\n  return ***REMOVED*** filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void ***REMOVED***\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult ***REMOVED***\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) ***REMOVED***\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) ***REMOVED***\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n  ***REMOVED*** else ***REMOVED***\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n  ***REMOVED***\n***REMOVED*** else if (operation.type === OperationType.MERGE) ***REMOVED***\n    const merge = operation as Merge;\n    if (merge.source.fromUser) ***REMOVED***\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n  ***REMOVED*** else ***REMOVED***\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n  ***REMOVED***\n***REMOVED*** else if (operation.type === OperationType.ACK_USER_WRITE) ***REMOVED***\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) ***REMOVED***\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n  ***REMOVED*** else ***REMOVED***\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n  ***REMOVED***\n***REMOVED*** else if (operation.type === OperationType.LISTEN_COMPLETE) ***REMOVED***\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n***REMOVED*** else ***REMOVED***\n    throw assertionError('Unknown operation type: ' + operation.type);\n***REMOVED***\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return ***REMOVED*** viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void ***REMOVED***\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) ***REMOVED***\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) ***REMOVED***\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n  ***REMOVED***\n***REMOVED***\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache ***REMOVED***\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) ***REMOVED***\n    // we have a shadowing write, ignore changes\n    return viewCache;\n***REMOVED*** else ***REMOVED***\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) ***REMOVED***\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) ***REMOVED***\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n    ***REMOVED*** else ***REMOVED***\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') ***REMOVED***\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) ***REMOVED***\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n      ***REMOVED*** else ***REMOVED***\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n      ***REMOVED***\n    ***REMOVED*** else ***REMOVED***\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) ***REMOVED***\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) ***REMOVED***\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n        ***REMOVED*** else ***REMOVED***\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n        ***REMOVED***\n      ***REMOVED*** else ***REMOVED***\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n      ***REMOVED***\n        if (newEventChild != null) ***REMOVED***\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n      ***REMOVED*** else ***REMOVED***\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n***REMOVED***\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache ***REMOVED***\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) ***REMOVED***\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n***REMOVED*** else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) ***REMOVED***\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n***REMOVED*** else ***REMOVED***\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) ***REMOVED***\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n  ***REMOVED***\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') ***REMOVED***\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n  ***REMOVED*** else ***REMOVED***\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n  ***REMOVED***\n***REMOVED***\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache ***REMOVED***\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) ***REMOVED***\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n***REMOVED*** else ***REMOVED***\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') ***REMOVED***\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n  ***REMOVED*** else ***REMOVED***\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) ***REMOVED***\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n    ***REMOVED*** else ***REMOVED***\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) ***REMOVED***\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) ***REMOVED***\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n        ***REMOVED*** else ***REMOVED***\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n        ***REMOVED***\n      ***REMOVED*** else ***REMOVED***\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n      ***REMOVED***\n    ***REMOVED***\n      if (!oldChild.equals(newChild)) ***REMOVED***\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n    ***REMOVED*** else ***REMOVED***\n        newViewCache = oldViewCache;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean ***REMOVED***\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache ***REMOVED***\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => ***REMOVED***\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) ***REMOVED***\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n  ***REMOVED***\n***REMOVED***);\n\n  changedChildren.foreach((relativePath, childNode) => ***REMOVED***\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) ***REMOVED***\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n  ***REMOVED***\n***REMOVED***);\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node ***REMOVED***\n  merge.foreach((relativePath, childNode) => ***REMOVED***\n    node = node.updateChild(relativePath, childNode);\n***REMOVED***);\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache ***REMOVED***\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) ***REMOVED***\n    return viewCache;\n***REMOVED***\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) ***REMOVED***\n    viewMergeTree = changedChildren;\n***REMOVED*** else ***REMOVED***\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n***REMOVED***\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => ***REMOVED***\n    if (serverNode.hasChild(childKey)) ***REMOVED***\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n  ***REMOVED***\n***REMOVED***);\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => ***REMOVED***\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) ***REMOVED***\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n  ***REMOVED***\n***REMOVED***);\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache ***REMOVED***\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) ***REMOVED***\n    return viewCache;\n***REMOVED***\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) ***REMOVED***\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) ***REMOVED***\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n  ***REMOVED*** else if (pathIsEmpty(ackPath)) ***REMOVED***\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => ***REMOVED***\n        changedChildren = changedChildren.set(new Path(name), node);\n    ***REMOVED***);\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n  ***REMOVED*** else ***REMOVED***\n      return viewCache;\n  ***REMOVED***\n***REMOVED*** else ***REMOVED***\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => ***REMOVED***\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) ***REMOVED***\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n    ***REMOVED***\n  ***REMOVED***);\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n***REMOVED***\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache ***REMOVED***\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache ***REMOVED***\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) ***REMOVED***\n    return viewCache;\n***REMOVED*** else ***REMOVED***\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') ***REMOVED***\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) ***REMOVED***\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n    ***REMOVED*** else ***REMOVED***\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n    ***REMOVED***\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n  ***REMOVED*** else ***REMOVED***\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) ***REMOVED***\n        newChild = oldEventCache.getImmediateChild(childKey);\n    ***REMOVED***\n      if (newChild != null) ***REMOVED***\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n    ***REMOVED*** else if (viewCache.eventCache.getNode().hasChild(childKey)) ***REMOVED***\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n    ***REMOVED*** else ***REMOVED***\n        newEventCache = oldEventCache;\n    ***REMOVED***\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) ***REMOVED***\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) ***REMOVED***\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** Operation, OperationType } from '../operation/Operation';\nimport ***REMOVED*** ChildrenNode } from '../snap/ChildrenNode';\nimport ***REMOVED*** PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport ***REMOVED*** Node } from '../snap/Node';\nimport ***REMOVED*** Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport ***REMOVED*** WriteTreeRef } from '../WriteTree';\n\nimport ***REMOVED*** CacheNode } from './CacheNode';\nimport ***REMOVED*** Change, changeChildAdded, changeValue } from './Change';\nimport ***REMOVED*** CancelEvent, Event } from './Event';\nimport ***REMOVED***\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport ***REMOVED*** EventRegistration, QueryContext } from './EventRegistration';\nimport ***REMOVED*** IndexedFilter } from './filter/IndexedFilter';\nimport ***REMOVED*** queryParamsGetNodeFilter } from './QueryParams';\nimport ***REMOVED***\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport ***REMOVED***\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View ***REMOVED***\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) ***REMOVED***\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n***REMOVED***\n\n  get query(): QueryContext ***REMOVED***\n    return this.query_;\n***REMOVED***\n}\n\nexport function viewGetServerCache(view: View): Node | null ***REMOVED***\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null ***REMOVED***\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null ***REMOVED***\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) ***REMOVED***\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) ***REMOVED***\n      return cache.getChild(path);\n  ***REMOVED***\n***REMOVED***\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean ***REMOVED***\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) ***REMOVED***\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] ***REMOVED***\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) ***REMOVED***\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => ***REMOVED***\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) ***REMOVED***\n        cancelEvents.push(maybeEvent);\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n\n  if (eventRegistration) ***REMOVED***\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) ***REMOVED***\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) ***REMOVED***\n        remaining.push(existing);\n    ***REMOVED*** else if (eventRegistration.hasAnyCallback()) ***REMOVED***\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n    ***REMOVED***\n  ***REMOVED***\n    view.eventRegistrations_ = remaining;\n***REMOVED*** else ***REMOVED***\n    view.eventRegistrations_ = [];\n***REMOVED***\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] ***REMOVED***\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) ***REMOVED***\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n***REMOVED***\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] ***REMOVED***\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) ***REMOVED***\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => ***REMOVED***\n      initialChanges.push(changeChildAdded(key, childNode));\n  ***REMOVED***);\n***REMOVED***\n  if (eventSnap.isFullyInitialized()) ***REMOVED***\n    initialChanges.push(changeValue(eventSnap.getNode()));\n***REMOVED***\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] ***REMOVED***\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** ReferenceConstructor } from '../api/Reference';\n\nimport ***REMOVED*** Operation } from './operation/Operation';\nimport ***REMOVED*** ChildrenNode } from './snap/ChildrenNode';\nimport ***REMOVED*** Node } from './snap/Node';\nimport ***REMOVED*** Path } from './util/Path';\nimport ***REMOVED*** CacheNode } from './view/CacheNode';\nimport ***REMOVED*** Event } from './view/Event';\nimport ***REMOVED*** EventRegistration, QueryContext } from './view/EventRegistration';\nimport ***REMOVED***\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport ***REMOVED*** newViewCache } from './view/ViewCache';\nimport ***REMOVED***\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint ***REMOVED***\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void ***REMOVED***\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor ***REMOVED***\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean ***REMOVED***\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] ***REMOVED***\n  const queryId = operation.source.queryId;\n  if (queryId !== null) ***REMOVED***\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n***REMOVED*** else ***REMOVED***\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) ***REMOVED***\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n  ***REMOVED***\n\n    return events;\n***REMOVED***\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View ***REMOVED***\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) ***REMOVED***\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) ***REMOVED***\n      eventCacheComplete = true;\n  ***REMOVED*** else if (serverCache instanceof ChildrenNode) ***REMOVED***\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n  ***REMOVED*** else ***REMOVED***\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n  ***REMOVED***\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n***REMOVED***\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] ***REMOVED***\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) ***REMOVED***\n    syncPoint.views.set(query._queryIdentifier, view);\n***REMOVED***\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): ***REMOVED*** removed: QueryContext[]; events: Event[] } ***REMOVED***\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') ***REMOVED***\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) ***REMOVED***\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) ***REMOVED***\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) ***REMOVED***\n          removed.push(view.query);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED*** else ***REMOVED***\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) ***REMOVED***\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) ***REMOVED***\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) ***REMOVED***\n          removed.push(view.query);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) ***REMOVED***\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n***REMOVED***\n\n  return ***REMOVED*** removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] ***REMOVED***\n  const result = [];\n  for (const view of syncPoint.views.values()) ***REMOVED***\n    if (!view.query._queryParams.loadsAllData()) ***REMOVED***\n      result.push(view);\n  ***REMOVED***\n***REMOVED***\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null ***REMOVED***\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) ***REMOVED***\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n***REMOVED***\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null ***REMOVED***\n  const params = query._queryParams;\n  if (params.loadsAllData()) ***REMOVED***\n    return syncPointGetCompleteView(syncPoint);\n***REMOVED*** else ***REMOVED***\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n***REMOVED***\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean ***REMOVED***\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean ***REMOVED***\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null ***REMOVED***\n  for (const view of syncPoint.views.values()) ***REMOVED***\n    if (view.query._queryParams.loadsAllData()) ***REMOVED***\n      return view;\n  ***REMOVED***\n***REMOVED***\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** ReferenceConstructor } from '../api/Reference';\n\nimport ***REMOVED*** AckUserWrite } from './operation/AckUserWrite';\nimport ***REMOVED*** ListenComplete } from './operation/ListenComplete';\nimport ***REMOVED*** Merge } from './operation/Merge';\nimport ***REMOVED***\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport ***REMOVED*** Overwrite } from './operation/Overwrite';\nimport ***REMOVED*** ChildrenNode } from './snap/ChildrenNode';\nimport ***REMOVED*** Node } from './snap/Node';\nimport ***REMOVED***\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport ***REMOVED*** ImmutableTree } from './util/ImmutableTree';\nimport ***REMOVED***\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport ***REMOVED*** each, errorForServerCode } from './util/util';\nimport ***REMOVED*** CacheNode } from './view/CacheNode';\nimport ***REMOVED*** Event } from './view/Event';\nimport ***REMOVED*** EventRegistration, QueryContext } from './view/EventRegistration';\nimport ***REMOVED*** View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport ***REMOVED***\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void ***REMOVED***\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor ***REMOVED***\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider ***REMOVED***\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() ***REMOVED***\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree ***REMOVED***\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) ***REMOVED***}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] ***REMOVED***\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) ***REMOVED***\n    return [];\n***REMOVED*** else ***REMOVED***\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n***REMOVED***\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: ***REMOVED*** [k: string]: Node },\n  writeId: number\n): Event[] ***REMOVED***\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) ***REMOVED***\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) ***REMOVED***\n    return [];\n***REMOVED*** else ***REMOVED***\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) ***REMOVED***\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n  ***REMOVED*** else ***REMOVED***\n      each(write.children, (pathString: string) => ***REMOVED***\n        affectedTree = affectedTree.set(new Path(pathString), true);\n    ***REMOVED***);\n  ***REMOVED***\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n***REMOVED***\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] ***REMOVED***\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: ***REMOVED*** [k: string]: Node }\n): Event[] ***REMOVED***\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] ***REMOVED***\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] ***REMOVED***\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) ***REMOVED***\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n***REMOVED*** else ***REMOVED***\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n***REMOVED***\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] ***REMOVED***\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) ***REMOVED***\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) ***REMOVED***\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n  ***REMOVED***\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) ***REMOVED***\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => ***REMOVED***\n          return query._queryParams.loadsAllData();\n      ***REMOVED***);\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) ***REMOVED***\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) ***REMOVED***\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) ***REMOVED***\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n        ***REMOVED***\n      ***REMOVED***\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n    ***REMOVED***\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) ***REMOVED***\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) ***REMOVED***\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n      ***REMOVED*** else ***REMOVED***\n          removed.forEach((queryToRemove: QueryContext) => ***REMOVED***\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n        ***REMOVED***);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n***REMOVED*** else ***REMOVED***\n    // No-op, this listener must've been already removed\n***REMOVED***\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] ***REMOVED***\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) ***REMOVED***\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n***REMOVED*** else ***REMOVED***\n    // Query must have been removed already\n    return [];\n***REMOVED***\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: ***REMOVED*** [k: string]: Node },\n  tag: number\n): Event[] ***REMOVED***\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) ***REMOVED***\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n***REMOVED*** else ***REMOVED***\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n***REMOVED***\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] ***REMOVED***\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => ***REMOVED***\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n***REMOVED***);\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) ***REMOVED***\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n***REMOVED*** else ***REMOVED***\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n***REMOVED***\n\n  let serverCacheComplete;\n  if (serverCache != null) ***REMOVED***\n    serverCacheComplete = true;\n***REMOVED*** else ***REMOVED***\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => ***REMOVED***\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) ***REMOVED***\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) ***REMOVED***\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n***REMOVED***\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) ***REMOVED***\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n***REMOVED***\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node ***REMOVED***\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => ***REMOVED***\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) ***REMOVED***\n        return serverCache;\n    ***REMOVED***\n  ***REMOVED***\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null ***REMOVED***\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => ***REMOVED***\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n***REMOVED***);\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) ***REMOVED***\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n***REMOVED*** else ***REMOVED***\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n***REMOVED***\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] ***REMOVED***\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] ***REMOVED***\n  if (pathIsEmpty(operation.path)) ***REMOVED***\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n***REMOVED*** else ***REMOVED***\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) ***REMOVED***\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  ***REMOVED***\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) ***REMOVED***\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n  ***REMOVED***\n\n    if (syncPoint) ***REMOVED***\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n  ***REMOVED***\n\n    return events;\n***REMOVED***\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] ***REMOVED***\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) ***REMOVED***\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n***REMOVED***\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => ***REMOVED***\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) ***REMOVED***\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n  ***REMOVED***\n***REMOVED***);\n\n  if (syncPoint) ***REMOVED***\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n***REMOVED***\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): ***REMOVED*** hashFn(): string; onComplete(a: string, b?: unknown): Event[] } ***REMOVED***\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return ***REMOVED***\n    hashFn: () => ***REMOVED***\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n  ***REMOVED***,\n    onComplete: (status: string): Event[] => ***REMOVED***\n      if (status === 'ok') ***REMOVED***\n        if (tag) ***REMOVED***\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n      ***REMOVED*** else ***REMOVED***\n          return syncTreeApplyListenComplete(syncTree, query._path);\n      ***REMOVED***\n    ***REMOVED*** else ***REMOVED***\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***;\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null ***REMOVED***\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string ***REMOVED***\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null ***REMOVED***\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): ***REMOVED***\n  queryId: string;\n  path: Path;\n} ***REMOVED***\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return ***REMOVED***\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n***REMOVED***;\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] ***REMOVED***\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] ***REMOVED***\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => ***REMOVED***\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) ***REMOVED***\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n  ***REMOVED*** else ***REMOVED***\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) ***REMOVED***\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n    ***REMOVED***\n      each(childMap, (_key: string, childViews: View[]) => ***REMOVED***\n        views = views.concat(childViews);\n    ***REMOVED***);\n      return views;\n  ***REMOVED***\n***REMOVED***);\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext ***REMOVED***\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) ***REMOVED***\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n***REMOVED*** else ***REMOVED***\n    return query;\n***REMOVED***\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) ***REMOVED***\n  for (let j = 0; j < queries.length; ++j) ***REMOVED***\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) ***REMOVED***\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n  ***REMOVED***\n***REMOVED***\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number ***REMOVED***\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] ***REMOVED***\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) ***REMOVED***\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n***REMOVED*** else ***REMOVED***\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => ***REMOVED***\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) ***REMOVED***\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n      ***REMOVED*** else ***REMOVED***\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) ***REMOVED***\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n        ***REMOVED***\n          each(childMap, (_key: string, childQueries: QueryContext[]) => ***REMOVED***\n            queries = queries.concat(childQueries);\n        ***REMOVED***);\n          return queries;\n      ***REMOVED***\n    ***REMOVED***\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) ***REMOVED***\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n  ***REMOVED***\n***REMOVED***\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** ChildrenNode } from '../snap/ChildrenNode';\nimport ***REMOVED*** PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport ***REMOVED*** LeafNode } from '../snap/LeafNode';\nimport ***REMOVED*** Node } from '../snap/Node';\nimport ***REMOVED*** nodeFromJSON } from '../snap/nodeFromJSON';\nimport ***REMOVED*** SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport ***REMOVED*** Indexable } from './misc';\nimport ***REMOVED*** Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider ***REMOVED***\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider ***REMOVED***\n  constructor(readonly node_: Node) ***REMOVED***}\n\n  getImmediateChild(childName: string): ValueProvider ***REMOVED***\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n***REMOVED***\n\n  node(): Node ***REMOVED***\n    return this.node_;\n***REMOVED***\n}\n\nclass DeferredValueProvider implements ValueProvider ***REMOVED***\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) ***REMOVED***\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n***REMOVED***\n\n  getImmediateChild(childName: string): ValueProvider ***REMOVED***\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n***REMOVED***\n\n  node(): Node ***REMOVED***\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n***REMOVED***\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: ***REMOVED***\n    [k: string]: unknown;\n***REMOVED*** | null\n): ***REMOVED*** [k: string]: unknown } ***REMOVED***\n  values = values || ***REMOVED***};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: ***REMOVED*** [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: ***REMOVED*** [k: string]: unknown }\n): string | number | boolean ***REMOVED***\n  if (!value || typeof value !== 'object') ***REMOVED***\n    return value as string | number | boolean;\n***REMOVED***\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') ***REMOVED***\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n***REMOVED*** else if (typeof value['.sv'] === 'object') ***REMOVED***\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n***REMOVED*** else ***REMOVED***\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n***REMOVED***\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: ***REMOVED*** [k: string]: unknown }\n): string | number | boolean ***REMOVED***\n  switch (op) ***REMOVED***\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n***REMOVED***\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: ***REMOVED*** [k: string]: unknown }\n): string | number | boolean ***REMOVED***\n  if (!op.hasOwnProperty('increment')) ***REMOVED***\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n***REMOVED***\n  const delta = op['increment'];\n  if (typeof delta !== 'number') ***REMOVED***\n    assert(false, 'Unexpected increment value: ' + delta);\n***REMOVED***\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) ***REMOVED***\n    return delta;\n***REMOVED***\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') ***REMOVED***\n    return delta;\n***REMOVED***\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node ***REMOVED***\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node ***REMOVED***\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node ***REMOVED***\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) ***REMOVED***\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) ***REMOVED***\n      return new LeafNode(value, nodeFromJSON(priority));\n  ***REMOVED*** else ***REMOVED***\n      return node;\n  ***REMOVED***\n***REMOVED*** else ***REMOVED***\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) ***REMOVED***\n      newNode = newNode.updatePriority(new LeafNode(priority));\n  ***REMOVED***\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => ***REMOVED***\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) ***REMOVED***\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n    ***REMOVED***\n  ***REMOVED***);\n    return newNode;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** contains, safeGet } from '@firebase/util';\n\nimport ***REMOVED*** Path, pathGetFront, pathPopFront } from './Path';\nimport ***REMOVED*** each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> ***REMOVED***\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> ***REMOVED***\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = ***REMOVED*** children: ***REMOVED***}, childCount: 0 }\n  ) ***REMOVED***}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> ***REMOVED***\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) ***REMOVED***\n    const childNode = safeGet(child.node.children, next) || ***REMOVED***\n      children: ***REMOVED***},\n      childCount: 0\n  ***REMOVED***;\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n***REMOVED***\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined ***REMOVED***\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void ***REMOVED***\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean ***REMOVED***\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean ***REMOVED***\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void ***REMOVED***\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => ***REMOVED***\n    action(new Tree<T>(child, tree, childTree));\n***REMOVED***);\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void ***REMOVED***\n  if (includeSelf && !childrenFirst) ***REMOVED***\n    action(tree);\n***REMOVED***\n\n  treeForEachChild(tree, child => ***REMOVED***\n    treeForEachDescendant(child, action, true, childrenFirst);\n***REMOVED***);\n\n  if (includeSelf && childrenFirst) ***REMOVED***\n    action(tree);\n***REMOVED***\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean ***REMOVED***\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) ***REMOVED***\n    if (action(node)) ***REMOVED***\n      return true;\n  ***REMOVED***\n    node = node.parent;\n***REMOVED***\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void ***REMOVED***\n  treeForEachChild(tree, child => ***REMOVED***\n    if (treeGetValue(child) !== undefined) ***REMOVED***\n      action(child);\n  ***REMOVED*** else ***REMOVED***\n      treeForEachImmediateDescendantWithValue(child, action);\n  ***REMOVED***\n***REMOVED***);\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) ***REMOVED***\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) ***REMOVED***\n  if (tree.parent !== null) ***REMOVED***\n    treeUpdateChild(tree.parent, tree.name, tree);\n***REMOVED***\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) ***REMOVED***\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) ***REMOVED***\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n***REMOVED*** else if (!childEmpty && !childExists) ***REMOVED***\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport ***REMOVED*** RepoInfo } from '../RepoInfo';\n\nimport ***REMOVED***\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport ***REMOVED*** each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean ***REMOVED***\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean ***REMOVED***\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean ***REMOVED***\n  if (pathString) ***REMOVED***\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n***REMOVED***\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean ***REMOVED***\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) ***REMOVED***\n  if (optional && value === undefined) ***REMOVED***\n    return;\n***REMOVED***\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) ***REMOVED***\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) ***REMOVED***\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n***REMOVED***\n  if (typeof data === 'function') ***REMOVED***\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n***REMOVED***\n  if (isInvalidJSONNumber(data)) ***REMOVED***\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n***REMOVED***\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) ***REMOVED***\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n***REMOVED***\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') ***REMOVED***\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => ***REMOVED***\n      if (key === '.value') ***REMOVED***\n        hasDotValue = true;\n    ***REMOVED*** else if (key !== '.priority' && key !== '.sv') ***REMOVED***\n        hasActualChild = true;\n        if (!isValidKey(key)) ***REMOVED***\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n      ***REMOVED***\n    ***REMOVED***\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n  ***REMOVED***);\n\n    if (hasDotValue && hasActualChild) ***REMOVED***\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n  ***REMOVED***\n***REMOVED***\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) ***REMOVED***\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) ***REMOVED***\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) ***REMOVED***\n      if (keys[j] === '.priority' && j === keys.length - 1) ***REMOVED***\n        // .priority is OK\n    ***REMOVED*** else if (!isValidKey(keys[j])) ***REMOVED***\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) ***REMOVED***\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) ***REMOVED***\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n  ***REMOVED***\n    prevPath = curPath;\n***REMOVED***\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) ***REMOVED***\n  if (optional && data === undefined) ***REMOVED***\n    return;\n***REMOVED***\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) ***REMOVED***\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n***REMOVED***\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => ***REMOVED***\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') ***REMOVED***\n      if (!isValidPriority(value)) ***REMOVED***\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n    ***REMOVED***\n  ***REMOVED***\n    mergePaths.push(curPath);\n***REMOVED***);\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) ***REMOVED***\n  if (optional && priority === undefined) ***REMOVED***\n    return;\n***REMOVED***\n  if (isInvalidJSONNumber(priority)) ***REMOVED***\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n***REMOVED***\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) ***REMOVED***\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n***REMOVED***\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) ***REMOVED***\n  if (optional && key === undefined) ***REMOVED***\n    return;\n***REMOVED***\n  if (!isValidKey(key)) ***REMOVED***\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n***REMOVED***\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) ***REMOVED***\n  if (optional && pathString === undefined) ***REMOVED***\n    return;\n***REMOVED***\n\n  if (!isValidPathString(pathString)) ***REMOVED***\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n***REMOVED***\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) ***REMOVED***\n  if (pathString) ***REMOVED***\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n***REMOVED***\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) ***REMOVED***\n  if (pathGetFront(path) === '.info') ***REMOVED***\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n***REMOVED***\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: ***REMOVED*** repoInfo: RepoInfo; path: Path }\n) ***REMOVED***\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) ***REMOVED***\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n***REMOVED***\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) ***REMOVED***\n  if (optional && string === undefined) ***REMOVED***\n    return;\n***REMOVED***\n  if (!(typeof string === 'string')) ***REMOVED***\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n***REMOVED***\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) ***REMOVED***\n  if (optional && obj === undefined) ***REMOVED***\n    return;\n***REMOVED***\n  if (!(obj && typeof obj === 'object') || obj === null) ***REMOVED***\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n***REMOVED***\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) ***REMOVED***\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) ***REMOVED***\n    if (optional) ***REMOVED***\n      return;\n  ***REMOVED*** else ***REMOVED***\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n  ***REMOVED***\n***REMOVED***\n\n  if (optType) ***REMOVED***\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) ***REMOVED***\n      if (optional) ***REMOVED***\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n    ***REMOVED*** else ***REMOVED***\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Path, pathContains, pathEquals } from '../util/Path';\nimport ***REMOVED*** exceptionGuard, log, logger } from '../util/util';\n\nimport ***REMOVED*** Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue ***REMOVED***\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) ***REMOVED***\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) ***REMOVED***\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) ***REMOVED***\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n  ***REMOVED***\n\n    if (currList === null) ***REMOVED***\n      currList = ***REMOVED*** events: [], path };\n  ***REMOVED***\n\n    currList.events.push(data);\n***REMOVED***\n  if (currList) ***REMOVED***\n    eventQueue.eventLists_.push(currList);\n***REMOVED***\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) ***REMOVED***\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) ***REMOVED***\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) ***REMOVED***\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) ***REMOVED***\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) ***REMOVED***\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) ***REMOVED***\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n    ***REMOVED*** else ***REMOVED***\n        sentAll = false;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  if (sentAll) ***REMOVED***\n    eventQueue.eventLists_ = [];\n***REMOVED***\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList ***REMOVED***\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) ***REMOVED***\n  for (let i = 0; i < eventList.events.length; i++) ***REMOVED***\n    const eventData = eventList.events[i];\n    if (eventData !== null) ***REMOVED***\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) ***REMOVED***\n        log('event: ' + eventData.toString());\n    ***REMOVED***\n      exceptionGuard(eventFn);\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport ***REMOVED*** ValueEventRegistration } from '../api/Reference_impl';\n\nimport ***REMOVED*** AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport ***REMOVED*** AuthTokenProvider } from './AuthTokenProvider';\nimport ***REMOVED*** PersistentConnection } from './PersistentConnection';\nimport ***REMOVED*** ReadonlyRestClient } from './ReadonlyRestClient';\nimport ***REMOVED*** RepoInfo } from './RepoInfo';\nimport ***REMOVED*** ServerActions } from './ServerActions';\nimport ***REMOVED*** ChildrenNode } from './snap/ChildrenNode';\nimport ***REMOVED*** Node } from './snap/Node';\nimport ***REMOVED*** nodeFromJSON } from './snap/nodeFromJSON';\nimport ***REMOVED*** SnapshotHolder } from './SnapshotHolder';\nimport ***REMOVED***\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport ***REMOVED*** StatsCollection } from './stats/StatsCollection';\nimport ***REMOVED*** StatsListener } from './stats/StatsListener';\nimport ***REMOVED***\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport ***REMOVED*** StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport ***REMOVED***\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport ***REMOVED*** Indexable } from './util/misc';\nimport ***REMOVED***\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport ***REMOVED***\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport ***REMOVED***\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport ***REMOVED***\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport ***REMOVED*** isValidPriority, validateFirebaseData } from './util/validation';\nimport ***REMOVED*** Event } from './view/Event';\nimport ***REMOVED***\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport ***REMOVED*** EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus ***REMOVED***\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction ***REMOVED***\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo ***REMOVED***\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) ***REMOVED***\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n***REMOVED***\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string ***REMOVED***\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n***REMOVED***\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void ***REMOVED***\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) ***REMOVED***\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => ***REMOVED***\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    ***REMOVED***,\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n***REMOVED*** else ***REMOVED***\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) ***REMOVED***\n      if (typeof authOverride !== 'object') ***REMOVED***\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n    ***REMOVED***\n      try ***REMOVED***\n        stringify(authOverride);\n    ***REMOVED*** catch (e) ***REMOVED***\n        throw new Error('Invalid authOverride provided: ' + e);\n    ***REMOVED***\n  ***REMOVED***\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => ***REMOVED***\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n    ***REMOVED***,\n      (connectStatus: boolean) => ***REMOVED***\n        repoOnConnectStatus(repo, connectStatus);\n    ***REMOVED***,\n      (updates: object) => ***REMOVED***\n        repoOnServerInfoUpdate(repo, updates);\n    ***REMOVED***,\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n***REMOVED***\n\n  repo.authTokenProvider_.addTokenChangeListener(token => ***REMOVED***\n    repo.server_.refreshAuthToken(token);\n***REMOVED***);\n\n  repo.appCheckProvider_.addTokenChangeListener(result => ***REMOVED***\n    repo.server_.refreshAppCheckToken(result.token);\n***REMOVED***);\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree(***REMOVED***\n    startListening: (query, tag, currentHashFn, onComplete) => ***REMOVED***\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) ***REMOVED***\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => ***REMOVED***\n          onComplete('ok');\n      ***REMOVED***, 0);\n    ***REMOVED***\n      return infoEvents;\n  ***REMOVED***,\n    stopListening: () => ***REMOVED***}\n***REMOVED***);\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree(***REMOVED***\n    startListening: (query, tag, currentHashFn, onComplete) => ***REMOVED***\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => ***REMOVED***\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n    ***REMOVED***);\n      // No synchronous events for network-backed sync trees\n      return [];\n  ***REMOVED***,\n    stopListening: (query, tag) => ***REMOVED***\n      repo.server_.unlisten(query, tag);\n  ***REMOVED***\n***REMOVED***);\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number ***REMOVED***\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable ***REMOVED***\n  return generateWithValues(***REMOVED***\n    timestamp: repoServerTime(repo)\n***REMOVED***);\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void ***REMOVED***\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) ***REMOVED***\n    if (isMerge) ***REMOVED***\n      const taggedChildren = map(\n        data as ***REMOVED*** [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n  ***REMOVED*** else ***REMOVED***\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n  ***REMOVED***\n***REMOVED*** else if (isMerge) ***REMOVED***\n    const changedChildren = map(\n      data as ***REMOVED*** [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n***REMOVED*** else ***REMOVED***\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n***REMOVED***\n  let affectedPath = path;\n  if (events.length > 0) ***REMOVED***\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n***REMOVED***\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void ***REMOVED***\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void ***REMOVED***\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) ***REMOVED***\n    repoRunOnDisconnectEvents(repo);\n***REMOVED***\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void ***REMOVED***\n  each(updates, (key: string, value: unknown) => ***REMOVED***\n    repoUpdateInfo(repo, key, value);\n***REMOVED***);\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void ***REMOVED***\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number ***REMOVED***\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> ***REMOVED***\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) ***REMOVED***\n    return Promise.resolve(cached);\n***REMOVED***\n  return repo.server_.get(query).then(\n    payload => ***REMOVED***\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) ***REMOVED***\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n    ***REMOVED*** else ***REMOVED***\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n    ***REMOVED***\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n  ***REMOVED***,\n    err => ***REMOVED***\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n  ***REMOVED***\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void ***REMOVED***\n  repoLog(repo, 'set', ***REMOVED***\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n***REMOVED***);\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => ***REMOVED***\n      const success = status === 'ok';\n      if (!success) ***REMOVED***\n        warn('set at ' + path + ' failed: ' + status);\n    ***REMOVED***\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  ***REMOVED***\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: ***REMOVED*** [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void ***REMOVED***\n  repoLog(repo, 'update', ***REMOVED*** path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: ***REMOVED*** [k: string]: Node } = ***REMOVED***};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => ***REMOVED***\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n***REMOVED***);\n\n  if (!empty) ***REMOVED***\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => ***REMOVED***\n        const success = status === 'ok';\n        if (!success) ***REMOVED***\n          warn('update at ' + path + ' failed: ' + status);\n      ***REMOVED***\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    ***REMOVED***\n    );\n\n    each(childrenToMerge, (changedPath: string) => ***REMOVED***\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n  ***REMOVED***);\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n***REMOVED*** else ***REMOVED***\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n***REMOVED***\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void ***REMOVED***\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => ***REMOVED***\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n  ***REMOVED***\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => ***REMOVED***\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n  ***REMOVED***\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void ***REMOVED***\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => ***REMOVED***\n    if (status === 'ok') ***REMOVED***\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n  ***REMOVED***\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n***REMOVED***);\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void ***REMOVED***\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => ***REMOVED***\n      if (status === 'ok') ***REMOVED***\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    ***REMOVED***\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  ***REMOVED***\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void ***REMOVED***\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => ***REMOVED***\n      if (status === 'ok') ***REMOVED***\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n    ***REMOVED***\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  ***REMOVED***\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: ***REMOVED*** [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void ***REMOVED***\n  if (isEmpty(childrenToMerge)) ***REMOVED***\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n***REMOVED***\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => ***REMOVED***\n      if (status === 'ok') ***REMOVED***\n        each(childrenToMerge, (childName: string, childNode: unknown) => ***REMOVED***\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n      ***REMOVED***);\n    ***REMOVED***\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  ***REMOVED***\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void ***REMOVED***\n  let events;\n  if (pathGetFront(query._path) === '.info') ***REMOVED***\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n***REMOVED*** else ***REMOVED***\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n***REMOVED***\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void ***REMOVED***\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') ***REMOVED***\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n***REMOVED*** else ***REMOVED***\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n***REMOVED***\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void ***REMOVED***\n  if (repo.persistentConnection_) ***REMOVED***\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n***REMOVED***\n}\n\nexport function repoResume(repo: Repo): void ***REMOVED***\n  if (repo.persistentConnection_) ***REMOVED***\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n***REMOVED***\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void ***REMOVED***\n  if (typeof console === 'undefined') ***REMOVED***\n    return;\n***REMOVED***\n\n  let stats: ***REMOVED*** [k: string]: unknown };\n  if (showDelta) ***REMOVED***\n    if (!repo.statsListener_) ***REMOVED***\n      repo.statsListener_ = new StatsListener(repo.stats_);\n  ***REMOVED***\n    stats = repo.statsListener_.get();\n***REMOVED*** else ***REMOVED***\n    stats = repo.stats_.get();\n***REMOVED***\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => ***REMOVED***\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) ***REMOVED***\n      paddedStat += ' ';\n  ***REMOVED***\n    console.log(paddedStat + value);\n***REMOVED***);\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void ***REMOVED***\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void ***REMOVED***\n  let prefix = '';\n  if (repo.persistentConnection_) ***REMOVED***\n    prefix = repo.persistentConnection_.id + ':';\n***REMOVED***\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void ***REMOVED***\n  if (callback) ***REMOVED***\n    exceptionGuard(() => ***REMOVED***\n      if (status === 'ok') ***REMOVED***\n        callback(null);\n    ***REMOVED*** else ***REMOVED***\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) ***REMOVED***\n          message += ': ' + errorReason;\n      ***REMOVED***\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void ***REMOVED***\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = ***REMOVED***\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n***REMOVED***;\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) ***REMOVED***\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) ***REMOVED***\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n  ***REMOVED***\n***REMOVED*** else ***REMOVED***\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) ***REMOVED***\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n  ***REMOVED*** else ***REMOVED***\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n  ***REMOVED***\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n***REMOVED***\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node ***REMOVED***\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void ***REMOVED***\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) ***REMOVED***\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n***REMOVED***\n\n  if (treeGetValue(node)) ***REMOVED***\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) ***REMOVED***\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n  ***REMOVED***\n***REMOVED*** else if (treeHasChildren(node)) ***REMOVED***\n    treeForEachChild(node, childNode => ***REMOVED***\n      repoSendReadyTransactions(repo, childNode);\n  ***REMOVED***);\n***REMOVED***\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void ***REMOVED***\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => ***REMOVED***\n    return txn.currentWriteId;\n***REMOVED***);\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) ***REMOVED***\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type ***REMOVED***!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n***REMOVED***\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => ***REMOVED***\n      repoLog(repo, 'transaction put response', ***REMOVED***\n        path: pathToSend.toString(),\n        status\n    ***REMOVED***);\n\n      let events: Event[] = [];\n      if (status === 'ok') ***REMOVED***\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) ***REMOVED***\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) ***REMOVED***\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n        ***REMOVED***\n          queue[i].unwatcher();\n      ***REMOVED***\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) ***REMOVED***\n          exceptionGuard(callbacks[i]);\n      ***REMOVED***\n    ***REMOVED*** else ***REMOVED***\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') ***REMOVED***\n          for (let i = 0; i < queue.length; i++) ***REMOVED***\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ***REMOVED***\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n          ***REMOVED*** else ***REMOVED***\n              queue[i].status = TransactionStatus.RUN;\n          ***REMOVED***\n        ***REMOVED***\n      ***REMOVED*** else ***REMOVED***\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) ***REMOVED***\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n        ***REMOVED***\n      ***REMOVED***\n\n        repoRerunTransactions(repo, path);\n    ***REMOVED***\n  ***REMOVED***,\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path ***REMOVED***\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void ***REMOVED***\n  if (queue.length === 0) ***REMOVED***\n    return; // Nothing to do!\n***REMOVED***\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => ***REMOVED***\n    return q.status === TransactionStatus.RUN;\n***REMOVED***);\n  const setsToIgnore = txnsToRerun.map(q => ***REMOVED***\n    return q.currentWriteId;\n***REMOVED***);\n  for (let i = 0; i < queue.length; i++) ***REMOVED***\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) ***REMOVED***\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n  ***REMOVED*** else if (transaction.status === TransactionStatus.RUN) ***REMOVED***\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) ***REMOVED***\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n    ***REMOVED*** else ***REMOVED***\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) ***REMOVED***\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) ***REMOVED***\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n        ***REMOVED***\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n      ***REMOVED*** else ***REMOVED***\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) ***REMOVED***\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) ***REMOVED***\n        setTimeout(unwatcher, Math.floor(0));\n    ***REMOVED***)(queue[i].unwatcher);\n\n      if (queue[i].onComplete) ***REMOVED***\n        if (abortReason === 'nodata') ***REMOVED***\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n      ***REMOVED*** else ***REMOVED***\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) ***REMOVED***\n    exceptionGuard(callbacks[i]);\n***REMOVED***\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> ***REMOVED***\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) ***REMOVED***\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n***REMOVED***\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] ***REMOVED***\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void ***REMOVED***\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) ***REMOVED***\n    for (let i = 0; i < nodeQueue.length; i++) ***REMOVED***\n      queue.push(nodeQueue[i]);\n  ***REMOVED***\n***REMOVED***\n\n  treeForEachChild(node, child => ***REMOVED***\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n***REMOVED***);\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void ***REMOVED***\n  const queue = treeGetValue(node);\n  if (queue) ***REMOVED***\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) ***REMOVED***\n      if (queue[from].status !== TransactionStatus.COMPLETED) ***REMOVED***\n        queue[to] = queue[from];\n        to++;\n    ***REMOVED***\n  ***REMOVED***\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n***REMOVED***\n\n  treeForEachChild(node, childNode => ***REMOVED***\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n***REMOVED***);\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path ***REMOVED***\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => ***REMOVED***\n    repoAbortTransactionsOnNode(repo, node);\n***REMOVED***);\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => ***REMOVED***\n    repoAbortTransactionsOnNode(repo, node);\n***REMOVED***);\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void ***REMOVED***\n  const queue = treeGetValue(node);\n  if (queue) ***REMOVED***\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) ***REMOVED***\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) ***REMOVED***\n        // Already marked.  No action needed.\n    ***REMOVED*** else if (queue[i].status === TransactionStatus.SENT) ***REMOVED***\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n    ***REMOVED*** else ***REMOVED***\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) ***REMOVED***\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n    if (lastSent === -1) ***REMOVED***\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n  ***REMOVED*** else ***REMOVED***\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n  ***REMOVED***\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) ***REMOVED***\n      exceptionGuard(callbacks[i]);\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** RepoInfo } from '../../RepoInfo';\nimport ***REMOVED*** Path } from '../Path';\nimport ***REMOVED*** warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string ***REMOVED***\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) ***REMOVED***\n    if (pieces[i].length > 0) ***REMOVED***\n      let piece = pieces[i];\n      try ***REMOVED***\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n    ***REMOVED*** catch (e) ***REMOVED***}\n      pathStringDecoded += '/' + piece;\n  ***REMOVED***\n***REMOVED***\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): ***REMOVED*** [key: string]: string } ***REMOVED***\n  const results = ***REMOVED***};\n  if (queryString.charAt(0) === '?') ***REMOVED***\n    queryString = queryString.substring(1);\n***REMOVED***\n  for (const segment of queryString.split('&')) ***REMOVED***\n    if (segment.length === 0) ***REMOVED***\n      continue;\n  ***REMOVED***\n    const kv = segment.split('=');\n    if (kv.length === 2) ***REMOVED***\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n  ***REMOVED*** else ***REMOVED***\n      warn(`Invalid query segment '$***REMOVED***segment}' in query '$***REMOVED***queryString}'`);\n  ***REMOVED***\n***REMOVED***\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): ***REMOVED*** repoInfo: RepoInfo; path: Path } ***REMOVED***\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') ***REMOVED***\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n***REMOVED***\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) ***REMOVED***\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n***REMOVED***\n\n  if (!parsedUrl.secure) ***REMOVED***\n    warnIfPageIsSecure();\n***REMOVED***\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return ***REMOVED***\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n***REMOVED***;\n};\n\nexport const parseDatabaseURL = function (dataURL: string): ***REMOVED***\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} ***REMOVED***\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') ***REMOVED***\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) ***REMOVED***\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n  ***REMOVED***\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) ***REMOVED***\n      slashInd = dataURL.length;\n  ***REMOVED***\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) ***REMOVED***\n      questionMarkInd = dataURL.length;\n  ***REMOVED***\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) ***REMOVED***\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n  ***REMOVED***\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) ***REMOVED***\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n  ***REMOVED*** else ***REMOVED***\n      colonInd = host.length;\n  ***REMOVED***\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') ***REMOVED***\n      domain = 'localhost';\n  ***REMOVED*** else if (hostWithoutPort.split('.').length <= 2) ***REMOVED***\n      domain = hostWithoutPort;\n  ***REMOVED*** else ***REMOVED***\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n  ***REMOVED***\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) ***REMOVED***\n      namespace = queryParams['ns'];\n  ***REMOVED***\n***REMOVED***\n\n  return ***REMOVED***\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n***REMOVED***;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED***\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () ***REMOVED***\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) ***REMOVED***\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) ***REMOVED***\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n  ***REMOVED***\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) ***REMOVED***\n      for (i = 0; i < 12; i++) ***REMOVED***\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n    ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) ***REMOVED***\n        lastRandChars[i] = 0;\n    ***REMOVED***\n      lastRandChars[i]++;\n  ***REMOVED***\n    for (i = 0; i < 12; i++) ***REMOVED***\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n  ***REMOVED***\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n***REMOVED***;\n})();\n\nexport const successor = function (key: string) ***REMOVED***\n  if (key === '' + INTEGER_32_MAX) ***REMOVED***\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n***REMOVED***\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) ***REMOVED***\n    return '' + (keyAsInt + 1);\n***REMOVED***\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) ***REMOVED***\n    next[i] = key.charAt(i);\n***REMOVED***\n\n  if (next.length < MAX_KEY_LEN) ***REMOVED***\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n***REMOVED***\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) ***REMOVED***\n    i--;\n***REMOVED***\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) ***REMOVED***\n    return MAX_NAME;\n***REMOVED***\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) ***REMOVED***\n  if (key === '' + INTEGER_32_MIN) ***REMOVED***\n    return MIN_NAME;\n***REMOVED***\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) ***REMOVED***\n    return '' + (keyAsInt - 1);\n***REMOVED***\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) ***REMOVED***\n    next[i] = key.charAt(i);\n***REMOVED***\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   ***REMOVED*** MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) ***REMOVED***\n    if (next.length === 1) ***REMOVED***\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n  ***REMOVED***\n    delete next[next.length - 1];\n    return next.join('');\n***REMOVED***\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** stringify } from '@firebase/util';\n\nimport ***REMOVED*** DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport ***REMOVED*** Path } from '../util/Path';\n\nimport ***REMOVED*** EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event ***REMOVED***\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event ***REMOVED***\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) ***REMOVED***}\n  getPath(): Path ***REMOVED***\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') ***REMOVED***\n      return ref._path;\n  ***REMOVED*** else ***REMOVED***\n      return ref.parent._path;\n  ***REMOVED***\n***REMOVED***\n  getEventType(): string ***REMOVED***\n    return this.eventType;\n***REMOVED***\n  getEventRunner(): () => void ***REMOVED***\n    return this.eventRegistration.getEventRunner(this);\n***REMOVED***\n  toString(): string ***REMOVED***\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n***REMOVED***\n}\n\nexport class CancelEvent implements Event ***REMOVED***\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) ***REMOVED***}\n  getPath(): Path ***REMOVED***\n    return this.path;\n***REMOVED***\n  getEventType(): string ***REMOVED***\n    return 'cancel';\n***REMOVED***\n  getEventRunner(): () => void ***REMOVED***\n    return this.eventRegistration.getEventRunner(this);\n***REMOVED***\n  toString(): string ***REMOVED***\n    return this.path.toString() + ':cancel';\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert } from '@firebase/util';\n\nimport ***REMOVED*** DataSnapshot } from '../../api/Reference_impl';\nimport ***REMOVED*** Repo } from '../Repo';\nimport ***REMOVED*** Path } from '../util/Path';\n\nimport ***REMOVED*** Change } from './Change';\nimport ***REMOVED*** CancelEvent, Event } from './Event';\nimport ***REMOVED*** QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback ***REMOVED***\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext ***REMOVED***\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) ***REMOVED***}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void ***REMOVED***\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n***REMOVED***\n\n  onCancel(error: Error): void ***REMOVED***\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n***REMOVED***\n\n  get hasCancelCallback(): boolean ***REMOVED***\n    return !!this.cancelCallback;\n***REMOVED***\n\n  matches(other: CallbackContext): boolean ***REMOVED***\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n***REMOVED***\n}\n\nexport interface QueryContext ***REMOVED***\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration ***REMOVED***\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Deferred } from '@firebase/util';\n\nimport ***REMOVED***\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport ***REMOVED*** Path } from '../core/util/Path';\nimport ***REMOVED***\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect ***REMOVED***\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) ***REMOVED***}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> ***REMOVED***\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => ***REMOVED***})\n    );\n    return deferred.promise;\n***REMOVED***\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> ***REMOVED***\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => ***REMOVED***})\n    );\n    return deferred.promise;\n***REMOVED***\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * ***REMOVED***@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> ***REMOVED***\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => ***REMOVED***})\n    );\n    return deferred.promise;\n***REMOVED***\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> ***REMOVED***\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => ***REMOVED***})\n    );\n    return deferred.promise;\n***REMOVED***\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> ***REMOVED***\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => ***REMOVED***})\n    );\n    return deferred.promise;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport ***REMOVED***\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport ***REMOVED*** ChildrenNode } from '../core/snap/ChildrenNode';\nimport ***REMOVED*** Index } from '../core/snap/indexes/Index';\nimport ***REMOVED*** KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport ***REMOVED*** PathIndex } from '../core/snap/indexes/PathIndex';\nimport ***REMOVED*** PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport ***REMOVED*** VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport ***REMOVED*** Node } from '../core/snap/Node';\nimport ***REMOVED*** syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport ***REMOVED*** syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport ***REMOVED*** parseRepoInfo } from '../core/util/libs/parser';\nimport ***REMOVED*** nextPushId } from '../core/util/NextPushId';\nimport ***REMOVED***\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport ***REMOVED***\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport ***REMOVED***\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport ***REMOVED*** Change } from '../core/view/Change';\nimport ***REMOVED*** CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport ***REMOVED***\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport ***REMOVED***\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport ***REMOVED*** Database } from './Database';\nimport ***REMOVED*** OnDisconnect } from './OnDisconnect';\nimport ***REMOVED***\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext ***REMOVED***\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) ***REMOVED***}\n\n  get key(): string | null ***REMOVED***\n    if (pathIsEmpty(this._path)) ***REMOVED***\n      return null;\n  ***REMOVED*** else ***REMOVED***\n      return pathGetBack(this._path);\n  ***REMOVED***\n***REMOVED***\n\n  get ref(): DatabaseReference ***REMOVED***\n    return new ReferenceImpl(this._repo, this._path);\n***REMOVED***\n\n  get _queryIdentifier(): string ***REMOVED***\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '***REMOVED***}' ? 'default' : id;\n***REMOVED***\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object ***REMOVED***\n    return queryParamsGetQueryObject(this._queryParams);\n***REMOVED***\n\n  isEqual(other: QueryImpl | null): boolean ***REMOVED***\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) ***REMOVED***\n      return false;\n  ***REMOVED***\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n***REMOVED***\n\n  toJSON(): string ***REMOVED***\n    return this.toString();\n***REMOVED***\n\n  toString(): string ***REMOVED***\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n***REMOVED***\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) ***REMOVED***\n  if (query._orderByCalled === true) ***REMOVED***\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n***REMOVED***\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) ***REMOVED***\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) ***REMOVED***\n    startNode = params.getIndexStartValue();\n***REMOVED***\n  if (params.hasEnd()) ***REMOVED***\n    endNode = params.getIndexEndValue();\n***REMOVED***\n\n  if (params.getIndex() === KEY_INDEX) ***REMOVED***\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) ***REMOVED***\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) ***REMOVED***\n        throw new Error(tooManyArgsError);\n    ***REMOVED*** else if (typeof startNode !== 'string') ***REMOVED***\n        throw new Error(wrongArgTypeError);\n    ***REMOVED***\n  ***REMOVED***\n    if (params.hasEnd()) ***REMOVED***\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) ***REMOVED***\n        throw new Error(tooManyArgsError);\n    ***REMOVED*** else if (typeof endNode !== 'string') ***REMOVED***\n        throw new Error(wrongArgTypeError);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED*** else if (params.getIndex() === PRIORITY_INDEX) ***REMOVED***\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) ***REMOVED***\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n  ***REMOVED***\n***REMOVED*** else ***REMOVED***\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) ***REMOVED***\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n  ***REMOVED***\n***REMOVED***\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) ***REMOVED***\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) ***REMOVED***\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n***REMOVED***\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference ***REMOVED***\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) ***REMOVED***\n    super(repo, path, new QueryParams(), false);\n***REMOVED***\n\n  get parent(): ReferenceImpl | null ***REMOVED***\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n***REMOVED***\n\n  get root(): ReferenceImpl ***REMOVED***\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) ***REMOVED***\n      ref = ref.parent;\n  ***REMOVED***\n    return ref;\n***REMOVED***\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot ***REMOVED***\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) ***REMOVED***}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null ***REMOVED***\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n***REMOVED***\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null ***REMOVED***\n    return this.ref.key;\n***REMOVED***\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number ***REMOVED***\n    return this._node.numChildren();\n***REMOVED***\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot ***REMOVED***\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n***REMOVED***\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean ***REMOVED***\n    return !this._node.isEmpty();\n***REMOVED***\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any ***REMOVED***\n    return this._node.val(true);\n***REMOVED***\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean ***REMOVED***\n    if (this._node.isLeafNode()) ***REMOVED***\n      return false;\n  ***REMOVED***\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => ***REMOVED***\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n  ***REMOVED***);\n***REMOVED***\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean ***REMOVED***\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n***REMOVED***\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean ***REMOVED***\n    if (this._node.isLeafNode()) ***REMOVED***\n      return false;\n  ***REMOVED*** else ***REMOVED***\n      return !this._node.isEmpty();\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null ***REMOVED***\n    return this.exportVal();\n***REMOVED***\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any ***REMOVED***\n    return this._node.val();\n***REMOVED***\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference ***REMOVED***\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference ***REMOVED***\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) ***REMOVED***\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n***REMOVED***\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference ***REMOVED***\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) ***REMOVED***\n    validateRootPathString('child', 'path', path, false);\n***REMOVED*** else ***REMOVED***\n    validatePathString('child', 'path', path, false);\n***REMOVED***\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect ***REMOVED***\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> ***REMOVED***}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See ***REMOVED***@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference ***REMOVED***\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) ***REMOVED***\n    promise = set(pushRef, value).then(() => pushRef);\n***REMOVED*** else ***REMOVED***\n    promise = Promise.resolve(pushRef);\n***REMOVED***\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> ***REMOVED***\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> ***REMOVED***\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => ***REMOVED***})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> ***REMOVED***\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => ***REMOVED***})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> ***REMOVED***\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') ***REMOVED***\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n***REMOVED***\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => ***REMOVED***})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * ***REMOVED***@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> ***REMOVED***\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => ***REMOVED***})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> ***REMOVED***\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => ***REMOVED***});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => ***REMOVED***\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n***REMOVED***);\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration ***REMOVED***\n  constructor(private callbackContext: CallbackContext) ***REMOVED***}\n\n  respondsTo(eventType: string): boolean ***REMOVED***\n    return eventType === 'value';\n***REMOVED***\n\n  createEvent(change: Change, query: QueryContext): DataEvent ***REMOVED***\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n***REMOVED***\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void ***REMOVED***\n    if (eventData.getEventType() === 'cancel') ***REMOVED***\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n  ***REMOVED*** else ***REMOVED***\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n  ***REMOVED***\n***REMOVED***\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null ***REMOVED***\n    if (this.callbackContext.hasCancelCallback) ***REMOVED***\n      return new CancelEvent(this, error, path);\n  ***REMOVED*** else ***REMOVED***\n      return null;\n  ***REMOVED***\n***REMOVED***\n\n  matches(other: EventRegistration): boolean ***REMOVED***\n    if (!(other instanceof ValueEventRegistration)) ***REMOVED***\n      return false;\n  ***REMOVED*** else if (!other.callbackContext || !this.callbackContext) ***REMOVED***\n      // If no callback specified, we consider it to match any callback.\n      return true;\n  ***REMOVED*** else ***REMOVED***\n      return other.callbackContext.matches(this.callbackContext);\n  ***REMOVED***\n***REMOVED***\n\n  hasAnyCallback(): boolean ***REMOVED***\n    return this.callbackContext !== null;\n***REMOVED***\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration ***REMOVED***\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) ***REMOVED***}\n\n  respondsTo(eventType: string): boolean ***REMOVED***\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n***REMOVED***\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null ***REMOVED***\n    if (this.callbackContext.hasCancelCallback) ***REMOVED***\n      return new CancelEvent(this, error, path);\n  ***REMOVED*** else ***REMOVED***\n      return null;\n  ***REMOVED***\n***REMOVED***\n\n  createEvent(change: Change, query: QueryContext): DataEvent ***REMOVED***\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n***REMOVED***\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void ***REMOVED***\n    if (eventData.getEventType() === 'cancel') ***REMOVED***\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n  ***REMOVED*** else ***REMOVED***\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n  ***REMOVED***\n***REMOVED***\n\n  matches(other: EventRegistration): boolean ***REMOVED***\n    if (other instanceof ChildEventRegistration) ***REMOVED***\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n  ***REMOVED***\n\n    return false;\n***REMOVED***\n\n  hasAnyCallback(): boolean ***REMOVED***\n    return !!this.callbackContext;\n***REMOVED***\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) ***REMOVED***\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') ***REMOVED***\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n***REMOVED***\n  if (typeof cancelCallbackOrListenOptions === 'function') ***REMOVED***\n    cancelCallback = cancelCallbackOrListenOptions;\n***REMOVED***\n\n  if (options && options.onlyOnce) ***REMOVED***\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => ***REMOVED***\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n  ***REMOVED***;\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n***REMOVED***\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe ***REMOVED***\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe ***REMOVED***\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe ***REMOVED***\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe ***REMOVED***\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe ***REMOVED***\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport ***REMOVED*** EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void ***REMOVED***\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') ***REMOVED***\n    container = new ValueEventRegistration(expCallback);\n***REMOVED*** else if (eventType) ***REMOVED***\n    container = new ChildEventRegistration(eventType, expCallback);\n***REMOVED***\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking ***REMOVED***@link endAt},\n * ***REMOVED***@link endBefore}, ***REMOVED***@link startAt}, ***REMOVED***@link startAfter}, ***REMOVED***@link\n * limitToFirst}, ***REMOVED***@link limitToLast}, ***REMOVED***@link orderByChild},\n * ***REMOVED***@link orderByChild}, ***REMOVED***@link orderByKey} , ***REMOVED***@link orderByPriority} ,\n * ***REMOVED***@link orderByValue}  or ***REMOVED***@link equalTo} and\n * can then be passed to ***REMOVED***@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint ***REMOVED***\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint ***REMOVED***\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) ***REMOVED***\n    super();\n***REMOVED***\n\n  _apply<T>(query: QueryImpl): QueryImpl ***REMOVED***\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) ***REMOVED***\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n  ***REMOVED***\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n***REMOVED***\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint ***REMOVED***\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint ***REMOVED***\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) ***REMOVED***\n    super();\n***REMOVED***\n\n  _apply<T>(query: QueryImpl): QueryImpl ***REMOVED***\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) ***REMOVED***\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n  ***REMOVED***\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n***REMOVED***\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint ***REMOVED***\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint ***REMOVED***\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) ***REMOVED***\n    super();\n***REMOVED***\n\n  _apply<T>(query: QueryImpl): QueryImpl ***REMOVED***\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) ***REMOVED***\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n  ***REMOVED***\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n***REMOVED***\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint ***REMOVED***\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint ***REMOVED***\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) ***REMOVED***\n    super();\n***REMOVED***\n\n  _apply<T>(query: QueryImpl): QueryImpl ***REMOVED***\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) ***REMOVED***\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n  ***REMOVED***\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n***REMOVED***\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint ***REMOVED***\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint ***REMOVED***\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) ***REMOVED***\n    super();\n***REMOVED***\n\n  _apply<T>(query: QueryImpl): QueryImpl ***REMOVED***\n    if (query._queryParams.hasLimit()) ***REMOVED***\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n  ***REMOVED***\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n***REMOVED***\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint ***REMOVED***\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) ***REMOVED***\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n***REMOVED***\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint ***REMOVED***\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) ***REMOVED***\n    super();\n***REMOVED***\n\n  _apply<T>(query: QueryImpl): QueryImpl ***REMOVED***\n    if (query._queryParams.hasLimit()) ***REMOVED***\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n  ***REMOVED***\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n***REMOVED***\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint ***REMOVED***\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) ***REMOVED***\n    throw new Error('limitToLast: First argument must be a positive integer.');\n***REMOVED***\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint ***REMOVED***\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) ***REMOVED***\n    super();\n***REMOVED***\n\n  _apply<T>(query: QueryImpl): QueryImpl ***REMOVED***\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) ***REMOVED***\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n  ***REMOVED***\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n***REMOVED***\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the***REMOVED***@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint ***REMOVED***\n  if (path === '$key') ***REMOVED***\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n***REMOVED*** else if (path === '$priority') ***REMOVED***\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n***REMOVED*** else if (path === '$value') ***REMOVED***\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n***REMOVED***\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint ***REMOVED***\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl ***REMOVED***\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n***REMOVED***\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint ***REMOVED***\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint ***REMOVED***\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl ***REMOVED***\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n***REMOVED***\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint ***REMOVED***\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint ***REMOVED***\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl ***REMOVED***\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n***REMOVED***\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint ***REMOVED***\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint ***REMOVED***\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) ***REMOVED***\n    super();\n***REMOVED***\n\n  _apply<T>(query: QueryImpl): QueryImpl ***REMOVED***\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) ***REMOVED***\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n  ***REMOVED***\n    if (query._queryParams.hasEnd()) ***REMOVED***\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n  ***REMOVED***\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n***REMOVED***\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * ***REMOVED***@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint ***REMOVED***\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query ***REMOVED***\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) ***REMOVED***\n    queryImpl = constraint._apply(queryImpl);\n***REMOVED***\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport ***REMOVED***\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport ***REMOVED*** AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport ***REMOVED*** FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport ***REMOVED*** Provider } from '@firebase/component';\nimport ***REMOVED***\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport ***REMOVED*** AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport ***REMOVED***\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport ***REMOVED*** Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport ***REMOVED*** RepoInfo } from '../core/RepoInfo';\nimport ***REMOVED*** parseRepoInfo } from '../core/util/libs/parser';\nimport ***REMOVED*** newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport ***REMOVED***\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport ***REMOVED*** validateUrl } from '../core/util/validation';\nimport ***REMOVED*** BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport ***REMOVED*** TransportManager } from '../realtime/TransportManager';\nimport ***REMOVED*** WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport ***REMOVED*** ReferenceImpl } from './Reference_impl';\n\nexport ***REMOVED*** EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: ***REMOVED***\n  [appName: string]: ***REMOVED***\n    [dbUrl: string]: Repo;\n***REMOVED***;\n} = ***REMOVED***};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void ***REMOVED***\n  repo.repoInfo_ = new RepoInfo(\n    `$***REMOVED***host}:$***REMOVED***port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) ***REMOVED***\n    repo.authTokenProvider_ = tokenProvider;\n***REMOVED***\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database ***REMOVED***\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) ***REMOVED***\n    if (!app.options.projectId) ***REMOVED***\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n  ***REMOVED***\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `$***REMOVED***app.options.projectId}-default-rtdb.firebaseio.com`;\n***REMOVED***\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) ***REMOVED***\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n***REMOVED***\n\n  if (dbEmulatorHost) ***REMOVED***\n    isEmulator = true;\n    dbUrl = `http://$***REMOVED***dbEmulatorHost}?ns=$***REMOVED***repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n***REMOVED*** else ***REMOVED***\n    isEmulator = !parsedUrl.repoInfo.secure;\n***REMOVED***\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) ***REMOVED***\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n***REMOVED***\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void ***REMOVED***\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) ***REMOVED***\n    fatal(`Database $***REMOVED***appName}($***REMOVED***repo.repoInfo_}) has already been deleted.`);\n***REMOVED***\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo ***REMOVED***\n  let appRepos = repos[app.name];\n\n  if (!appRepos) ***REMOVED***\n    appRepos = ***REMOVED***};\n    repos[app.name] = appRepos;\n***REMOVED***\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) ***REMOVED***\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n***REMOVED***\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void ***REMOVED***\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService ***REMOVED***\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The ***REMOVED***@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) ***REMOVED***}\n\n  get _repo(): Repo ***REMOVED***\n    if (!this._instanceStarted) ***REMOVED***\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n  ***REMOVED***\n    return this._repoInternal;\n***REMOVED***\n\n  get _root(): ReferenceImpl ***REMOVED***\n    if (!this._rootInternal) ***REMOVED***\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n  ***REMOVED***\n    return this._rootInternal;\n***REMOVED***\n\n  _delete(): Promise<void> ***REMOVED***\n    if (this._rootInternal !== null) ***REMOVED***\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n  ***REMOVED***\n    return Promise.resolve();\n***REMOVED***\n\n  _checkNotDeleted(apiName: string) ***REMOVED***\n    if (this._rootInternal === null) ***REMOVED***\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n  ***REMOVED***\n***REMOVED***\n}\n\nfunction checkTransportInit() ***REMOVED***\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) ***REMOVED***\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n***REMOVED***\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() ***REMOVED***\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() ***REMOVED***\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided ***REMOVED***@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The ***REMOVED***@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database ***REMOVED***\n  const db = _getProvider(app, 'database').getImmediate(***REMOVED***\n    identifier: url\n***REMOVED***) as Database;\n  if (!db._instanceStarted) ***REMOVED***\n    const emulator = getDefaultEmulatorHostnameAndPort('database');\n    if (emulator) ***REMOVED***\n      connectDatabaseEmulator(db, ...emulator);\n  ***REMOVED***\n***REMOVED***\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: ***REMOVED***\n    mockUserToken?: EmulatorMockTokenOptions | string;\n***REMOVED*** = ***REMOVED***}\n): void ***REMOVED***\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) ***REMOVED***\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n***REMOVED***\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) ***REMOVED***\n    if (options.mockUserToken) ***REMOVED***\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n  ***REMOVED***\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n***REMOVED*** else if (options.mockUserToken) ***REMOVED***\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n***REMOVED***\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void ***REMOVED***\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void ***REMOVED***\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void ***REMOVED***\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken ***REMOVED***\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: ***REMOVED***\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: ***REMOVED*** [provider in FirebaseSignInProvider]?: string[] };\n***REMOVED***;\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = (***REMOVED*** user_id: string } | ***REMOVED*** sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string ***REMOVED***\n  if (token.uid) ***REMOVED***\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n***REMOVED***\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = ***REMOVED***\n    alg: 'none',\n    type: 'JWT'\n***REMOVED***;\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) ***REMOVED***\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n***REMOVED***\n\n  const payload: FirebaseIdToken = ***REMOVED***\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/$***REMOVED***project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: ***REMOVED***\n      sign_in_provider: 'custom',\n      identities: ***REMOVED***}\n  ***REMOVED***,\n\n    // Override with user options\n    ...token\n***REMOVED***;\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = ***REMOVED***\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object ***REMOVED***\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object ***REMOVED***\n  return ***REMOVED***\n    '.sv': ***REMOVED***\n      'increment': delta\n  ***REMOVED***\n***REMOVED***;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getModularInstance, Deferred } from '@firebase/util';\n\nimport ***REMOVED*** repoStartTransaction } from '../core/Repo';\nimport ***REMOVED*** PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport ***REMOVED*** Node } from '../core/snap/Node';\nimport ***REMOVED*** validateWritablePath } from '../core/util/validation';\n\nimport ***REMOVED*** DatabaseReference } from './Reference';\nimport ***REMOVED*** DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions ***REMOVED***\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of ***REMOVED***@link runTransaction}.\n */\nexport class TransactionResult ***REMOVED***\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) ***REMOVED***}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object ***REMOVED***\n    return ***REMOVED*** committed: this.committed, snapshot: this.snapshot.toJSON() };\n***REMOVED***\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> ***REMOVED***\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') ***REMOVED***\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n***REMOVED***\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => ***REMOVED***\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) ***REMOVED***\n      deferred.reject(error);\n  ***REMOVED*** else ***REMOVED***\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n  ***REMOVED***\n***REMOVED***;\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => ***REMOVED***});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** PersistentConnection } from '../core/PersistentConnection';\nimport ***REMOVED*** RepoInfo } from '../core/RepoInfo';\nimport ***REMOVED*** Connection } from '../realtime/Connection';\n\nimport ***REMOVED*** repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) ***REMOVED***\n  this.sendRequest('q', ***REMOVED*** p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) ***REMOVED***\n  this.sendRequest('echo', ***REMOVED*** d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) ***REMOVED***\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) ***REMOVED***\n    if (hash !== undefined) ***REMOVED***\n      hash = newHash();\n  ***REMOVED***\n    oldPut.call(this, pathString, data, onComplete, hash);\n***REMOVED***;\n  return function () ***REMOVED***\n    PersistentConnection.prototype.put = oldPut;\n***REMOVED***;\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) ***REMOVED***\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport ***REMOVED***\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport ***REMOVED*** Component, ComponentType } from '@firebase/component';\n\nimport ***REMOVED*** name, version } from '../package.json';\nimport ***REMOVED*** setSDKVersion } from '../src/core/version';\n\nimport ***REMOVED*** repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void ***REMOVED***\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, ***REMOVED*** instanceIdentifier: url }) => ***REMOVED***\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n    ***REMOVED***,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n"],"names":["CONSTANTS","assert","assertion","message","assertionError","Error","stringToByteArray","str","out","p","i","length","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","e","console","error","deepCopy","value","deepExtend","undefined","target","source","Object","constructor","Date","getTime","prop","hasOwnProperty","getDefaultsFromGlobal","self","window","global","getGlobal","__FIREBASE_DEFAULTS__","getDefaults","process","env","defaultsJsonString","JSON","parse","getDefaultsFromEnvVariable","document","match","cookie","decoded","getDefaultsFromCookie","info","getDefaultEmulatorHostnameAndPort","productName","host","_a","_b","emulatorHosts","getDefaultEmulatorHost","separatorIndex","lastIndexOf","port","parseInt","substring","Deferred","reject","resolve","promise","Promise","wrapCallback","callback","catch","isMobileCordova","test","navigator","isNodeSdk","jsonEval","stringify","data","decode","token","header","claims","signature","parts","split","contains","obj","key","prototype","call","safeGet","isEmpty","map","fn","contextObj","res","Sha1","chain_","buf_","W_","pad_","inbuf_","total_","blockSize","reset","compress_","buf","offset","W","t","f","k","a","b","d","update","lengthMinusBlock","n","inbuf","digest","totalBits","j","errorPrefix","fnName","argName","stringLength","getModularInstance","service","_delegate","Component","name","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","LogLevel","levelStringToEnum","debug","DEBUG","verbose","VERBOSE","INFO","warn","WARN","ERROR","silent","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","args","logLevel","now","toISOString","method","SDK_VERSION","setSDKVersion","version","DOMStorageWrapper","domStorage_","prefix_","set","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","toString","MemoryStorage","cache_","isInMemoryStorage","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","log","LUIDGenerator","id","sha1","high","sha1Bytes","buildLogMessage_","varArgs","arg","apply","logger","firstLog_","enableLogging","logger_","persistent","bind","logWrapper","prefix","fatal","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","keys","sort","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","bias","s","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","substr","toLowerCase","INTEGER_REGEXP_","RegExp","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","code","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","OWNER","FORGE_DOMAIN_RE","RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","params","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","counters_","incrementCounter","amount","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","pendingResponses","currentResponseNum","closeAfterResponse","onClose","closeAfter","responseNum","handleResponse","requestNum","toProcess","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","bytesSent","bytesReceived","everConnected_","log_","stats_","urlFn","open","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","close","myDisconnFrame","removeChild","send","dataStr","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","commandCB","onMessageCB","outstandingRequests","Set","pendingSegs","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","textContent","myID","myPW","newRequest_","size","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","loadCB","newScript","async","onload","onreadystatechange","rstate","parentNode","onerror","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","keepaliveTimer","frames","totalFrames","connectionURL_","options","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","appendFrame_","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","clearInterval","setInterval","responsesRequiredToBeHealthy","healthyTimeout","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","connectionCount","pendingDataMessages","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","listeners_","trigger","eventType","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","super","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","interruptReasons_","listens","Map","outstandingPuts_","outstandingGets_","outstandingPutCount_","outstandingGetCount_","onDisconnectRequestQueue_","connected_","reconnectDelay_","maxReconnectDelay_","securityDebugCallback_","establishConnectionTimer_","requestCBHash_","requestNumber_","realtime_","forceTokenRefresh_","invalidAuthTokenCount_","invalidAppCheckTokenCount_","firstConnection_","lastConnectionAttemptTime_","lastConnectionEstablishedTime_","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","r","initConnection_","deferred","outstandingGet","request","_path","q","_queryObject","index","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","tryAppCheck","authMethod","isValidFormat","requestData","cred","onAuthRevoked_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","response","putInternal","sendPut_","queued","result","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","handleTimestamp_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnection_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","all","interrupt","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","queries","values","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","pop","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON","LeafNode","value_","priorityNode_","lazyHash_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","assign","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setPriorityMaxNode","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","startIsInclusive_","startAfterSet_","endIsInclusive_","endBeforeSet_","getStartPost","getEndPost","matches","isWithinStart","isWithinEnd","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","withinDirectionalStart","reverse_","withinEndPost","withinStartPost","withinDirectionalEnd","compareRes","rangedFilter_","limit_","getLimit","isViewFromLeft","fullLimitUpdateChild_","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","limitSet_","startSet_","startNameSet_","endSet_","endNameSet_","viewFrom_","indexStartValue_","indexStartName_","indexEndValue_","indexEndName_","hasLimit","hasAnchoredLimit","queryParamsStartAt","queryParams","newParams","queryParamsEndAt","queryParamsOrderBy","queryParamsToRestQueryStringParameters","qs","orderBy","startParam","endParam","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listens_","listenId","getListenId_","thisListen","queryStringParameters","restRequest_","querystringParams","entries","forEach","arrayVal","encodeURIComponent","querystring","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForget","tree","sparseSnapshotTreeForEachTree","prefixPath","func","sparseSnapshotTreeForEachChild","StatsListener","collection_","last_","newStats","stat","StatsReporter","collection","server_","statsToReport_","statsListener_","reportStats_","reportedStats","haveStatsToReport","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","filter","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","EmptyChildren","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","eventRegistrations_","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor","SyncPoint","views","syncPointApplyOperation","syncPoint","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","writeTreeAddMerge","changeTree","fromObject","syncTreeAckUserWrite","record","writeTreeGetWrite","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","maybeChildSyncPoint","childMap","_key","childViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","removedQuery","removedQueryKey","removedQueryTag","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","queriesToStop","childQueries","queryToStop","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeGetServerValue","serverCacheNode","viewGetCompleteNode","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","isValidKey","isValidPathString","isValidPriority","validateFirebaseDataArg","validateFirebaseData","errorPrefixFxn","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePriority","validateKey","argumentName","validatePathString","validateWritablePath","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventLists_","recursionDepth_","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","sentAll","eventList","eventListRaise","eventFn","getEventRunner","Repo","forceRestClient_","appCheckProvider_","dataUpdateCount","eventQueue_","nextWriteId_","interceptServerDataCallback_","transactionQueueTree_","persistentConnection_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","repoGenerateServerValues","taggedChildren","raw","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoOnDisconnectCancel","repoOnDisconnectSet","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","repoSendTransactionQueue","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","duplicateTime","timeStampChars","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","OnDisconnect","cancel","setWithPriority","repoOnDisconnectSetWithPriority","childrenToMerge","repoOnDisconnectUpdate","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","validateNoPreviousOrderByCall","validateQueryEndpoints","startNode","endNode","tooManyArgsError","wrongArgTypeError","validateLimit","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","refFromURL","parsedURL","thennablePushRef","pushRef","setPriority","changedKey","changedValue","repoUpdate","callbackContext","container","ValueEventRegistration","cached","err","repoGetValue","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","repoAddEventCallbackForQuery","onChildAdded","onChildChanged","onChildMoved","onChildRemoved","expCallback","QueryConstraint","QueryEndAtConstraint","_value","_apply","endAt","QueryEndBeforeConstraint","queryParamsEndBefore","endBefore","QueryStartAtConstraint","startAt","QueryStartAfterConstraint","queryParamsStartAfter","startAfter","QueryLimitToFirstConstraint","_limit","newLimit","queryParamsLimitToFirst","limitToFirst","limit","QueryLimitToLastConstraint","queryParamsLimitToLast","limitToLast","QueryOrderByChildConstraint","parsedPath","orderByChild","QueryOrderByKeyConstraint","orderByKey","QueryOrderByPriorityConstraint","orderByPriority","QueryOrderByValueConstraint","orderByValue","QueryEqualToValueConstraint","equalTo","queryConstraints","queryImpl","constraint","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","projectId","isEmulator","dbEmulatorHost","authTokenProvider","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","_delete","appName","repoManagerDeleteRepo","apiName","checkTransportInit","forceWebSockets","forceDisallow","forceLongPolling","forceAllow","getDatabase","getApp","_getProvider","identifier","emulator","connectDatabaseEmulator","tokenProvider","mockUserToken","uid","project","iat","sub","user_id","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","alg","createMockUserToken","repoManagerApplyEmulatorSettings","goOffline","goOnline","enableLoggingImpl","SERVER_TIMESTAMP","serverTimestamp","increment","TransactionResult","committed","runTransaction","transactionUpdate","currentState","queueNode","priorityForNode","repoStartTransaction","simpleListen","echo","onEcho","hijackHash","newHash","oldPut","forceRestClient","repoManagerForceRestClient","variant","_registerComponent","instanceIdentifier","getProvider","registerVersion"],"mappings":"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","preExistingComment":"firebase-database.js.map"}