***REMOVED***"version":3,"file":"firebase-analytics.js","sources":["../logger/src/logger.ts","../util/src/environment.ts","../util/src/errors.ts","../util/src/obj.ts","../util/src/exponential_backoff.ts","../util/src/compat.ts","../component/src/component.ts","../../node_modules/idb/build/wrap-idb-value.js","../../node_modules/idb/build/index.js","../installations/src/util/errors.ts","../installations/src/util/constants.ts","../installations/src/functions/common.ts","../installations/src/util/sleep.ts","../installations/src/helpers/generate-fid.ts","../installations/src/helpers/buffer-to-base64-url-safe.ts","../installations/src/util/get-key.ts","../installations/src/helpers/fid-changed.ts","../installations/src/helpers/idb-manager.ts","../installations/src/helpers/get-installation-entry.ts","../installations/src/functions/create-installation-request.ts","../installations/src/functions/generate-auth-token-request.ts","../installations/src/helpers/refresh-auth-token.ts","../installations/src/api/get-token.ts","../installations/src/helpers/extract-app-config.ts","../installations/src/functions/config.ts","../installations/src/api/get-id.ts","../installations/src/index.ts","../analytics/src/constants.ts","../analytics/src/logger.ts","../analytics/src/helpers.ts","../analytics/src/errors.ts","../analytics/src/get-config.ts","../analytics/src/functions.ts","../analytics/src/initialize-analytics.ts","../analytics/src/factory.ts","../analytics/src/api.ts","../analytics/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions ***REMOVED***\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams ***REMOVED***\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel ***REMOVED***\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: ***REMOVED*** [key in LogLevelString]: LogLevel } = ***REMOVED***\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = ***REMOVED***\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => ***REMOVED***\n  if (logType < instance.logLevel) ***REMOVED***\n    return;\n***REMOVED***\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) ***REMOVED***\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[$***REMOVED***now}]  $***REMOVED***instance.name}:`,\n      ...args\n    );\n***REMOVED*** else ***REMOVED***\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: $***REMOVED***logType})`\n    );\n***REMOVED***\n};\n\nexport class Logger ***REMOVED***\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) ***REMOVED***\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n***REMOVED***\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel ***REMOVED***\n    return this._logLevel;\n***REMOVED***\n\n  set logLevel(val: LogLevel) ***REMOVED***\n    if (!(val in LogLevel)) ***REMOVED***\n      throw new TypeError(`Invalid value \"$***REMOVED***val}\" assigned to \\`logLevel\\``);\n  ***REMOVED***\n    this._logLevel = val;\n***REMOVED***\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void ***REMOVED***\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n***REMOVED***\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler ***REMOVED***\n    return this._logHandler;\n***REMOVED***\n  set logHandler(val: LogHandler) ***REMOVED***\n    if (typeof val !== 'function') ***REMOVED***\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n  ***REMOVED***\n    this._logHandler = val;\n***REMOVED***\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null ***REMOVED***\n    return this._userLogHandler;\n***REMOVED***\n  set userLogHandler(val: LogHandler | null) ***REMOVED***\n    this._userLogHandler = val;\n***REMOVED***\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n***REMOVED***\n  log(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n***REMOVED***\n  info(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n***REMOVED***\n  warn(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n***REMOVED***\n  error(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n***REMOVED***\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void ***REMOVED***\n  instances.forEach(inst => ***REMOVED***\n    inst.setLogLevel(level);\n***REMOVED***);\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void ***REMOVED***\n  for (const instance of instances) ***REMOVED***\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) ***REMOVED***\n      customLogLevel = levelStringToEnum[options.level];\n  ***REMOVED***\n    if (logCallback === null) ***REMOVED***\n      instance.userLogHandler = null;\n  ***REMOVED*** else ***REMOVED***\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => ***REMOVED***\n        const message = args\n          .map(arg => ***REMOVED***\n            if (arg == null) ***REMOVED***\n              return null;\n          ***REMOVED*** else if (typeof arg === 'string') ***REMOVED***\n              return arg;\n          ***REMOVED*** else if (typeof arg === 'number' || typeof arg === 'boolean') ***REMOVED***\n              return arg.toString();\n          ***REMOVED*** else if (arg instanceof Error) ***REMOVED***\n              return arg.message;\n          ***REMOVED*** else ***REMOVED***\n              try ***REMOVED***\n                return JSON.stringify(arg);\n            ***REMOVED*** catch (ignored) ***REMOVED***\n                return null;\n            ***REMOVED***\n          ***REMOVED***\n        ***REMOVED***)\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) ***REMOVED***\n          logCallback(***REMOVED***\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n        ***REMOVED***);\n      ***REMOVED***\n    ***REMOVED***;\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** CONSTANTS } from './constants';\nimport ***REMOVED*** getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string ***REMOVED***\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) ***REMOVED***\n    return navigator['userAgent'];\n***REMOVED*** else ***REMOVED***\n    return '';\n***REMOVED***\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean ***REMOVED***\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean ***REMOVED***\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') ***REMOVED***\n    return true;\n***REMOVED*** else if (forceEnvironment === 'browser') ***REMOVED***\n    return false;\n***REMOVED***\n\n  try ***REMOVED***\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n***REMOVED*** catch (e) ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean ***REMOVED***\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime ***REMOVED***\n  id?: unknown;\n}\ndeclare const chrome: ***REMOVED*** runtime?: BrowserRuntime };\ndeclare const browser: ***REMOVED*** runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean ***REMOVED***\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean ***REMOVED***\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean ***REMOVED***\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean ***REMOVED***\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean ***REMOVED***\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean ***REMOVED***\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean ***REMOVED***\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean ***REMOVED***\n  try ***REMOVED***\n    return typeof indexedDB === 'object';\n***REMOVED*** catch (e) ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> ***REMOVED***\n  return new Promise((resolve, reject) => ***REMOVED***\n    try ***REMOVED***\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => ***REMOVED***\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) ***REMOVED***\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n      ***REMOVED***\n        resolve(true);\n    ***REMOVED***;\n      request.onupgradeneeded = () => ***REMOVED***\n        preExist = false;\n    ***REMOVED***;\n\n      request.onerror = () => ***REMOVED***\n        reject(request.error?.message || '');\n    ***REMOVED***;\n  ***REMOVED*** catch (error) ***REMOVED***\n      reject(error);\n  ***REMOVED***\n***REMOVED***);\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean ***REMOVED***\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) ***REMOVED***\n    return false;\n***REMOVED***\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum ***REMOVED***string}\n *   var Err = ***REMOVED***\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n * ***REMOVED***\n *\n *   let errors: Map<Err, string> = ***REMOVED***\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: ***REMOVED***$file}\",\n * ***REMOVED***;\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, ***REMOVED***'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) ***REMOVED***\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') ***REMOVED***\n *       console.log(\"Could not read file: \" + e['file']);\n *   ***REMOVED***\n * ***REMOVED***\n */\n\nexport type ErrorMap<ErrorCode extends string> = ***REMOVED***\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike ***REMOVED***\n  toString(): string;\n}\n\nexport interface ErrorData ***REMOVED***\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error ***REMOVED***\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) ***REMOVED***\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) ***REMOVED***\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n  ***REMOVED***\n***REMOVED***\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends ***REMOVED*** readonly [K in ErrorCode]?: ErrorData } = ***REMOVED***}\n> ***REMOVED***\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) ***REMOVED***}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError ***REMOVED***\n    const customData = (data[0] as ErrorData) || ***REMOVED***};\n    const fullCode = `$***REMOVED***this.service}/$***REMOVED***code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `$***REMOVED***this.serviceName}: $***REMOVED***message} ($***REMOVED***fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n***REMOVED***\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string ***REMOVED***\n  return template.replace(PATTERN, (_, key) => ***REMOVED***\n    const value = data[key];\n    return value != null ? String(value) : `<$***REMOVED***key}?>`;\n***REMOVED***);\n}\n\nconst PATTERN = /\\***REMOVED***\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean ***REMOVED***\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined ***REMOVED***\n  if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***\n    return obj[key];\n***REMOVED*** else ***REMOVED***\n    return undefined;\n***REMOVED***\n}\n\nexport function isEmpty(obj: object): obj is ***REMOVED***} ***REMOVED***\n  for (const key in obj) ***REMOVED***\n    if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***\n      return false;\n  ***REMOVED***\n***REMOVED***\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: ***REMOVED*** [key in K]: V },\n  fn: (value: V, key: K, obj: ***REMOVED*** [key in K]: V }) => U,\n  contextObj?: unknown\n): ***REMOVED*** [key in K]: U } ***REMOVED***\n  const res: Partial<***REMOVED*** [key in K]: U }> = ***REMOVED***};\n  for (const key in obj) ***REMOVED***\n    if (Object.prototype.hasOwnProperty.call(obj, key)) ***REMOVED***\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n  ***REMOVED***\n***REMOVED***\n  return res as ***REMOVED*** [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean ***REMOVED***\n  if (a === b) ***REMOVED***\n    return true;\n***REMOVED***\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) ***REMOVED***\n    if (!bKeys.includes(k)) ***REMOVED***\n      return false;\n  ***REMOVED***\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) ***REMOVED***\n      if (!deepEqual(aProp, bProp)) ***REMOVED***\n        return false;\n    ***REMOVED***\n  ***REMOVED*** else if (aProp !== bProp) ***REMOVED***\n      return false;\n  ***REMOVED***\n***REMOVED***\n\n  for (const k of bKeys) ***REMOVED***\n    if (!aKeys.includes(k)) ***REMOVED***\n      return false;\n  ***REMOVED***\n***REMOVED***\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object ***REMOVED***\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The amount of milliseconds to exponentially increase.\n */\nconst DEFAULT_INTERVAL_MILLIS = 1000;\n\n/**\n * The factor to backoff by.\n * Should be a number greater than 1.\n */\nconst DEFAULT_BACKOFF_FACTOR = 2;\n\n/**\n * The maximum milliseconds to increase to.\n *\n * <p>Visible for testing\n */\nexport const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n\n/**\n * The percentage of backoff time to randomize by.\n * See\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\n * for context.\n *\n * <p>Visible for testing\n */\nexport const RANDOM_FACTOR = 0.5;\n\n/**\n * Based on the backoff method from\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\n */\nexport function calculateBackoffMillis(\n  backoffCount: number,\n  intervalMillis: number = DEFAULT_INTERVAL_MILLIS,\n  backoffFactor: number = DEFAULT_BACKOFF_FACTOR\n): number ***REMOVED***\n  // Calculates an exponentially increasing value.\n  // Deviation: calculates value from count and a constant interval, so we only need to save value\n  // and count to restore state.\n  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n\n  // A random \"fuzz\" to avoid waves of retries.\n  // Deviation: randomFactor is required.\n  const randomWait = Math.round(\n    // A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    RANDOM_FACTOR *\n      currBaseValue *\n      // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n      // if we add or subtract.\n      (Math.random() - 0.5) *\n      2\n  );\n\n  // Limits backoff to max to avoid effectively permanent backoff.\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> ***REMOVED***\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService ***REMOVED***\n  if (service && (service as Compat<ExpService>)._delegate) ***REMOVED***\n    return (service as Compat<ExpService>)._delegate;\n***REMOVED*** else ***REMOVED***\n    return service as ExpService;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport ***REMOVED***\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> ***REMOVED***\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = ***REMOVED***};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) ***REMOVED***}\n\n  setInstantiationMode(mode: InstantiationMode): this ***REMOVED***\n    this.instantiationMode = mode;\n    return this;\n***REMOVED***\n\n  setMultipleInstances(multipleInstances: boolean): this ***REMOVED***\n    this.multipleInstances = multipleInstances;\n    return this;\n***REMOVED***\n\n  setServiceProps(props: Dictionary): this ***REMOVED***\n    this.serviceProps = props;\n    return this;\n***REMOVED***\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this ***REMOVED***\n    this.onInstanceCreated = callback;\n    return this;\n***REMOVED***\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() ***REMOVED***\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() ***REMOVED***\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) ***REMOVED***\n    const promise = new Promise((resolve, reject) => ***REMOVED***\n        const unlisten = () => ***REMOVED***\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n      ***REMOVED***;\n        const success = () => ***REMOVED***\n            resolve(wrap(request.result));\n            unlisten();\n      ***REMOVED***;\n        const error = () => ***REMOVED***\n            reject(request.error);\n            unlisten();\n      ***REMOVED***;\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n  ***REMOVED***);\n    promise\n        .then((value) => ***REMOVED***\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) ***REMOVED***\n            cursorRequestMap.set(value, request);\n      ***REMOVED***\n        // Catching to avoid \"Uncaught Promise exceptions\"\n  ***REMOVED***)\n        .catch(() => ***REMOVED*** });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) ***REMOVED***\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => ***REMOVED***\n        const unlisten = () => ***REMOVED***\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n      ***REMOVED***;\n        const complete = () => ***REMOVED***\n            resolve();\n            unlisten();\n      ***REMOVED***;\n        const error = () => ***REMOVED***\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n      ***REMOVED***;\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n  ***REMOVED***);\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = ***REMOVED***\n    get(target, prop, receiver) ***REMOVED***\n        if (target instanceof IDBTransaction) ***REMOVED***\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') ***REMOVED***\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n          ***REMOVED***\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') ***REMOVED***\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n          ***REMOVED***\n      ***REMOVED***\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n  ***REMOVED***,\n    set(target, prop, value) ***REMOVED***\n        target[prop] = value;\n        return true;\n  ***REMOVED***,\n    has(target, prop) ***REMOVED***\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) ***REMOVED***\n            return true;\n      ***REMOVED***\n        return prop in target;\n  ***REMOVED***,\n};\nfunction replaceTraps(callback) ***REMOVED***\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) ***REMOVED***\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) ***REMOVED***\n        return function (storeNames, ...args) ***REMOVED***\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n      ***REMOVED***;\n  ***REMOVED***\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) ***REMOVED***\n        return function (...args) ***REMOVED***\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n      ***REMOVED***;\n  ***REMOVED***\n    return function (...args) ***REMOVED***\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n  ***REMOVED***;\n}\nfunction transformCachableValue(value) ***REMOVED***\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) ***REMOVED***\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) ***REMOVED***\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n  ***REMOVED***\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport ***REMOVED*** reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import ***REMOVED*** w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport ***REMOVED*** u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, ***REMOVED*** blocked, upgrade, blocking, terminated } = ***REMOVED***}) ***REMOVED***\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) ***REMOVED***\n        request.addEventListener('upgradeneeded', (event) => ***REMOVED***\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n      ***REMOVED***);\n  ***REMOVED***\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => ***REMOVED***\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n  ***REMOVED***)\n        .catch(() => ***REMOVED*** });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, ***REMOVED*** blocked } = ***REMOVED***}) ***REMOVED***\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) ***REMOVED***\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) ***REMOVED***\n        return;\n  ***REMOVED***\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) ***REMOVED***\n        return;\n  ***REMOVED***\n    const method = async function (storeName, ...args) ***REMOVED***\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n  ***REMOVED***;\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => (***REMOVED***\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport ***REMOVED*** deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ErrorFactory, FirebaseError } from '@firebase/util';\nimport ***REMOVED*** SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode ***REMOVED***\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: ***REMOVED*** readonly [key in ErrorCode]: string } = ***REMOVED***\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"***REMOVED***$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '***REMOVED***$requestName} request failed with error \"***REMOVED***$serverCode} ***REMOVED***$serverStatus}: ***REMOVED***$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams ***REMOVED***\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: ***REMOVED***\n    valueName: string;\n***REMOVED***;\n  [ErrorCode.REQUEST_FAILED]: ***REMOVED***\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n***REMOVED*** & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData ***REMOVED***\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & ***REMOVED*** customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError ***REMOVED***\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:$***REMOVED***version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseError } from '@firebase/util';\nimport ***REMOVED*** GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED***\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint(***REMOVED*** projectId }: AppConfig): string ***REMOVED***\n  return `$***REMOVED***INSTALLATIONS_API_URL}/projects/$***REMOVED***projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken ***REMOVED***\n  return ***REMOVED***\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n***REMOVED***;\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> ***REMOVED***\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, ***REMOVED***\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n***REMOVED***);\n}\n\nexport function getHeaders(***REMOVED*** apiKey }: AppConfig): Headers ***REMOVED***\n  return new Headers(***REMOVED***\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n***REMOVED***);\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  ***REMOVED*** refreshToken }: RegisteredInstallationEntry\n): Headers ***REMOVED***\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse ***REMOVED***\n  error: ***REMOVED***\n    code: number;\n    message: string;\n    status: string;\n***REMOVED***;\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> ***REMOVED***\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) ***REMOVED***\n    // Internal Server Error. Retry request.\n    return fn();\n***REMOVED***\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number ***REMOVED***\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string ***REMOVED***\n  return `$***REMOVED***INTERNAL_AUTH_VERSION} $***REMOVED***refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> ***REMOVED***\n  return new Promise<void>(resolve => ***REMOVED***\n    setTimeout(resolve, ms);\n***REMOVED***);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]***REMOVED***21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string ***REMOVED***\n  try ***REMOVED***\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as ***REMOVED*** msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n***REMOVED*** catch ***REMOVED***\n    // FID generation errored\n    return INVALID_FID;\n***REMOVED***\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string ***REMOVED***\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string ***REMOVED***\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string ***REMOVED***\n  return `$***REMOVED***appConfig.appName}!$***REMOVED***appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getKey } from '../util/get-key';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void ***REMOVED***\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void ***REMOVED***\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) ***REMOVED***\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n***REMOVED***\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void ***REMOVED***\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) ***REMOVED***\n    return;\n***REMOVED***\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) ***REMOVED***\n    fidChangeCallbacks.delete(key);\n***REMOVED***\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void ***REMOVED***\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) ***REMOVED***\n    return;\n***REMOVED***\n\n  for (const callback of callbacks) ***REMOVED***\n    callback(fid);\n***REMOVED***\n}\n\nfunction broadcastFidChange(key: string, fid: string): void ***REMOVED***\n  const channel = getBroadcastChannel();\n  if (channel) ***REMOVED***\n    channel.postMessage(***REMOVED*** key, fid });\n***REMOVED***\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null ***REMOVED***\n  if (!broadcastChannel && 'BroadcastChannel' in self) ***REMOVED***\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => ***REMOVED***\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n  ***REMOVED***;\n***REMOVED***\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void ***REMOVED***\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) ***REMOVED***\n    broadcastChannel.close();\n    broadcastChannel = null;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** DBSchema, IDBPDatabase, openDB } from 'idb';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** InstallationEntry } from '../interfaces/installation-entry';\nimport ***REMOVED*** getKey } from '../util/get-key';\nimport ***REMOVED*** fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema ***REMOVED***\n  'firebase-installations-store': ***REMOVED***\n    key: string;\n    value: InstallationEntry | undefined;\n***REMOVED***;\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> ***REMOVED***\n  if (!dbPromise) ***REMOVED***\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, ***REMOVED***\n      upgrade: (db, oldVersion) => ***REMOVED***\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) ***REMOVED***\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) ***REMOVED***\n    fidChanged(appConfig, value.fid);\n***REMOVED***\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) ***REMOVED***\n    await store.delete(key);\n***REMOVED*** else ***REMOVED***\n    await store.put(newValue, key);\n***REMOVED***\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) ***REMOVED***\n    fidChanged(appConfig, newValue.fid);\n***REMOVED***\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> ***REMOVED***\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** createInstallationRequest } from '../functions/create-installation-request';\nimport ***REMOVED***\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport ***REMOVED***\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PENDING_TIMEOUT_MS } from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport ***REMOVED*** sleep } from '../util/sleep';\nimport ***REMOVED*** generateFid, INVALID_FID } from './generate-fid';\nimport ***REMOVED*** remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise ***REMOVED***\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> ***REMOVED***\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => ***REMOVED***\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n***REMOVED***);\n\n  if (installationEntry.fid === INVALID_FID) ***REMOVED***\n    // FID generation failed. Waiting for the FID from the server.\n    return ***REMOVED*** installationEntry: await registrationPromise! };\n***REMOVED***\n\n  return ***REMOVED***\n    installationEntry,\n    registrationPromise\n***REMOVED***;\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry ***REMOVED***\n  const entry: InstallationEntry = oldEntry || ***REMOVED***\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n***REMOVED***;\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise ***REMOVED***\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    if (!navigator.onLine) ***REMOVED***\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return ***REMOVED***\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n    ***REMOVED***;\n  ***REMOVED***\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = ***REMOVED***\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n  ***REMOVED***;\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return ***REMOVED*** installationEntry: inProgressEntry, registrationPromise };\n***REMOVED*** else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) ***REMOVED***\n    return ***REMOVED***\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n  ***REMOVED***;\n***REMOVED*** else ***REMOVED***\n    return ***REMOVED*** installationEntry };\n***REMOVED***\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  try ***REMOVED***\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n***REMOVED*** catch (e) ***REMOVED***\n    if (isServerError(e) && e.customData.serverCode === 409) ***REMOVED***\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n  ***REMOVED*** else ***REMOVED***\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, ***REMOVED***\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n    ***REMOVED***);\n  ***REMOVED***\n    throw e;\n***REMOVED***\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n***REMOVED***\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    // The request timed out or failed in a different call. Try again.\n    const ***REMOVED*** installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) ***REMOVED***\n      return registrationPromise;\n  ***REMOVED*** else ***REMOVED***\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n  ***REMOVED***\n***REMOVED***\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> ***REMOVED***\n  return update(appConfig, oldEntry => ***REMOVED***\n    if (!oldEntry) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n  ***REMOVED***\n    return clearTimedOutRequest(oldEntry);\n***REMOVED***);\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry ***REMOVED***\n  if (hasInstallationRequestTimedOut(entry)) ***REMOVED***\n    return ***REMOVED***\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n  ***REMOVED***;\n***REMOVED***\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean ***REMOVED***\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** CreateInstallationResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport ***REMOVED***\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  ***REMOVED*** appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  ***REMOVED*** fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate(***REMOVED***\n    optional: true\n***REMOVED***);\n  if (heartbeatService) ***REMOVED***\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) ***REMOVED***\n      headers.append('x-firebase-client', heartbeatsHeader);\n  ***REMOVED***\n***REMOVED***\n\n  const body = ***REMOVED***\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n***REMOVED***;\n\n  const request: RequestInit = ***REMOVED***\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n***REMOVED***;\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) ***REMOVED***\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n  ***REMOVED***;\n    return registeredInstallationEntry;\n***REMOVED*** else ***REMOVED***\n    throw await getErrorFromResponse('Create Installation', response);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PACKAGE_VERSION } from '../util/constants';\nimport ***REMOVED***\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport ***REMOVED***\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  ***REMOVED*** appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> ***REMOVED***\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate(***REMOVED***\n    optional: true\n***REMOVED***);\n  if (heartbeatService) ***REMOVED***\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) ***REMOVED***\n      headers.append('x-firebase-client', heartbeatsHeader);\n  ***REMOVED***\n***REMOVED***\n\n  const body = ***REMOVED***\n    installation: ***REMOVED***\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n  ***REMOVED***\n***REMOVED***;\n\n  const request: RequestInit = ***REMOVED***\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n***REMOVED***;\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) ***REMOVED***\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n***REMOVED*** else ***REMOVED***\n    throw await getErrorFromResponse('Generate Auth Token', response);\n***REMOVED***\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  ***REMOVED*** fid }: RegisteredInstallationEntry\n): string ***REMOVED***\n  return `$***REMOVED***getInstallationsEndpoint(appConfig)}/$***REMOVED***fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport ***REMOVED***\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport ***REMOVED***\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport ***REMOVED*** sleep } from '../util/sleep';\nimport ***REMOVED*** remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> ***REMOVED***\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => ***REMOVED***\n    if (!isEntryRegistered(oldEntry)) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n  ***REMOVED***\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) ***REMOVED***\n      // There is a valid token in the DB.\n      return oldEntry;\n  ***REMOVED*** else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n  ***REMOVED*** else ***REMOVED***\n      // No token or token expired.\n      if (!navigator.onLine) ***REMOVED***\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n    ***REMOVED***\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n  ***REMOVED***\n***REMOVED***);\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> ***REMOVED***\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n***REMOVED***\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n***REMOVED*** else ***REMOVED***\n    return authToken;\n***REMOVED***\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  return update(appConfig, oldEntry => ***REMOVED***\n    if (!isEntryRegistered(oldEntry)) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n  ***REMOVED***\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) ***REMOVED***\n      return ***REMOVED***\n        ...oldEntry,\n        authToken: ***REMOVED*** requestStatus: RequestStatus.NOT_STARTED }\n    ***REMOVED***;\n  ***REMOVED***\n\n    return oldEntry;\n***REMOVED***);\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> ***REMOVED***\n  try ***REMOVED***\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n      ...installationEntry,\n      authToken\n  ***REMOVED***;\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n***REMOVED*** catch (e) ***REMOVED***\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) ***REMOVED***\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n  ***REMOVED*** else ***REMOVED***\n      const updatedInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n        ...installationEntry,\n        authToken: ***REMOVED*** requestStatus: RequestStatus.NOT_STARTED }\n    ***REMOVED***;\n      await set(installations.appConfig, updatedInstallationEntry);\n  ***REMOVED***\n    throw e;\n***REMOVED***\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry ***REMOVED***\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean ***REMOVED***\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean ***REMOVED***\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry ***REMOVED***\n  const inProgressAuthToken: InProgressAuthToken = ***REMOVED***\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n***REMOVED***;\n  return ***REMOVED***\n    ...oldEntry,\n    authToken: inProgressAuthToken\n***REMOVED***;\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean ***REMOVED***\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getInstallationEntry } from '../helpers/get-installation-entry';\nimport ***REMOVED*** refreshAuthToken } from '../helpers/refresh-auth-token';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> ***REMOVED***\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> ***REMOVED***\n  const ***REMOVED*** registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) ***REMOVED***\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport ***REMOVED*** FirebaseError } from '@firebase/util';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig ***REMOVED***\n  if (!app || !app.options) ***REMOVED***\n    throw getMissingValueError('App Configuration');\n***REMOVED***\n\n  if (!app.name) ***REMOVED***\n    throw getMissingValueError('App Name');\n***REMOVED***\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) ***REMOVED***\n    if (!app.options[keyName]) ***REMOVED***\n      throw getMissingValueError(keyName);\n  ***REMOVED***\n***REMOVED***\n\n  return ***REMOVED***\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n***REMOVED***;\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError ***REMOVED***\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, ***REMOVED***\n    valueName\n***REMOVED***);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** _registerComponent, _getProvider } from '@firebase/app';\nimport ***REMOVED***\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport ***REMOVED*** getId, getToken } from '../api/index';\nimport ***REMOVED*** _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => ***REMOVED***\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = ***REMOVED***\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n***REMOVED***;\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => ***REMOVED***\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = ***REMOVED***\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n***REMOVED***;\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void ***REMOVED***\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getInstallationEntry } from '../helpers/get-installation-entry';\nimport ***REMOVED*** refreshAuthToken } from '../helpers/refresh-auth-token';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> ***REMOVED***\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const ***REMOVED*** installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) ***REMOVED***\n    registrationPromise.catch(console.error);\n***REMOVED*** else ***REMOVED***\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n***REMOVED***\n\n  return installationEntry.fid;\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** registerInstallations } from './functions/config';\nimport ***REMOVED*** registerVersion } from '@firebase/app';\nimport ***REMOVED*** name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Analytics.\n */\nexport const ANALYTICS_TYPE = 'analytics';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/***REMOVED***app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport const enum GtagCommand ***REMOVED***\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config',\n  CONSENT = 'consent'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport ***REMOVED*** DynamicConfig, DataLayer, Gtag, MinimalDynamicConfig } from './types';\nimport ***REMOVED*** GtagCommand, GTAG_URL } from './constants';\nimport ***REMOVED*** logger } from './logger';\n\n// Possible parameter types for gtag 'event' and 'config' commands\ntype GtagConfigOrEventParams = ControlParams & EventParams & CustomParams;\n\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nexport function promiseAllSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<T[]> ***REMOVED***\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void ***REMOVED***\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `$***REMOVED***GTAG_URL}?l=$***REMOVED***dataLayerName}&id=$***REMOVED***measurementId}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer ***REMOVED***\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) ***REMOVED***\n    dataLayer = window[dataLayerName] as DataLayer;\n***REMOVED*** else ***REMOVED***\n    window[dataLayerName] = dataLayer;\n***REMOVED***\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: ***REMOVED*** [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: ***REMOVED*** [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> ***REMOVED***\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try ***REMOVED***\n    if (correspondingAppId) ***REMOVED***\n      await initializationPromisesMap[correspondingAppId];\n  ***REMOVED*** else ***REMOVED***\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) ***REMOVED***\n        await initializationPromisesMap[foundConfig.appId];\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED*** catch (e) ***REMOVED***\n    logger.error(e);\n***REMOVED***\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: ***REMOVED*** [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> ***REMOVED***\n  try ***REMOVED***\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) ***REMOVED***\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) ***REMOVED***\n        gaSendToList = [gaSendToList];\n    ***REMOVED***\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      for (const sendToId of gaSendToList) ***REMOVED***\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) ***REMOVED***\n          initializationPromisesToWaitFor.push(initializationPromise);\n      ***REMOVED*** else ***REMOVED***\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) ***REMOVED***\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n  ***REMOVED***\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || ***REMOVED***});\n***REMOVED*** catch (e) ***REMOVED***\n    logger.error(e);\n***REMOVED***\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: ***REMOVED*** [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: ***REMOVED*** [measurementId: string]: string }\n): Gtag ***REMOVED***\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event' | 'consent',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: GtagConfigOrEventParams | ConsentSettings\n  ): Promise<void> ***REMOVED***\n    try ***REMOVED***\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) ***REMOVED***\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n    ***REMOVED*** else if (command === GtagCommand.CONFIG) ***REMOVED***\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n    ***REMOVED*** else if (command === GtagCommand.CONSENT) ***REMOVED***\n        // If CONFIG, second arg must be measurementId.\n        gtagCore(GtagCommand.CONSENT, 'update', gtagParams as ConsentSettings);\n    ***REMOVED*** else ***REMOVED***\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n    ***REMOVED***\n  ***REMOVED*** catch (e) ***REMOVED***\n      logger.error(e);\n  ***REMOVED***\n***REMOVED***\n  return gtagWrapper as Gtag;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: ***REMOVED*** [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: ***REMOVED*** [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): ***REMOVED***\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} ***REMOVED***\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) ***REMOVED***\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n***REMOVED***;\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) ***REMOVED***\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n***REMOVED***\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return ***REMOVED***\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n***REMOVED***;\n}\n\n/**\n * Returns the script tag in the DOM matching both the gtag url pattern\n * and the provided data layer name.\n */\nexport function findGtagScriptOnPage(\n  dataLayerName: string\n): HTMLScriptElement | null ***REMOVED***\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) ***REMOVED***\n    if (\n      tag.src &&\n      tag.src.includes(GTAG_URL) &&\n      tag.src.includes(dataLayerName)\n    ) ***REMOVED***\n      return tag;\n  ***REMOVED***\n***REMOVED***\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError ***REMOVED***\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  ALREADY_INITIALIZED_SETTINGS = 'already-initialized-settings',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = ***REMOVED***\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId ***REMOVED***$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'initializeAnalytics() cannot be called again with different options than those ' +\n    'it was initially called with. It can be called again with the same options to ' +\n    'return the existing instance, or getAnalytics() can be used ' +\n    'to get a reference to the already-intialized instance.',\n  [AnalyticsError.ALREADY_INITIALIZED_SETTINGS]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: ***REMOVED***$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: ***REMOVED***$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: ***REMOVED***$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: ***REMOVED***$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [***REMOVED***$httpStatus}] ***REMOVED***$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.'\n};\n\ninterface ErrorParams ***REMOVED***\n  [AnalyticsError.ALREADY_EXISTS]: ***REMOVED*** id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: ***REMOVED*** reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: ***REMOVED*** throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: ***REMOVED***\n    httpStatus: number;\n    responseMessage: string;\n***REMOVED***;\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: ***REMOVED*** errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: ***REMOVED*** errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport ***REMOVED*** FirebaseApp } from '@firebase/app';\nimport ***REMOVED*** DynamicConfig, ThrottleMetadata, MinimalDynamicConfig } from './types';\nimport ***REMOVED*** FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport ***REMOVED*** AnalyticsError, ERROR_FACTORY } from './errors';\nimport ***REMOVED*** DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport ***REMOVED*** logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields ***REMOVED***\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData ***REMOVED***\n  constructor(\n    public throttleMetadata: ***REMOVED*** [appId: string]: ThrottleMetadata } = ***REMOVED***},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) ***REMOVED***}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata ***REMOVED***\n    return this.throttleMetadata[appId];\n***REMOVED***\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void ***REMOVED***\n    this.throttleMetadata[appId] = metadata;\n***REMOVED***\n\n  deleteThrottleMetadata(appId: string): void ***REMOVED***\n    delete this.throttleMetadata[appId];\n***REMOVED***\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers ***REMOVED***\n  return new Headers(***REMOVED***\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n***REMOVED***);\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> ***REMOVED***\n  const ***REMOVED*** appId, apiKey } = appFields;\n  const request: RequestInit = ***REMOVED***\n    method: 'GET',\n    headers: getHeaders(apiKey)\n***REMOVED***;\n  const appUrl = DYNAMIC_CONFIG_URL.replace('***REMOVED***app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) ***REMOVED***\n    let errorMessage = '';\n    try ***REMOVED***\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as ***REMOVED***\n        error?: ***REMOVED*** message?: string };\n    ***REMOVED***;\n      if (jsonResponse.error?.message) ***REMOVED***\n        errorMessage = jsonResponse.error.message;\n    ***REMOVED***\n  ***REMOVED*** catch (_ignored) ***REMOVED***}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, ***REMOVED***\n      httpStatus: response.status,\n      responseMessage: errorMessage\n  ***REMOVED***);\n***REMOVED***\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> ***REMOVED***\n  const ***REMOVED*** appId, apiKey, measurementId } = app.options;\n\n  if (!appId) ***REMOVED***\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n***REMOVED***\n\n  if (!apiKey) ***REMOVED***\n    if (measurementId) ***REMOVED***\n      return ***REMOVED***\n        measurementId,\n        appId\n    ***REMOVED***;\n  ***REMOVED***\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n***REMOVED***\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || ***REMOVED***\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n***REMOVED***;\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => ***REMOVED***\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n  ***REMOVED***,\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    ***REMOVED*** appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  ***REMOVED*** throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> ***REMOVED***\n  const ***REMOVED*** appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try ***REMOVED***\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n***REMOVED*** catch (e) ***REMOVED***\n    if (measurementId) ***REMOVED***\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID $***REMOVED***measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [$***REMOVED***\n            (e as Error)?.message\n        ***REMOVED***]`\n      );\n      return ***REMOVED*** appId, measurementId };\n  ***REMOVED***\n    throw e;\n***REMOVED***\n\n  try ***REMOVED***\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n***REMOVED*** catch (e) ***REMOVED***\n    const error = e as Error;\n    if (!isRetriableError(error)) ***REMOVED***\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) ***REMOVED***\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID $***REMOVED***measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [$***REMOVED***error?.message}]`\n        );\n        return ***REMOVED*** appId, measurementId };\n    ***REMOVED*** else ***REMOVED***\n        throw e;\n    ***REMOVED***\n  ***REMOVED***\n\n    const backoffMillis =\n      Number(error?.customData?.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = ***REMOVED***\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n  ***REMOVED***;\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in $***REMOVED***backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n***REMOVED***\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> ***REMOVED***\n  return new Promise((resolve, reject) => ***REMOVED***\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => ***REMOVED***\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, ***REMOVED***\n          throttleEndTimeMillis\n      ***REMOVED***)\n      );\n  ***REMOVED***);\n***REMOVED***);\n}\n\ntype RetriableError = FirebaseError & ***REMOVED*** customData: ***REMOVED*** httpStatus: string } };\n\n/**\n * Returns true if the ***REMOVED***@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError ***REMOVED***\n  if (!(e instanceof FirebaseError) || !e.customData) ***REMOVED***\n    return false;\n***REMOVED***\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal ***REMOVED***\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void ***REMOVED***\n    this.listeners.push(listener);\n***REMOVED***\n  abort(): void ***REMOVED***\n    this.listeners.forEach(listener => listener());\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  AnalyticsCallOptions,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport ***REMOVED*** Gtag } from './types';\nimport ***REMOVED*** GtagCommand } from './constants';\n\n/**\n * Event parameters to set on 'gtag' during initialization.\n */\nexport let defaultEventParametersForInit: CustomParams | undefined;\n\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> ***REMOVED***\n  if (options && options.global) ***REMOVED***\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n***REMOVED*** else ***REMOVED***\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = ***REMOVED***\n      ...eventParams,\n      'send_to': measurementId\n  ***REMOVED***;\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n***REMOVED***\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @deprecated Use ***REMOVED***@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See ***REMOVED***@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> ***REMOVED***\n  if (options && options.global) ***REMOVED***\n    gtagFunction(GtagCommand.SET, ***REMOVED*** 'screen_name': screenName });\n    return Promise.resolve();\n***REMOVED*** else ***REMOVED***\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, ***REMOVED***\n      update: true,\n      'screen_name': screenName\n  ***REMOVED***);\n***REMOVED***\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> ***REMOVED***\n  if (options && options.global) ***REMOVED***\n    gtagFunction(GtagCommand.SET, ***REMOVED*** 'user_id': id });\n    return Promise.resolve();\n***REMOVED*** else ***REMOVED***\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, ***REMOVED***\n      update: true,\n      'user_id': id\n  ***REMOVED***);\n***REMOVED***\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> ***REMOVED***\n  if (options && options.global) ***REMOVED***\n    const flatProperties: ***REMOVED*** [key: string]: unknown } = ***REMOVED***};\n    for (const key of Object.keys(properties)) ***REMOVED***\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.$***REMOVED***key}`] = properties[key];\n  ***REMOVED***\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n***REMOVED*** else ***REMOVED***\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, ***REMOVED***\n      update: true,\n      'user_properties': properties\n  ***REMOVED***);\n***REMOVED***\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> ***REMOVED***\n  const measurementId = await initializationPromise;\n  window[`ga-disable-$***REMOVED***measurementId}`] = !enabled;\n}\n\n/**\n * Consent parameters to default to during 'gtag' initialization.\n */\nexport let defaultConsentSettingsForInit: ConsentSettings | undefined;\n\n/**\n * Sets the variable ***REMOVED***@link defaultConsentSettingsForInit} for use in the initialization of\n * analytics.\n *\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\n */\nexport function _setConsentDefaultForInit(\n  consentSettings?: ConsentSettings\n): void ***REMOVED***\n  defaultConsentSettingsForInit = consentSettings;\n}\n\n/**\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\n * analytics.\n *\n * @param customParams Any custom params the user may pass to gtag.js.\n */\nexport function _setDefaultEventParametersForInit(\n  customParams?: CustomParams\n): void ***REMOVED***\n  defaultEventParametersForInit = customParams;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** DynamicConfig, Gtag, MinimalDynamicConfig } from './types';\nimport ***REMOVED*** GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport ***REMOVED*** _FirebaseInstallationsInternal } from '@firebase/installations';\nimport ***REMOVED*** fetchDynamicConfigWithRetry } from './get-config';\nimport ***REMOVED*** logger } from './logger';\nimport ***REMOVED*** FirebaseApp } from '@firebase/app';\nimport ***REMOVED***\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport ***REMOVED*** ERROR_FACTORY, AnalyticsError } from './errors';\nimport ***REMOVED*** findGtagScriptOnPage, insertScriptTag } from './helpers';\nimport ***REMOVED*** AnalyticsSettings } from './public-types';\nimport ***REMOVED***\n  defaultConsentSettingsForInit,\n  _setConsentDefaultForInit,\n  defaultEventParametersForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\n\nasync function validateIndexedDB(): Promise<boolean> ***REMOVED***\n  if (!isIndexedDBAvailable()) ***REMOVED***\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, ***REMOVED***\n        errorInfo: 'IndexedDB is not available in this environment.'\n    ***REMOVED***).message\n    );\n    return false;\n***REMOVED*** else ***REMOVED***\n    try ***REMOVED***\n      await validateIndexedDBOpenable();\n  ***REMOVED*** catch (e) ***REMOVED***\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, ***REMOVED***\n          errorInfo: (e as Error)?.toString()\n      ***REMOVED***).message\n      );\n      return false;\n  ***REMOVED***\n***REMOVED***\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nexport async function _initializeAnalytics(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: ***REMOVED*** [key: string]: string },\n  installations: _FirebaseInstallationsInternal,\n  gtagCore: Gtag,\n  dataLayerName: string,\n  options?: AnalyticsSettings\n): Promise<string> ***REMOVED***\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => ***REMOVED***\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) ***REMOVED***\n        logger.warn(\n          `The measurement ID in the local Firebase config ($***REMOVED***app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server ($***REMOVED***config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n    ***REMOVED***\n  ***REMOVED***)\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => ***REMOVED***\n      if (envIsValid) ***REMOVED***\n        return installations.getId();\n    ***REMOVED*** else ***REMOVED***\n        return undefined;\n    ***REMOVED***\n  ***REMOVED***\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page with the passed in\n  // data layer name.\n  if (!findGtagScriptOnPage(dataLayerName)) ***REMOVED***\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n***REMOVED***\n\n  // Detects if there are consent settings that need to be configured.\n  if (defaultConsentSettingsForInit) ***REMOVED***\n    gtagCore(GtagCommand.CONSENT, 'default', defaultConsentSettingsForInit);\n    _setConsentDefaultForInit(undefined);\n***REMOVED***\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (gtagCore as any)('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties: Record<string, unknown> = options?.config ?? ***REMOVED***};\n\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) ***REMOVED***\n    configProperties[GA_FID_KEY] = fid;\n***REMOVED***\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n\n  // Detects if there is data that will be set on every event logged from the SDK.\n  if (defaultEventParametersForInit) ***REMOVED***\n    gtagCore(GtagCommand.SET, defaultEventParametersForInit);\n    _setDefaultEventParametersForInit(undefined);\n***REMOVED***\n\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** SettingsOptions, Analytics, AnalyticsSettings } from './public-types';\nimport ***REMOVED*** Gtag, DynamicConfig, MinimalDynamicConfig } from './types';\nimport ***REMOVED*** getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport ***REMOVED*** AnalyticsError, ERROR_FACTORY } from './errors';\nimport ***REMOVED*** _FirebaseInstallationsInternal } from '@firebase/installations';\nimport ***REMOVED*** areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport ***REMOVED*** _initializeAnalytics } from './initialize-analytics';\nimport ***REMOVED*** logger } from './logger';\nimport ***REMOVED*** FirebaseApp, _FirebaseService } from '@firebase/app';\n\n/**\n * Analytics Service class.\n */\nexport class AnalyticsService implements Analytics, _FirebaseService ***REMOVED***\n  constructor(public app: FirebaseApp) ***REMOVED***}\n  _delete(): Promise<void> ***REMOVED***\n    delete initializationPromisesMap[this.app.options.appId!];\n    return Promise.resolve();\n***REMOVED***\n}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nexport let initializationPromisesMap: ***REMOVED***\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = ***REMOVED***};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: ***REMOVED*** [measurementId: string]: string } = ***REMOVED***};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nexport let wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n * @internal\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = ***REMOVED***},\n  newDynamicPromises = []\n): void ***REMOVED***\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n * @internal\n */\nexport function getGlobalVars(): ***REMOVED***\n  initializationPromisesMap: ***REMOVED*** [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} ***REMOVED***\n  return ***REMOVED***\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n***REMOVED***;\n}\n\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void ***REMOVED***\n  if (globalInitDone) ***REMOVED***\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n***REMOVED***\n  if (options.dataLayerName) ***REMOVED***\n    dataLayerName = options.dataLayerName;\n***REMOVED***\n  if (options.gtagName) ***REMOVED***\n    gtagName = options.gtagName;\n***REMOVED***\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void ***REMOVED***\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) ***REMOVED***\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n***REMOVED***\n  if (!areCookiesEnabled()) ***REMOVED***\n    mismatchedEnvMessages.push('Cookies are not available.');\n***REMOVED***\n  if (mismatchedEnvMessages.length > 0) ***REMOVED***\n    const details = mismatchedEnvMessages\n      .map((message, index) => `($***REMOVED***index + 1}) $***REMOVED***message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, ***REMOVED***\n      errorInfo: details\n  ***REMOVED***);\n    logger.warn(err.message);\n***REMOVED***\n}\n\n/**\n * Analytics instance factory.\n * @internal\n */\nexport function factory(\n  app: FirebaseApp,\n  installations: _FirebaseInstallationsInternal,\n  options?: AnalyticsSettings\n): AnalyticsService ***REMOVED***\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) ***REMOVED***\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n***REMOVED***\n  if (!app.options.apiKey) ***REMOVED***\n    if (app.options.measurementId) ***REMOVED***\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID $***REMOVED***app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n  ***REMOVED*** else ***REMOVED***\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  ***REMOVED***\n***REMOVED***\n  if (initializationPromisesMap[appId] != null) ***REMOVED***\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, ***REMOVED***\n      id: appId\n  ***REMOVED***);\n***REMOVED***\n\n  if (!globalInitDone) ***REMOVED***\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const ***REMOVED*** wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n***REMOVED***\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName,\n    options\n  );\n\n  const analyticsInstance: AnalyticsService = new AnalyticsService(app);\n\n  return analyticsInstance;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport ***REMOVED***\n  Analytics,\n  AnalyticsCallOptions,\n  AnalyticsSettings,\n  ConsentSettings,\n  CustomParams,\n  EventNameString,\n  EventParams\n} from './public-types';\nimport ***REMOVED*** Provider } from '@firebase/component';\nimport ***REMOVED***\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension,\n  getModularInstance,\n  deepEqual\n} from '@firebase/util';\nimport ***REMOVED*** ANALYTICS_TYPE, GtagCommand } from './constants';\nimport ***REMOVED***\n  AnalyticsService,\n  initializationPromisesMap,\n  wrappedGtagFunction\n} from './factory';\nimport ***REMOVED*** logger } from './logger';\nimport ***REMOVED***\n  logEvent as internalLogEvent,\n  setCurrentScreen as internalSetCurrentScreen,\n  setUserId as internalSetUserId,\n  setUserProperties as internalSetUserProperties,\n  setAnalyticsCollectionEnabled as internalSetAnalyticsCollectionEnabled,\n  _setConsentDefaultForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\nimport ***REMOVED*** ERROR_FACTORY, AnalyticsError } from './errors';\n\nexport ***REMOVED*** settings } from './factory';\n\ndeclare module '@firebase/component' ***REMOVED***\n  interface NameServiceMapping ***REMOVED***\n    [ANALYTICS_TYPE]: AnalyticsService;\n***REMOVED***\n}\n\n/**\n * Returns an ***REMOVED***@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The ***REMOVED***@link @firebase/app#FirebaseApp} to use.\n */\nexport function getAnalytics(app: FirebaseApp = getApp()): Analytics ***REMOVED***\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n\n  if (analyticsProvider.isInitialized()) ***REMOVED***\n    return analyticsProvider.getImmediate();\n***REMOVED***\n\n  return initializeAnalytics(app);\n}\n\n/**\n * Returns an ***REMOVED***@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The ***REMOVED***@link @firebase/app#FirebaseApp} to use.\n */\nexport function initializeAnalytics(\n  app: FirebaseApp,\n  options: AnalyticsSettings = ***REMOVED***}\n): Analytics ***REMOVED***\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n  if (analyticsProvider.isInitialized()) ***REMOVED***\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) ***REMOVED***\n      return existingInstance;\n  ***REMOVED*** else ***REMOVED***\n      throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  ***REMOVED***\n***REMOVED***\n  const analyticsInstance = analyticsProvider.initialize(***REMOVED*** options });\n  return analyticsInstance;\n}\n\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nexport async function isSupported(): Promise<boolean> ***REMOVED***\n  if (isBrowserExtension()) ***REMOVED***\n    return false;\n***REMOVED***\n  if (!areCookiesEnabled()) ***REMOVED***\n    return false;\n***REMOVED***\n  if (!isIndexedDBAvailable()) ***REMOVED***\n    return false;\n***REMOVED***\n\n  try ***REMOVED***\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n***REMOVED*** catch (error) ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @deprecated Use ***REMOVED***@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See ***REMOVED***@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param analyticsInstance - The ***REMOVED***@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nexport function setCurrentScreen(\n  analyticsInstance: Analytics,\n  screenName: string,\n  options?: AnalyticsCallOptions\n): void ***REMOVED***\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetCurrentScreen(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    screenName,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The ***REMOVED***@link Analytics} instance.\n * @param id - User ID to set.\n */\nexport function setUserId(\n  analyticsInstance: Analytics,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): void ***REMOVED***\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    id,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nexport function setUserProperties(\n  analyticsInstance: Analytics,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void ***REMOVED***\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserProperties(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    properties,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The ***REMOVED***@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsInstance: Analytics,\n  enabled: boolean\n): void ***REMOVED***\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetAnalyticsCollectionEnabled(\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    enabled\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\n * all subsequent events.\n * @public\n * @param customParams - Any custom params the user may pass to gtag.js.\n */\nexport function setDefaultEventParameters(customParams: CustomParams): void ***REMOVED***\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) ***REMOVED***\n    wrappedGtagFunction(GtagCommand.SET, customParams);\n***REMOVED*** else ***REMOVED***\n    _setDefaultEventParametersForInit(customParams);\n***REMOVED***\n}\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_payment_info',\n  eventParams?: ***REMOVED***\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_shipping_info',\n  eventParams?: ***REMOVED***\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',\n  eventParams?: ***REMOVED***\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'begin_checkout',\n  eventParams?: ***REMOVED***\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'checkout_progress',\n  eventParams?: ***REMOVED***\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * ***REMOVED***@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n * | Measure exceptions}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'exception',\n  eventParams?: ***REMOVED***\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'generate_lead',\n  eventParams?: ***REMOVED***\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'login',\n  eventParams?: ***REMOVED***\n    method?: EventParams['method'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * ***REMOVED***@link https://developers.google.com/analytics/devguides/collection/ga4/page-view\n * | Page views}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'page_view',\n  eventParams?: ***REMOVED***\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'purchase' | 'refund',\n  eventParams?: ***REMOVED***\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See ***REMOVED***@link https://firebase.google.com/docs/analytics/screenviews\n * | Track Screenviews}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'screen_view',\n  eventParams?: ***REMOVED***\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'search' | 'view_search_results',\n  eventParams?: ***REMOVED***\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_content',\n  eventParams?: ***REMOVED***\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_item',\n  eventParams?: ***REMOVED***\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_promotion' | 'view_promotion',\n  eventParams?: ***REMOVED***\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'set_checkout_option',\n  eventParams?: ***REMOVED***\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'share',\n  eventParams?: ***REMOVED***\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'sign_up',\n  eventParams?: ***REMOVED***\n    method?: EventParams['method'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'timing_complete',\n  eventParams?: ***REMOVED***\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_cart' | 'view_item',\n  eventParams?: ***REMOVED***\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_item_list',\n  eventParams?: ***REMOVED***\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n***REMOVED***,\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent<T extends string>(\n  analyticsInstance: Analytics,\n  eventName: CustomEventName<T>,\n  eventParams?: ***REMOVED*** [key: string]: any },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * ***REMOVED***@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void ***REMOVED***\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalLogEvent(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    eventName,\n    eventParams,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Any custom event name string not in the standard list of recommended\n * event names.\n * @public\n */\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n\n/**\n * Sets the applicable end user consent state for this web app across all gtag references once\n * Firebase Analytics is initialized.\n *\n * Use the ***REMOVED***@link ConsentSettings} to specify individual consent type values. By default consent\n * types are set to \"granted\".\n * @public\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\n */\nexport function setConsent(consentSettings: ConsentSettings): void ***REMOVED***\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) ***REMOVED***\n    wrappedGtagFunction(GtagCommand.CONSENT, 'update', consentSettings);\n***REMOVED*** else ***REMOVED***\n    _setConsentDefaultForInit(consentSettings);\n***REMOVED***\n}\n","/**\n * Firebase Analytics\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** registerVersion, _registerComponent } from '@firebase/app';\nimport ***REMOVED*** FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport ***REMOVED*** factory } from './factory';\nimport ***REMOVED*** ANALYTICS_TYPE } from './constants';\nimport ***REMOVED***\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport ***REMOVED*** ERROR_FACTORY, AnalyticsError } from './errors';\nimport ***REMOVED*** logEvent } from './api';\nimport ***REMOVED*** name, version } from '../package.json';\nimport ***REMOVED*** AnalyticsCallOptions } from './public-types';\nimport '@firebase/installations';\n\ndeclare global ***REMOVED***\n  interface Window ***REMOVED***\n    [key: string]: unknown;\n***REMOVED***\n}\n\nfunction registerAnalytics(): void ***REMOVED***\n  _registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      (container, ***REMOVED*** options: analyticsOptions }: InstanceFactoryOptions) => ***REMOVED***\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations-internal')\n          .getImmediate();\n\n        return factory(app, installations, analyticsOptions);\n    ***REMOVED***,\n      ComponentType.PUBLIC\n    )\n  );\n\n  _registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal ***REMOVED***\n    try ***REMOVED***\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return ***REMOVED***\n        logEvent: (\n          eventName: string,\n          eventParams?: ***REMOVED*** [key: string]: unknown },\n          options?: AnalyticsCallOptions\n        ) => logEvent(analytics, eventName, eventParams, options)\n    ***REMOVED***;\n  ***REMOVED*** catch (e) ***REMOVED***\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, ***REMOVED***\n        reason: e as Error\n    ***REMOVED***);\n  ***REMOVED***\n***REMOVED***\n}\n\nregisterAnalytics();\n\nexport * from './api';\nexport * from './public-types';\n"],"names":["LogLevel","levelStringToEnum","debug","DEBUG","verbose","VERBOSE","info","INFO","warn","WARN","error","ERROR","silent","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","args","logLevel","now","Date","toISOString","method","Error","console","name","isBrowserExtension","runtime","chrome","browser","undefined","id","isIndexedDBAvailable","indexedDB","e","validateIndexedDBOpenable","Promise","resolve","reject","preExist","DB_CHECK_NAME","request","self","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","_a","message","areCookiesEnabled","navigator","cookieEnabled","FirebaseError","constructor","code","customData","super","this","Object","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replace","PATTERN","_","key","value","String","replaceTemplate","fullMessage","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","calculateBackoffMillis","backoffCount","intervalMillis","backoffFactor","currBaseValue","Math","pow","randomWait","round","random","min","getModularInstance","_delegate","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","set","has","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","apply","unwrap","storeNames","tx","call","sort","transformCachableValue","done","unlisten","removeEventListener","complete","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","c","Proxy","IDBRequest","promise","success","then","catch","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","useIndex","isWrite","async","storeName","store","index","shift","all","oldTraps","ERROR_FACTORY","isServerError","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","responseExpiresIn","Number","creationTime","getErrorFromResponse","requestName","errorData","json","serverCode","serverMessage","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","sleep","ms","setTimeout","VALID_FID_PATTERN","generateFid","fidByteArray","Uint8Array","crypto","msCrypto","getRandomValues","fid","array","btoa","fromCharCode","substr","encode","test","getKey","appName","appId","fidChangeCallbacks","fidChanged","callFidChangeCallbacks","channel","broadcastChannel","BroadcastChannel","onmessage","getBroadcastChannel","postMessage","size","broadcastFidChange","callbacks","OBJECT_STORE_NAME","dbPromise","getDbPromise","version","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","oldValue","put","remove","delete","update","updateFn","getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","clearTimedOutRequest","registrationStatus","updateOrCreateInstallationEntry","entryWithPromise","onLine","inProgressEntry","registrationTime","registeredInstallationEntry","heartbeatServiceProvider","endpoint","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","body","authVersion","sdkVersion","JSON","stringify","fetch","ok","responseValue","authToken","createInstallationRequest","registerInstallation","waitUntilFidRegistration","triggerRegistrationIfNecessary","entry","updateInstallationRequest","generateAuthTokenRequest","getGenerateAuthTokenEndpoint","installation","refreshAuthToken","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenExpired","isAuthTokenValid","updateAuthTokenRequest","waitUntilAuthTokenRequest","inProgressAuthToken","requestTime","assign","makeAuthTokenRequestInProgressEntry","updatedInstallationEntry","fetchAuthTokenFromServer","getToken","installationsImpl","completeInstallationRegistration","getMissingValueError","valueName","internalFactory","container","app","getProvider","_getProvider","getId","_registerComponent","options","configKeys","keyName","extractAppConfig","_delete","registerVersion","GTAG_URL","logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","log","promiseAllSettled","promises","map","wrapGtag","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","command","idOrNameOrParams","gtagParams","measurementId","initializationPromisesToWaitFor","gaSendToList","Array","isArray","dynamicConfigResults","sendToId","foundConfig","find","config","initializationPromise","push","length","values","gtagOnEvent","correspondingAppId","gtagOnConfig","defaultRetryData","throttleMetadata","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","fetchDynamicConfigWithRetry","retryData","timeoutMillis","throttleEndTimeMillis","signal","AnalyticsAbortSignal","abort","attemptFetchDynamicConfigWithRetry","appFields","backoffMillis","max","timeout","clearTimeout","setAbortableTimeout","appUrl","errorMessage","jsonResponse","_ignored","httpStatus","responseMessage","fetchDynamicConfig","isRetriableError","listeners","listener","forEach","defaultEventParametersForInit","defaultConsentSettingsForInit","_setConsentDefaultForInit","consentSettings","_setDefaultEventParametersForInit","customParams","_initializeAnalytics","dataLayerName","dynamicConfigPromise","fidPromise","errorInfo","toString","validateIndexedDB","envIsValid","dynamicConfig","scriptTags","window","document","getElementsByTagName","tag","src","findGtagScriptOnPage","script","createElement","head","appendChild","insertScriptTag","configProperties","AnalyticsService","gtagCoreFunction","wrappedGtagFunction","gtagName","globalInitDone","settings","factory","mismatchedEnvMessages","details","join","err","warnOnBrowserContextMismatch","dataLayer","getOrCreateDataLayer","wrappedGtag","gtagFunctionName","_args","arguments","wrapOrCreateGtag","getAnalytics","getApp","analyticsProvider","isInitialized","initializeAnalytics","existingInstance","getOptions","initialize","isSupported","setCurrentScreen","analyticsInstance","screenName","gtagFunction","global","screen_name","internalSetCurrentScreen","setUserId","user_id","internalSetUserId","setUserProperties","properties","flatProperties","user_properties","internalSetUserProperties","setAnalyticsCollectionEnabled","enabled","internalSetAnalyticsCollectionEnabled","setDefaultEventParameters","logEvent","eventName","eventParams","send_to","internalLogEvent","setConsent","analyticsOptions","analytics","reason"],"mappings":"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","preExistingComment":"firebase-analytics.js.map"}