***REMOVED***"version":3,"file":"firebase-installations.js","sources":["../util/src/errors.ts","../component/src/component.ts","../../node_modules/idb/build/wrap-idb-value.js","../../node_modules/idb/build/index.js","../installations/src/util/errors.ts","../installations/src/util/constants.ts","../installations/src/functions/common.ts","../installations/src/util/sleep.ts","../installations/src/helpers/generate-fid.ts","../installations/src/helpers/buffer-to-base64-url-safe.ts","../installations/src/util/get-key.ts","../installations/src/helpers/fid-changed.ts","../installations/src/helpers/idb-manager.ts","../installations/src/helpers/get-installation-entry.ts","../installations/src/functions/create-installation-request.ts","../installations/src/functions/generate-auth-token-request.ts","../installations/src/helpers/refresh-auth-token.ts","../installations/src/api/get-id.ts","../installations/src/api/get-token.ts","../installations/src/functions/delete-installation-request.ts","../installations/src/api/delete-installations.ts","../installations/src/api/on-id-change.ts","../installations/src/api/get-installations.ts","../installations/src/helpers/extract-app-config.ts","../installations/src/functions/config.ts","../installations/src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum ***REMOVED***string}\n *   var Err = ***REMOVED***\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n * ***REMOVED***\n *\n *   let errors: Map<Err, string> = ***REMOVED***\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: ***REMOVED***$file}\",\n * ***REMOVED***;\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, ***REMOVED***'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) ***REMOVED***\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') ***REMOVED***\n *       console.log(\"Could not read file: \" + e['file']);\n *   ***REMOVED***\n * ***REMOVED***\n */\n\nexport type ErrorMap<ErrorCode extends string> = ***REMOVED***\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike ***REMOVED***\n  toString(): string;\n}\n\nexport interface ErrorData ***REMOVED***\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error ***REMOVED***\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) ***REMOVED***\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) ***REMOVED***\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n  ***REMOVED***\n***REMOVED***\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends ***REMOVED*** readonly [K in ErrorCode]?: ErrorData } = ***REMOVED***}\n> ***REMOVED***\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) ***REMOVED***}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError ***REMOVED***\n    const customData = (data[0] as ErrorData) || ***REMOVED***};\n    const fullCode = `$***REMOVED***this.service}/$***REMOVED***code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `$***REMOVED***this.serviceName}: $***REMOVED***message} ($***REMOVED***fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n***REMOVED***\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string ***REMOVED***\n  return template.replace(PATTERN, (_, key) => ***REMOVED***\n    const value = data[key];\n    return value != null ? String(value) : `<$***REMOVED***key}?>`;\n***REMOVED***);\n}\n\nconst PATTERN = /\\***REMOVED***\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport ***REMOVED***\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> ***REMOVED***\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = ***REMOVED***};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) ***REMOVED***}\n\n  setInstantiationMode(mode: InstantiationMode): this ***REMOVED***\n    this.instantiationMode = mode;\n    return this;\n***REMOVED***\n\n  setMultipleInstances(multipleInstances: boolean): this ***REMOVED***\n    this.multipleInstances = multipleInstances;\n    return this;\n***REMOVED***\n\n  setServiceProps(props: Dictionary): this ***REMOVED***\n    this.serviceProps = props;\n    return this;\n***REMOVED***\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this ***REMOVED***\n    this.onInstanceCreated = callback;\n    return this;\n***REMOVED***\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() ***REMOVED***\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() ***REMOVED***\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) ***REMOVED***\n    const promise = new Promise((resolve, reject) => ***REMOVED***\n        const unlisten = () => ***REMOVED***\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n      ***REMOVED***;\n        const success = () => ***REMOVED***\n            resolve(wrap(request.result));\n            unlisten();\n      ***REMOVED***;\n        const error = () => ***REMOVED***\n            reject(request.error);\n            unlisten();\n      ***REMOVED***;\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n  ***REMOVED***);\n    promise\n        .then((value) => ***REMOVED***\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) ***REMOVED***\n            cursorRequestMap.set(value, request);\n      ***REMOVED***\n        // Catching to avoid \"Uncaught Promise exceptions\"\n  ***REMOVED***)\n        .catch(() => ***REMOVED*** });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) ***REMOVED***\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => ***REMOVED***\n        const unlisten = () => ***REMOVED***\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n      ***REMOVED***;\n        const complete = () => ***REMOVED***\n            resolve();\n            unlisten();\n      ***REMOVED***;\n        const error = () => ***REMOVED***\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n      ***REMOVED***;\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n  ***REMOVED***);\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = ***REMOVED***\n    get(target, prop, receiver) ***REMOVED***\n        if (target instanceof IDBTransaction) ***REMOVED***\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') ***REMOVED***\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n          ***REMOVED***\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') ***REMOVED***\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n          ***REMOVED***\n      ***REMOVED***\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n  ***REMOVED***,\n    set(target, prop, value) ***REMOVED***\n        target[prop] = value;\n        return true;\n  ***REMOVED***,\n    has(target, prop) ***REMOVED***\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) ***REMOVED***\n            return true;\n      ***REMOVED***\n        return prop in target;\n  ***REMOVED***,\n};\nfunction replaceTraps(callback) ***REMOVED***\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) ***REMOVED***\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) ***REMOVED***\n        return function (storeNames, ...args) ***REMOVED***\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n      ***REMOVED***;\n  ***REMOVED***\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) ***REMOVED***\n        return function (...args) ***REMOVED***\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n      ***REMOVED***;\n  ***REMOVED***\n    return function (...args) ***REMOVED***\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n  ***REMOVED***;\n}\nfunction transformCachableValue(value) ***REMOVED***\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) ***REMOVED***\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) ***REMOVED***\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n  ***REMOVED***\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport ***REMOVED*** reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import ***REMOVED*** w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport ***REMOVED*** u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, ***REMOVED*** blocked, upgrade, blocking, terminated } = ***REMOVED***}) ***REMOVED***\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) ***REMOVED***\n        request.addEventListener('upgradeneeded', (event) => ***REMOVED***\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n      ***REMOVED***);\n  ***REMOVED***\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => ***REMOVED***\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n  ***REMOVED***)\n        .catch(() => ***REMOVED*** });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, ***REMOVED*** blocked } = ***REMOVED***}) ***REMOVED***\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) ***REMOVED***\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) ***REMOVED***\n        return;\n  ***REMOVED***\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) ***REMOVED***\n        return;\n  ***REMOVED***\n    const method = async function (storeName, ...args) ***REMOVED***\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n  ***REMOVED***;\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => (***REMOVED***\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport ***REMOVED*** deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ErrorFactory, FirebaseError } from '@firebase/util';\nimport ***REMOVED*** SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode ***REMOVED***\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: ***REMOVED*** readonly [key in ErrorCode]: string } = ***REMOVED***\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"***REMOVED***$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '***REMOVED***$requestName} request failed with error \"***REMOVED***$serverCode} ***REMOVED***$serverStatus}: ***REMOVED***$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams ***REMOVED***\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: ***REMOVED***\n    valueName: string;\n***REMOVED***;\n  [ErrorCode.REQUEST_FAILED]: ***REMOVED***\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n***REMOVED*** & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData ***REMOVED***\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & ***REMOVED*** customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError ***REMOVED***\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:$***REMOVED***version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseError } from '@firebase/util';\nimport ***REMOVED*** GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED***\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint(***REMOVED*** projectId }: AppConfig): string ***REMOVED***\n  return `$***REMOVED***INSTALLATIONS_API_URL}/projects/$***REMOVED***projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken ***REMOVED***\n  return ***REMOVED***\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n***REMOVED***;\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> ***REMOVED***\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, ***REMOVED***\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n***REMOVED***);\n}\n\nexport function getHeaders(***REMOVED*** apiKey }: AppConfig): Headers ***REMOVED***\n  return new Headers(***REMOVED***\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n***REMOVED***);\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  ***REMOVED*** refreshToken }: RegisteredInstallationEntry\n): Headers ***REMOVED***\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse ***REMOVED***\n  error: ***REMOVED***\n    code: number;\n    message: string;\n    status: string;\n***REMOVED***;\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> ***REMOVED***\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) ***REMOVED***\n    // Internal Server Error. Retry request.\n    return fn();\n***REMOVED***\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number ***REMOVED***\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string ***REMOVED***\n  return `$***REMOVED***INTERNAL_AUTH_VERSION} $***REMOVED***refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> ***REMOVED***\n  return new Promise<void>(resolve => ***REMOVED***\n    setTimeout(resolve, ms);\n***REMOVED***);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]***REMOVED***21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string ***REMOVED***\n  try ***REMOVED***\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as ***REMOVED*** msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n***REMOVED*** catch ***REMOVED***\n    // FID generation errored\n    return INVALID_FID;\n***REMOVED***\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string ***REMOVED***\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string ***REMOVED***\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string ***REMOVED***\n  return `$***REMOVED***appConfig.appName}!$***REMOVED***appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getKey } from '../util/get-key';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void ***REMOVED***\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void ***REMOVED***\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) ***REMOVED***\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n***REMOVED***\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void ***REMOVED***\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) ***REMOVED***\n    return;\n***REMOVED***\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) ***REMOVED***\n    fidChangeCallbacks.delete(key);\n***REMOVED***\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void ***REMOVED***\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) ***REMOVED***\n    return;\n***REMOVED***\n\n  for (const callback of callbacks) ***REMOVED***\n    callback(fid);\n***REMOVED***\n}\n\nfunction broadcastFidChange(key: string, fid: string): void ***REMOVED***\n  const channel = getBroadcastChannel();\n  if (channel) ***REMOVED***\n    channel.postMessage(***REMOVED*** key, fid });\n***REMOVED***\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null ***REMOVED***\n  if (!broadcastChannel && 'BroadcastChannel' in self) ***REMOVED***\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => ***REMOVED***\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n  ***REMOVED***;\n***REMOVED***\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void ***REMOVED***\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) ***REMOVED***\n    broadcastChannel.close();\n    broadcastChannel = null;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** DBSchema, IDBPDatabase, openDB } from 'idb';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** InstallationEntry } from '../interfaces/installation-entry';\nimport ***REMOVED*** getKey } from '../util/get-key';\nimport ***REMOVED*** fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema ***REMOVED***\n  'firebase-installations-store': ***REMOVED***\n    key: string;\n    value: InstallationEntry | undefined;\n***REMOVED***;\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> ***REMOVED***\n  if (!dbPromise) ***REMOVED***\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, ***REMOVED***\n      upgrade: (db, oldVersion) => ***REMOVED***\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) ***REMOVED***\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) ***REMOVED***\n    fidChanged(appConfig, value.fid);\n***REMOVED***\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) ***REMOVED***\n    await store.delete(key);\n***REMOVED*** else ***REMOVED***\n    await store.put(newValue, key);\n***REMOVED***\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) ***REMOVED***\n    fidChanged(appConfig, newValue.fid);\n***REMOVED***\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> ***REMOVED***\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** createInstallationRequest } from '../functions/create-installation-request';\nimport ***REMOVED***\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport ***REMOVED***\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PENDING_TIMEOUT_MS } from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport ***REMOVED*** sleep } from '../util/sleep';\nimport ***REMOVED*** generateFid, INVALID_FID } from './generate-fid';\nimport ***REMOVED*** remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise ***REMOVED***\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> ***REMOVED***\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => ***REMOVED***\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n***REMOVED***);\n\n  if (installationEntry.fid === INVALID_FID) ***REMOVED***\n    // FID generation failed. Waiting for the FID from the server.\n    return ***REMOVED*** installationEntry: await registrationPromise! };\n***REMOVED***\n\n  return ***REMOVED***\n    installationEntry,\n    registrationPromise\n***REMOVED***;\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry ***REMOVED***\n  const entry: InstallationEntry = oldEntry || ***REMOVED***\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n***REMOVED***;\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise ***REMOVED***\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    if (!navigator.onLine) ***REMOVED***\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return ***REMOVED***\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n    ***REMOVED***;\n  ***REMOVED***\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = ***REMOVED***\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n  ***REMOVED***;\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return ***REMOVED*** installationEntry: inProgressEntry, registrationPromise };\n***REMOVED*** else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) ***REMOVED***\n    return ***REMOVED***\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n  ***REMOVED***;\n***REMOVED*** else ***REMOVED***\n    return ***REMOVED*** installationEntry };\n***REMOVED***\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  try ***REMOVED***\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n***REMOVED*** catch (e) ***REMOVED***\n    if (isServerError(e) && e.customData.serverCode === 409) ***REMOVED***\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n  ***REMOVED*** else ***REMOVED***\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, ***REMOVED***\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n    ***REMOVED***);\n  ***REMOVED***\n    throw e;\n***REMOVED***\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n***REMOVED***\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    // The request timed out or failed in a different call. Try again.\n    const ***REMOVED*** installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) ***REMOVED***\n      return registrationPromise;\n  ***REMOVED*** else ***REMOVED***\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n  ***REMOVED***\n***REMOVED***\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> ***REMOVED***\n  return update(appConfig, oldEntry => ***REMOVED***\n    if (!oldEntry) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n  ***REMOVED***\n    return clearTimedOutRequest(oldEntry);\n***REMOVED***);\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry ***REMOVED***\n  if (hasInstallationRequestTimedOut(entry)) ***REMOVED***\n    return ***REMOVED***\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n  ***REMOVED***;\n***REMOVED***\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean ***REMOVED***\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** CreateInstallationResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport ***REMOVED***\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  ***REMOVED*** appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  ***REMOVED*** fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate(***REMOVED***\n    optional: true\n***REMOVED***);\n  if (heartbeatService) ***REMOVED***\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) ***REMOVED***\n      headers.append('x-firebase-client', heartbeatsHeader);\n  ***REMOVED***\n***REMOVED***\n\n  const body = ***REMOVED***\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n***REMOVED***;\n\n  const request: RequestInit = ***REMOVED***\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n***REMOVED***;\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) ***REMOVED***\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n  ***REMOVED***;\n    return registeredInstallationEntry;\n***REMOVED*** else ***REMOVED***\n    throw await getErrorFromResponse('Create Installation', response);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PACKAGE_VERSION } from '../util/constants';\nimport ***REMOVED***\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport ***REMOVED***\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  ***REMOVED*** appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> ***REMOVED***\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate(***REMOVED***\n    optional: true\n***REMOVED***);\n  if (heartbeatService) ***REMOVED***\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) ***REMOVED***\n      headers.append('x-firebase-client', heartbeatsHeader);\n  ***REMOVED***\n***REMOVED***\n\n  const body = ***REMOVED***\n    installation: ***REMOVED***\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n  ***REMOVED***\n***REMOVED***;\n\n  const request: RequestInit = ***REMOVED***\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n***REMOVED***;\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) ***REMOVED***\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n***REMOVED*** else ***REMOVED***\n    throw await getErrorFromResponse('Generate Auth Token', response);\n***REMOVED***\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  ***REMOVED*** fid }: RegisteredInstallationEntry\n): string ***REMOVED***\n  return `$***REMOVED***getInstallationsEndpoint(appConfig)}/$***REMOVED***fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport ***REMOVED***\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport ***REMOVED***\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport ***REMOVED*** sleep } from '../util/sleep';\nimport ***REMOVED*** remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> ***REMOVED***\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => ***REMOVED***\n    if (!isEntryRegistered(oldEntry)) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n  ***REMOVED***\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) ***REMOVED***\n      // There is a valid token in the DB.\n      return oldEntry;\n  ***REMOVED*** else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n  ***REMOVED*** else ***REMOVED***\n      // No token or token expired.\n      if (!navigator.onLine) ***REMOVED***\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n    ***REMOVED***\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n  ***REMOVED***\n***REMOVED***);\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> ***REMOVED***\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n***REMOVED***\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n***REMOVED*** else ***REMOVED***\n    return authToken;\n***REMOVED***\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  return update(appConfig, oldEntry => ***REMOVED***\n    if (!isEntryRegistered(oldEntry)) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n  ***REMOVED***\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) ***REMOVED***\n      return ***REMOVED***\n        ...oldEntry,\n        authToken: ***REMOVED*** requestStatus: RequestStatus.NOT_STARTED }\n    ***REMOVED***;\n  ***REMOVED***\n\n    return oldEntry;\n***REMOVED***);\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> ***REMOVED***\n  try ***REMOVED***\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n      ...installationEntry,\n      authToken\n  ***REMOVED***;\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n***REMOVED*** catch (e) ***REMOVED***\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) ***REMOVED***\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n  ***REMOVED*** else ***REMOVED***\n      const updatedInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n        ...installationEntry,\n        authToken: ***REMOVED*** requestStatus: RequestStatus.NOT_STARTED }\n    ***REMOVED***;\n      await set(installations.appConfig, updatedInstallationEntry);\n  ***REMOVED***\n    throw e;\n***REMOVED***\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry ***REMOVED***\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean ***REMOVED***\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean ***REMOVED***\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry ***REMOVED***\n  const inProgressAuthToken: InProgressAuthToken = ***REMOVED***\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n***REMOVED***;\n  return ***REMOVED***\n    ...oldEntry,\n    authToken: inProgressAuthToken\n***REMOVED***;\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean ***REMOVED***\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getInstallationEntry } from '../helpers/get-installation-entry';\nimport ***REMOVED*** refreshAuthToken } from '../helpers/refresh-auth-token';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> ***REMOVED***\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const ***REMOVED*** installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) ***REMOVED***\n    registrationPromise.catch(console.error);\n***REMOVED*** else ***REMOVED***\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n***REMOVED***\n\n  return installationEntry.fid;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getInstallationEntry } from '../helpers/get-installation-entry';\nimport ***REMOVED*** refreshAuthToken } from '../helpers/refresh-auth-token';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> ***REMOVED***\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> ***REMOVED***\n  const ***REMOVED*** registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) ***REMOVED***\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** RegisteredInstallationEntry } from '../interfaces/installation-entry';\nimport ***REMOVED***\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\n\nexport async function deleteInstallationRequest(\n  appConfig: AppConfig,\n  installationEntry: RegisteredInstallationEntry\n): Promise<void> ***REMOVED***\n  const endpoint = getDeleteEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n  const request: RequestInit = ***REMOVED***\n    method: 'DELETE',\n    headers\n***REMOVED***;\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (!response.ok) ***REMOVED***\n    throw await getErrorFromResponse('Delete Installation', response);\n***REMOVED***\n}\n\nfunction getDeleteEndpoint(\n  appConfig: AppConfig,\n  ***REMOVED*** fid }: RegisteredInstallationEntry\n): string ***REMOVED***\n  return `$***REMOVED***getInstallationsEndpoint(appConfig)}/$***REMOVED***fid}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** deleteInstallationRequest } from '../functions/delete-installation-request';\nimport ***REMOVED*** remove, update } from '../helpers/idb-manager';\nimport ***REMOVED*** RequestStatus } from '../interfaces/installation-entry';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** Installations } from '../interfaces/public-types';\n\n/**\n * Deletes the Firebase Installation and all associated data.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function deleteInstallations(\n  installations: Installations\n): Promise<void> ***REMOVED***\n  const ***REMOVED*** appConfig } = installations as FirebaseInstallationsImpl;\n\n  const entry = await update(appConfig, oldEntry => ***REMOVED***\n    if (oldEntry && oldEntry.registrationStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n      // Delete the unregistered entry without sending a deleteInstallation request.\n      return undefined;\n  ***REMOVED***\n    return oldEntry;\n***REMOVED***);\n\n  if (entry) ***REMOVED***\n    if (entry.registrationStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n      // Can't delete while trying to register.\n      throw ERROR_FACTORY.create(ErrorCode.DELETE_PENDING_REGISTRATION);\n  ***REMOVED*** else if (entry.registrationStatus === RequestStatus.COMPLETED) ***REMOVED***\n      if (!navigator.onLine) ***REMOVED***\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n    ***REMOVED*** else ***REMOVED***\n        await deleteInstallationRequest(appConfig, entry);\n        await remove(appConfig);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** addCallback, removeCallback } from '../helpers/fid-changed';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** Installations } from '../interfaces/public-types';\n\n/**\n * An user defined callback function that gets called when Installations ID changes.\n *\n * @public\n */\nexport type IdChangeCallbackFn = (installationId: string) => void;\n/**\n * Unsubscribe a callback function previously added via ***REMOVED***@link IdChangeCallbackFn}.\n *\n * @public\n */\nexport type IdChangeUnsubscribeFn = () => void;\n\n/**\n * Sets a new callback that will get called when Installation ID changes.\n * Returns an unsubscribe function that will remove the callback when called.\n * @param installations - The `Installations` instance.\n * @param callback - The callback function that is invoked when FID changes.\n * @returns A function that can be called to unsubscribe.\n *\n * @public\n */\nexport function onIdChange(\n  installations: Installations,\n  callback: IdChangeCallbackFn\n): IdChangeUnsubscribeFn ***REMOVED***\n  const ***REMOVED*** appConfig } = installations as FirebaseInstallationsImpl;\n\n  addCallback(appConfig, callback);\n  return () => ***REMOVED***\n    removeCallback(appConfig, callback);\n***REMOVED***;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport ***REMOVED*** Installations } from '../interfaces/public-types';\n\n/**\n * Returns an instance of ***REMOVED***@link Installations} associated with the given\n * ***REMOVED***@link @firebase/app#FirebaseApp} instance.\n * @param app - The ***REMOVED***@link @firebase/app#FirebaseApp} instance.\n *\n * @public\n */\nexport function getInstallations(app: FirebaseApp = getApp()): Installations ***REMOVED***\n  const installationsImpl = _getProvider(app, 'installations').getImmediate();\n  return installationsImpl;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport ***REMOVED*** FirebaseError } from '@firebase/util';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig ***REMOVED***\n  if (!app || !app.options) ***REMOVED***\n    throw getMissingValueError('App Configuration');\n***REMOVED***\n\n  if (!app.name) ***REMOVED***\n    throw getMissingValueError('App Name');\n***REMOVED***\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) ***REMOVED***\n    if (!app.options[keyName]) ***REMOVED***\n      throw getMissingValueError(keyName);\n  ***REMOVED***\n***REMOVED***\n\n  return ***REMOVED***\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n***REMOVED***;\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError ***REMOVED***\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, ***REMOVED***\n    valueName\n***REMOVED***);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** _registerComponent, _getProvider } from '@firebase/app';\nimport ***REMOVED***\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport ***REMOVED*** getId, getToken } from '../api/index';\nimport ***REMOVED*** _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => ***REMOVED***\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = ***REMOVED***\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n***REMOVED***;\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => ***REMOVED***\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = ***REMOVED***\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n***REMOVED***;\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void ***REMOVED***\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** registerInstallations } from './functions/config';\nimport ***REMOVED*** registerVersion } from '@firebase/app';\nimport ***REMOVED*** name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n"],"names":["FirebaseError","Error","constructor","code","message","customData","super","this","name","Object","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replace","PATTERN","_","key","value","String","replaceTemplate","fullMessage","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","undefined","objectStore","wrap","set","has","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","storeNames","tx","call","sort","transformCachableValue","done","Promise","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","c","Proxy","IDBRequest","request","promise","success","result","then","catch","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","useIndex","isWrite","method","async","storeName","store","index","shift","all","oldTraps","ERROR_FACTORY","isServerError","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","responseExpiresIn","Number","creationTime","Date","now","getErrorFromResponse","requestName","errorData","json","serverCode","serverMessage","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","sleep","ms","setTimeout","VALID_FID_PATTERN","generateFid","fidByteArray","Uint8Array","self","crypto","msCrypto","getRandomValues","fid","array","btoa","fromCharCode","substr","encode","test","_a","getKey","appName","appId","fidChangeCallbacks","fidChanged","callFidChangeCallbacks","channel","getBroadcastChannel","postMessage","closeBroadcastChannel","broadcastFidChange","callbacks","broadcastChannel","BroadcastChannel","onmessage","e","size","close","OBJECT_STORE_NAME","dbPromise","getDbPromise","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","oldValue","put","remove","delete","update","updateFn","getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","clearTimedOutRequest","registrationStatus","updateOrCreateInstallationEntry","entryWithPromise","navigator","onLine","inProgressEntry","registrationTime","registeredInstallationEntry","heartbeatServiceProvider","endpoint","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","body","authVersion","sdkVersion","JSON","stringify","fetch","ok","responseValue","authToken","createInstallationRequest","registerInstallation","waitUntilFidRegistration","triggerRegistrationIfNecessary","entry","updateInstallationRequest","generateAuthTokenRequest","getGenerateAuthTokenEndpoint","installation","refreshAuthToken","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenExpired","isAuthTokenValid","updateAuthTokenRequest","waitUntilAuthTokenRequest","inProgressAuthToken","requestTime","assign","makeAuthTokenRequestInProgressEntry","updatedInstallationEntry","fetchAuthTokenFromServer","getId","installationsImpl","console","getToken","completeInstallationRegistration","deleteInstallationRequest","getDeleteEndpoint","deleteInstallations","onIdChange","callbackSet","Set","add","addCallback","removeCallback","getInstallations","app","getApp","_getProvider","getMissingValueError","valueName","internalFactory","container","getProvider","_registerComponent","options","configKeys","keyName","extractAppConfig","_delete","registerVersion"],"mappings":"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","preExistingComment":"firebase-installations.js.map"}