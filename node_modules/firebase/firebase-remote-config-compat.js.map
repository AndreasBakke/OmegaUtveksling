***REMOVED***"version":3,"file":"firebase-remote-config-compat.js","sources":["../logger/src/logger.ts","../../node_modules/idb/build/index.js","../util/src/environment.ts","../util/src/errors.ts","../util/src/compat.ts","../component/src/component.ts","../../node_modules/idb/build/wrap-idb-value.js","../installations/src/util/constants.ts","../remote-config-compat/src/index.ts","../installations/src/util/errors.ts","../installations/src/functions/common.ts","../installations/src/util/sleep.ts","../installations/src/helpers/generate-fid.ts","../installations/src/helpers/buffer-to-base64-url-safe.ts","../installations/src/util/get-key.ts","../installations/src/helpers/fid-changed.ts","../installations/src/helpers/idb-manager.ts","../installations/src/helpers/get-installation-entry.ts","../installations/src/functions/create-installation-request.ts","../installations/src/functions/generate-auth-token-request.ts","../installations/src/helpers/refresh-auth-token.ts","../installations/src/api/get-token.ts","../installations/src/helpers/extract-app-config.ts","../installations/src/functions/config.ts","../installations/src/api/get-id.ts","../installations/src/index.ts","../remote-config/src/client/remote_config_fetch_client.ts","../remote-config/src/constants.ts","../remote-config/src/errors.ts","../remote-config/src/value.ts","../remote-config/src/api.ts","../remote-config/src/client/caching_client.ts","../remote-config/src/client/rest_client.ts","../remote-config/src/language.ts","../remote-config/src/client/retrying_client.ts","../util/src/exponential_backoff.ts","../remote-config/src/remote_config.ts","../remote-config/src/storage/storage.ts","../remote-config/src/storage/storage_cache.ts","../remote-config/src/api2.ts","../remote-config/src/register.ts","../remote-config-compat/src/remoteConfig.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions ***REMOVED***\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams ***REMOVED***\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel ***REMOVED***\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: ***REMOVED*** [key in LogLevelString]: LogLevel } = ***REMOVED***\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = ***REMOVED***\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => ***REMOVED***\n  if (logType < instance.logLevel) ***REMOVED***\n    return;\n***REMOVED***\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) ***REMOVED***\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[$***REMOVED***now}]  $***REMOVED***instance.name}:`,\n      ...args\n    );\n***REMOVED*** else ***REMOVED***\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: $***REMOVED***logType})`\n    );\n***REMOVED***\n};\n\nexport class Logger ***REMOVED***\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) ***REMOVED***\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n***REMOVED***\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel ***REMOVED***\n    return this._logLevel;\n***REMOVED***\n\n  set logLevel(val: LogLevel) ***REMOVED***\n    if (!(val in LogLevel)) ***REMOVED***\n      throw new TypeError(`Invalid value \"$***REMOVED***val}\" assigned to \\`logLevel\\``);\n  ***REMOVED***\n    this._logLevel = val;\n***REMOVED***\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void ***REMOVED***\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n***REMOVED***\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler ***REMOVED***\n    return this._logHandler;\n***REMOVED***\n  set logHandler(val: LogHandler) ***REMOVED***\n    if (typeof val !== 'function') ***REMOVED***\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n  ***REMOVED***\n    this._logHandler = val;\n***REMOVED***\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null ***REMOVED***\n    return this._userLogHandler;\n***REMOVED***\n  set userLogHandler(val: LogHandler | null) ***REMOVED***\n    this._userLogHandler = val;\n***REMOVED***\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n***REMOVED***\n  log(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n***REMOVED***\n  info(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n***REMOVED***\n  warn(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n***REMOVED***\n  error(...args: unknown[]): void ***REMOVED***\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n***REMOVED***\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void ***REMOVED***\n  instances.forEach(inst => ***REMOVED***\n    inst.setLogLevel(level);\n***REMOVED***);\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void ***REMOVED***\n  for (const instance of instances) ***REMOVED***\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) ***REMOVED***\n      customLogLevel = levelStringToEnum[options.level];\n  ***REMOVED***\n    if (logCallback === null) ***REMOVED***\n      instance.userLogHandler = null;\n  ***REMOVED*** else ***REMOVED***\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => ***REMOVED***\n        const message = args\n          .map(arg => ***REMOVED***\n            if (arg == null) ***REMOVED***\n              return null;\n          ***REMOVED*** else if (typeof arg === 'string') ***REMOVED***\n              return arg;\n          ***REMOVED*** else if (typeof arg === 'number' || typeof arg === 'boolean') ***REMOVED***\n              return arg.toString();\n          ***REMOVED*** else if (arg instanceof Error) ***REMOVED***\n              return arg.message;\n          ***REMOVED*** else ***REMOVED***\n              try ***REMOVED***\n                return JSON.stringify(arg);\n            ***REMOVED*** catch (ignored) ***REMOVED***\n                return null;\n            ***REMOVED***\n          ***REMOVED***\n        ***REMOVED***)\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) ***REMOVED***\n          logCallback(***REMOVED***\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n        ***REMOVED***);\n      ***REMOVED***\n    ***REMOVED***;\n  ***REMOVED***\n***REMOVED***\n}\n","import ***REMOVED*** w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport ***REMOVED*** u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, ***REMOVED*** blocked, upgrade, blocking, terminated } = ***REMOVED***}) ***REMOVED***\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) ***REMOVED***\n        request.addEventListener('upgradeneeded', (event) => ***REMOVED***\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n      ***REMOVED***);\n  ***REMOVED***\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => ***REMOVED***\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n  ***REMOVED***)\n        .catch(() => ***REMOVED*** });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, ***REMOVED*** blocked } = ***REMOVED***}) ***REMOVED***\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) ***REMOVED***\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) ***REMOVED***\n        return;\n  ***REMOVED***\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) ***REMOVED***\n        return;\n  ***REMOVED***\n    const method = async function (storeName, ...args) ***REMOVED***\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n  ***REMOVED***;\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => (***REMOVED***\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport ***REMOVED*** deleteDB, openDB };\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** CONSTANTS } from './constants';\nimport ***REMOVED*** getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string ***REMOVED***\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) ***REMOVED***\n    return navigator['userAgent'];\n***REMOVED*** else ***REMOVED***\n    return '';\n***REMOVED***\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean ***REMOVED***\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean ***REMOVED***\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') ***REMOVED***\n    return true;\n***REMOVED*** else if (forceEnvironment === 'browser') ***REMOVED***\n    return false;\n***REMOVED***\n\n  try ***REMOVED***\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n***REMOVED*** catch (e) ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean ***REMOVED***\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime ***REMOVED***\n  id?: unknown;\n}\ndeclare const chrome: ***REMOVED*** runtime?: BrowserRuntime };\ndeclare const browser: ***REMOVED*** runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean ***REMOVED***\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean ***REMOVED***\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean ***REMOVED***\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean ***REMOVED***\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean ***REMOVED***\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean ***REMOVED***\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean ***REMOVED***\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean ***REMOVED***\n  try ***REMOVED***\n    return typeof indexedDB === 'object';\n***REMOVED*** catch (e) ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> ***REMOVED***\n  return new Promise((resolve, reject) => ***REMOVED***\n    try ***REMOVED***\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => ***REMOVED***\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) ***REMOVED***\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n      ***REMOVED***\n        resolve(true);\n    ***REMOVED***;\n      request.onupgradeneeded = () => ***REMOVED***\n        preExist = false;\n    ***REMOVED***;\n\n      request.onerror = () => ***REMOVED***\n        reject(request.error?.message || '');\n    ***REMOVED***;\n  ***REMOVED*** catch (error) ***REMOVED***\n      reject(error);\n  ***REMOVED***\n***REMOVED***);\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean ***REMOVED***\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) ***REMOVED***\n    return false;\n***REMOVED***\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum ***REMOVED***string}\n *   var Err = ***REMOVED***\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n * ***REMOVED***\n *\n *   let errors: Map<Err, string> = ***REMOVED***\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: ***REMOVED***$file}\",\n * ***REMOVED***;\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, ***REMOVED***'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) ***REMOVED***\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') ***REMOVED***\n *       console.log(\"Could not read file: \" + e['file']);\n *   ***REMOVED***\n * ***REMOVED***\n */\n\nexport type ErrorMap<ErrorCode extends string> = ***REMOVED***\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike ***REMOVED***\n  toString(): string;\n}\n\nexport interface ErrorData ***REMOVED***\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error ***REMOVED***\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) ***REMOVED***\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) ***REMOVED***\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n  ***REMOVED***\n***REMOVED***\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends ***REMOVED*** readonly [K in ErrorCode]?: ErrorData } = ***REMOVED***}\n> ***REMOVED***\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) ***REMOVED***}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError ***REMOVED***\n    const customData = (data[0] as ErrorData) || ***REMOVED***};\n    const fullCode = `$***REMOVED***this.service}/$***REMOVED***code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `$***REMOVED***this.serviceName}: $***REMOVED***message} ($***REMOVED***fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n***REMOVED***\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string ***REMOVED***\n  return template.replace(PATTERN, (_, key) => ***REMOVED***\n    const value = data[key];\n    return value != null ? String(value) : `<$***REMOVED***key}?>`;\n***REMOVED***);\n}\n\nconst PATTERN = /\\***REMOVED***\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> ***REMOVED***\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService ***REMOVED***\n  if (service && (service as Compat<ExpService>)._delegate) ***REMOVED***\n    return (service as Compat<ExpService>)._delegate;\n***REMOVED*** else ***REMOVED***\n    return service as ExpService;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport ***REMOVED***\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> ***REMOVED***\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = ***REMOVED***};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) ***REMOVED***}\n\n  setInstantiationMode(mode: InstantiationMode): this ***REMOVED***\n    this.instantiationMode = mode;\n    return this;\n***REMOVED***\n\n  setMultipleInstances(multipleInstances: boolean): this ***REMOVED***\n    this.multipleInstances = multipleInstances;\n    return this;\n***REMOVED***\n\n  setServiceProps(props: Dictionary): this ***REMOVED***\n    this.serviceProps = props;\n    return this;\n***REMOVED***\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this ***REMOVED***\n    this.onInstanceCreated = callback;\n    return this;\n***REMOVED***\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() ***REMOVED***\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() ***REMOVED***\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) ***REMOVED***\n    const promise = new Promise((resolve, reject) => ***REMOVED***\n        const unlisten = () => ***REMOVED***\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n      ***REMOVED***;\n        const success = () => ***REMOVED***\n            resolve(wrap(request.result));\n            unlisten();\n      ***REMOVED***;\n        const error = () => ***REMOVED***\n            reject(request.error);\n            unlisten();\n      ***REMOVED***;\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n  ***REMOVED***);\n    promise\n        .then((value) => ***REMOVED***\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) ***REMOVED***\n            cursorRequestMap.set(value, request);\n      ***REMOVED***\n        // Catching to avoid \"Uncaught Promise exceptions\"\n  ***REMOVED***)\n        .catch(() => ***REMOVED*** });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) ***REMOVED***\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => ***REMOVED***\n        const unlisten = () => ***REMOVED***\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n      ***REMOVED***;\n        const complete = () => ***REMOVED***\n            resolve();\n            unlisten();\n      ***REMOVED***;\n        const error = () => ***REMOVED***\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n      ***REMOVED***;\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n  ***REMOVED***);\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = ***REMOVED***\n    get(target, prop, receiver) ***REMOVED***\n        if (target instanceof IDBTransaction) ***REMOVED***\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') ***REMOVED***\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n          ***REMOVED***\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') ***REMOVED***\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n          ***REMOVED***\n      ***REMOVED***\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n  ***REMOVED***,\n    set(target, prop, value) ***REMOVED***\n        target[prop] = value;\n        return true;\n  ***REMOVED***,\n    has(target, prop) ***REMOVED***\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) ***REMOVED***\n            return true;\n      ***REMOVED***\n        return prop in target;\n  ***REMOVED***,\n};\nfunction replaceTraps(callback) ***REMOVED***\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) ***REMOVED***\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) ***REMOVED***\n        return function (storeNames, ...args) ***REMOVED***\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n      ***REMOVED***;\n  ***REMOVED***\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) ***REMOVED***\n        return function (...args) ***REMOVED***\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n      ***REMOVED***;\n  ***REMOVED***\n    return function (...args) ***REMOVED***\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n  ***REMOVED***;\n}\nfunction transformCachableValue(value) ***REMOVED***\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) ***REMOVED***\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) ***REMOVED***\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n  ***REMOVED***\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport ***REMOVED*** reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:$***REMOVED***version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, ***REMOVED*** _FirebaseNamespace } from '@firebase/app-compat';\nimport ***REMOVED***\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport ***REMOVED*** RemoteConfigCompatImpl, isSupported } from './remoteConfig';\nimport ***REMOVED*** name as packageName, version } from '../package.json';\nimport ***REMOVED*** RemoteConfig as RemoteConfigCompat } from '@firebase/remote-config-types';\n\nfunction registerRemoteConfigCompat(\n  firebaseInstance: _FirebaseNamespace\n): void ***REMOVED***\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig-compat',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    )\n      .setMultipleInstances(true)\n      .setServiceProps(***REMOVED*** isSupported })\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n}\n\nfunction remoteConfigFactory(\n  container: ComponentContainer,\n  ***REMOVED*** instanceIdentifier: namespace }: InstanceFactoryOptions\n): RemoteConfigCompatImpl ***REMOVED***\n  const app = container.getProvider('app-compat').getImmediate();\n  // The following call will always succeed because rc `import ***REMOVED***...} from '@firebase/remote-config'`\n  const remoteConfig = container.getProvider('remote-config').getImmediate(***REMOVED***\n    identifier: namespace\n***REMOVED***);\n\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\n\nregisterRemoteConfigCompat(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-compat' ***REMOVED***\n  interface FirebaseNamespace ***REMOVED***\n    remoteConfig: ***REMOVED***\n      (app?: FirebaseApp): RemoteConfigCompat;\n  ***REMOVED***;\n***REMOVED***\n  interface FirebaseApp ***REMOVED***\n    remoteConfig(): RemoteConfigCompat;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ErrorFactory, FirebaseError } from '@firebase/util';\nimport ***REMOVED*** SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode ***REMOVED***\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: ***REMOVED*** readonly [key in ErrorCode]: string } = ***REMOVED***\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"***REMOVED***$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '***REMOVED***$requestName} request failed with error \"***REMOVED***$serverCode} ***REMOVED***$serverStatus}: ***REMOVED***$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams ***REMOVED***\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: ***REMOVED***\n    valueName: string;\n***REMOVED***;\n  [ErrorCode.REQUEST_FAILED]: ***REMOVED***\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n***REMOVED*** & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData ***REMOVED***\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & ***REMOVED*** customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError ***REMOVED***\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseError } from '@firebase/util';\nimport ***REMOVED*** GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED***\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint(***REMOVED*** projectId }: AppConfig): string ***REMOVED***\n  return `$***REMOVED***INSTALLATIONS_API_URL}/projects/$***REMOVED***projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken ***REMOVED***\n  return ***REMOVED***\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n***REMOVED***;\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> ***REMOVED***\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, ***REMOVED***\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n***REMOVED***);\n}\n\nexport function getHeaders(***REMOVED*** apiKey }: AppConfig): Headers ***REMOVED***\n  return new Headers(***REMOVED***\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n***REMOVED***);\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  ***REMOVED*** refreshToken }: RegisteredInstallationEntry\n): Headers ***REMOVED***\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse ***REMOVED***\n  error: ***REMOVED***\n    code: number;\n    message: string;\n    status: string;\n***REMOVED***;\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> ***REMOVED***\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) ***REMOVED***\n    // Internal Server Error. Retry request.\n    return fn();\n***REMOVED***\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number ***REMOVED***\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string ***REMOVED***\n  return `$***REMOVED***INTERNAL_AUTH_VERSION} $***REMOVED***refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> ***REMOVED***\n  return new Promise<void>(resolve => ***REMOVED***\n    setTimeout(resolve, ms);\n***REMOVED***);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]***REMOVED***21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string ***REMOVED***\n  try ***REMOVED***\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as ***REMOVED*** msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n***REMOVED*** catch ***REMOVED***\n    // FID generation errored\n    return INVALID_FID;\n***REMOVED***\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string ***REMOVED***\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string ***REMOVED***\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string ***REMOVED***\n  return `$***REMOVED***appConfig.appName}!$***REMOVED***appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getKey } from '../util/get-key';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void ***REMOVED***\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void ***REMOVED***\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) ***REMOVED***\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n***REMOVED***\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void ***REMOVED***\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) ***REMOVED***\n    return;\n***REMOVED***\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) ***REMOVED***\n    fidChangeCallbacks.delete(key);\n***REMOVED***\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void ***REMOVED***\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) ***REMOVED***\n    return;\n***REMOVED***\n\n  for (const callback of callbacks) ***REMOVED***\n    callback(fid);\n***REMOVED***\n}\n\nfunction broadcastFidChange(key: string, fid: string): void ***REMOVED***\n  const channel = getBroadcastChannel();\n  if (channel) ***REMOVED***\n    channel.postMessage(***REMOVED*** key, fid });\n***REMOVED***\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null ***REMOVED***\n  if (!broadcastChannel && 'BroadcastChannel' in self) ***REMOVED***\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => ***REMOVED***\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n  ***REMOVED***;\n***REMOVED***\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void ***REMOVED***\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) ***REMOVED***\n    broadcastChannel.close();\n    broadcastChannel = null;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** DBSchema, IDBPDatabase, openDB } from 'idb';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** InstallationEntry } from '../interfaces/installation-entry';\nimport ***REMOVED*** getKey } from '../util/get-key';\nimport ***REMOVED*** fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema ***REMOVED***\n  'firebase-installations-store': ***REMOVED***\n    key: string;\n    value: InstallationEntry | undefined;\n***REMOVED***;\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> ***REMOVED***\n  if (!dbPromise) ***REMOVED***\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, ***REMOVED***\n      upgrade: (db, oldVersion) => ***REMOVED***\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) ***REMOVED***\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) ***REMOVED***\n    fidChanged(appConfig, value.fid);\n***REMOVED***\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) ***REMOVED***\n    await store.delete(key);\n***REMOVED*** else ***REMOVED***\n    await store.put(newValue, key);\n***REMOVED***\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) ***REMOVED***\n    fidChanged(appConfig, newValue.fid);\n***REMOVED***\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> ***REMOVED***\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** createInstallationRequest } from '../functions/create-installation-request';\nimport ***REMOVED***\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport ***REMOVED***\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PENDING_TIMEOUT_MS } from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport ***REMOVED*** sleep } from '../util/sleep';\nimport ***REMOVED*** generateFid, INVALID_FID } from './generate-fid';\nimport ***REMOVED*** remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise ***REMOVED***\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> ***REMOVED***\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => ***REMOVED***\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n***REMOVED***);\n\n  if (installationEntry.fid === INVALID_FID) ***REMOVED***\n    // FID generation failed. Waiting for the FID from the server.\n    return ***REMOVED*** installationEntry: await registrationPromise! };\n***REMOVED***\n\n  return ***REMOVED***\n    installationEntry,\n    registrationPromise\n***REMOVED***;\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry ***REMOVED***\n  const entry: InstallationEntry = oldEntry || ***REMOVED***\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n***REMOVED***;\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise ***REMOVED***\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    if (!navigator.onLine) ***REMOVED***\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return ***REMOVED***\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n    ***REMOVED***;\n  ***REMOVED***\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = ***REMOVED***\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n  ***REMOVED***;\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return ***REMOVED*** installationEntry: inProgressEntry, registrationPromise };\n***REMOVED*** else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) ***REMOVED***\n    return ***REMOVED***\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n  ***REMOVED***;\n***REMOVED*** else ***REMOVED***\n    return ***REMOVED*** installationEntry };\n***REMOVED***\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  try ***REMOVED***\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n***REMOVED*** catch (e) ***REMOVED***\n    if (isServerError(e) && e.customData.serverCode === 409) ***REMOVED***\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n  ***REMOVED*** else ***REMOVED***\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, ***REMOVED***\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n    ***REMOVED***);\n  ***REMOVED***\n    throw e;\n***REMOVED***\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n***REMOVED***\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    // The request timed out or failed in a different call. Try again.\n    const ***REMOVED*** installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) ***REMOVED***\n      return registrationPromise;\n  ***REMOVED*** else ***REMOVED***\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n  ***REMOVED***\n***REMOVED***\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> ***REMOVED***\n  return update(appConfig, oldEntry => ***REMOVED***\n    if (!oldEntry) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n  ***REMOVED***\n    return clearTimedOutRequest(oldEntry);\n***REMOVED***);\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry ***REMOVED***\n  if (hasInstallationRequestTimedOut(entry)) ***REMOVED***\n    return ***REMOVED***\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n  ***REMOVED***;\n***REMOVED***\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean ***REMOVED***\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** CreateInstallationResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport ***REMOVED***\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  ***REMOVED*** appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  ***REMOVED*** fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate(***REMOVED***\n    optional: true\n***REMOVED***);\n  if (heartbeatService) ***REMOVED***\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) ***REMOVED***\n      headers.append('x-firebase-client', heartbeatsHeader);\n  ***REMOVED***\n***REMOVED***\n\n  const body = ***REMOVED***\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n***REMOVED***;\n\n  const request: RequestInit = ***REMOVED***\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n***REMOVED***;\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) ***REMOVED***\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n  ***REMOVED***;\n    return registeredInstallationEntry;\n***REMOVED*** else ***REMOVED***\n    throw await getErrorFromResponse('Create Installation', response);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PACKAGE_VERSION } from '../util/constants';\nimport ***REMOVED***\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport ***REMOVED***\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  ***REMOVED*** appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> ***REMOVED***\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate(***REMOVED***\n    optional: true\n***REMOVED***);\n  if (heartbeatService) ***REMOVED***\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) ***REMOVED***\n      headers.append('x-firebase-client', heartbeatsHeader);\n  ***REMOVED***\n***REMOVED***\n\n  const body = ***REMOVED***\n    installation: ***REMOVED***\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n  ***REMOVED***\n***REMOVED***;\n\n  const request: RequestInit = ***REMOVED***\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n***REMOVED***;\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) ***REMOVED***\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n***REMOVED*** else ***REMOVED***\n    throw await getErrorFromResponse('Generate Auth Token', response);\n***REMOVED***\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  ***REMOVED*** fid }: RegisteredInstallationEntry\n): string ***REMOVED***\n  return `$***REMOVED***getInstallationsEndpoint(appConfig)}/$***REMOVED***fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport ***REMOVED***\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport ***REMOVED***\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport ***REMOVED*** sleep } from '../util/sleep';\nimport ***REMOVED*** remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> ***REMOVED***\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => ***REMOVED***\n    if (!isEntryRegistered(oldEntry)) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n  ***REMOVED***\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) ***REMOVED***\n      // There is a valid token in the DB.\n      return oldEntry;\n  ***REMOVED*** else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n  ***REMOVED*** else ***REMOVED***\n      // No token or token expired.\n      if (!navigator.onLine) ***REMOVED***\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n    ***REMOVED***\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n  ***REMOVED***\n***REMOVED***);\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> ***REMOVED***\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n***REMOVED***\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n***REMOVED*** else ***REMOVED***\n    return authToken;\n***REMOVED***\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  return update(appConfig, oldEntry => ***REMOVED***\n    if (!isEntryRegistered(oldEntry)) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n  ***REMOVED***\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) ***REMOVED***\n      return ***REMOVED***\n        ...oldEntry,\n        authToken: ***REMOVED*** requestStatus: RequestStatus.NOT_STARTED }\n    ***REMOVED***;\n  ***REMOVED***\n\n    return oldEntry;\n***REMOVED***);\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> ***REMOVED***\n  try ***REMOVED***\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n      ...installationEntry,\n      authToken\n  ***REMOVED***;\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n***REMOVED*** catch (e) ***REMOVED***\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) ***REMOVED***\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n  ***REMOVED*** else ***REMOVED***\n      const updatedInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n        ...installationEntry,\n        authToken: ***REMOVED*** requestStatus: RequestStatus.NOT_STARTED }\n    ***REMOVED***;\n      await set(installations.appConfig, updatedInstallationEntry);\n  ***REMOVED***\n    throw e;\n***REMOVED***\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry ***REMOVED***\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean ***REMOVED***\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean ***REMOVED***\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry ***REMOVED***\n  const inProgressAuthToken: InProgressAuthToken = ***REMOVED***\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n***REMOVED***;\n  return ***REMOVED***\n    ...oldEntry,\n    authToken: inProgressAuthToken\n***REMOVED***;\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean ***REMOVED***\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getInstallationEntry } from '../helpers/get-installation-entry';\nimport ***REMOVED*** refreshAuthToken } from '../helpers/refresh-auth-token';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> ***REMOVED***\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> ***REMOVED***\n  const ***REMOVED*** registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) ***REMOVED***\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport ***REMOVED*** FirebaseError } from '@firebase/util';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig ***REMOVED***\n  if (!app || !app.options) ***REMOVED***\n    throw getMissingValueError('App Configuration');\n***REMOVED***\n\n  if (!app.name) ***REMOVED***\n    throw getMissingValueError('App Name');\n***REMOVED***\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) ***REMOVED***\n    if (!app.options[keyName]) ***REMOVED***\n      throw getMissingValueError(keyName);\n  ***REMOVED***\n***REMOVED***\n\n  return ***REMOVED***\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n***REMOVED***;\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError ***REMOVED***\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, ***REMOVED***\n    valueName\n***REMOVED***);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** _registerComponent, _getProvider } from '@firebase/app';\nimport ***REMOVED***\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport ***REMOVED*** getId, getToken } from '../api/index';\nimport ***REMOVED*** _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => ***REMOVED***\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = ***REMOVED***\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n***REMOVED***;\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => ***REMOVED***\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = ***REMOVED***\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n***REMOVED***;\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void ***REMOVED***\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getInstallationEntry } from '../helpers/get-installation-entry';\nimport ***REMOVED*** refreshAuthToken } from '../helpers/refresh-auth-token';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> ***REMOVED***\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const ***REMOVED*** installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) ***REMOVED***\n    registrationPromise.catch(console.error);\n***REMOVED*** else ***REMOVED***\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n***REMOVED***\n\n  return installationEntry.fid;\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** registerInstallations } from './functions/config';\nimport ***REMOVED*** registerVersion } from '@firebase/app';\nimport ***REMOVED*** name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native ***REMOVED***@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: ***REMOVED***@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient ***REMOVED***\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject ***REMOVED***\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal ***REMOVED***\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void ***REMOVED***\n    this.listeners.push(listener);\n***REMOVED***\n  abort(): void ***REMOVED***\n    this.listeners.forEach(listener => listener());\n***REMOVED***\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native ***REMOVED***@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest ***REMOVED***\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = ***REMOVED*** 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = ***REMOVED*** 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native ***REMOVED***@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse ***REMOVED***\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>***REMOVED***@link RemoteConfigClient} is modeled after the native ***REMOVED***@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const RC_COMPONENT_NAME = 'remote-config';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode ***REMOVED***\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status',\n  INDEXED_DB_UNAVAILABLE = 'indexed-db-unavailable'\n}\n\nconst ERROR_DESCRIPTION_MAP: ***REMOVED*** readonly [key in ErrorCode]: string } = ***REMOVED***\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: ***REMOVED***$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: ***REMOVED***$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: ***REMOVED***$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: ***REMOVED***$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: ***REMOVED***$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: ***REMOVED***$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: ***REMOVED***$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: ***REMOVED***$httpStatus}.',\n  [ErrorCode.INDEXED_DB_UNAVAILABLE]:\n    'Indexed DB is not supported by current browser'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams ***REMOVED***\n  [ErrorCode.STORAGE_OPEN]: ***REMOVED*** originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: ***REMOVED*** originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: ***REMOVED*** originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: ***REMOVED*** originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: ***REMOVED*** originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: ***REMOVED*** throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: ***REMOVED*** originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: ***REMOVED*** httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean ***REMOVED***\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType ***REMOVED***\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) ***REMOVED***}\n\n  asString(): string ***REMOVED***\n    return this._value;\n***REMOVED***\n\n  asBoolean(): boolean ***REMOVED***\n    if (this._source === 'static') ***REMOVED***\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n  ***REMOVED***\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n***REMOVED***\n\n  asNumber(): number ***REMOVED***\n    if (this._source === 'static') ***REMOVED***\n      return DEFAULT_VALUE_FOR_NUMBER;\n  ***REMOVED***\n    let num = Number(this._value);\n    if (isNaN(num)) ***REMOVED***\n      num = DEFAULT_VALUE_FOR_NUMBER;\n  ***REMOVED***\n    return num;\n***REMOVED***\n\n  getSource(): ValueSource ***REMOVED***\n    return this._source;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport ***REMOVED***\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig,\n  Value\n} from './public_types';\nimport ***REMOVED*** RemoteConfigAbortSignal } from './client/remote_config_fetch_client';\nimport ***REMOVED*** RC_COMPONENT_NAME } from './constants';\nimport ***REMOVED*** ErrorCode, hasErrorCode } from './errors';\nimport ***REMOVED*** RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport ***REMOVED*** Value as ValueImpl } from './value';\nimport ***REMOVED*** LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport ***REMOVED*** getModularInstance } from '@firebase/util';\n\n/**\n *\n * @param app - The ***REMOVED***@link @firebase/app#FirebaseApp} instance.\n * @returns A ***REMOVED***@link RemoteConfig} instance.\n *\n * @public\n */\nexport function getRemoteConfig(app: FirebaseApp = getApp()): RemoteConfig ***REMOVED***\n  app = getModularInstance(app);\n  const rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n  return rcProvider.getImmediate();\n}\n\n/**\n * Makes the last fetched config available to the getters.\n * @param remoteConfig - The ***REMOVED***@link RemoteConfig} instance.\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function activate(remoteConfig: RemoteConfig): Promise<boolean> ***REMOVED***\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n    rc._storage.getLastSuccessfulFetchResponse(),\n    rc._storage.getActiveConfigEtag()\n  ]);\n  if (\n    !lastSuccessfulFetchResponse ||\n    !lastSuccessfulFetchResponse.config ||\n    !lastSuccessfulFetchResponse.eTag ||\n    lastSuccessfulFetchResponse.eTag === activeConfigEtag\n  ) ***REMOVED***\n    // Either there is no successful fetched config, or is the same as current active\n    // config.\n    return false;\n***REMOVED***\n  await Promise.all([\n    rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n    rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n  ]);\n  return true;\n}\n\n/**\n * Ensures the last activated config are available to the getters.\n * @param remoteConfig - The ***REMOVED***@link RemoteConfig} instance.\n *\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\n * @public\n */\nexport function ensureInitialized(remoteConfig: RemoteConfig): Promise<void> ***REMOVED***\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._initializePromise) ***REMOVED***\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(() => ***REMOVED***\n      rc._isInitializationComplete = true;\n  ***REMOVED***);\n***REMOVED***\n  return rc._initializePromise;\n}\n\n/**\n * Fetches and caches configuration from the Remote Config service.\n * @param remoteConfig - The ***REMOVED***@link RemoteConfig} instance.\n * @public\n */\nexport async function fetchConfig(remoteConfig: RemoteConfig): Promise<void> ***REMOVED***\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  // Aborts the request after the given timeout, causing the fetch call to\n  // reject with an `AbortError`.\n  //\n  // <p>Aborting after the request completes is a no-op, so we don't need a\n  // corresponding `clearTimeout`.\n  //\n  // Locating abort logic here because:\n  // * it uses a developer setting (timeout)\n  // * it applies to all retries (like curl's max-time arg)\n  // * it is consistent with the Fetch API's signal input\n  const abortSignal = new RemoteConfigAbortSignal();\n\n  setTimeout(async () => ***REMOVED***\n    // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n    abortSignal.abort();\n***REMOVED***, rc.settings.fetchTimeoutMillis);\n\n  // Catches *all* errors thrown by client so status can be set consistently.\n  try ***REMOVED***\n    await rc._client.fetch(***REMOVED***\n      cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n      signal: abortSignal\n  ***REMOVED***);\n\n    await rc._storageCache.setLastFetchStatus('success');\n***REMOVED*** catch (e) ***REMOVED***\n    const lastFetchStatus = hasErrorCode(e as Error, ErrorCode.FETCH_THROTTLE)\n      ? 'throttle'\n      : 'failure';\n    await rc._storageCache.setLastFetchStatus(lastFetchStatus);\n    throw e;\n***REMOVED***\n}\n\n/**\n * Gets all config.\n *\n * @param remoteConfig - The ***REMOVED***@link RemoteConfig} instance.\n * @returns All config.\n *\n * @public\n */\nexport function getAll(remoteConfig: RemoteConfig): Record<string, Value> ***REMOVED***\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  return getAllKeys(\n    rc._storageCache.getActiveConfig(),\n    rc.defaultConfig\n  ).reduce((allConfigs, key) => ***REMOVED***\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n***REMOVED***, ***REMOVED***} as Record<string, Value>);\n}\n\n/**\n * Gets the value for the given key as a boolean.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\n *\n * @param remoteConfig - The ***REMOVED***@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a boolean.\n * @public\n */\nexport function getBoolean(remoteConfig: RemoteConfig, key: string): boolean ***REMOVED***\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n\n/**\n * Gets the value for the given key as a number.\n *\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\n *\n * @param remoteConfig - The ***REMOVED***@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a number.\n *\n * @public\n */\nexport function getNumber(remoteConfig: RemoteConfig, key: string): number ***REMOVED***\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n\n/**\n * Gets the value for the given key as a string.\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\n *\n * @param remoteConfig - The ***REMOVED***@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key as a string.\n *\n * @public\n */\nexport function getString(remoteConfig: RemoteConfig, key: string): string ***REMOVED***\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n\n/**\n * Gets the ***REMOVED***@link Value} for the given key.\n *\n * @param remoteConfig - The ***REMOVED***@link RemoteConfig} instance.\n * @param key - The name of the parameter.\n *\n * @returns The value for the given key.\n *\n * @public\n */\nexport function getValue(remoteConfig: RemoteConfig, key: string): Value ***REMOVED***\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  if (!rc._isInitializationComplete) ***REMOVED***\n    rc._logger.debug(\n      `A value was requested for key \"$***REMOVED***key}\" before SDK initialization completed.` +\n        ' Await on ensureInitialized if the intent was to get a previously activated value.'\n    );\n***REMOVED***\n  const activeConfig = rc._storageCache.getActiveConfig();\n  if (activeConfig && activeConfig[key] !== undefined) ***REMOVED***\n    return new ValueImpl('remote', activeConfig[key]);\n***REMOVED*** else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) ***REMOVED***\n    return new ValueImpl('default', String(rc.defaultConfig[key]));\n***REMOVED***\n  rc._logger.debug(\n    `Returning static value for key \"$***REMOVED***key}\".` +\n      ' Define a default or remote value if this is unintentional.'\n  );\n  return new ValueImpl('static');\n}\n\n/**\n * Defines the log level to use.\n *\n * @param remoteConfig - The ***REMOVED***@link RemoteConfig} instance.\n * @param logLevel - The log level to set.\n *\n * @public\n */\nexport function setLogLevel(\n  remoteConfig: RemoteConfig,\n  logLevel: RemoteConfigLogLevel\n): void ***REMOVED***\n  const rc = getModularInstance(remoteConfig) as RemoteConfigImpl;\n  switch (logLevel) ***REMOVED***\n    case 'debug':\n      rc._logger.logLevel = FirebaseLogLevel.DEBUG;\n      break;\n    case 'silent':\n      rc._logger.logLevel = FirebaseLogLevel.SILENT;\n      break;\n    default:\n      rc._logger.logLevel = FirebaseLogLevel.ERROR;\n***REMOVED***\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: ***REMOVED***} = ***REMOVED***}, obj2: ***REMOVED***} = ***REMOVED***}): string[] ***REMOVED***\n  return Object.keys(***REMOVED*** ...obj1, ...obj2 });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** StorageCache } from '../storage/storage_cache';\nimport ***REMOVED***\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport ***REMOVED*** Storage } from '../storage/storage';\nimport ***REMOVED*** Logger } from '@firebase/logger';\n\n/**\n * Implements the ***REMOVED***@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient ***REMOVED***\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) ***REMOVED***}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * ***REMOVED***@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = ***REMOVED*** 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean ***REMOVED***\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) ***REMOVED***\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n  ***REMOVED***\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: $***REMOVED***cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): $***REMOVED***cacheMaxAgeMillis}.` +\n        ` Is cache hit: $***REMOVED***isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n***REMOVED***\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> ***REMOVED***\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse] =\n      await Promise.all([\n        this.storage.getLastSuccessfulFetchTimestampMillis(),\n        this.storage.getLastSuccessfulFetchResponse()\n      ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) ***REMOVED***\n      return lastSuccessfulFetchResponse;\n  ***REMOVED***\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) ***REMOVED***\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n  ***REMOVED***\n\n    await Promise.all(storageOperations);\n\n    return response;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../errors';\nimport ***REMOVED*** getUserLanguage } from '../language';\nimport ***REMOVED*** _FirebaseInstallationsInternal } from '@firebase/installations';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody ***REMOVED***\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient ***REMOVED***\n  constructor(\n    private readonly firebaseInstallations: _FirebaseInstallationsInternal,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) ***REMOVED***}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a ***REMOVED***@link ErrorCode.FETCH_NETWORK} error if ***REMOVED***@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a ***REMOVED***@link ErrorCode.FETCH_PARSE} error if ***REMOVED***@link Response#json} can't parse the\n   * fetch response.\n   * @throws a ***REMOVED***@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> ***REMOVED***\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `$***REMOVED***urlBase}/v1/projects/$***REMOVED***this.projectId}/namespaces/$***REMOVED***this.namespace}:fetch?key=$***REMOVED***this.apiKey}`;\n\n    const headers = ***REMOVED***\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n  ***REMOVED***;\n\n    const requestBody: FetchRequestBody = ***REMOVED***\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n  ***REMOVED***;\n\n    const options = ***REMOVED***\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n  ***REMOVED***;\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => ***REMOVED***\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => ***REMOVED***\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n    ***REMOVED***);\n  ***REMOVED***);\n\n    let response;\n    try ***REMOVED***\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n  ***REMOVED*** catch (originalError) ***REMOVED***\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if ((originalError as Error)?.name === 'AbortError') ***REMOVED***\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n    ***REMOVED***\n      throw ERROR_FACTORY.create(errorCode, ***REMOVED***\n        originalErrorMessage: (originalError as Error)?.message\n    ***REMOVED***);\n  ***REMOVED***\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) ***REMOVED***\n      let responseBody;\n      try ***REMOVED***\n        responseBody = await response.json();\n    ***REMOVED*** catch (originalError) ***REMOVED***\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, ***REMOVED***\n          originalErrorMessage: (originalError as Error)?.message\n      ***REMOVED***);\n    ***REMOVED***\n      config = responseBody['entries'];\n      state = responseBody['state'];\n  ***REMOVED***\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') ***REMOVED***\n      status = 500;\n  ***REMOVED*** else if (state === 'NO_CHANGE') ***REMOVED***\n      status = 304;\n  ***REMOVED*** else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') ***REMOVED***\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = ***REMOVED***};\n  ***REMOVED***\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, ***REMOVED***\n        httpStatus: status\n    ***REMOVED***);\n  ***REMOVED***\n\n    return ***REMOVED*** status, eTag: responseEtag, config };\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only ***REMOVED***@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string ***REMOVED***\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport ***REMOVED*** ThrottleMetadata, Storage } from '../storage/storage';\nimport ***REMOVED*** ErrorCode, ERROR_FACTORY } from '../errors';\nimport ***REMOVED*** FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> ***REMOVED***\n  return new Promise((resolve, reject) => ***REMOVED***\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => ***REMOVED***\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, ***REMOVED***\n          throttleEndTimeMillis\n      ***REMOVED***)\n      );\n  ***REMOVED***);\n***REMOVED***);\n}\n\ntype RetriableError = FirebaseError & ***REMOVED*** customData: ***REMOVED*** httpStatus: string } };\n/**\n * Returns true if the ***REMOVED***@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError ***REMOVED***\n  if (!(e instanceof FirebaseError) || !e.customData) ***REMOVED***\n    return false;\n***REMOVED***\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient ***REMOVED***\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) ***REMOVED***}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> ***REMOVED***\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || ***REMOVED***\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n  ***REMOVED***;\n\n    return this.attemptFetch(request, throttleMetadata);\n***REMOVED***\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    ***REMOVED*** throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> ***REMOVED***\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try ***REMOVED***\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n  ***REMOVED*** catch (e) ***REMOVED***\n      if (!isRetriableError(e as Error)) ***REMOVED***\n        throw e;\n    ***REMOVED***\n\n      // Increments backoff state.\n      const throttleMetadata = ***REMOVED***\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n    ***REMOVED***;\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n  ***REMOVED***\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The amount of milliseconds to exponentially increase.\n */\nconst DEFAULT_INTERVAL_MILLIS = 1000;\n\n/**\n * The factor to backoff by.\n * Should be a number greater than 1.\n */\nconst DEFAULT_BACKOFF_FACTOR = 2;\n\n/**\n * The maximum milliseconds to increase to.\n *\n * <p>Visible for testing\n */\nexport const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n\n/**\n * The percentage of backoff time to randomize by.\n * See\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\n * for context.\n *\n * <p>Visible for testing\n */\nexport const RANDOM_FACTOR = 0.5;\n\n/**\n * Based on the backoff method from\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\n */\nexport function calculateBackoffMillis(\n  backoffCount: number,\n  intervalMillis: number = DEFAULT_INTERVAL_MILLIS,\n  backoffFactor: number = DEFAULT_BACKOFF_FACTOR\n): number ***REMOVED***\n  // Calculates an exponentially increasing value.\n  // Deviation: calculates value from count and a constant interval, so we only need to save value\n  // and count to restore state.\n  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n\n  // A random \"fuzz\" to avoid waves of retries.\n  // Deviation: randomFactor is required.\n  const randomWait = Math.round(\n    // A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    RANDOM_FACTOR *\n      currBaseValue *\n      // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n      // if we add or subtract.\n      (Math.random() - 0.5) *\n      2\n  );\n\n  // Limits backoff to max to avoid effectively permanent backoff.\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseApp } from '@firebase/app';\nimport ***REMOVED***\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  RemoteConfigSettings\n} from './public_types';\nimport ***REMOVED*** StorageCache } from './storage/storage_cache';\nimport ***REMOVED*** RemoteConfigFetchClient } from './client/remote_config_fetch_client';\nimport ***REMOVED*** Storage } from './storage/storage';\nimport ***REMOVED*** Logger } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See ***REMOVED***@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType ***REMOVED***\n  /**\n   * Tracks completion of initialization promise.\n   * @internal\n   */\n  _isInitializationComplete = false;\n\n  /**\n   * De-duplicates initialization calls.\n   * @internal\n   */\n  _initializePromise?: Promise<void>;\n\n  settings: RemoteConfigSettings = ***REMOVED***\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n***REMOVED***;\n\n  defaultConfig: ***REMOVED*** [key: string]: string | number | boolean } = ***REMOVED***};\n\n  get fetchTimeMillis(): number ***REMOVED***\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n***REMOVED***\n\n  get lastFetchStatus(): FetchStatus ***REMOVED***\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n***REMOVED***\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    /**\n     * @internal\n     */\n    readonly _client: RemoteConfigFetchClient,\n    /**\n     * @internal\n     */\n    readonly _storageCache: StorageCache,\n    /**\n     * @internal\n     */\n    readonly _storage: Storage,\n    /**\n     * @internal\n     */\n    readonly _logger: Logger\n  ) ***REMOVED***}\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FetchStatus } from '@firebase/remote-config-types';\nimport ***REMOVED***\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../errors';\nimport ***REMOVED*** FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a ***REMOVED***@link IDBRequest} to a ***REMOVED***@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError ***REMOVED***\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, ***REMOVED***\n    originalErrorMessage: originalError && (originalError as Error)?.message\n***REMOVED***);\n}\n\n/**\n * A general-purpose store keyed by app + namespace + ***REMOVED***@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See ***REMOVED***@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata ***REMOVED***\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by ***REMOVED***@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> ***REMOVED***\n  return new Promise((resolve, reject) => ***REMOVED***\n    try ***REMOVED***\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onerror = event => ***REMOVED***\n        reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n    ***REMOVED***;\n      request.onsuccess = event => ***REMOVED***\n        resolve((event.target as IDBOpenDBRequest).result);\n    ***REMOVED***;\n      request.onupgradeneeded = event => ***REMOVED***\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) ***REMOVED***\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, ***REMOVED***\n              keyPath: 'compositeKey'\n          ***REMOVED***);\n      ***REMOVED***\n    ***REMOVED***;\n  ***REMOVED*** catch (error) ***REMOVED***\n      reject(\n        ERROR_FACTORY.create(ErrorCode.STORAGE_OPEN, ***REMOVED***\n          originalErrorMessage: (error as Error)?.message\n      ***REMOVED***)\n      );\n  ***REMOVED***\n***REMOVED***);\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage ***REMOVED***\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) ***REMOVED***}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> ***REMOVED***\n    return this.get<FetchStatus>('last_fetch_status');\n***REMOVED***\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> ***REMOVED***\n    return this.set<FetchStatus>('last_fetch_status', status);\n***REMOVED***\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> ***REMOVED***\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n***REMOVED***\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> ***REMOVED***\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n***REMOVED***\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> ***REMOVED***\n    return this.get<FetchResponse>('last_successful_fetch_response');\n***REMOVED***\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> ***REMOVED***\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n***REMOVED***\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> ***REMOVED***\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n***REMOVED***\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> ***REMOVED***\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n***REMOVED***\n\n  getActiveConfigEtag(): Promise<string | undefined> ***REMOVED***\n    return this.get<string>('active_config_etag');\n***REMOVED***\n\n  setActiveConfigEtag(etag: string): Promise<void> ***REMOVED***\n    return this.set<string>('active_config_etag', etag);\n***REMOVED***\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> ***REMOVED***\n    return this.get<ThrottleMetadata>('throttle_metadata');\n***REMOVED***\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> ***REMOVED***\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n***REMOVED***\n\n  deleteThrottleMetadata(): Promise<void> ***REMOVED***\n    return this.delete('throttle_metadata');\n***REMOVED***\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> ***REMOVED***\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => ***REMOVED***\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try ***REMOVED***\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => ***REMOVED***\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n      ***REMOVED***;\n        request.onsuccess = event => ***REMOVED***\n          const result = (event.target as IDBRequest).result;\n          if (result) ***REMOVED***\n            resolve(result.value);\n        ***REMOVED*** else ***REMOVED***\n            resolve(undefined);\n        ***REMOVED***\n      ***REMOVED***;\n    ***REMOVED*** catch (e) ***REMOVED***\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, ***REMOVED***\n            originalErrorMessage: (e as Error)?.message\n        ***REMOVED***)\n        );\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> ***REMOVED***\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => ***REMOVED***\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try ***REMOVED***\n        const request = objectStore.put(***REMOVED***\n          compositeKey,\n          value\n      ***REMOVED***);\n        request.onerror = (event: Event) => ***REMOVED***\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n      ***REMOVED***;\n        request.onsuccess = () => ***REMOVED***\n          resolve();\n      ***REMOVED***;\n    ***REMOVED*** catch (e) ***REMOVED***\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, ***REMOVED***\n            originalErrorMessage: (e as Error)?.message\n        ***REMOVED***)\n        );\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> ***REMOVED***\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => ***REMOVED***\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try ***REMOVED***\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => ***REMOVED***\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n      ***REMOVED***;\n        request.onsuccess = () => ***REMOVED***\n          resolve();\n      ***REMOVED***;\n    ***REMOVED*** catch (e) ***REMOVED***\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, ***REMOVED***\n            originalErrorMessage: (e as Error)?.message\n        ***REMOVED***)\n        );\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string ***REMOVED***\n    return [this.appId, this.appName, this.namespace, key].join();\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FetchStatus } from '@firebase/remote-config-types';\nimport ***REMOVED*** FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport ***REMOVED*** Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache ***REMOVED***\n  constructor(private readonly storage: Storage) ***REMOVED***}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined ***REMOVED***\n    return this.lastFetchStatus;\n***REMOVED***\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined ***REMOVED***\n    return this.lastSuccessfulFetchTimestampMillis;\n***REMOVED***\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined ***REMOVED***\n    return this.activeConfig;\n***REMOVED***\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> ***REMOVED***\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise =\n      this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) ***REMOVED***\n      this.lastFetchStatus = lastFetchStatus;\n  ***REMOVED***\n\n    const lastSuccessfulFetchTimestampMillis =\n      await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) ***REMOVED***\n      this.lastSuccessfulFetchTimestampMillis =\n        lastSuccessfulFetchTimestampMillis;\n  ***REMOVED***\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) ***REMOVED***\n      this.activeConfig = activeConfig;\n  ***REMOVED***\n***REMOVED***\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> ***REMOVED***\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n***REMOVED***\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> ***REMOVED***\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n***REMOVED***\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> ***REMOVED***\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** RemoteConfig } from './public_types';\nimport ***REMOVED*** activate, fetchConfig } from './api';\nimport ***REMOVED***\n  getModularInstance,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n/**\n *\n * Performs fetch and activate operations, as a convenience.\n *\n * @param remoteConfig - The ***REMOVED***@link RemoteConfig} instance.\n *\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\n * If the fetched configs were already activated, the `Promise` will resolve to false.\n *\n * @public\n */\nexport async function fetchAndActivate(\n  remoteConfig: RemoteConfig\n): Promise<boolean> ***REMOVED***\n  remoteConfig = getModularInstance(remoteConfig);\n  await fetchConfig(remoteConfig);\n  return activate(remoteConfig);\n}\n\n/**\n * This method provides two different checks:\n *\n * 1. Check if IndexedDB exists in the browser environment.\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\n *\n * @returns A `Promise` which resolves to true if a ***REMOVED***@link RemoteConfig} instance\n * can be initialized in this environment, or false if it cannot.\n * @public\n */\nexport async function isSupported(): Promise<boolean> ***REMOVED***\n  if (!isIndexedDBAvailable()) ***REMOVED***\n    return false;\n***REMOVED***\n\n  try ***REMOVED***\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n***REMOVED*** catch (error) ***REMOVED***\n    return false;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport ***REMOVED***\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport ***REMOVED*** isIndexedDBAvailable } from '@firebase/util';\nimport ***REMOVED***\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport ***REMOVED*** Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport ***REMOVED*** RemoteConfig } from './public_types';\nimport ***REMOVED*** name as packageName, version } from '../package.json';\nimport ***REMOVED*** ensureInitialized } from './api';\nimport ***REMOVED*** CachingClient } from './client/caching_client';\nimport ***REMOVED*** RestClient } from './client/rest_client';\nimport ***REMOVED*** RetryingClient } from './client/retrying_client';\nimport ***REMOVED*** RC_COMPONENT_NAME } from './constants';\nimport ***REMOVED*** ErrorCode, ERROR_FACTORY } from './errors';\nimport ***REMOVED*** RemoteConfig as RemoteConfigImpl } from './remote_config';\nimport ***REMOVED*** Storage } from './storage/storage';\nimport ***REMOVED*** StorageCache } from './storage/storage_cache';\n// This needs to be in the same file that calls `getProvider()` on the component\n// or it will get tree-shaken out.\nimport '@firebase/installations';\n\nexport function registerRemoteConfig(): void ***REMOVED***\n  _registerComponent(\n    new Component(\n      RC_COMPONENT_NAME,\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(packageName, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(packageName, version, '__BUILD_TARGET__');\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    ***REMOVED*** instanceIdentifier: namespace }: InstanceFactoryOptions\n  ): RemoteConfig ***REMOVED***\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container\n      .getProvider('installations-internal')\n      .getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n  ***REMOVED***\n    // Guards against the SDK being used when indexedDB is not available.\n    if (!isIndexedDBAvailable()) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNAVAILABLE);\n  ***REMOVED***\n    // Normalizes optional inputs.\n    const ***REMOVED*** projectId, apiKey, appId } = app.options;\n    if (!projectId) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n  ***REMOVED***\n    if (!apiKey) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n  ***REMOVED***\n    if (!appId) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n  ***REMOVED***\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfigImpl(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ensureInitialized(remoteConfigInstance);\n\n    return remoteConfigInstance;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport ***REMOVED***\n  Value as ValueCompat,\n  FetchStatus as FetchSTatusCompat,\n  Settings as SettingsCompat,\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig as RemoteConfigCompat\n} from '@firebase/remote-config-types';\nimport ***REMOVED***\n  RemoteConfig,\n  setLogLevel,\n  activate,\n  ensureInitialized,\n  fetchAndActivate,\n  fetchConfig,\n  getAll,\n  getBoolean,\n  getNumber,\n  getString,\n  getValue,\n  isSupported\n} from '@firebase/remote-config';\n\nexport ***REMOVED*** isSupported };\n\nexport class RemoteConfigCompatImpl\n  implements RemoteConfigCompat, _FirebaseService\n***REMOVED***\n  constructor(public app: FirebaseApp, readonly _delegate: RemoteConfig) ***REMOVED***}\n\n  get defaultConfig(): ***REMOVED*** [key: string]: string | number | boolean } ***REMOVED***\n    return this._delegate.defaultConfig;\n***REMOVED***\n\n  set defaultConfig(value: ***REMOVED*** [key: string]: string | number | boolean }) ***REMOVED***\n    this._delegate.defaultConfig = value;\n***REMOVED***\n\n  get fetchTimeMillis(): number ***REMOVED***\n    return this._delegate.fetchTimeMillis;\n***REMOVED***\n\n  get lastFetchStatus(): FetchSTatusCompat ***REMOVED***\n    return this._delegate.lastFetchStatus;\n***REMOVED***\n\n  get settings(): SettingsCompat ***REMOVED***\n    return this._delegate.settings;\n***REMOVED***\n\n  set settings(value: SettingsCompat) ***REMOVED***\n    this._delegate.settings = value;\n***REMOVED***\n\n  activate(): Promise<boolean> ***REMOVED***\n    return activate(this._delegate);\n***REMOVED***\n\n  ensureInitialized(): Promise<void> ***REMOVED***\n    return ensureInitialized(this._delegate);\n***REMOVED***\n\n  /**\n   * @throws a ***REMOVED***@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * ***REMOVED***@link Settings.fetchTimeoutInSeconds} or\n   * ***REMOVED***@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  fetch(): Promise<void> ***REMOVED***\n    return fetchConfig(this._delegate);\n***REMOVED***\n\n  fetchAndActivate(): Promise<boolean> ***REMOVED***\n    return fetchAndActivate(this._delegate);\n***REMOVED***\n\n  getAll(): ***REMOVED*** [key: string]: ValueCompat } ***REMOVED***\n    return getAll(this._delegate);\n***REMOVED***\n\n  getBoolean(key: string): boolean ***REMOVED***\n    return getBoolean(this._delegate, key);\n***REMOVED***\n\n  getNumber(key: string): number ***REMOVED***\n    return getNumber(this._delegate, key);\n***REMOVED***\n\n  getString(key: string): string ***REMOVED***\n    return getString(this._delegate, key);\n***REMOVED***\n\n  getValue(key: string): ValueCompat ***REMOVED***\n    return getValue(this._delegate, key);\n***REMOVED***\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void ***REMOVED***\n    setLogLevel(this._delegate, logLevel);\n***REMOVED***\n}\n"],"names":["LogLevel","isIndexedDBAvailable","indexedDB","e","FirebaseError","Error","constructor","code","message","customData","super","this","name","Object","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replace","PATTERN","_","key","value","String","fullMessage","getModularInstance","_delegate","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","levelStringToEnum","debug","DEBUG","verbose","VERBOSE","info","INFO","warn","WARN","error","ERROR","silent","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","args","logLevel","now","Date","toISOString","method","console","Logger","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","log","instanceOfAny","object","constructors","some","c","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","undefined","objectStore","wrap","set","has","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","apply","unwrap","storeNames","tx","call","sort","transformCachableValue","done","Promise","resolve","reject","unlisten","removeEventListener","complete","DOMException","addEventListener","IDBObjectStore","IDBIndex","Proxy","IDBRequest","request","promise","success","result","then","catch","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","useIndex","isWrite","async","storeName","store","index","shift","all","oldTraps","PENDING_TIMEOUT_MS","PACKAGE_VERSION","version","INTERNAL_AUTH_VERSION","INSTALLATIONS_API_URL","TOKEN_EXPIRATION_BUFFER","firebaseInstance","ERROR_FACTORY","missing-app-config-values","not-registered","installation-not-found","request-failed","app-offline","delete-pending-registration","isServerError","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","responseExpiresIn","Number","creationTime","getErrorFromResponse","requestName","errorData","json","serverCode","serverMessage","serverStatus","status","getHeaders","apiKey","Headers","Content-Type","Accept","x-goog-api-key","getHeadersWithAuth","appConfig","refreshToken","headers","append","retryIfServerError","fn","sleep","ms","setTimeout","VALID_FID_PATTERN","INVALID_FID","generateFid","fidByteArray","Uint8Array","crypto","self","msCrypto","getRandomValues","fid","b64String","array","b64","btoa","fromCharCode","bufferToBase64UrlSafe","substr","encode","test","_a","getKey","appName","appId","fidChangeCallbacks","fidChanged","callFidChangeCallbacks","channel","broadcastChannel","BroadcastChannel","onmessage","getBroadcastChannel","postMessage","size","close","broadcastFidChange","callbacks","OBJECT_STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","open","openPromise","event","oldVersion","newVersion","db","openDB","createObjectStore","oldValue","put","remove","delete","update","updateFn","getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","clearTimedOutRequest","registrationStatus","entryWithPromise","entry","updateInstallationRequest","waitUntilFidRegistration","navigator","onLine","registrationPromiseWithError","inProgressEntry","registrationTime","registeredInstallationEntry","heartbeatServiceProvider","endpoint","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","body","authVersion","sdkVersion","JSON","stringify","fetch","ok","responseValue","authToken","createInstallationRequest","registerInstallation","triggerRegistrationIfNecessary","generateAuthTokenRequest","getGenerateAuthTokenEndpoint","installation","refreshAuthToken","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenExpired","updateAuthTokenRequest","waitUntilAuthTokenRequest","inProgressAuthToken","requestTime","assign","updatedInstallationEntry","fetchAuthTokenFromServer","getToken","installationsImpl","getMissingValueError","valueName","INSTALLATIONS_NAME","publicFactory","app","container","getProvider","options","keyName","extractAppConfig","_getProvider","_delete","internalFactory","getId","_registerComponent","registerVersion","RemoteConfigAbortSignal","listeners","listener","push","abort","forEach","registration-window","registration-project-id","registration-api-key","registration-app-id","storage-open","storage-get","storage-set","storage-delete","fetch-client-network","fetch-timeout","fetch-throttle","fetch-client-parse","fetch-status","indexed-db-unavailable","BOOLEAN_TRUTHY_VALUES","Value","_source","_value","asString","asBoolean","indexOf","toLowerCase","asNumber","num","isNaN","getSource","activate","remoteConfig","rc","lastSuccessfulFetchResponse","activeConfigEtag","_storage","getLastSuccessfulFetchResponse","getActiveConfigEtag","config","eTag","_storageCache","setActiveConfig","setActiveConfigEtag","ensureInitialized","_initializePromise","loadFromStorage","_isInitializationComplete","fetchConfig","abortSignal","settings","fetchTimeoutMillis","_client","cacheMaxAgeMillis","minimumFetchIntervalMillis","signal","setLastFetchStatus","lastFetchStatus","errorCode","getAll","getAllKeys","obj1","obj2","getActiveConfig","defaultConfig","keys","reduce","allConfigs","getValue","_logger","activeConfig","ValueImpl","CachingClient","client","storage","storageCache","logger","isCachedDataFresh","lastSuccessfulFetchTimestampMillis","cacheAgeMillis","getLastSuccessfulFetchTimestampMillis","storageOperations","setLastSuccessfulFetchTimestampMillis","setLastSuccessfulFetchResponse","RestClient","firebaseInstallations","namespace","navigatorLanguage","installationId","installationToken","url","window","FIREBASE_REMOTE_CONFIG_URL_BASE","Content-Encoding","If-None-Match","requestBody","sdk_version","app_instance_id","app_instance_id_token","app_id","language_code","languages","language","fetchPromise","timeoutPromise","_resolve","race","originalError","originalErrorMessage","responseEtag","state","responseBody","httpStatus","RetryingClient","throttleMetadata","getThrottleMetadata","backoffCount","throttleEndTimeMillis","attemptFetch","backoffMillis","Math","max","timeout","clearTimeout","deleteThrottleMetadata","isRetriableError","backoffFactor","currBaseValue","pow","randomWait","round","random","min","setThrottleMetadata","RemoteConfig","fetchTimeMillis","getLastFetchStatus","toFirebaseError","APP_NAMESPACE_STORE","Storage","openDbPromise","onerror","onsuccess","onupgradeneeded","keyPath","openDatabase","timestamp","etag","metadata","compositeKey","createCompositeKey","join","StorageCache","lastFetchStatusPromise","lastSuccessfulFetchTimestampMillisPromise","activeConfigPromise","timestampMillis","isSupported","preExist","DB_CHECK_NAME","deleteDatabase","instanceIdentifier","packageName","FirebaseLogLevel","restClient","SDK_VERSION","retryingClient","cachingClient","remoteConfigInstance","RemoteConfigImpl","RemoteConfigCompatImpl","fetchAndActivate","getBoolean","getNumber","getString","remoteConfigFactory","identifier","firebase","INTERNAL","registerComponent"],"mappings":"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"}