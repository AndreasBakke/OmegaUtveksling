***REMOVED***"version":3,"file":"firebase-messaging.js","sources":["../util/src/errors.ts","../util/src/compat.ts","../component/src/component.ts","../../node_modules/idb/build/wrap-idb-value.js","../../node_modules/idb/build/index.js","../installations/src/util/errors.ts","../installations/src/util/constants.ts","../installations/src/functions/common.ts","../installations/src/util/sleep.ts","../installations/src/helpers/generate-fid.ts","../installations/src/helpers/buffer-to-base64-url-safe.ts","../installations/src/util/get-key.ts","../installations/src/helpers/fid-changed.ts","../installations/src/helpers/idb-manager.ts","../installations/src/helpers/get-installation-entry.ts","../installations/src/functions/create-installation-request.ts","../installations/src/functions/generate-auth-token-request.ts","../installations/src/helpers/refresh-auth-token.ts","../installations/src/api/get-token.ts","../installations/src/helpers/extract-app-config.ts","../installations/src/functions/config.ts","../installations/src/api/get-id.ts","../installations/src/index.ts","../messaging/src/util/constants.ts","../messaging/src/interfaces/internal-message-payload.ts","../messaging/src/helpers/array-base64-translator.ts","../messaging/src/internals/idb-manager.ts","../messaging/src/helpers/migrate-old-database.ts","../messaging/src/util/errors.ts","../messaging/src/internals/requests.ts","../messaging/src/internals/token-manager.ts","../messaging/src/helpers/externalizePayload.ts","../messaging/src/helpers/logToFirelog.ts","../messaging/src/helpers/extract-app-config.ts","../messaging/src/messaging-service.ts","../messaging/src/helpers/registerDefaultSw.ts","../messaging/src/api/getToken.ts","../messaging/src/helpers/updateVapidKey.ts","../messaging/src/helpers/updateSwReg.ts","../messaging/src/helpers/logToScion.ts","../messaging/src/helpers/register.ts","../messaging/src/api/isSupported.ts","../util/src/environment.ts","../messaging/src/api.ts","../messaging/src/api/deleteToken.ts","../messaging/src/api/onMessage.ts","../messaging/src/listeners/window-listener.ts","../messaging/src/helpers/is-console-message.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum ***REMOVED***string}\n *   var Err = ***REMOVED***\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n * ***REMOVED***\n *\n *   let errors: Map<Err, string> = ***REMOVED***\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: ***REMOVED***$file}\",\n * ***REMOVED***;\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, ***REMOVED***'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) ***REMOVED***\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') ***REMOVED***\n *       console.log(\"Could not read file: \" + e['file']);\n *   ***REMOVED***\n * ***REMOVED***\n */\n\nexport type ErrorMap<ErrorCode extends string> = ***REMOVED***\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike ***REMOVED***\n  toString(): string;\n}\n\nexport interface ErrorData ***REMOVED***\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error ***REMOVED***\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) ***REMOVED***\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) ***REMOVED***\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n  ***REMOVED***\n***REMOVED***\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends ***REMOVED*** readonly [K in ErrorCode]?: ErrorData } = ***REMOVED***}\n> ***REMOVED***\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) ***REMOVED***}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError ***REMOVED***\n    const customData = (data[0] as ErrorData) || ***REMOVED***};\n    const fullCode = `$***REMOVED***this.service}/$***REMOVED***code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `$***REMOVED***this.serviceName}: $***REMOVED***message} ($***REMOVED***fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n***REMOVED***\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string ***REMOVED***\n  return template.replace(PATTERN, (_, key) => ***REMOVED***\n    const value = data[key];\n    return value != null ? String(value) : `<$***REMOVED***key}?>`;\n***REMOVED***);\n}\n\nconst PATTERN = /\\***REMOVED***\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> ***REMOVED***\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService ***REMOVED***\n  if (service && (service as Compat<ExpService>)._delegate) ***REMOVED***\n    return (service as Compat<ExpService>)._delegate;\n***REMOVED*** else ***REMOVED***\n    return service as ExpService;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport ***REMOVED***\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> ***REMOVED***\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = ***REMOVED***};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) ***REMOVED***}\n\n  setInstantiationMode(mode: InstantiationMode): this ***REMOVED***\n    this.instantiationMode = mode;\n    return this;\n***REMOVED***\n\n  setMultipleInstances(multipleInstances: boolean): this ***REMOVED***\n    this.multipleInstances = multipleInstances;\n    return this;\n***REMOVED***\n\n  setServiceProps(props: Dictionary): this ***REMOVED***\n    this.serviceProps = props;\n    return this;\n***REMOVED***\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this ***REMOVED***\n    this.onInstanceCreated = callback;\n    return this;\n***REMOVED***\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() ***REMOVED***\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() ***REMOVED***\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) ***REMOVED***\n    const promise = new Promise((resolve, reject) => ***REMOVED***\n        const unlisten = () => ***REMOVED***\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n      ***REMOVED***;\n        const success = () => ***REMOVED***\n            resolve(wrap(request.result));\n            unlisten();\n      ***REMOVED***;\n        const error = () => ***REMOVED***\n            reject(request.error);\n            unlisten();\n      ***REMOVED***;\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n  ***REMOVED***);\n    promise\n        .then((value) => ***REMOVED***\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) ***REMOVED***\n            cursorRequestMap.set(value, request);\n      ***REMOVED***\n        // Catching to avoid \"Uncaught Promise exceptions\"\n  ***REMOVED***)\n        .catch(() => ***REMOVED*** });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) ***REMOVED***\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => ***REMOVED***\n        const unlisten = () => ***REMOVED***\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n      ***REMOVED***;\n        const complete = () => ***REMOVED***\n            resolve();\n            unlisten();\n      ***REMOVED***;\n        const error = () => ***REMOVED***\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n      ***REMOVED***;\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n  ***REMOVED***);\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = ***REMOVED***\n    get(target, prop, receiver) ***REMOVED***\n        if (target instanceof IDBTransaction) ***REMOVED***\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') ***REMOVED***\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n          ***REMOVED***\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') ***REMOVED***\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n          ***REMOVED***\n      ***REMOVED***\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n  ***REMOVED***,\n    set(target, prop, value) ***REMOVED***\n        target[prop] = value;\n        return true;\n  ***REMOVED***,\n    has(target, prop) ***REMOVED***\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) ***REMOVED***\n            return true;\n      ***REMOVED***\n        return prop in target;\n  ***REMOVED***,\n};\nfunction replaceTraps(callback) ***REMOVED***\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) ***REMOVED***\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) ***REMOVED***\n        return function (storeNames, ...args) ***REMOVED***\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n      ***REMOVED***;\n  ***REMOVED***\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) ***REMOVED***\n        return function (...args) ***REMOVED***\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n      ***REMOVED***;\n  ***REMOVED***\n    return function (...args) ***REMOVED***\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n  ***REMOVED***;\n}\nfunction transformCachableValue(value) ***REMOVED***\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) ***REMOVED***\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) ***REMOVED***\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n  ***REMOVED***\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport ***REMOVED*** reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import ***REMOVED*** w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport ***REMOVED*** u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, ***REMOVED*** blocked, upgrade, blocking, terminated } = ***REMOVED***}) ***REMOVED***\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) ***REMOVED***\n        request.addEventListener('upgradeneeded', (event) => ***REMOVED***\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n      ***REMOVED***);\n  ***REMOVED***\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => ***REMOVED***\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n  ***REMOVED***)\n        .catch(() => ***REMOVED*** });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, ***REMOVED*** blocked } = ***REMOVED***}) ***REMOVED***\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) ***REMOVED***\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) ***REMOVED***\n        return;\n  ***REMOVED***\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) ***REMOVED***\n        return;\n  ***REMOVED***\n    const method = async function (storeName, ...args) ***REMOVED***\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n  ***REMOVED***;\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => (***REMOVED***\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport ***REMOVED*** deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ErrorFactory, FirebaseError } from '@firebase/util';\nimport ***REMOVED*** SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode ***REMOVED***\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: ***REMOVED*** readonly [key in ErrorCode]: string } = ***REMOVED***\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"***REMOVED***$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '***REMOVED***$requestName} request failed with error \"***REMOVED***$serverCode} ***REMOVED***$serverStatus}: ***REMOVED***$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams ***REMOVED***\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: ***REMOVED***\n    valueName: string;\n***REMOVED***;\n  [ErrorCode.REQUEST_FAILED]: ***REMOVED***\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n***REMOVED*** & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData ***REMOVED***\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & ***REMOVED*** customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError ***REMOVED***\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:$***REMOVED***version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseError } from '@firebase/util';\nimport ***REMOVED*** GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED***\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint(***REMOVED*** projectId }: AppConfig): string ***REMOVED***\n  return `$***REMOVED***INSTALLATIONS_API_URL}/projects/$***REMOVED***projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken ***REMOVED***\n  return ***REMOVED***\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n***REMOVED***;\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> ***REMOVED***\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, ***REMOVED***\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n***REMOVED***);\n}\n\nexport function getHeaders(***REMOVED*** apiKey }: AppConfig): Headers ***REMOVED***\n  return new Headers(***REMOVED***\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n***REMOVED***);\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  ***REMOVED*** refreshToken }: RegisteredInstallationEntry\n): Headers ***REMOVED***\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse ***REMOVED***\n  error: ***REMOVED***\n    code: number;\n    message: string;\n    status: string;\n***REMOVED***;\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> ***REMOVED***\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) ***REMOVED***\n    // Internal Server Error. Retry request.\n    return fn();\n***REMOVED***\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number ***REMOVED***\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string ***REMOVED***\n  return `$***REMOVED***INTERNAL_AUTH_VERSION} $***REMOVED***refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> ***REMOVED***\n  return new Promise<void>(resolve => ***REMOVED***\n    setTimeout(resolve, ms);\n***REMOVED***);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]***REMOVED***21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string ***REMOVED***\n  try ***REMOVED***\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as ***REMOVED*** msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n***REMOVED*** catch ***REMOVED***\n    // FID generation errored\n    return INVALID_FID;\n***REMOVED***\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string ***REMOVED***\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string ***REMOVED***\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string ***REMOVED***\n  return `$***REMOVED***appConfig.appName}!$***REMOVED***appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getKey } from '../util/get-key';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void ***REMOVED***\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void ***REMOVED***\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) ***REMOVED***\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n***REMOVED***\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void ***REMOVED***\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) ***REMOVED***\n    return;\n***REMOVED***\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) ***REMOVED***\n    fidChangeCallbacks.delete(key);\n***REMOVED***\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void ***REMOVED***\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) ***REMOVED***\n    return;\n***REMOVED***\n\n  for (const callback of callbacks) ***REMOVED***\n    callback(fid);\n***REMOVED***\n}\n\nfunction broadcastFidChange(key: string, fid: string): void ***REMOVED***\n  const channel = getBroadcastChannel();\n  if (channel) ***REMOVED***\n    channel.postMessage(***REMOVED*** key, fid });\n***REMOVED***\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null ***REMOVED***\n  if (!broadcastChannel && 'BroadcastChannel' in self) ***REMOVED***\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => ***REMOVED***\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n  ***REMOVED***;\n***REMOVED***\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void ***REMOVED***\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) ***REMOVED***\n    broadcastChannel.close();\n    broadcastChannel = null;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** DBSchema, IDBPDatabase, openDB } from 'idb';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** InstallationEntry } from '../interfaces/installation-entry';\nimport ***REMOVED*** getKey } from '../util/get-key';\nimport ***REMOVED*** fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema ***REMOVED***\n  'firebase-installations-store': ***REMOVED***\n    key: string;\n    value: InstallationEntry | undefined;\n***REMOVED***;\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> ***REMOVED***\n  if (!dbPromise) ***REMOVED***\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, ***REMOVED***\n      upgrade: (db, oldVersion) => ***REMOVED***\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) ***REMOVED***\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) ***REMOVED***\n    fidChanged(appConfig, value.fid);\n***REMOVED***\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> ***REMOVED***\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) ***REMOVED***\n    await store.delete(key);\n***REMOVED*** else ***REMOVED***\n    await store.put(newValue, key);\n***REMOVED***\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) ***REMOVED***\n    fidChanged(appConfig, newValue.fid);\n***REMOVED***\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> ***REMOVED***\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** createInstallationRequest } from '../functions/create-installation-request';\nimport ***REMOVED***\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport ***REMOVED***\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PENDING_TIMEOUT_MS } from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport ***REMOVED*** sleep } from '../util/sleep';\nimport ***REMOVED*** generateFid, INVALID_FID } from './generate-fid';\nimport ***REMOVED*** remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise ***REMOVED***\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> ***REMOVED***\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => ***REMOVED***\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n***REMOVED***);\n\n  if (installationEntry.fid === INVALID_FID) ***REMOVED***\n    // FID generation failed. Waiting for the FID from the server.\n    return ***REMOVED*** installationEntry: await registrationPromise! };\n***REMOVED***\n\n  return ***REMOVED***\n    installationEntry,\n    registrationPromise\n***REMOVED***;\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry ***REMOVED***\n  const entry: InstallationEntry = oldEntry || ***REMOVED***\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n***REMOVED***;\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise ***REMOVED***\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    if (!navigator.onLine) ***REMOVED***\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return ***REMOVED***\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n    ***REMOVED***;\n  ***REMOVED***\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = ***REMOVED***\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n  ***REMOVED***;\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return ***REMOVED*** installationEntry: inProgressEntry, registrationPromise };\n***REMOVED*** else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) ***REMOVED***\n    return ***REMOVED***\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n  ***REMOVED***;\n***REMOVED*** else ***REMOVED***\n    return ***REMOVED*** installationEntry };\n***REMOVED***\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  try ***REMOVED***\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n***REMOVED*** catch (e) ***REMOVED***\n    if (isServerError(e) && e.customData.serverCode === 409) ***REMOVED***\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n  ***REMOVED*** else ***REMOVED***\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, ***REMOVED***\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n    ***REMOVED***);\n  ***REMOVED***\n    throw e;\n***REMOVED***\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n***REMOVED***\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    // The request timed out or failed in a different call. Try again.\n    const ***REMOVED*** installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) ***REMOVED***\n      return registrationPromise;\n  ***REMOVED*** else ***REMOVED***\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n  ***REMOVED***\n***REMOVED***\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> ***REMOVED***\n  return update(appConfig, oldEntry => ***REMOVED***\n    if (!oldEntry) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n  ***REMOVED***\n    return clearTimedOutRequest(oldEntry);\n***REMOVED***);\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry ***REMOVED***\n  if (hasInstallationRequestTimedOut(entry)) ***REMOVED***\n    return ***REMOVED***\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n  ***REMOVED***;\n***REMOVED***\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean ***REMOVED***\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** CreateInstallationResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport ***REMOVED***\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  ***REMOVED*** appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  ***REMOVED*** fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate(***REMOVED***\n    optional: true\n***REMOVED***);\n  if (heartbeatService) ***REMOVED***\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) ***REMOVED***\n      headers.append('x-firebase-client', heartbeatsHeader);\n  ***REMOVED***\n***REMOVED***\n\n  const body = ***REMOVED***\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n***REMOVED***;\n\n  const request: RequestInit = ***REMOVED***\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n***REMOVED***;\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) ***REMOVED***\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n  ***REMOVED***;\n    return registeredInstallationEntry;\n***REMOVED*** else ***REMOVED***\n    throw await getErrorFromResponse('Create Installation', response);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport ***REMOVED***\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PACKAGE_VERSION } from '../util/constants';\nimport ***REMOVED***\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport ***REMOVED***\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  ***REMOVED*** appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> ***REMOVED***\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate(***REMOVED***\n    optional: true\n***REMOVED***);\n  if (heartbeatService) ***REMOVED***\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) ***REMOVED***\n      headers.append('x-firebase-client', heartbeatsHeader);\n  ***REMOVED***\n***REMOVED***\n\n  const body = ***REMOVED***\n    installation: ***REMOVED***\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n  ***REMOVED***\n***REMOVED***;\n\n  const request: RequestInit = ***REMOVED***\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n***REMOVED***;\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) ***REMOVED***\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n***REMOVED*** else ***REMOVED***\n    throw await getErrorFromResponse('Generate Auth Token', response);\n***REMOVED***\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  ***REMOVED*** fid }: RegisteredInstallationEntry\n): string ***REMOVED***\n  return `$***REMOVED***getInstallationsEndpoint(appConfig)}/$***REMOVED***fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport ***REMOVED***\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport ***REMOVED***\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport ***REMOVED*** PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport ***REMOVED*** sleep } from '../util/sleep';\nimport ***REMOVED*** remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> ***REMOVED***\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => ***REMOVED***\n    if (!isEntryRegistered(oldEntry)) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n  ***REMOVED***\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) ***REMOVED***\n      // There is a valid token in the DB.\n      return oldEntry;\n  ***REMOVED*** else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n  ***REMOVED*** else ***REMOVED***\n      // No token or token expired.\n      if (!navigator.onLine) ***REMOVED***\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n    ***REMOVED***\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n  ***REMOVED***\n***REMOVED***);\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> ***REMOVED***\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) ***REMOVED***\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n***REMOVED***\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) ***REMOVED***\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n***REMOVED*** else ***REMOVED***\n    return authToken;\n***REMOVED***\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> ***REMOVED***\n  return update(appConfig, oldEntry => ***REMOVED***\n    if (!isEntryRegistered(oldEntry)) ***REMOVED***\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n  ***REMOVED***\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) ***REMOVED***\n      return ***REMOVED***\n        ...oldEntry,\n        authToken: ***REMOVED*** requestStatus: RequestStatus.NOT_STARTED }\n    ***REMOVED***;\n  ***REMOVED***\n\n    return oldEntry;\n***REMOVED***);\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> ***REMOVED***\n  try ***REMOVED***\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n      ...installationEntry,\n      authToken\n  ***REMOVED***;\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n***REMOVED*** catch (e) ***REMOVED***\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) ***REMOVED***\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n  ***REMOVED*** else ***REMOVED***\n      const updatedInstallationEntry: RegisteredInstallationEntry = ***REMOVED***\n        ...installationEntry,\n        authToken: ***REMOVED*** requestStatus: RequestStatus.NOT_STARTED }\n    ***REMOVED***;\n      await set(installations.appConfig, updatedInstallationEntry);\n  ***REMOVED***\n    throw e;\n***REMOVED***\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry ***REMOVED***\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean ***REMOVED***\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean ***REMOVED***\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry ***REMOVED***\n  const inProgressAuthToken: InProgressAuthToken = ***REMOVED***\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n***REMOVED***;\n  return ***REMOVED***\n    ...oldEntry,\n    authToken: inProgressAuthToken\n***REMOVED***;\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean ***REMOVED***\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getInstallationEntry } from '../helpers/get-installation-entry';\nimport ***REMOVED*** refreshAuthToken } from '../helpers/refresh-auth-token';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> ***REMOVED***\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> ***REMOVED***\n  const ***REMOVED*** registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) ***REMOVED***\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport ***REMOVED*** FirebaseError } from '@firebase/util';\nimport ***REMOVED*** AppConfig } from '../interfaces/installation-impl';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig ***REMOVED***\n  if (!app || !app.options) ***REMOVED***\n    throw getMissingValueError('App Configuration');\n***REMOVED***\n\n  if (!app.name) ***REMOVED***\n    throw getMissingValueError('App Name');\n***REMOVED***\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) ***REMOVED***\n    if (!app.options[keyName]) ***REMOVED***\n      throw getMissingValueError(keyName);\n  ***REMOVED***\n***REMOVED***\n\n  return ***REMOVED***\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n***REMOVED***;\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError ***REMOVED***\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, ***REMOVED***\n    valueName\n***REMOVED***);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** _registerComponent, _getProvider } from '@firebase/app';\nimport ***REMOVED***\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport ***REMOVED*** getId, getToken } from '../api/index';\nimport ***REMOVED*** _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => ***REMOVED***\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = ***REMOVED***\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n***REMOVED***;\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => ***REMOVED***\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = ***REMOVED***\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n***REMOVED***;\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void ***REMOVED***\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** getInstallationEntry } from '../helpers/get-installation-entry';\nimport ***REMOVED*** refreshAuthToken } from '../helpers/refresh-auth-token';\nimport ***REMOVED*** FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport ***REMOVED*** Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> ***REMOVED***\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const ***REMOVED*** installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) ***REMOVED***\n    registrationPromise.catch(console.error);\n***REMOVED*** else ***REMOVED***\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n***REMOVED***\n\n  return installationEntry.fid;\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** registerInstallations } from './functions/config';\nimport ***REMOVED*** registerVersion } from '@firebase/app';\nimport ***REMOVED*** name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n/** Key of FCM Payload in Notification's data field. */\nexport const FCM_MSG = 'FCM_MSG';\n\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\n/** Set to '1' if Analytics is enabled for the campaign */\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const TAG = 'FirebaseMessaging: ';\nexport const MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST = 1000;\nexport const MAX_RETRIES = 3;\nexport const LOG_INTERVAL_IN_MS = 86400000; //24 hour\nexport const DEFAULT_BACKOFF_TIME_MS = 5000;\n\n// FCM log source name registered at Firelog: 'FCM_CLIENT_EVENT_LOGGING'. It uniquely identifies\n// FCM's logging configuration.\nexport const FCM_LOG_SOURCE = 1249;\n\n// Defined as in proto/messaging_event.proto. Neglecting fields that are supported.\nexport const SDK_PLATFORM_WEB = 3;\nexport const EVENT_MESSAGE_DELIVERED = 1;\n\nexport enum MessageType ***REMOVED***\n  DATA_MESSAGE = 1,\n  DISPLAY_NOTIFICATION = 3\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport ***REMOVED***\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal ***REMOVED***\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  fcmMessageId: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions ***REMOVED***\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n  icon?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal ***REMOVED***\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType ***REMOVED***\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData ***REMOVED***\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string ***REMOVED***\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array ***REMOVED***\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) ***REMOVED***\n    outputArray[i] = rawData.charCodeAt(i);\n***REMOVED***\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** DBSchema, IDBPDatabase, deleteDB, openDB } from 'idb';\n\nimport ***REMOVED*** FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport ***REMOVED*** TokenDetails } from '../interfaces/token-details';\nimport ***REMOVED*** migrateOldDatabase } from '../helpers/migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\ninterface MessagingDB extends DBSchema ***REMOVED***\n  'firebase-messaging-store': ***REMOVED***\n    key: string;\n    value: TokenDetails;\n***REMOVED***;\n}\n\nlet dbPromise: Promise<IDBPDatabase<MessagingDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<MessagingDB>> ***REMOVED***\n  if (!dbPromise) ***REMOVED***\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, ***REMOVED***\n      upgrade: (upgradeDb, oldVersion) => ***REMOVED***\n        // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n        // because if there are multiple versions between the old version and the current version, we\n        // want ALL the migrations that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) ***REMOVED***\n          case 0:\n            upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***);\n***REMOVED***\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> ***REMOVED***\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = (await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key)) as TokenDetails;\n\n  if (tokenDetails) ***REMOVED***\n    return tokenDetails;\n***REMOVED*** else ***REMOVED***\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) ***REMOVED***\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n  ***REMOVED***\n***REMOVED***\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> ***REMOVED***\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.done;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> ***REMOVED***\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> ***REMOVED***\n  if (dbPromise) ***REMOVED***\n    (await dbPromise).close();\n    await deleteDB(DATABASE_NAME);\n    dbPromise = null;\n***REMOVED***\n}\n\nfunction getKey(***REMOVED*** appConfig }: FirebaseInternalDependencies): string ***REMOVED***\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** deleteDB, openDB } from 'idb';\n\nimport ***REMOVED*** TokenDetails } from '../interfaces/token-details';\nimport ***REMOVED*** arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails ***REMOVED***\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails ***REMOVED***\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails ***REMOVED***\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> ***REMOVED***\n  if ('databases' in indexedDB) ***REMOVED***\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (\n      indexedDB as ***REMOVED***\n        databases(): Promise<Array<***REMOVED*** name: string; version: number }>>;\n    ***REMOVED***\n    ).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) ***REMOVED***\n      // old DB didn't exist, no need to open.\n      return null;\n  ***REMOVED***\n***REMOVED***\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDB(OLD_DB_NAME, OLD_DB_VERSION, ***REMOVED***\n    upgrade: async (db, oldVersion, newVersion, upgradeTransaction) => ***REMOVED***\n      if (oldVersion < 2) ***REMOVED***\n        // Database too old, skip migration.\n        return;\n    ***REMOVED***\n\n      if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) ***REMOVED***\n        // Database did not exist. Nothing to do.\n        return;\n    ***REMOVED***\n\n      const objectStore = upgradeTransaction.objectStore(OLD_OBJECT_STORE_NAME);\n      const value = await objectStore.index('fcmSenderId').get(senderId);\n      await objectStore.clear();\n\n      if (!value) ***REMOVED***\n        // No entry in the database, nothing to migrate.\n        return;\n    ***REMOVED***\n\n      if (oldVersion === 2) ***REMOVED***\n        const oldDetails = value as V2TokenDetails;\n\n        if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) ***REMOVED***\n          return;\n      ***REMOVED***\n\n        tokenDetails = ***REMOVED***\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime ?? Date.now(),\n          subscriptionOptions: ***REMOVED***\n            auth: oldDetails.auth,\n            p256dh: oldDetails.p256dh,\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey:\n              typeof oldDetails.vapidKey === 'string'\n                ? oldDetails.vapidKey\n                : arrayToBase64(oldDetails.vapidKey)\n        ***REMOVED***\n      ***REMOVED***;\n    ***REMOVED*** else if (oldVersion === 3) ***REMOVED***\n        const oldDetails = value as V3TokenDetails;\n\n        tokenDetails = ***REMOVED***\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: ***REMOVED***\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n        ***REMOVED***\n      ***REMOVED***;\n    ***REMOVED*** else if (oldVersion === 4) ***REMOVED***\n        const oldDetails = value as V4TokenDetails;\n\n        tokenDetails = ***REMOVED***\n          token: oldDetails.fcmToken,\n          createTime: oldDetails.createTime,\n          subscriptionOptions: ***REMOVED***\n            auth: arrayToBase64(oldDetails.auth),\n            p256dh: arrayToBase64(oldDetails.p256dh),\n            endpoint: oldDetails.endpoint,\n            swScope: oldDetails.swScope,\n            vapidKey: arrayToBase64(oldDetails.vapidKey)\n        ***REMOVED***\n      ***REMOVED***;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***);\n  db.close();\n\n  // Delete all old databases.\n  await deleteDB(OLD_DB_NAME);\n  await deleteDB('fcm_vapid_details_db');\n  await deleteDB('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails ***REMOVED***\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) ***REMOVED***\n    return false;\n***REMOVED***\n  const ***REMOVED*** subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode ***REMOVED***\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  INDEXED_DB_UNSUPPORTED = 'indexed-db-unsupported',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = ***REMOVED***\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"***REMOVED***$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the Firebase SDK.\",\n  [ErrorCode.INDEXED_DB_UNSUPPORTED]:\n    \"This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. ***REMOVED***$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: ***REMOVED***$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: ***REMOVED***$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: ***REMOVED***$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams ***REMOVED***\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: ***REMOVED***\n    valueName: string;\n***REMOVED***;\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: ***REMOVED*** browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: ***REMOVED*** errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: ***REMOVED*** errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: ***REMOVED*** errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport ***REMOVED*** SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport ***REMOVED*** AppConfig } from '../interfaces/app-config';\nimport ***REMOVED*** FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse ***REMOVED***\n  token?: string;\n  error?: ***REMOVED*** message: string };\n}\n\nexport interface ApiRequestBody ***REMOVED***\n  web: ***REMOVED***\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n***REMOVED***;\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> ***REMOVED***\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = ***REMOVED***\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n***REMOVED***;\n\n  let responseData: ApiResponse;\n  try ***REMOVED***\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n***REMOVED*** catch (err) ***REMOVED***\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, ***REMOVED***\n      errorInfo: (err as Error)?.toString()\n  ***REMOVED***);\n***REMOVED***\n\n  if (responseData.error) ***REMOVED***\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, ***REMOVED***\n      errorInfo: message\n  ***REMOVED***);\n***REMOVED***\n\n  if (!responseData.token) ***REMOVED***\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n***REMOVED***\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> ***REMOVED***\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = ***REMOVED***\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n***REMOVED***;\n\n  let responseData: ApiResponse;\n  try ***REMOVED***\n    const response = await fetch(\n      `$***REMOVED***getEndpoint(firebaseDependencies.appConfig)}/$***REMOVED***tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n***REMOVED*** catch (err) ***REMOVED***\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, ***REMOVED***\n      errorInfo: (err as Error)?.toString()\n  ***REMOVED***);\n***REMOVED***\n\n  if (responseData.error) ***REMOVED***\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, ***REMOVED***\n      errorInfo: message\n  ***REMOVED***);\n***REMOVED***\n\n  if (!responseData.token) ***REMOVED***\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n***REMOVED***\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> ***REMOVED***\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = ***REMOVED***\n    method: 'DELETE',\n    headers\n***REMOVED***;\n\n  try ***REMOVED***\n    const response = await fetch(\n      `$***REMOVED***getEndpoint(firebaseDependencies.appConfig)}/$***REMOVED***token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) ***REMOVED***\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, ***REMOVED***\n        errorInfo: message\n    ***REMOVED***);\n  ***REMOVED***\n***REMOVED*** catch (err) ***REMOVED***\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, ***REMOVED***\n      errorInfo: (err as Error)?.toString()\n  ***REMOVED***);\n***REMOVED***\n}\n\nfunction getEndpoint(***REMOVED*** projectId }: AppConfig): string ***REMOVED***\n  return `$***REMOVED***ENDPOINT}/projects/$***REMOVED***projectId!}/registrations`;\n}\n\nasync function getHeaders(***REMOVED***\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> ***REMOVED***\n  const authToken = await installations.getToken();\n\n  return new Headers(***REMOVED***\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS $***REMOVED***authToken}`\n***REMOVED***);\n}\n\nfunction getBody(***REMOVED***\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody ***REMOVED***\n  const body: ApiRequestBody = ***REMOVED***\n    web: ***REMOVED***\n      endpoint,\n      auth,\n      p256dh\n  ***REMOVED***\n***REMOVED***;\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) ***REMOVED***\n    body.web.applicationPubKey = vapidKey;\n***REMOVED***\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport ***REMOVED***\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport ***REMOVED*** dbGet, dbRemove, dbSet } from './idb-manager';\nimport ***REMOVED***\n  requestDeleteToken,\n  requestGetToken,\n  requestUpdateToken\n} from './requests';\n\nimport ***REMOVED*** FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport ***REMOVED*** MessagingService } from '../messaging-service';\n\n// UpdateRegistration will be called once every week.\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getTokenInternal(\n  messaging: MessagingService\n): Promise<string> ***REMOVED***\n  const pushSubscription = await getPushSubscription(\n    messaging.swRegistration!,\n    messaging.vapidKey!\n  );\n\n  const subscriptionOptions: SubscriptionOptions = ***REMOVED***\n    vapidKey: messaging.vapidKey!,\n    swScope: messaging.swRegistration!.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n***REMOVED***;\n\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (!tokenDetails) ***REMOVED***\n    // No token, get a new one.\n    return getNewToken(messaging.firebaseDependencies, subscriptionOptions);\n***REMOVED*** else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) ***REMOVED***\n    // Invalid token, get a new one.\n    try ***REMOVED***\n      await requestDeleteToken(\n        messaging.firebaseDependencies!,\n        tokenDetails.token\n      );\n  ***REMOVED*** catch (e) ***REMOVED***\n      // Suppress errors because of #2364\n      console.warn(e);\n  ***REMOVED***\n\n    return getNewToken(messaging.firebaseDependencies!, subscriptionOptions);\n***REMOVED*** else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) ***REMOVED***\n    // Weekly token refresh\n    return updateToken(messaging, ***REMOVED***\n      token: tokenDetails.token,\n      createTime: Date.now(),\n      subscriptionOptions\n  ***REMOVED***);\n***REMOVED*** else ***REMOVED***\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n***REMOVED***\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteTokenInternal(\n  messaging: MessagingService\n): Promise<boolean> ***REMOVED***\n  const tokenDetails = await dbGet(messaging.firebaseDependencies);\n  if (tokenDetails) ***REMOVED***\n    await requestDeleteToken(\n      messaging.firebaseDependencies,\n      tokenDetails.token\n    );\n    await dbRemove(messaging.firebaseDependencies);\n***REMOVED***\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription =\n    await messaging.swRegistration!.pushManager.getSubscription();\n  if (pushSubscription) ***REMOVED***\n    return pushSubscription.unsubscribe();\n***REMOVED***\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  messaging: MessagingService,\n  tokenDetails: TokenDetails\n): Promise<string> ***REMOVED***\n  try ***REMOVED***\n    const updatedToken = await requestUpdateToken(\n      messaging.firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = ***REMOVED***\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n  ***REMOVED***;\n\n    await dbSet(messaging.firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n***REMOVED*** catch (e) ***REMOVED***\n    await deleteTokenInternal(messaging);\n    throw e;\n***REMOVED***\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> ***REMOVED***\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = ***REMOVED***\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n***REMOVED***;\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> ***REMOVED***\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) ***REMOVED***\n    return subscription;\n***REMOVED***\n\n  return swRegistration.pushManager.subscribe(***REMOVED***\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n***REMOVED***);\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean ***REMOVED***\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** MessagePayload } from '../interfaces/public-types';\nimport ***REMOVED*** MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload ***REMOVED***\n  const payload: MessagePayload = ***REMOVED***\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key,\n    // eslint-disable-next-line camelcase\n    messageId: internalPayload.fcmMessageId\n***REMOVED*** as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void ***REMOVED***\n  if (!messagePayloadInternal.notification) ***REMOVED***\n    return;\n***REMOVED***\n\n  payload.notification = ***REMOVED***};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) ***REMOVED***\n    payload.notification!.title = title;\n***REMOVED***\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) ***REMOVED***\n    payload.notification!.body = body;\n***REMOVED***\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) ***REMOVED***\n    payload.notification!.image = image;\n***REMOVED***\n\n  const icon = messagePayloadInternal.notification!.icon;\n  if (!!icon) ***REMOVED***\n    payload.notification!.icon = icon;\n***REMOVED***\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void ***REMOVED***\n  if (!messagePayloadInternal.data) ***REMOVED***\n    return;\n***REMOVED***\n\n  payload.data = messagePayloadInternal.data as ***REMOVED*** [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void ***REMOVED***\n  // fcmOptions.link value is written into notification.click_action. see more in b/232072111\n  if (\n    !messagePayloadInternal.fcmOptions &&\n    !messagePayloadInternal.notification?.click_action\n  ) ***REMOVED***\n    return;\n***REMOVED***\n\n  payload.fcmOptions = ***REMOVED***};\n\n  const link =\n    messagePayloadInternal.fcmOptions?.link ??\n    messagePayloadInternal.notification?.click_action;\n\n  if (!!link) ***REMOVED***\n    payload.fcmOptions!.link = link;\n***REMOVED***\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions?.analytics_label;\n  if (!!analyticsLabel) ***REMOVED***\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  DEFAULT_BACKOFF_TIME_MS,\n  EVENT_MESSAGE_DELIVERED,\n  FCM_LOG_SOURCE,\n  LOG_INTERVAL_IN_MS,\n  MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST,\n  MAX_RETRIES,\n  MessageType,\n  SDK_PLATFORM_WEB\n} from '../util/constants';\nimport ***REMOVED***\n  FcmEvent,\n  LogEvent,\n  LogRequest,\n  LogResponse\n} from '../interfaces/logging-types';\n\nimport ***REMOVED*** MessagePayloadInternal } from '../interfaces/internal-message-payload';\nimport ***REMOVED*** MessagingService } from '../messaging-service';\n\nconst FIRELOG_ENDPOINT = _mergeStrings(\n  'hts/frbslgigp.ogepscmv/ieo/eaylg',\n  'tp:/ieaeogn-agolai.o/1frlglgc/o'\n);\n\nconst FCM_TRANSPORT_KEY = _mergeStrings(\n  'AzSCbw63g1R0nCw85jG8',\n  'Iaya3yLKwmgvh7cF0q4'\n);\n\nexport function startLoggingService(messaging: MessagingService): void ***REMOVED***\n  if (!messaging.isLogServiceStarted) ***REMOVED***\n    _processQueue(messaging, LOG_INTERVAL_IN_MS);\n    messaging.isLogServiceStarted = true;\n***REMOVED***\n}\n\n/**\n *\n * @param messaging the messaging instance.\n * @param offsetInMs this method execute after `offsetInMs` elapsed .\n */\nexport function _processQueue(\n  messaging: MessagingService,\n  offsetInMs: number\n): void ***REMOVED***\n  setTimeout(async () => ***REMOVED***\n    if (!messaging.deliveryMetricsExportedToBigQueryEnabled) ***REMOVED***\n      // flush events and terminate logging service\n      messaging.logEvents = [];\n      messaging.isLogServiceStarted = false;\n\n      return;\n  ***REMOVED***\n\n    if (!messaging.logEvents.length) ***REMOVED***\n      return _processQueue(messaging, LOG_INTERVAL_IN_MS);\n  ***REMOVED***\n\n    await _dispatchLogEvents(messaging);\n***REMOVED***, offsetInMs);\n}\n\nexport async function _dispatchLogEvents(\n  messaging: MessagingService\n): Promise<void> ***REMOVED***\n  for (\n    let i = 0, n = messaging.logEvents.length;\n    i < n;\n    i += MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST\n  ) ***REMOVED***\n    const logRequest = _createLogRequest(\n      messaging.logEvents.slice(i, i + MAX_NUMBER_OF_EVENTS_PER_LOG_REQUEST)\n    );\n\n    let retryCount = 0,\n      response = ***REMOVED***} as Response;\n\n    do ***REMOVED***\n      try ***REMOVED***\n        response = await fetch(\n          FIRELOG_ENDPOINT.concat('?key=', FCM_TRANSPORT_KEY),\n          ***REMOVED***\n            method: 'POST',\n            body: JSON.stringify(logRequest)\n        ***REMOVED***\n        );\n\n        // don't retry on 200s or non retriable errors\n        if (response.ok || (!response.ok && !isRetriableError(response))) ***REMOVED***\n          break;\n      ***REMOVED***\n\n        if (!response.ok && isRetriableError(response)) ***REMOVED***\n          // rethrow to retry with quota\n          throw new Error(\n            'a retriable Non-200 code is returned in fetch to Firelog endpoint. Retry'\n          );\n      ***REMOVED***\n    ***REMOVED*** catch (error) ***REMOVED***\n        const isLastAttempt = retryCount === MAX_RETRIES;\n        if (isLastAttempt) ***REMOVED***\n          // existing the do-while interactive retry logic because retry quota has reached.\n          break;\n      ***REMOVED***\n    ***REMOVED***\n\n      let delayInMs: number;\n      try ***REMOVED***\n        delayInMs = Number(\n          ((await response.json()) as LogResponse).nextRequestWaitMillis\n        );\n    ***REMOVED*** catch (e) ***REMOVED***\n        delayInMs = DEFAULT_BACKOFF_TIME_MS;\n    ***REMOVED***\n\n      await new Promise(resolve => setTimeout(resolve, delayInMs));\n\n      retryCount++;\n  ***REMOVED*** while (retryCount < MAX_RETRIES);\n***REMOVED***\n\n  messaging.logEvents = [];\n  // schedule for next logging\n  _processQueue(messaging, LOG_INTERVAL_IN_MS);\n}\n\nfunction isRetriableError(response: Response): boolean ***REMOVED***\n  const httpStatus = response.status;\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\nexport async function stageLog(\n  messaging: MessagingService,\n  internalPayload: MessagePayloadInternal\n): Promise<void> ***REMOVED***\n  const fcmEvent = createFcmEvent(\n    internalPayload,\n    await messaging.firebaseDependencies.installations.getId()\n  );\n\n  createAndEnqueueLogEvent(messaging, fcmEvent);\n}\n\nfunction createFcmEvent(\n  internalPayload: MessagePayloadInternal,\n  fid: string\n): FcmEvent ***REMOVED***\n  const fcmEvent = ***REMOVED***} as FcmEvent;\n\n  /* eslint-disable camelcase */\n  // some fields should always be non-null. Still check to ensure.\n  if (!!internalPayload.from) ***REMOVED***\n    fcmEvent.project_number = internalPayload.from;\n***REMOVED***\n\n  if (!!internalPayload.fcmMessageId) ***REMOVED***\n    fcmEvent.message_id = internalPayload.fcmMessageId;\n***REMOVED***\n\n  fcmEvent.instance_id = fid;\n\n  if (!!internalPayload.notification) ***REMOVED***\n    fcmEvent.message_type = MessageType.DISPLAY_NOTIFICATION.toString();\n***REMOVED*** else ***REMOVED***\n    fcmEvent.message_type = MessageType.DATA_MESSAGE.toString();\n***REMOVED***\n\n  fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();\n  fcmEvent.package_name = self.origin.replace(/(^\\w+:|^)\\/\\//, '');\n\n  if (!!internalPayload.collapse_key) ***REMOVED***\n    fcmEvent.collapse_key = internalPayload.collapse_key;\n***REMOVED***\n\n  fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();\n\n  if (!!internalPayload.fcmOptions?.analytics_label) ***REMOVED***\n    fcmEvent.analytics_label = internalPayload.fcmOptions?.analytics_label;\n***REMOVED***\n\n  /* eslint-enable camelcase */\n  return fcmEvent;\n}\n\nfunction createAndEnqueueLogEvent(\n  messaging: MessagingService,\n  fcmEvent: FcmEvent\n): void ***REMOVED***\n  const logEvent = ***REMOVED***} as LogEvent;\n\n  /* eslint-disable camelcase */\n  logEvent.event_time_ms = Math.floor(Date.now()).toString();\n  logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent);\n  // eslint-disable-next-line camelcase\n\n  messaging.logEvents.push(logEvent);\n}\n\nexport function _createLogRequest(logEventQueue: LogEvent[]): LogRequest ***REMOVED***\n  const logRequest = ***REMOVED***} as LogRequest;\n\n  /* eslint-disable camelcase */\n  logRequest.log_source = FCM_LOG_SOURCE.toString();\n  logRequest.log_event = logEventQueue;\n  /* eslint-enable camelcase */\n\n  return logRequest;\n}\n\nexport function _mergeStrings(s1: string, s2: string): string ***REMOVED***\n  const resultArray = [];\n  for (let i = 0; i < s1.length; i++) ***REMOVED***\n    resultArray.push(s1.charAt(i));\n    if (i < s2.length) ***REMOVED***\n      resultArray.push(s2.charAt(i));\n  ***REMOVED***\n***REMOVED***\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport ***REMOVED*** FirebaseApp, FirebaseOptions } from '@firebase/app';\n\nimport ***REMOVED*** AppConfig } from '../interfaces/app-config';\nimport ***REMOVED*** FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig ***REMOVED***\n  if (!app || !app.options) ***REMOVED***\n    throw getMissingValueError('App Configuration Object');\n***REMOVED***\n\n  if (!app.name) ***REMOVED***\n    throw getMissingValueError('App Name');\n***REMOVED***\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const ***REMOVED*** options } = app;\n  for (const keyName of configKeys) ***REMOVED***\n    if (!options[keyName]) ***REMOVED***\n      throw getMissingValueError(keyName);\n  ***REMOVED***\n***REMOVED***\n\n  return ***REMOVED***\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n***REMOVED***;\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError ***REMOVED***\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, ***REMOVED***\n    valueName\n***REMOVED***);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** FirebaseApp, _FirebaseService } from '@firebase/app';\nimport ***REMOVED*** MessagePayload, NextFn, Observer } from './interfaces/public-types';\n\nimport ***REMOVED*** FirebaseAnalyticsInternalName } from '@firebase/analytics-interop-types';\nimport ***REMOVED*** FirebaseInternalDependencies } from './interfaces/internal-dependencies';\nimport ***REMOVED*** LogEvent } from './interfaces/logging-types';\nimport ***REMOVED*** Provider } from '@firebase/component';\nimport ***REMOVED*** _FirebaseInstallationsInternal } from '@firebase/installations';\nimport ***REMOVED*** extractAppConfig } from './helpers/extract-app-config';\n\nexport class MessagingService implements _FirebaseService ***REMOVED***\n  readonly app!: FirebaseApp;\n  readonly firebaseDependencies!: FirebaseInternalDependencies;\n\n  swRegistration?: ServiceWorkerRegistration;\n  vapidKey?: string;\n  // logging is only done with end user consent. Default to false.\n  deliveryMetricsExportedToBigQueryEnabled: boolean = false;\n\n  onBackgroundMessageHandler:\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload>\n    | null = null;\n\n  onMessageHandler: NextFn<MessagePayload> | Observer<MessagePayload> | null =\n    null;\n\n  logEvents: LogEvent[] = [];\n  isLogServiceStarted: boolean = false;\n\n  constructor(\n    app: FirebaseApp,\n    installations: _FirebaseInstallationsInternal,\n    analyticsProvider: Provider<FirebaseAnalyticsInternalName>\n  ) ***REMOVED***\n    const appConfig = extractAppConfig(app);\n\n    this.firebaseDependencies = ***REMOVED***\n      app,\n      appConfig,\n      installations,\n      analyticsProvider\n  ***REMOVED***;\n***REMOVED***\n\n  _delete(): Promise<void> ***REMOVED***\n    return Promise.resolve();\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** DEFAULT_SW_PATH, DEFAULT_SW_SCOPE } from '../util/constants';\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport ***REMOVED*** MessagingService } from '../messaging-service';\n\nexport async function registerDefaultSw(\n  messaging: MessagingService\n): Promise<void> ***REMOVED***\n  try ***REMOVED***\n    messaging.swRegistration = await navigator.serviceWorker.register(\n      DEFAULT_SW_PATH,\n      ***REMOVED***\n        scope: DEFAULT_SW_SCOPE\n    ***REMOVED***\n    );\n\n    // The timing when browser updates sw when sw has an update is unreliable from experiment. It\n    // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n    // is stuck with the old version. For example,\n    // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n    // sw if there was an update.\n    messaging.swRegistration.update().catch(() => ***REMOVED***\n      /* it is non blocking and we don't care if it failed */\n  ***REMOVED***);\n***REMOVED*** catch (e) ***REMOVED***\n    throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, ***REMOVED***\n      browserErrorMessage: (e as Error)?.message\n  ***REMOVED***);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport ***REMOVED*** MessagingService } from '../messaging-service';\nimport ***REMOVED*** getTokenInternal } from '../internals/token-manager';\nimport ***REMOVED*** updateSwReg } from '../helpers/updateSwReg';\nimport ***REMOVED*** updateVapidKey } from '../helpers/updateVapidKey';\nimport ***REMOVED*** GetTokenOptions } from '../interfaces/public-types';\n\nexport async function getToken(\n  messaging: MessagingService,\n  options?: GetTokenOptions\n): Promise<string> ***REMOVED***\n  if (!navigator) ***REMOVED***\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n***REMOVED***\n\n  if (Notification.permission === 'default') ***REMOVED***\n    await Notification.requestPermission();\n***REMOVED***\n\n  if (Notification.permission !== 'granted') ***REMOVED***\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n***REMOVED***\n\n  await updateVapidKey(messaging, options?.vapidKey);\n  await updateSwReg(messaging, options?.serviceWorkerRegistration);\n\n  return getTokenInternal(messaging);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** DEFAULT_VAPID_KEY } from '../util/constants';\nimport ***REMOVED*** MessagingService } from '../messaging-service';\n\nexport async function updateVapidKey(\n  messaging: MessagingService,\n  vapidKey?: string | undefined\n): Promise<void> ***REMOVED***\n  if (!!vapidKey) ***REMOVED***\n    messaging.vapidKey = vapidKey;\n***REMOVED*** else if (!messaging.vapidKey) ***REMOVED***\n    messaging.vapidKey = DEFAULT_VAPID_KEY;\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport ***REMOVED*** MessagingService } from '../messaging-service';\nimport ***REMOVED*** registerDefaultSw } from './registerDefaultSw';\n\nexport async function updateSwReg(\n  messaging: MessagingService,\n  swRegistration?: ServiceWorkerRegistration | undefined\n): Promise<void> ***REMOVED***\n  if (!swRegistration && !messaging.swRegistration) ***REMOVED***\n    await registerDefaultSw(messaging);\n***REMOVED***\n\n  if (!swRegistration && !!messaging.swRegistration) ***REMOVED***\n    return;\n***REMOVED***\n\n  if (!(swRegistration instanceof ServiceWorkerRegistration)) ***REMOVED***\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n***REMOVED***\n\n  messaging.swRegistration = swRegistration;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\nimport ***REMOVED***\n  ConsoleMessageData,\n  MessageType\n} from '../interfaces/internal-message-payload';\n\nimport ***REMOVED*** MessagingService } from '../messaging-service';\n\nexport async function logToScion(\n  messaging: MessagingService,\n  messageType: MessageType,\n  data: ConsoleMessageData\n): Promise<void> ***REMOVED***\n  const eventType = getEventType(messageType);\n  const analytics =\n    await messaging.firebaseDependencies.analyticsProvider.get();\n  analytics.logEvent(eventType, ***REMOVED***\n    /* eslint-disable camelcase */\n    message_id: data[CONSOLE_CAMPAIGN_ID],\n    message_name: data[CONSOLE_CAMPAIGN_NAME],\n    message_time: data[CONSOLE_CAMPAIGN_TIME],\n    message_device_time: Math.floor(Date.now() / 1000)\n    /* eslint-enable camelcase */\n***REMOVED***);\n}\n\nfunction getEventType(messageType: MessageType): string ***REMOVED***\n  switch (messageType) ***REMOVED***\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport ***REMOVED***\n  onNotificationClick,\n  onPush,\n  onSubChange\n} from '../listeners/sw-listeners';\n\nimport ***REMOVED*** GetTokenOptions } from '../interfaces/public-types';\nimport ***REMOVED*** MessagingInternal } from '@firebase/messaging-interop-types';\nimport ***REMOVED*** MessagingService } from '../messaging-service';\nimport ***REMOVED*** ServiceWorkerGlobalScope } from '../util/sw-types';\nimport ***REMOVED*** _registerComponent, registerVersion } from '@firebase/app';\nimport ***REMOVED*** getToken } from '../api/getToken';\nimport ***REMOVED*** messageEventListener } from '../listeners/window-listener';\n\nimport ***REMOVED*** name, version } from '../../package.json';\n\nconst WindowMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => ***REMOVED***\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  navigator.serviceWorker.addEventListener('message', e =>\n    messageEventListener(messaging as MessagingService, e)\n  );\n\n  return messaging;\n};\n\nconst WindowMessagingInternalFactory: InstanceFactory<'messaging-internal'> = (\n  container: ComponentContainer\n) => ***REMOVED***\n  const messaging = container\n    .getProvider('messaging')\n    .getImmediate() as MessagingService;\n\n  const messagingInternal: MessagingInternal = ***REMOVED***\n    getToken: (options?: GetTokenOptions) => getToken(messaging, options)\n***REMOVED***;\n\n  return messagingInternal;\n};\n\ndeclare const self: ServiceWorkerGlobalScope;\nconst SwMessagingFactory: InstanceFactory<'messaging'> = (\n  container: ComponentContainer\n) => ***REMOVED***\n  const messaging = new MessagingService(\n    container.getProvider('app').getImmediate(),\n    container.getProvider('installations-internal').getImmediate(),\n    container.getProvider('analytics-internal')\n  );\n\n  self.addEventListener('push', e => ***REMOVED***\n    e.waitUntil(onPush(e, messaging as MessagingService));\n***REMOVED***);\n  self.addEventListener('pushsubscriptionchange', e => ***REMOVED***\n    e.waitUntil(onSubChange(e, messaging as MessagingService));\n***REMOVED***);\n  self.addEventListener('notificationclick', e => ***REMOVED***\n    e.waitUntil(onNotificationClick(e));\n***REMOVED***);\n\n  return messaging;\n};\n\nexport function registerMessagingInWindow(): void ***REMOVED***\n  _registerComponent(\n    new Component('messaging', WindowMessagingFactory, ComponentType.PUBLIC)\n  );\n\n  _registerComponent(\n    new Component(\n      'messaging-internal',\n      WindowMessagingInternalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\n/**\n * The messaging instance registered in sw is named differently than that of in client. This is\n * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in\n * `messaging-compat` and component with the same name can only be registered once.\n */\nexport function registerMessagingInSw(): void ***REMOVED***\n  _registerComponent(\n    new Component('messaging-sw', SwMessagingFactory, ComponentType.PUBLIC)\n  );\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  areCookiesEnabled,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\n\n/**\n * Checks if all required APIs exist in the browser.\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isWindowSupported(): Promise<boolean> ***REMOVED***\n  try ***REMOVED***\n    // This throws if open() is unsupported, so adding it to the conditional\n    // statement below can cause an uncaught error.\n    await validateIndexedDBOpenable();\n***REMOVED*** catch (e) ***REMOVED***\n    return false;\n***REMOVED***\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    typeof window !== 'undefined' &&\n    isIndexedDBAvailable() &&\n    areCookiesEnabled() &&\n    'serviceWorker' in navigator &&\n    'PushManager' in window &&\n    'Notification' in window &&\n    'fetch' in window &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n\n/**\n * Checks whether all required APIs exist within SW Context\n * @returns a Promise that resolves to a boolean.\n *\n * @public\n */\nexport async function isSwSupported(): Promise<boolean> ***REMOVED***\n  // firebase-js-sdk/issues/2393 reveals that idb#open in Safari iframe and Firefox private browsing\n  // might be prohibited to run. In these contexts, an error would be thrown during the messaging\n  // instantiating phase, informing the developers to import/call isSupported for special handling.\n  return (\n    isIndexedDBAvailable() &&\n    (await validateIndexedDBOpenable()) &&\n    'PushManager' in self &&\n    'Notification' in self &&\n    ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') &&\n    PushSubscription.prototype.hasOwnProperty('getKey')\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** CONSTANTS } from './constants';\nimport ***REMOVED*** getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string ***REMOVED***\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) ***REMOVED***\n    return navigator['userAgent'];\n***REMOVED*** else ***REMOVED***\n    return '';\n***REMOVED***\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean ***REMOVED***\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean ***REMOVED***\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') ***REMOVED***\n    return true;\n***REMOVED*** else if (forceEnvironment === 'browser') ***REMOVED***\n    return false;\n***REMOVED***\n\n  try ***REMOVED***\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n***REMOVED*** catch (e) ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean ***REMOVED***\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime ***REMOVED***\n  id?: unknown;\n}\ndeclare const chrome: ***REMOVED*** runtime?: BrowserRuntime };\ndeclare const browser: ***REMOVED*** runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean ***REMOVED***\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean ***REMOVED***\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean ***REMOVED***\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean ***REMOVED***\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean ***REMOVED***\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean ***REMOVED***\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean ***REMOVED***\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean ***REMOVED***\n  try ***REMOVED***\n    return typeof indexedDB === 'object';\n***REMOVED*** catch (e) ***REMOVED***\n    return false;\n***REMOVED***\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> ***REMOVED***\n  return new Promise((resolve, reject) => ***REMOVED***\n    try ***REMOVED***\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => ***REMOVED***\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) ***REMOVED***\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n      ***REMOVED***\n        resolve(true);\n    ***REMOVED***;\n      request.onupgradeneeded = () => ***REMOVED***\n        preExist = false;\n    ***REMOVED***;\n\n      request.onerror = () => ***REMOVED***\n        reject(request.error?.message || '');\n    ***REMOVED***;\n  ***REMOVED*** catch (error) ***REMOVED***\n      reject(error);\n  ***REMOVED***\n***REMOVED***);\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean ***REMOVED***\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) ***REMOVED***\n    return false;\n***REMOVED***\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from './util/errors';\nimport ***REMOVED*** FirebaseApp, _getProvider, getApp } from '@firebase/app';\nimport ***REMOVED***\n  GetTokenOptions,\n  MessagePayload,\n  Messaging\n} from './interfaces/public-types';\nimport ***REMOVED***\n  NextFn,\n  Observer,\n  Unsubscribe,\n  getModularInstance\n} from '@firebase/util';\nimport ***REMOVED*** isSwSupported, isWindowSupported } from './api/isSupported';\n\nimport ***REMOVED*** MessagingService } from './messaging-service';\nimport ***REMOVED*** deleteToken as _deleteToken } from './api/deleteToken';\nimport ***REMOVED*** getToken as _getToken } from './api/getToken';\nimport ***REMOVED*** onBackgroundMessage as _onBackgroundMessage } from './api/onBackgroundMessage';\nimport ***REMOVED*** onMessage as _onMessage } from './api/onMessage';\nimport ***REMOVED*** _setDeliveryMetricsExportedToBigQueryEnabled } from './api/setDeliveryMetricsExportedToBigQueryEnabled';\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInWindow(app: FirebaseApp = getApp()): Messaging ***REMOVED***\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isWindowSupported().then(\n    isSupported => ***REMOVED***\n      // If `isWindowSupported()` resolved, but returned false.\n      if (!isSupported) ***REMOVED***\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n    ***REMOVED***\n  ***REMOVED***,\n    _ => ***REMOVED***\n      // If `isWindowSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n  ***REMOVED***\n  );\n  return _getProvider(getModularInstance(app), 'messaging').getImmediate();\n}\n\n/**\n * Retrieves a Firebase Cloud Messaging instance.\n *\n * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.\n *\n * @public\n */\nexport function getMessagingInSw(app: FirebaseApp = getApp()): Messaging ***REMOVED***\n  // Conscious decision to make this async check non-blocking during the messaging instance\n  // initialization phase for performance consideration. An error would be thrown latter for\n  // developer's information. Developers can then choose to import and call `isSupported` for\n  // special handling.\n  isSwSupported().then(\n    isSupported => ***REMOVED***\n      // If `isSwSupported()` resolved, but returned false.\n      if (!isSupported) ***REMOVED***\n        throw ERROR_FACTORY.create(ErrorCode.UNSUPPORTED_BROWSER);\n    ***REMOVED***\n  ***REMOVED***,\n    _ => ***REMOVED***\n      // If `isSwSupported()` rejected.\n      throw ERROR_FACTORY.create(ErrorCode.INDEXED_DB_UNSUPPORTED);\n  ***REMOVED***\n  );\n  return _getProvider(getModularInstance(app), 'messaging-sw').getImmediate();\n}\n\n/**\n * Subscribes the ***REMOVED***@link Messaging} instance to push notifications. Returns an Firebase Cloud\n * Messaging registration token that can be used to send push messages to that ***REMOVED***@link Messaging}\n * instance.\n *\n * If a notification permission isn't already granted, this method asks the user for permission. The\n * returned promise rejects if the user does not allow the app to show notifications.\n *\n * @param messaging - The ***REMOVED***@link Messaging} instance.\n * @param options - Provides an optional vapid key and an optinoal service worker registration\n *\n * @returns The promise resolves with an FCM registration token.\n *\n * @public\n */\nexport async function getToken(\n  messaging: Messaging,\n  options?: GetTokenOptions\n): Promise<string> ***REMOVED***\n  messaging = getModularInstance(messaging);\n  return _getToken(messaging as MessagingService, options);\n}\n\n/**\n * Deletes the registration token associated with this ***REMOVED***@link Messaging} instance and unsubscribes\n * the ***REMOVED***@link Messaging} instance from the push subscription.\n *\n * @param messaging - The ***REMOVED***@link Messaging} instance.\n *\n * @returns The promise resolves when the token has been successfully deleted.\n *\n * @public\n */\nexport function deleteToken(messaging: Messaging): Promise<boolean> ***REMOVED***\n  messaging = getModularInstance(messaging);\n  return _deleteToken(messaging as MessagingService);\n}\n\n/**\n * When a push message is received and the user is currently on a page for your origin, the\n * message is passed to the page and an `onMessage()` event is dispatched with the payload of\n * the push message.\n *\n *\n * @param messaging - The ***REMOVED***@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined,\n *     is called when a message is received and the user is currently viewing your page.\n * @returns To stop listening for messages execute this returned function.\n *\n * @public\n */\nexport function onMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe ***REMOVED***\n  messaging = getModularInstance(messaging);\n  return _onMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Called when a message is received while the app is in the background. An app is considered to be\n * in the background if no active window is displayed.\n *\n * @param messaging - The ***REMOVED***@link Messaging} instance.\n * @param nextOrObserver - This function, or observer object with `next` defined, is called when a\n * message is received and the app is currently in the background.\n *\n * @returns To stop listening for messages execute this returned function\n *\n * @public\n */\nexport function onBackgroundMessage(\n  messaging: Messaging,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe ***REMOVED***\n  messaging = getModularInstance(messaging);\n  return _onBackgroundMessage(messaging as MessagingService, nextOrObserver);\n}\n\n/**\n * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By\n * default, message delivery metrics are not exported to BigQuery. Use this method to enable or\n * disable the export at runtime.\n *\n * @param messaging - The `FirebaseMessaging` instance.\n * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to\n * BigQuery.\n *\n * @public\n */\nexport function experimentalSetDeliveryMetricsExportedToBigQueryEnabled(\n  messaging: Messaging,\n  enable: boolean\n): void ***REMOVED***\n  messaging = getModularInstance(messaging);\n  return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport ***REMOVED*** MessagingService } from '../messaging-service';\nimport ***REMOVED*** deleteTokenInternal } from '../internals/token-manager';\nimport ***REMOVED*** registerDefaultSw } from '../helpers/registerDefaultSw';\n\nexport async function deleteToken(\n  messaging: MessagingService\n): Promise<boolean> ***REMOVED***\n  if (!navigator) ***REMOVED***\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n***REMOVED***\n\n  if (!messaging.swRegistration) ***REMOVED***\n    await registerDefaultSw(messaging);\n***REMOVED***\n\n  return deleteTokenInternal(messaging);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nimport ***REMOVED***\n  MessagePayload,\n  NextFn,\n  Observer,\n  Unsubscribe\n} from '../interfaces/public-types';\nimport ***REMOVED*** MessagingService } from '../messaging-service';\n\nexport function onMessage(\n  messaging: MessagingService,\n  nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n): Unsubscribe ***REMOVED***\n  if (!navigator) ***REMOVED***\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n***REMOVED***\n\n  messaging.onMessageHandler = nextOrObserver;\n\n  return () => ***REMOVED***\n    messaging.onMessageHandler = null;\n***REMOVED***;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED***\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\n\nimport ***REMOVED*** CONSOLE_CAMPAIGN_ANALYTICS_ENABLED } from '../util/constants';\nimport ***REMOVED*** MessagingService } from '../messaging-service';\nimport ***REMOVED*** externalizePayload } from '../helpers/externalizePayload';\nimport ***REMOVED*** isConsoleMessage } from '../helpers/is-console-message';\nimport ***REMOVED*** logToScion } from '../helpers/logToScion';\n\nexport async function messageEventListener(\n  messaging: MessagingService,\n  event: MessageEvent\n): Promise<void> ***REMOVED***\n  const internalPayload = event.data as MessagePayloadInternal;\n\n  if (!internalPayload.isFirebaseMessaging) ***REMOVED***\n    return;\n***REMOVED***\n\n  if (\n    messaging.onMessageHandler &&\n    internalPayload.messageType === MessageType.PUSH_RECEIVED\n  ) ***REMOVED***\n    if (typeof messaging.onMessageHandler === 'function') ***REMOVED***\n      messaging.onMessageHandler(externalizePayload(internalPayload));\n  ***REMOVED*** else ***REMOVED***\n      messaging.onMessageHandler.next(externalizePayload(internalPayload));\n  ***REMOVED***\n***REMOVED***\n\n  // Log to Scion if applicable\n  const dataPayload = internalPayload.data;\n  if (\n    isConsoleMessage(dataPayload) &&\n    dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n  ) ***REMOVED***\n    await logToScion(messaging, internalPayload.messageType!, dataPayload);\n***REMOVED***\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ***REMOVED*** CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport ***REMOVED*** ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData ***REMOVED***\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n"],"names":["FirebaseError","Error","constructor","code","message","customData","super","this","name","Object","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","data","fullCode","template","replace","PATTERN","_","key","value","String","replaceTemplate","fullMessage","getModularInstance","_delegate","Component","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","get","target","prop","receiver","IDBTransaction","objectStoreNames","undefined","objectStore","wrap","set","has","wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","includes","args","apply","unwrap","storeNames","tx","call","sort","transformCachableValue","done","Promise","resolve","reject","unlisten","removeEventListener","complete","error","DOMException","addEventListener","cacheDonePromiseForTransaction","object","IDBObjectStore","IDBIndex","some","c","Proxy","IDBRequest","request","promise","success","result","then","catch","promisifyRequest","newValue","openDB","version","blocked","upgrade","blocking","terminated","indexedDB","open","openPromise","event","oldVersion","newVersion","db","deleteDB","deleteDatabase","readMethods","writeMethods","cachedMethods","Map","getMethod","targetFuncName","useIndex","isWrite","method","async","storeName","store","index","shift","all","oldTraps","ERROR_FACTORY","isServerError","getInstallationsEndpoint","projectId","extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","responseExpiresIn","Number","creationTime","Date","now","getErrorFromResponse","requestName","errorData","json","serverCode","serverMessage","serverStatus","status","getHeaders","apiKey","Headers","Accept","getHeadersWithAuth","appConfig","refreshToken","headers","append","getAuthorizationHeader","retryIfServerError","fn","sleep","ms","setTimeout","VALID_FID_PATTERN","generateFid","fidByteArray","Uint8Array","self","crypto","msCrypto","getRandomValues","fid","array","btoa","fromCharCode","substr","encode","test","_a","getKey","appName","appId","fidChangeCallbacks","fidChanged","callFidChangeCallbacks","channel","broadcastChannel","BroadcastChannel","onmessage","e","getBroadcastChannel","postMessage","size","close","broadcastFidChange","callbacks","OBJECT_STORE_NAME","dbPromise","getDbPromise","createObjectStore","oldValue","put","remove","delete","update","updateFn","getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","clearTimedOutRequest","registrationStatus","updateOrCreateInstallationEntry","entryWithPromise","navigator","onLine","inProgressEntry","registrationTime","registeredInstallationEntry","heartbeatServiceProvider","endpoint","heartbeatService","getImmediate","optional","heartbeatsHeader","getHeartbeatsHeader","body","authVersion","sdkVersion","JSON","stringify","fetch","ok","responseValue","authToken","createInstallationRequest","registerInstallation","waitUntilFidRegistration","triggerRegistrationIfNecessary","entry","updateInstallationRequest","generateAuthTokenRequest","getGenerateAuthTokenEndpoint","installation","refreshAuthToken","forceRefresh","tokenPromise","isEntryRegistered","oldAuthToken","isAuthTokenExpired","isAuthTokenValid","updateAuthTokenRequest","waitUntilAuthTokenRequest","inProgressAuthToken","requestTime","assign","makeAuthTokenRequestInProgressEntry","updatedInstallationEntry","fetchAuthTokenFromServer","getToken","installationsImpl","completeInstallationRegistration","getMissingValueError","valueName","internalFactory","container","app","getProvider","_getProvider","getId","console","_registerComponent","options","configKeys","keyName","extractAppConfig","_delete","registerVersion","DEFAULT_VAPID_KEY","MessageType","arrayToBase64","uint8Array","base64ToArray","base64String","base64","repeat","length","rawData","atob","outputArray","i","charCodeAt","upgradeDb","dbGet","firebaseDependencies","tokenDetails","oldTokenDetails","senderId","dbNames","databases","map","upgradeTransaction","contains","clear","oldDetails","auth","p256dh","fcmToken","createTime","subscriptionOptions","swScope","vapidKey","checkTokenDetails","migrateOldDatabase","dbSet","requestDeleteToken","unsubscribeOptions","getEndpoint","responseData","errorInfo","err","toString","getBody","web","applicationPubKey","getTokenInternal","messaging","pushSubscription","swRegistration","subscription","pushManager","getSubscription","subscribe","userVisibleOnly","applicationServerKey","getPushSubscription","scope","dbOptions","currentOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","isTokenValid","updatedToken","updateOptions","requestUpdateToken","updatedTokenDetails","deleteTokenInternal","updateToken","warn","getNewToken","dbRemove","unsubscribe","subscribeOptions","requestGetToken","externalizePayload","internalPayload","payload","from","collapseKey","collapse_key","messageId","fcmMessageId","messagePayloadInternal","notification","title","image","icon","propagateNotificationPayload","propagateDataPayload","fcmOptions","click_action","link","_c","_b","_d","analyticsLabel","_e","analytics_label","propagateFcmOptions","_mergeStrings","s1","s2","resultArray","push","charAt","join","MessagingService","analyticsProvider","deliveryMetricsExportedToBigQueryEnabled","onBackgroundMessageHandler","onMessageHandler","logEvents","isLogServiceStarted","messagingSenderId","registerDefaultSw","serviceWorker","register","browserErrorMessage","Notification","permission","requestPermission","updateVapidKey","ServiceWorkerRegistration","updateSwReg","serviceWorkerRegistration","logToScion","messageType","eventType","NOTIFICATION_CLICKED","PUSH_RECEIVED","getEventType","logEvent","message_id","message_name","message_time","message_device_time","Math","floor","WindowMessagingInternalFactory","isWindowSupported","preExist","DB_CHECK_NAME","onsuccess","onupgradeneeded","onerror","window","isIndexedDBAvailable","cookieEnabled","hasOwnProperty","PushSubscription","getMessagingInWindow","getApp","isSupported","_getToken","deleteToken","_deleteToken","onMessage","nextOrObserver","_onMessage","isFirebaseMessaging","next","dataPayload","messageEventListener"],"mappings":"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","preExistingComment":"firebase-messaging.js.map"}