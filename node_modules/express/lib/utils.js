/*!
 * express
 * Copyright(c) 2009-2013 TJ Holowaychuk
 * Copyright(c) 2014-2015 Douglas Christopher Wilson
 * MIT Licensed
 */

'use strict';

/**
 * Module dependencies.
 * @api private
 */

var Buffer = require('safe-buffer').Buffer
var contentDisposition = require('content-disposition');
var contentType = require('content-type');
var deprecate = require('depd')('express');
var flatten = require('array-flatten');
var mime = require('send').mime;
var etag = require('etag');
var proxyaddr = require('proxy-addr');
var qs = require('qs');
var querystring = require('querystring');

/**
 * Return strong ETag for `body`.
 *
 * @param ***REMOVED***String|Buffer} body
 * @param ***REMOVED***String} [encoding]
 * @return ***REMOVED***String}
 * @api private
 */

exports.etag = createETagGenerator(***REMOVED*** weak: false })

/**
 * Return weak ETag for `body`.
 *
 * @param ***REMOVED***String|Buffer} body
 * @param ***REMOVED***String} [encoding]
 * @return ***REMOVED***String}
 * @api private
 */

exports.wetag = createETagGenerator(***REMOVED*** weak: true })

/**
 * Check if `path` looks absolute.
 *
 * @param ***REMOVED***String} path
 * @return ***REMOVED***Boolean}
 * @api private
 */

exports.isAbsolute = function(path)***REMOVED***
  if ('/' === path[0]) return true;
  if (':' === path[1] && ('\\' === path[2] || '/' === path[2])) return true; // Windows device path
  if ('\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path
};

/**
 * Flatten the given `arr`.
 *
 * @param ***REMOVED***Array} arr
 * @return ***REMOVED***Array}
 * @api private
 */

exports.flatten = deprecate.function(flatten,
  'utils.flatten: use array-flatten npm module instead');

/**
 * Normalize the given `type`, for example "html" becomes "text/html".
 *
 * @param ***REMOVED***String} type
 * @return ***REMOVED***Object}
 * @api private
 */

exports.normalizeType = function(type)***REMOVED***
  return ~type.indexOf('/')
    ? acceptParams(type)
    : ***REMOVED*** value: mime.lookup(type), params: ***REMOVED***} };
};

/**
 * Normalize `types`, for example "html" becomes "text/html".
 *
 * @param ***REMOVED***Array} types
 * @return ***REMOVED***Array}
 * @api private
 */

exports.normalizeTypes = function(types)***REMOVED***
  var ret = [];

  for (var i = 0; i < types.length; ++i) ***REMOVED***
    ret.push(exports.normalizeType(types[i]));
***REMOVED***

  return ret;
};

/**
 * Generate Content-Disposition header appropriate for the filename.
 * non-ascii filenames are urlencoded and a filename* parameter is added
 *
 * @param ***REMOVED***String} filename
 * @return ***REMOVED***String}
 * @api private
 */

exports.contentDisposition = deprecate.function(contentDisposition,
  'utils.contentDisposition: use content-disposition npm module instead');

/**
 * Parse accept params `str` returning an
 * object with `.value`, `.quality` and `.params`.
 * also includes `.originalIndex` for stable sorting
 *
 * @param ***REMOVED***String} str
 * @param ***REMOVED***Number} index
 * @return ***REMOVED***Object}
 * @api private
 */

function acceptParams(str, index) ***REMOVED***
  var parts = str.split(/ *; */);
  var ret = ***REMOVED*** value: parts[0], quality: 1, params: ***REMOVED***}, originalIndex: index };

  for (var i = 1; i < parts.length; ++i) ***REMOVED***
    var pms = parts[i].split(/ *= */);
    if ('q' === pms[0]) ***REMOVED***
      ret.quality = parseFloat(pms[1]);
  ***REMOVED*** else ***REMOVED***
      ret.params[pms[0]] = pms[1];
  ***REMOVED***
***REMOVED***

  return ret;
}

/**
 * Compile "etag" value to function.
 *
 * @param  ***REMOVED***Boolean|String|Function} val
 * @return ***REMOVED***Function}
 * @api private
 */

exports.compileETag = function(val) ***REMOVED***
  var fn;

  if (typeof val === 'function') ***REMOVED***
    return val;
***REMOVED***

  switch (val) ***REMOVED***
    case true:
    case 'weak':
      fn = exports.wetag;
      break;
    case false:
      break;
    case 'strong':
      fn = exports.etag;
      break;
    default:
      throw new TypeError('unknown value for etag function: ' + val);
***REMOVED***

  return fn;
}

/**
 * Compile "query parser" value to function.
 *
 * @param  ***REMOVED***String|Function} val
 * @return ***REMOVED***Function}
 * @api private
 */

exports.compileQueryParser = function compileQueryParser(val) ***REMOVED***
  var fn;

  if (typeof val === 'function') ***REMOVED***
    return val;
***REMOVED***

  switch (val) ***REMOVED***
    case true:
    case 'simple':
      fn = querystring.parse;
      break;
    case false:
      fn = newObject;
      break;
    case 'extended':
      fn = parseExtendedQueryString;
      break;
    default:
      throw new TypeError('unknown value for query parser function: ' + val);
***REMOVED***

  return fn;
}

/**
 * Compile "proxy trust" value to function.
 *
 * @param  ***REMOVED***Boolean|String|Number|Array|Function} val
 * @return ***REMOVED***Function}
 * @api private
 */

exports.compileTrust = function(val) ***REMOVED***
  if (typeof val === 'function') return val;

  if (val === true) ***REMOVED***
    // Support plain true/false
    return function()***REMOVED*** return true };
***REMOVED***

  if (typeof val === 'number') ***REMOVED***
    // Support trusting hop count
    return function(a, i)***REMOVED*** return i < val };
***REMOVED***

  if (typeof val === 'string') ***REMOVED***
    // Support comma-separated values
    val = val.split(',')
      .map(function (v) ***REMOVED*** return v.trim() })
***REMOVED***

  return proxyaddr.compile(val || []);
}

/**
 * Set the charset in a given Content-Type string.
 *
 * @param ***REMOVED***String} type
 * @param ***REMOVED***String} charset
 * @return ***REMOVED***String}
 * @api private
 */

exports.setCharset = function setCharset(type, charset) ***REMOVED***
  if (!type || !charset) ***REMOVED***
    return type;
***REMOVED***

  // parse type
  var parsed = contentType.parse(type);

  // set charset
  parsed.parameters.charset = charset;

  // format type
  return contentType.format(parsed);
};

/**
 * Create an ETag generator function, generating ETags with
 * the given options.
 *
 * @param ***REMOVED***object} options
 * @return ***REMOVED***function}
 * @private
 */

function createETagGenerator (options) ***REMOVED***
  return function generateETag (body, encoding) ***REMOVED***
    var buf = !Buffer.isBuffer(body)
      ? Buffer.from(body, encoding)
      : body

    return etag(buf, options)
***REMOVED***
}

/**
 * Parse an extended query string with qs.
 *
 * @return ***REMOVED***Object}
 * @private
 */

function parseExtendedQueryString(str) ***REMOVED***
  return qs.parse(str, ***REMOVED***
    allowPrototypes: true
***REMOVED***);
}

/**
 * Return new empty object.
 *
 * @return ***REMOVED***Object}
 * @api private
 */

function newObject() ***REMOVED***
  return ***REMOVED***};
}
