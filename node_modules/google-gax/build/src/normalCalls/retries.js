"use strict";
/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.retryable = void 0;
const status_1 = require("../status");
const googleError_1 = require("../googleError");
const timeout_1 = require("./timeout");
/**
 * Creates a function equivalent to func, but that retries on certain
 * exceptions.
 *
 * @private
 *
 * @param ***REMOVED***GRPCCall} func - A function.
 * @param ***REMOVED***RetryOptions} retry - Configures the exceptions upon which the
 *   function eshould retry, and the parameters to the exponential backoff retry
 *   algorithm.
 * @param ***REMOVED***GRPCCallOtherArgs} otherArgs - the additional arguments to be passed to func.
 * @return ***REMOVED***SimpleCallbackFunction} A function that will retry.
 */
function retryable(func, retry, otherArgs, apiName) ***REMOVED***
    const delayMult = retry.backoffSettings.retryDelayMultiplier;
    const maxDelay = retry.backoffSettings.maxRetryDelayMillis;
    const timeoutMult = retry.backoffSettings.rpcTimeoutMultiplier;
    const maxTimeout = retry.backoffSettings.maxRpcTimeoutMillis;
    let delay = retry.backoffSettings.initialRetryDelayMillis;
    let timeout = retry.backoffSettings.initialRpcTimeoutMillis;
    /**
     * Equivalent to ``func``, but retries upon transient failure.
     *
     * Retrying is done through an exponential backoff algorithm configured
     * by the options in ``retry``.
     * @param ***REMOVED***RequestType} argument The request object.
     * @param ***REMOVED***APICallback} callback The callback.
     * @return ***REMOVED***GRPCCall}
     */
    return (argument, callback) => ***REMOVED***
        let canceller;
        let timeoutId;
        let now = new Date();
        let deadline;
        if (retry.backoffSettings.totalTimeoutMillis) ***REMOVED***
            deadline = now.getTime() + retry.backoffSettings.totalTimeoutMillis;
      ***REMOVED***
        let retries = 0;
        const maxRetries = retry.backoffSettings.maxRetries;
        // TODO: define A/B testing values for retry behaviors.
        /** Repeat the API call as long as necessary. */
        function repeat() ***REMOVED***
            timeoutId = null;
            if (deadline && now.getTime() >= deadline) ***REMOVED***
                const error = new googleError_1.GoogleError(`Total timeout of API $***REMOVED***apiName} exceeded $***REMOVED***retry.backoffSettings.totalTimeoutMillis} milliseconds before any response was received.`);
                error.code = status_1.Status.DEADLINE_EXCEEDED;
                callback(error);
                return;
          ***REMOVED***
            if (retries && retries >= maxRetries) ***REMOVED***
                const error = new googleError_1.GoogleError('Exceeded maximum number of retries before any ' +
                    'response was received');
                error.code = status_1.Status.DEADLINE_EXCEEDED;
                callback(error);
                return;
          ***REMOVED***
            retries++;
            const toCall = (0, timeout_1.addTimeoutArg)(func, timeout, otherArgs);
            canceller = toCall(argument, (err, response, next, rawResponse) => ***REMOVED***
                if (!err) ***REMOVED***
                    callback(null, response, next, rawResponse);
                    return;
              ***REMOVED***
                canceller = null;
                if (retry.retryCodes.indexOf(err.code) < 0) ***REMOVED***
                    err.note =
                        'Exception occurred in retry method that was ' +
                            'not classified as transient';
                    callback(err);
              ***REMOVED***
                else ***REMOVED***
                    const toSleep = Math.random() * delay;
                    timeoutId = setTimeout(() => ***REMOVED***
                        now = new Date();
                        delay = Math.min(delay * delayMult, maxDelay);
                        const timeoutCal = timeout && timeoutMult ? timeout * timeoutMult : 0;
                        const rpcTimeout = maxTimeout ? maxTimeout : 0;
                        const newDeadline = deadline ? deadline - now.getTime() : 0;
                        timeout = Math.min(timeoutCal, rpcTimeout, newDeadline);
                        repeat();
                  ***REMOVED***, toSleep);
              ***REMOVED***
          ***REMOVED***);
            if (canceller instanceof Promise) ***REMOVED***
                canceller.catch(err => ***REMOVED***
                    callback(new googleError_1.GoogleError(err));
              ***REMOVED***);
          ***REMOVED***
      ***REMOVED***
        if (maxRetries && deadline) ***REMOVED***
            const error = new googleError_1.GoogleError('Cannot set both totalTimeoutMillis and maxRetries ' +
                'in backoffSettings.');
            error.code = status_1.Status.INVALID_ARGUMENT;
            callback(error);
      ***REMOVED***
        else ***REMOVED***
            repeat();
      ***REMOVED***
        return ***REMOVED***
            cancel() ***REMOVED***
                if (timeoutId) ***REMOVED***
                    clearTimeout(timeoutId);
              ***REMOVED***
                if (canceller) ***REMOVED***
                    canceller.cancel();
              ***REMOVED***
                else ***REMOVED***
                    const error = new googleError_1.GoogleError('cancelled');
                    error.code = status_1.Status.CANCELLED;
                    callback(error);
              ***REMOVED***
          ***REMOVED***,
      ***REMOVED***;
  ***REMOVED***;
}
exports.retryable = retryable;
//# sourceMappingURL=retries.js.map