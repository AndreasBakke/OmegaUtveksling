/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import ***REMOVED*** Duplex } from 'stream';
import ***REMOVED*** CancellablePromise } from './call';
import ***REMOVED*** CallOptions } from './gax';
import ***REMOVED*** GoogleError } from './googleError';
import ***REMOVED*** Operation } from './longRunningCalls/longrunning';
export interface GRPCCallResult ***REMOVED***
    cancel(): void;
}
export interface RequestType ***REMOVED***
    [index: string]: string | number | RequestType | Array<string | number | RequestType>;
}
export declare type ResponseType = ***REMOVED***} | null;
export declare type NextPageRequestType = ***REMOVED***
    [index: string]: string | number | ***REMOVED***};
} | null;
export declare type RawResponseType = Operation | ***REMOVED***} | null;
export declare type ResultTuple = [
    ResponseType | [ResponseType],
    NextPageRequestType | undefined,
    RawResponseType | undefined
];
export interface SimpleCallbackFunction ***REMOVED***
    (request: RequestType, callback: APICallback): GRPCCallResult;
}
export declare type APICallback = (err: GoogleError | null, response?: ResponseType, next?: NextPageRequestType, rawResponse?: RawResponseType) => void;
export declare type UnaryCall = (argument: ***REMOVED***}, metadata: ***REMOVED***}, options: ***REMOVED***}, callback: APICallback) => GRPCCallResult;
export declare type ServerStreamingCall = (argument: ***REMOVED***}, metadata: ***REMOVED***}, options: ***REMOVED***}) => Duplex & GRPCCallResult;
export declare type ClientStreamingCall = (metadata: ***REMOVED***}, options: ***REMOVED***}, callback?: APICallback) => Duplex & GRPCCallResult;
export declare type BiDiStreamingCall = (metadata: ***REMOVED***}, options: ***REMOVED***}) => Duplex & GRPCCallResult;
export declare type GRPCCall = UnaryCall | ServerStreamingCall | ClientStreamingCall | BiDiStreamingCall;
export declare type CancellableStream = Duplex & GRPCCallResult;
export declare type GaxCallResult = CancellablePromise<ResultTuple> | CancellableStream;
export interface GaxCallPromise ***REMOVED***
    (argument: ***REMOVED***}, callOptions?: CallOptions, callback?: APICallback): CancellablePromise<ResultTuple>;
}
export interface GaxCallStream ***REMOVED***
    (argument: ***REMOVED***}, callOptions?: CallOptions, callback?: APICallback): CancellableStream;
}
export interface GaxCall ***REMOVED***
    (argument: ***REMOVED***}, callOptions?: CallOptions, callback?: APICallback): GaxCallResult;
}
export interface GRPCCallOtherArgs ***REMOVED***
    options?: ***REMOVED***
        deadline?: Date;
  ***REMOVED***;
    headers?: ***REMOVED***};
    metadataBuilder: (abTests?: ***REMOVED***}, headers?: ***REMOVED***}) => ***REMOVED***};
}
