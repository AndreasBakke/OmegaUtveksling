"use strict";
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.IamClient = void 0;
const createApiCall_1 = require("./createApiCall");
const routingHeader = require("./routingHeader");
const gapicConfig = require("./iam_policy_service_client_config.json");
const fallback = require("./fallback");
let version = require('../../package.json').version;
const jsonProtos = require("../protos/iam_service.json");
/**
 *  Google Cloud IAM Client.
 *  This is manually written for providing methods [setIamPolicy, getIamPolicy, testIamPerssion] to the generated client.
 */
class IamClient ***REMOVED***
    constructor(gaxGrpc, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    options) ***REMOVED***
        this._terminated = false;
        this.descriptors = ***REMOVED*** page: ***REMOVED***}, stream: ***REMOVED***}, longrunning: ***REMOVED***} };
        this.innerApiCalls = ***REMOVED***};
        this.gaxGrpc = gaxGrpc;
        // Ensure that options include the service address and port.
        const opts = Object.assign(***REMOVED***
            servicePath: options.servicePath,
            port: options.port,
            clientConfig: options.clientConfig,
            apiEndpoint: options.apiEndpoint,
            fallback: options.fallback,
      ***REMOVED***, options);
        version = opts.fallback ? fallback.version : version;
        opts.scopes = this.constructor.scopes;
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = gaxGrpc.auth;
        // Determine the client header string.
        const clientHeader = [`gax/$***REMOVED***version}`, `gapic/$***REMOVED***version}`];
        if (typeof process !== 'undefined' && 'versions' in process) ***REMOVED***
            clientHeader.push(`gl-node/$***REMOVED***process.versions.node}`);
      ***REMOVED***
        else ***REMOVED***
            clientHeader.push(`gl-web/$***REMOVED***version}`);
      ***REMOVED***
        if (!opts.fallback) ***REMOVED***
            clientHeader.push(`grpc/$***REMOVED***gaxGrpc.grpcVersion}`);
      ***REMOVED***
        if (opts.libName && opts.libVersion) ***REMOVED***
            clientHeader.push(`$***REMOVED***opts.libName}/$***REMOVED***opts.libVersion}`);
      ***REMOVED***
        // Load the applicable protos.
        this._protos = this.gaxGrpc.loadProtoJSON(jsonProtos);
        // Put together the default options sent with requests.
        this._defaults = gaxGrpc.constructSettings('google.iam.v1.IAMPolicy', gapicConfig, opts.clientConfig || ***REMOVED***}, ***REMOVED*** 'x-goog-api-client': clientHeader.join(' ') });
        this.innerApiCalls = ***REMOVED***};
  ***REMOVED***
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns ***REMOVED***Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() ***REMOVED***
        // If the client stub promise is already initialized, return immediately.
        if (this.iamPolicyStub) ***REMOVED***
            return this.iamPolicyStub;
      ***REMOVED***
        // Put together the "service stub" for
        // google.iam.v1.IAMPolicy.
        this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.iam.v1.IAMPolicy')
            : this._protos.google.iam.v1.IAMPolicy, this._opts);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const iamPolicyStubMethods = [
            'getIamPolicy',
            'setIamPolicy',
            'testIamPermissions',
        ];
        for (const methodName of iamPolicyStubMethods) ***REMOVED***
            const innerCallPromise = this.iamPolicyStub.then(stub => (...args) => ***REMOVED***
                if (this._terminated) ***REMOVED***
                    return Promise.reject('The client has already been closed.');
              ***REMOVED***
                const func = stub[methodName];
                return func.apply(stub, args);
          ***REMOVED***, (err) => () => ***REMOVED***
                throw err;
          ***REMOVED***);
            this.innerApiCalls[methodName] = (0, createApiCall_1.createApiCall)(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);
      ***REMOVED***
        return this.iamPolicyStub;
  ***REMOVED***
    /**
     * The DNS address for this API service.
     */
    static get servicePath() ***REMOVED***
        return 'cloudkms.googleapis.com';
  ***REMOVED***
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     */
    static get apiEndpoint() ***REMOVED***
        return 'cloudkms.googleapis.com';
  ***REMOVED***
    /**
     * The port for this API service.
     */
    static get port() ***REMOVED***
        return 443;
  ***REMOVED***
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     */
    static get scopes() ***REMOVED***
        return [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/cloudkms',
        ];
  ***REMOVED***
    getProjectId(callback) ***REMOVED***
        if (this.auth && 'getProjectId' in this.auth) ***REMOVED***
            return this.auth.getProjectId(callback);
      ***REMOVED***
        if (callback) ***REMOVED***
            callback(new Error('Cannot determine project ID.'));
      ***REMOVED***
        else ***REMOVED***
            return Promise.reject('Cannot determine project ID.');
      ***REMOVED***
  ***REMOVED***
    getIamPolicy(request, optionsOrCallback, callback) ***REMOVED***
        let options;
        if (optionsOrCallback instanceof Function && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            routingHeader.fromParams(***REMOVED***
                resource: request.resource,
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.getIamPolicy(request, options, callback);
  ***REMOVED***
    setIamPolicy(request, optionsOrCallback, callback) ***REMOVED***
        let options;
        if (optionsOrCallback instanceof Function && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            routingHeader.fromParams(***REMOVED***
                resource: request.resource,
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.setIamPolicy(request, options, callback);
  ***REMOVED***
    testIamPermissions(request, optionsOrCallback, callback) ***REMOVED***
        let options;
        if (optionsOrCallback instanceof Function && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            routingHeader.fromParams(***REMOVED***
                resource: request.resource,
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.testIamPermissions(request, options, callback);
  ***REMOVED***
    /**
     * Terminate the GRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     */
    close() ***REMOVED***
        this.initialize();
        if (!this._terminated) ***REMOVED***
            return this.iamPolicyStub.then(stub => ***REMOVED***
                this._terminated = true;
                stub.close();
          ***REMOVED***);
      ***REMOVED***
        return Promise.resolve();
  ***REMOVED***
}
exports.IamClient = IamClient;
//# sourceMappingURL=iamService.js.map