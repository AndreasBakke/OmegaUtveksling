"use strict";
/**
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.decodeResponse = exports.encodeRequest = void 0;
// proto-over-HTTP request encoding and decoding
const serializer = require("proto3-json-serializer");
const fallback_1 = require("./fallback");
const featureDetection_1 = require("./featureDetection");
const googleError_1 = require("./googleError");
const transcoding_1 = require("./transcoding");
if (!(0, featureDetection_1.hasTextEncoder)() || !(0, featureDetection_1.hasTextDecoder)()) ***REMOVED***
    require('fast-text-encoding');
}
function encodeRequest(rpc, protocol, servicePath, servicePort, request, numericEnums) ***REMOVED***
    const headers = ***REMOVED***
        'Content-Type': 'application/json',
  ***REMOVED***;
    const message = rpc.resolvedRequestType.fromObject(request);
    const json = serializer.toProto3JSON(message, ***REMOVED***
        numericEnums,
  ***REMOVED***);
    if (!json) ***REMOVED***
        throw new Error(`Cannot send null request to RPC $***REMOVED***rpc.name}.`);
  ***REMOVED***
    if (typeof json !== 'object' || Array.isArray(json)) ***REMOVED***
        throw new Error(`Request to RPC $***REMOVED***rpc.name} must be an object.`);
  ***REMOVED***
    const transcoded = (0, transcoding_1.transcode)(json, rpc.parsedOptions);
    if (!transcoded) ***REMOVED***
        throw new Error(`Cannot build HTTP request for $***REMOVED***JSON.stringify(json)}, method: $***REMOVED***rpc.name}`);
  ***REMOVED***
    // If numeric enums feature is requested, add extra parameter to the query string
    if (numericEnums) ***REMOVED***
        transcoded.queryString =
            (transcoded.queryString ? '&' : '') + '$alt=json%3Benum-encoding=int';
  ***REMOVED***
    // Converts httpMethod to method that permitted in standard Fetch API spec
    // https://fetch.spec.whatwg.org/#methods
    const method = transcoded.httpMethod.toUpperCase();
    const body = JSON.stringify(transcoded.data);
    const url = `$***REMOVED***protocol}://$***REMOVED***servicePath}:$***REMOVED***servicePort}/$***REMOVED***transcoded.url.replace(/^\//, '')}?$***REMOVED***transcoded.queryString}`;
    return ***REMOVED***
        method,
        url,
        headers,
        body,
  ***REMOVED***;
}
exports.encodeRequest = encodeRequest;
function decodeResponse(rpc, ok, response) ***REMOVED***
    // eslint-disable-next-line node/no-unsupported-features/node-builtins
    const decodedString = new TextDecoder().decode(response);
    const json = JSON.parse(decodedString);
    if (!ok) ***REMOVED***
        const error = googleError_1.GoogleError.parseHttpError(json);
        throw error;
  ***REMOVED***
    const message = serializer.fromProto3JSON(rpc.resolvedResponseType, json);
    if (!message) ***REMOVED***
        throw new Error(`Received null response from RPC $***REMOVED***rpc.name}`);
  ***REMOVED***
    return rpc.resolvedResponseType.toObject(message, fallback_1.defaultToObjectOptions);
}
exports.decodeResponse = decodeResponse;
//# sourceMappingURL=fallbackRest.js.map