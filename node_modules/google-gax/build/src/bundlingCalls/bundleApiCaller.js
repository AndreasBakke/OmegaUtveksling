"use strict";
/**
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.BundleApiCaller = void 0;
const call_1 = require("../call");
const googleError_1 = require("../googleError");
/**
 * An implementation of APICaller for bundled calls.
 * Uses BundleExecutor to do bundling.
 */
class BundleApiCaller ***REMOVED***
    constructor(bundler) ***REMOVED***
        this.bundler = bundler;
  ***REMOVED***
    init(callback) ***REMOVED***
        if (callback) ***REMOVED***
            return new call_1.OngoingCall(callback);
      ***REMOVED***
        return new call_1.OngoingCallPromise();
  ***REMOVED***
    wrap(func) ***REMOVED***
        return func;
  ***REMOVED***
    call(apiCall, argument, settings, status) ***REMOVED***
        if (!settings.isBundling) ***REMOVED***
            throw new googleError_1.GoogleError('Bundling enabled with no isBundling!');
      ***REMOVED***
        status.call((argument, callback) => ***REMOVED***
            this.bundler.schedule(apiCall, argument, callback);
            return status;
      ***REMOVED***, argument);
  ***REMOVED***
    fail(canceller, err) ***REMOVED***
        canceller.callback(err);
  ***REMOVED***
    result(canceller) ***REMOVED***
        return canceller.promise;
  ***REMOVED***
}
exports.BundleApiCaller = BundleApiCaller;
//# sourceMappingURL=bundleApiCaller.js.map