import * as crypto from 'crypto';
import ***REMOVED*** promisify } from 'util';
import nodeDigest from './dsa_digest.js';
import nodeKey from './node_key.js';
import sign from './sign.js';
import getVerifyKey from './get_sign_verify_key.js';
import ***REMOVED*** oneShotCallback } from './flags.js';
let oneShotVerify;
if (crypto.verify.length > 4 && oneShotCallback) ***REMOVED***
    oneShotVerify = promisify(crypto.verify);
}
else ***REMOVED***
    oneShotVerify = crypto.verify;
}
const verify = async (alg, key, signature, data) => ***REMOVED***
    const keyObject = getVerifyKey(alg, key, 'verify');
    if (alg.startsWith('HS')) ***REMOVED***
        const expected = await sign(alg, keyObject, data);
        const actual = signature;
        try ***REMOVED***
            return crypto.timingSafeEqual(actual, expected);
      ***REMOVED***
        catch ***REMOVED***
            return false;
      ***REMOVED***
  ***REMOVED***
    const algorithm = nodeDigest(alg);
    const keyInput = nodeKey(alg, keyObject);
    try ***REMOVED***
        return await oneShotVerify(algorithm, data, keyInput, signature);
  ***REMOVED***
    catch ***REMOVED***
        return false;
  ***REMOVED***
};
export default verify;
