import * as http from 'http';
import * as https from 'https';
import ***REMOVED*** once } from 'events';
import ***REMOVED*** JOSEError, JWKSTimeout } from '../util/errors.js';
import ***REMOVED*** concat, decoder } from '../lib/buffer_utils.js';
const fetchJwks = async (url, timeout, options) => ***REMOVED***
    let get;
    switch (url.protocol) ***REMOVED***
        case 'https:':
            get = https.get;
            break;
        case 'http:':
            get = http.get;
            break;
        default:
            throw new TypeError('Unsupported URL protocol.');
  ***REMOVED***
    const ***REMOVED*** agent, headers } = options;
    const req = get(url.href, ***REMOVED***
        agent,
        timeout,
        headers,
  ***REMOVED***);
    const [response] = (await Promise.race([once(req, 'response'), once(req, 'timeout')]));
    if (!response) ***REMOVED***
        req.destroy();
        throw new JWKSTimeout();
  ***REMOVED***
    if (response.statusCode !== 200) ***REMOVED***
        throw new JOSEError('Expected 200 OK from the JSON Web Key Set HTTP response');
  ***REMOVED***
    const parts = [];
    for await (const part of response) ***REMOVED***
        parts.push(part);
  ***REMOVED***
    try ***REMOVED***
        return JSON.parse(decoder.decode(concat(...parts)));
  ***REMOVED***
    catch ***REMOVED***
        throw new JOSEError('Failed to parse the JSON Web Key Set HTTP response as JSON');
  ***REMOVED***
};
export default fetchJwks;
