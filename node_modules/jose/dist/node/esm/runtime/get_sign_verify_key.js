import ***REMOVED*** KeyObject, createSecretKey } from 'crypto';
import ***REMOVED*** isCryptoKey } from './webcrypto.js';
import ***REMOVED*** checkSigCryptoKey } from '../lib/crypto_key.js';
import invalidKeyInput from '../lib/invalid_key_input.js';
import ***REMOVED*** types } from './is_key_like.js';
export default function getSignVerifyKey(alg, key, usage) ***REMOVED***
    if (key instanceof Uint8Array) ***REMOVED***
        if (!alg.startsWith('HS')) ***REMOVED***
            throw new TypeError(invalidKeyInput(key, ...types));
      ***REMOVED***
        return createSecretKey(key);
  ***REMOVED***
    if (key instanceof KeyObject) ***REMOVED***
        return key;
  ***REMOVED***
    if (isCryptoKey(key)) ***REMOVED***
        checkSigCryptoKey(key, alg, usage);
        return KeyObject.from(key);
  ***REMOVED***
    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));
}
