import ***REMOVED*** createPrivateKey, createPublicKey, KeyObject } from 'crypto';
import ***REMOVED*** Buffer } from 'buffer';
import ***REMOVED*** isCryptoKey } from './webcrypto.js';
import isKeyObject from './is_key_object.js';
import invalidKeyInput from '../lib/invalid_key_input.js';
import ***REMOVED*** types } from './is_key_like.js';
const genericExport = (keyType, keyFormat, key) => ***REMOVED***
    let keyObject;
    if (isCryptoKey(key)) ***REMOVED***
        if (!key.extractable) ***REMOVED***
            throw new TypeError('CryptoKey is not extractable');
      ***REMOVED***
        keyObject = KeyObject.from(key);
  ***REMOVED***
    else if (isKeyObject(key)) ***REMOVED***
        keyObject = key;
  ***REMOVED***
    else ***REMOVED***
        throw new TypeError(invalidKeyInput(key, ...types));
  ***REMOVED***
    if (keyObject.type !== keyType) ***REMOVED***
        throw new TypeError(`key is not a $***REMOVED***keyType} key`);
  ***REMOVED***
    return keyObject.export(***REMOVED*** format: 'pem', type: keyFormat });
};
export const toSPKI = (key) => ***REMOVED***
    return genericExport('public', 'spki', key);
};
export const toPKCS8 = (key) => ***REMOVED***
    return genericExport('private', 'pkcs8', key);
};
export const fromPKCS8 = (pem) => createPrivateKey(***REMOVED***
    key: Buffer.from(pem.replace(/(?:-----(?:BEGIN|END) PRIVATE KEY-----|\s)/g, ''), 'base64'),
    type: 'pkcs8',
    format: 'der',
});
export const fromSPKI = (pem) => createPublicKey(***REMOVED***
    key: Buffer.from(pem.replace(/(?:-----(?:BEGIN|END) PUBLIC KEY-----|\s)/g, ''), 'base64'),
    type: 'spki',
    format: 'der',
});
