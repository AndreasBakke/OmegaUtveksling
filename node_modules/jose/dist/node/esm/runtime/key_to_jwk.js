import ***REMOVED*** KeyObject, createPublicKey } from 'crypto';
import ***REMOVED*** encode as base64url } from './base64url.js';
import Asn1SequenceDecoder from './asn1_sequence_decoder.js';
import ***REMOVED*** JOSENotSupported } from '../util/errors.js';
import getNamedCurve from './get_named_curve.js';
import ***REMOVED*** isCryptoKey } from './webcrypto.js';
import isKeyObject from './is_key_object.js';
import invalidKeyInput from '../lib/invalid_key_input.js';
import ***REMOVED*** types } from './is_key_like.js';
import ***REMOVED*** jwkExport } from './flags.js';
const keyToJWK = (key) => ***REMOVED***
    let keyObject;
    if (isCryptoKey(key)) ***REMOVED***
        if (!key.extractable) ***REMOVED***
            throw new TypeError('CryptoKey is not extractable');
      ***REMOVED***
        keyObject = KeyObject.from(key);
  ***REMOVED***
    else if (isKeyObject(key)) ***REMOVED***
        keyObject = key;
  ***REMOVED***
    else if (key instanceof Uint8Array) ***REMOVED***
        return ***REMOVED***
            kty: 'oct',
            k: base64url(key),
      ***REMOVED***;
  ***REMOVED***
    else ***REMOVED***
        throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));
  ***REMOVED***
    if (jwkExport) ***REMOVED***
        if (keyObject.type !== 'secret' &&
            !['rsa', 'ec', 'ed25519', 'x25519', 'ed448', 'x448'].includes(keyObject.asymmetricKeyType)) ***REMOVED***
            throw new JOSENotSupported('Unsupported key asymmetricKeyType');
      ***REMOVED***
        return keyObject.export(***REMOVED*** format: 'jwk' });
  ***REMOVED***
    switch (keyObject.type) ***REMOVED***
        case 'secret':
            return ***REMOVED***
                kty: 'oct',
                k: base64url(keyObject.export()),
          ***REMOVED***;
        case 'private':
        case 'public': ***REMOVED***
            switch (keyObject.asymmetricKeyType) ***REMOVED***
                case 'rsa': ***REMOVED***
                    const der = keyObject.export(***REMOVED*** format: 'der', type: 'pkcs1' });
                    const dec = new Asn1SequenceDecoder(der);
                    if (keyObject.type === 'private') ***REMOVED***
                        dec.unsignedInteger();
                  ***REMOVED***
                    const n = base64url(dec.unsignedInteger());
                    const e = base64url(dec.unsignedInteger());
                    let jwk;
                    if (keyObject.type === 'private') ***REMOVED***
                        jwk = ***REMOVED***
                            d: base64url(dec.unsignedInteger()),
                            p: base64url(dec.unsignedInteger()),
                            q: base64url(dec.unsignedInteger()),
                            dp: base64url(dec.unsignedInteger()),
                            dq: base64url(dec.unsignedInteger()),
                            qi: base64url(dec.unsignedInteger()),
                      ***REMOVED***;
                  ***REMOVED***
                    dec.end();
                    return ***REMOVED*** kty: 'RSA', n, e, ...jwk };
              ***REMOVED***
                case 'ec': ***REMOVED***
                    const crv = getNamedCurve(keyObject);
                    let len;
                    let offset;
                    let correction;
                    switch (crv) ***REMOVED***
                        case 'secp256k1':
                            len = 64;
                            offset = 31 + 2;
                            correction = -1;
                            break;
                        case 'P-256':
                            len = 64;
                            offset = 34 + 2;
                            correction = -1;
                            break;
                        case 'P-384':
                            len = 96;
                            offset = 33 + 2;
                            correction = -3;
                            break;
                        case 'P-521':
                            len = 132;
                            offset = 33 + 2;
                            correction = -3;
                            break;
                        default:
                            throw new JOSENotSupported('Unsupported curve');
                  ***REMOVED***
                    if (keyObject.type === 'public') ***REMOVED***
                        const der = keyObject.export(***REMOVED*** type: 'spki', format: 'der' });
                        return ***REMOVED***
                            kty: 'EC',
                            crv,
                            x: base64url(der.subarray(-len, -len / 2)),
                            y: base64url(der.subarray(-len / 2)),
                      ***REMOVED***;
                  ***REMOVED***
                    const der = keyObject.export(***REMOVED*** type: 'pkcs8', format: 'der' });
                    if (der.length < 100) ***REMOVED***
                        offset += correction;
                  ***REMOVED***
                    return ***REMOVED***
                        ...keyToJWK(createPublicKey(keyObject)),
                        d: base64url(der.subarray(offset, offset + len / 2)),
                  ***REMOVED***;
              ***REMOVED***
                case 'ed25519':
                case 'x25519': ***REMOVED***
                    const crv = getNamedCurve(keyObject);
                    if (keyObject.type === 'public') ***REMOVED***
                        const der = keyObject.export(***REMOVED*** type: 'spki', format: 'der' });
                        return ***REMOVED***
                            kty: 'OKP',
                            crv,
                            x: base64url(der.subarray(-32)),
                      ***REMOVED***;
                  ***REMOVED***
                    const der = keyObject.export(***REMOVED*** type: 'pkcs8', format: 'der' });
                    return ***REMOVED***
                        ...keyToJWK(createPublicKey(keyObject)),
                        d: base64url(der.subarray(-32)),
                  ***REMOVED***;
              ***REMOVED***
                case 'ed448':
                case 'x448': ***REMOVED***
                    const crv = getNamedCurve(keyObject);
                    if (keyObject.type === 'public') ***REMOVED***
                        const der = keyObject.export(***REMOVED*** type: 'spki', format: 'der' });
                        return ***REMOVED***
                            kty: 'OKP',
                            crv,
                            x: base64url(der.subarray(crv === 'Ed448' ? -57 : -56)),
                      ***REMOVED***;
                  ***REMOVED***
                    const der = keyObject.export(***REMOVED*** type: 'pkcs8', format: 'der' });
                    return ***REMOVED***
                        ...keyToJWK(createPublicKey(keyObject)),
                        d: base64url(der.subarray(crv === 'Ed448' ? -57 : -56)),
                  ***REMOVED***;
              ***REMOVED***
                default:
                    throw new JOSENotSupported('Unsupported key asymmetricKeyType');
          ***REMOVED***
      ***REMOVED***
        default:
            throw new JOSENotSupported('Unsupported key type');
  ***REMOVED***
};
export default keyToJWK;
