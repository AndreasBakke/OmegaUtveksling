import ***REMOVED*** Buffer } from 'buffer';
import ***REMOVED*** KeyObject, createDecipheriv, createCipheriv, createSecretKey } from 'crypto';
import ***REMOVED*** JOSENotSupported } from '../util/errors.js';
import ***REMOVED*** concat } from '../lib/buffer_utils.js';
import ***REMOVED*** isCryptoKey } from './webcrypto.js';
import ***REMOVED*** checkEncCryptoKey } from '../lib/crypto_key.js';
import isKeyObject from './is_key_object.js';
import invalidKeyInput from '../lib/invalid_key_input.js';
import supported from './ciphers.js';
import ***REMOVED*** types } from './is_key_like.js';
function checkKeySize(key, alg) ***REMOVED***
    if (key.symmetricKeySize << 3 !== parseInt(alg.slice(1, 4), 10)) ***REMOVED***
        throw new TypeError(`Invalid key size for alg: $***REMOVED***alg}`);
  ***REMOVED***
}
function ensureKeyObject(key, alg, usage) ***REMOVED***
    if (isKeyObject(key)) ***REMOVED***
        return key;
  ***REMOVED***
    if (key instanceof Uint8Array) ***REMOVED***
        return createSecretKey(key);
  ***REMOVED***
    if (isCryptoKey(key)) ***REMOVED***
        checkEncCryptoKey(key, alg, usage);
        return KeyObject.from(key);
  ***REMOVED***
    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));
}
export const wrap = (alg, key, cek) => ***REMOVED***
    const size = parseInt(alg.slice(1, 4), 10);
    const algorithm = `aes$***REMOVED***size}-wrap`;
    if (!supported(algorithm)) ***REMOVED***
        throw new JOSENotSupported(`alg $***REMOVED***alg} is not supported either by JOSE or your javascript runtime`);
  ***REMOVED***
    const keyObject = ensureKeyObject(key, alg, 'wrapKey');
    checkKeySize(keyObject, alg);
    const cipher = createCipheriv(algorithm, keyObject, Buffer.alloc(8, 0xa6));
    return concat(cipher.update(cek), cipher.final());
};
export const unwrap = (alg, key, encryptedKey) => ***REMOVED***
    const size = parseInt(alg.slice(1, 4), 10);
    const algorithm = `aes$***REMOVED***size}-wrap`;
    if (!supported(algorithm)) ***REMOVED***
        throw new JOSENotSupported(`alg $***REMOVED***alg} is not supported either by JOSE or your javascript runtime`);
  ***REMOVED***
    const keyObject = ensureKeyObject(key, alg, 'unwrapKey');
    checkKeySize(keyObject, alg);
    const cipher = createDecipheriv(algorithm, keyObject, Buffer.alloc(8, 0xa6));
    return concat(cipher.update(encryptedKey), cipher.final());
};
