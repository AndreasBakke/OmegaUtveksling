import ***REMOVED*** createDecipheriv, KeyObject } from 'crypto';
import checkIvLength from '../lib/check_iv_length.js';
import checkCekLength from './check_cek_length.js';
import ***REMOVED*** concat } from '../lib/buffer_utils.js';
import ***REMOVED*** JOSENotSupported, JWEDecryptionFailed } from '../util/errors.js';
import timingSafeEqual from './timing_safe_equal.js';
import cbcTag from './cbc_tag.js';
import ***REMOVED*** isCryptoKey } from './webcrypto.js';
import ***REMOVED*** checkEncCryptoKey } from '../lib/crypto_key.js';
import isKeyObject from './is_key_object.js';
import invalidKeyInput from '../lib/invalid_key_input.js';
import supported from './ciphers.js';
import ***REMOVED*** types } from './is_key_like.js';
function cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) ***REMOVED***
    const keySize = parseInt(enc.slice(1, 4), 10);
    if (isKeyObject(cek)) ***REMOVED***
        cek = cek.export();
  ***REMOVED***
    const encKey = cek.subarray(keySize >> 3);
    const macKey = cek.subarray(0, keySize >> 3);
    const macSize = parseInt(enc.slice(-3), 10);
    const algorithm = `aes-$***REMOVED***keySize}-cbc`;
    if (!supported(algorithm)) ***REMOVED***
        throw new JOSENotSupported(`alg $***REMOVED***enc} is not supported by your javascript runtime`);
  ***REMOVED***
    const expectedTag = cbcTag(aad, iv, ciphertext, macSize, macKey, keySize);
    let macCheckPassed;
    try ***REMOVED***
        macCheckPassed = timingSafeEqual(tag, expectedTag);
  ***REMOVED***
    catch ***REMOVED***
  ***REMOVED***
    if (!macCheckPassed) ***REMOVED***
        throw new JWEDecryptionFailed();
  ***REMOVED***
    let plaintext;
    try ***REMOVED***
        const decipher = createDecipheriv(algorithm, encKey, iv);
        plaintext = concat(decipher.update(ciphertext), decipher.final());
  ***REMOVED***
    catch ***REMOVED***
  ***REMOVED***
    if (!plaintext) ***REMOVED***
        throw new JWEDecryptionFailed();
  ***REMOVED***
    return plaintext;
}
function gcmDecrypt(enc, cek, ciphertext, iv, tag, aad) ***REMOVED***
    const keySize = parseInt(enc.slice(1, 4), 10);
    const algorithm = `aes-$***REMOVED***keySize}-gcm`;
    if (!supported(algorithm)) ***REMOVED***
        throw new JOSENotSupported(`alg $***REMOVED***enc} is not supported by your javascript runtime`);
  ***REMOVED***
    try ***REMOVED***
        const decipher = createDecipheriv(algorithm, cek, iv, ***REMOVED*** authTagLength: 16 });
        decipher.setAuthTag(tag);
        if (aad.byteLength) ***REMOVED***
            decipher.setAAD(aad, ***REMOVED*** plaintextLength: ciphertext.length });
      ***REMOVED***
        const plaintext = decipher.update(ciphertext);
        decipher.final();
        return plaintext;
  ***REMOVED***
    catch ***REMOVED***
        throw new JWEDecryptionFailed();
  ***REMOVED***
}
const decrypt = (enc, cek, ciphertext, iv, tag, aad) => ***REMOVED***
    let key;
    if (isCryptoKey(cek)) ***REMOVED***
        checkEncCryptoKey(cek, enc, 'decrypt');
        key = KeyObject.from(cek);
  ***REMOVED***
    else if (cek instanceof Uint8Array || isKeyObject(cek)) ***REMOVED***
        key = cek;
  ***REMOVED***
    else ***REMOVED***
        throw new TypeError(invalidKeyInput(cek, ...types, 'Uint8Array'));
  ***REMOVED***
    checkCekLength(enc, key);
    checkIvLength(enc, iv);
    switch (enc) ***REMOVED***
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            return cbcDecrypt(enc, key, ciphertext, iv, tag, aad);
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            return gcmDecrypt(enc, key, ciphertext, iv, tag, aad);
        default:
            throw new JOSENotSupported('Unsupported JWE Content Encryption Algorithm');
  ***REMOVED***
};
export default decrypt;
