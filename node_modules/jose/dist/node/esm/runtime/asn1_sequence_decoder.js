const tagInteger = 0x02;
const tagSequence = 0x30;
export default class Asn1SequenceDecoder ***REMOVED***
    constructor(buffer) ***REMOVED***
        if (buffer[0] !== tagSequence) ***REMOVED***
            throw new TypeError();
      ***REMOVED***
        this.buffer = buffer;
        this.offset = 1;
        const len = this.decodeLength();
        if (len !== buffer.length - this.offset) ***REMOVED***
            throw new TypeError();
      ***REMOVED***
  ***REMOVED***
    decodeLength() ***REMOVED***
        let length = this.buffer[this.offset++];
        if (length & 0x80) ***REMOVED***
            const nBytes = length & ~0x80;
            length = 0;
            for (let i = 0; i < nBytes; i++)
                length = (length << 8) | this.buffer[this.offset + i];
            this.offset += nBytes;
      ***REMOVED***
        return length;
  ***REMOVED***
    unsignedInteger() ***REMOVED***
        if (this.buffer[this.offset++] !== tagInteger) ***REMOVED***
            throw new TypeError();
      ***REMOVED***
        let length = this.decodeLength();
        if (this.buffer[this.offset] === 0) ***REMOVED***
            this.offset++;
            length--;
      ***REMOVED***
        const result = this.buffer.slice(this.offset, this.offset + length);
        this.offset += length;
        return result;
  ***REMOVED***
    end() ***REMOVED***
        if (this.offset !== this.buffer.length) ***REMOVED***
            throw new TypeError();
      ***REMOVED***
  ***REMOVED***
}
