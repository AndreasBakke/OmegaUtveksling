import ***REMOVED*** CompactEncrypt } from '../jwe/compact/encrypt.js';
import ***REMOVED*** encoder } from '../lib/buffer_utils.js';
import ***REMOVED*** ProduceJWT } from './produce.js';
export class EncryptJWT extends ProduceJWT ***REMOVED***
    setProtectedHeader(protectedHeader) ***REMOVED***
        if (this._protectedHeader) ***REMOVED***
            throw new TypeError('setProtectedHeader can only be called once');
      ***REMOVED***
        this._protectedHeader = protectedHeader;
        return this;
  ***REMOVED***
    setKeyManagementParameters(parameters) ***REMOVED***
        if (this._keyManagementParameters) ***REMOVED***
            throw new TypeError('setKeyManagementParameters can only be called once');
      ***REMOVED***
        this._keyManagementParameters = parameters;
        return this;
  ***REMOVED***
    setContentEncryptionKey(cek) ***REMOVED***
        if (this._cek) ***REMOVED***
            throw new TypeError('setContentEncryptionKey can only be called once');
      ***REMOVED***
        this._cek = cek;
        return this;
  ***REMOVED***
    setInitializationVector(iv) ***REMOVED***
        if (this._iv) ***REMOVED***
            throw new TypeError('setInitializationVector can only be called once');
      ***REMOVED***
        this._iv = iv;
        return this;
  ***REMOVED***
    replicateIssuerAsHeader() ***REMOVED***
        this._replicateIssuerAsHeader = true;
        return this;
  ***REMOVED***
    replicateSubjectAsHeader() ***REMOVED***
        this._replicateSubjectAsHeader = true;
        return this;
  ***REMOVED***
    replicateAudienceAsHeader() ***REMOVED***
        this._replicateAudienceAsHeader = true;
        return this;
  ***REMOVED***
    async encrypt(key, options) ***REMOVED***
        const enc = new CompactEncrypt(encoder.encode(JSON.stringify(this._payload)));
        if (this._replicateIssuerAsHeader) ***REMOVED***
            this._protectedHeader = ***REMOVED*** ...this._protectedHeader, iss: this._payload.iss };
      ***REMOVED***
        if (this._replicateSubjectAsHeader) ***REMOVED***
            this._protectedHeader = ***REMOVED*** ...this._protectedHeader, sub: this._payload.sub };
      ***REMOVED***
        if (this._replicateAudienceAsHeader) ***REMOVED***
            this._protectedHeader = ***REMOVED*** ...this._protectedHeader, aud: this._payload.aud };
      ***REMOVED***
        enc.setProtectedHeader(this._protectedHeader);
        if (this._iv) ***REMOVED***
            enc.setInitializationVector(this._iv);
      ***REMOVED***
        if (this._cek) ***REMOVED***
            enc.setContentEncryptionKey(this._cek);
      ***REMOVED***
        if (this._keyManagementParameters) ***REMOVED***
            enc.setKeyManagementParameters(this._keyManagementParameters);
      ***REMOVED***
        return enc.encrypt(key, options);
  ***REMOVED***
}
