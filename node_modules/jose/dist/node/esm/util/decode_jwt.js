import ***REMOVED*** decode as base64url } from './base64url.js';
import ***REMOVED*** decoder } from '../lib/buffer_utils.js';
import isObject from '../lib/is_object.js';
import ***REMOVED*** JWTInvalid } from './errors.js';
export function decodeJwt(jwt) ***REMOVED***
    if (typeof jwt !== 'string')
        throw new JWTInvalid('JWTs must use Compact JWS serialization, JWT must be a string');
    const ***REMOVED*** 1: payload, length } = jwt.split('.');
    if (length === 5)
        throw new JWTInvalid('Only JWTs using Compact JWS serialization can be decoded');
    if (length !== 3)
        throw new JWTInvalid('Invalid JWT');
    if (!payload)
        throw new JWTInvalid('JWTs must contain a payload');
    let decoded;
    try ***REMOVED***
        decoded = base64url(payload);
  ***REMOVED***
    catch ***REMOVED***
        throw new JWTInvalid('Failed to parse the base64url encoded payload');
  ***REMOVED***
    let result;
    try ***REMOVED***
        result = JSON.parse(decoder.decode(decoded));
  ***REMOVED***
    catch ***REMOVED***
        throw new JWTInvalid('Failed to parse the decoded payload as JSON');
  ***REMOVED***
    if (!isObject(result))
        throw new JWTInvalid('Invalid JWT Claims Set');
    return result;
}
