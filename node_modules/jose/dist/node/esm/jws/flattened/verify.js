import ***REMOVED*** decode as base64url } from '../../runtime/base64url.js';
import verify from '../../runtime/verify.js';
import ***REMOVED*** JOSEAlgNotAllowed, JWSInvalid, JWSSignatureVerificationFailed } from '../../util/errors.js';
import ***REMOVED*** concat, encoder, decoder } from '../../lib/buffer_utils.js';
import isDisjoint from '../../lib/is_disjoint.js';
import isObject from '../../lib/is_object.js';
import checkKeyType from '../../lib/check_key_type.js';
import validateCrit from '../../lib/validate_crit.js';
import validateAlgorithms from '../../lib/validate_algorithms.js';
export async function flattenedVerify(jws, key, options) ***REMOVED***
    var _a;
    if (!isObject(jws)) ***REMOVED***
        throw new JWSInvalid('Flattened JWS must be an object');
  ***REMOVED***
    if (jws.protected === undefined && jws.header === undefined) ***REMOVED***
        throw new JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
  ***REMOVED***
    if (jws.protected !== undefined && typeof jws.protected !== 'string') ***REMOVED***
        throw new JWSInvalid('JWS Protected Header incorrect type');
  ***REMOVED***
    if (jws.payload === undefined) ***REMOVED***
        throw new JWSInvalid('JWS Payload missing');
  ***REMOVED***
    if (typeof jws.signature !== 'string') ***REMOVED***
        throw new JWSInvalid('JWS Signature missing or incorrect type');
  ***REMOVED***
    if (jws.header !== undefined && !isObject(jws.header)) ***REMOVED***
        throw new JWSInvalid('JWS Unprotected Header incorrect type');
  ***REMOVED***
    let parsedProt = ***REMOVED***};
    if (jws.protected) ***REMOVED***
        try ***REMOVED***
            const protectedHeader = base64url(jws.protected);
            parsedProt = JSON.parse(decoder.decode(protectedHeader));
      ***REMOVED***
        catch ***REMOVED***
            throw new JWSInvalid('JWS Protected Header is invalid');
      ***REMOVED***
  ***REMOVED***
    if (!isDisjoint(parsedProt, jws.header)) ***REMOVED***
        throw new JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
  ***REMOVED***
    const joseHeader = ***REMOVED***
        ...parsedProt,
        ...jws.header,
  ***REMOVED***;
    const extensions = validateCrit(JWSInvalid, new Map([['b64', true]]), options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
    let b64 = true;
    if (extensions.has('b64')) ***REMOVED***
        b64 = parsedProt.b64;
        if (typeof b64 !== 'boolean') ***REMOVED***
            throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
      ***REMOVED***
  ***REMOVED***
    const ***REMOVED*** alg } = joseHeader;
    if (typeof alg !== 'string' || !alg) ***REMOVED***
        throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
  ***REMOVED***
    const algorithms = options && validateAlgorithms('algorithms', options.algorithms);
    if (algorithms && !algorithms.has(alg)) ***REMOVED***
        throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
  ***REMOVED***
    if (b64) ***REMOVED***
        if (typeof jws.payload !== 'string') ***REMOVED***
            throw new JWSInvalid('JWS Payload must be a string');
      ***REMOVED***
  ***REMOVED***
    else if (typeof jws.payload !== 'string' && !(jws.payload instanceof Uint8Array)) ***REMOVED***
        throw new JWSInvalid('JWS Payload must be a string or an Uint8Array instance');
  ***REMOVED***
    let resolvedKey = false;
    if (typeof key === 'function') ***REMOVED***
        key = await key(parsedProt, jws);
        resolvedKey = true;
  ***REMOVED***
    checkKeyType(alg, key, 'verify');
    const data = concat(encoder.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ''), encoder.encode('.'), typeof jws.payload === 'string' ? encoder.encode(jws.payload) : jws.payload);
    const signature = base64url(jws.signature);
    const verified = await verify(alg, key, signature, data);
    if (!verified) ***REMOVED***
        throw new JWSSignatureVerificationFailed();
  ***REMOVED***
    let payload;
    if (b64) ***REMOVED***
        payload = base64url(jws.payload);
  ***REMOVED***
    else if (typeof jws.payload === 'string') ***REMOVED***
        payload = encoder.encode(jws.payload);
  ***REMOVED***
    else ***REMOVED***
        payload = jws.payload;
  ***REMOVED***
    const result = ***REMOVED*** payload };
    if (jws.protected !== undefined) ***REMOVED***
        result.protectedHeader = parsedProt;
  ***REMOVED***
    if (jws.header !== undefined) ***REMOVED***
        result.unprotectedHeader = jws.header;
  ***REMOVED***
    if (resolvedKey) ***REMOVED***
        return ***REMOVED*** ...result, key };
  ***REMOVED***
    return result;
}
