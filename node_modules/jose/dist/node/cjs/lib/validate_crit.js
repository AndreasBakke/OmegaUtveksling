"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
const errors_js_1 = require("../util/errors.js");
function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) ***REMOVED***
    if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) ***REMOVED***
        throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
  ***REMOVED***
    if (!protectedHeader || protectedHeader.crit === undefined) ***REMOVED***
        return new Set();
  ***REMOVED***
    if (!Array.isArray(protectedHeader.crit) ||
        protectedHeader.crit.length === 0 ||
        protectedHeader.crit.some((input) => typeof input !== 'string' || input.length === 0)) ***REMOVED***
        throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
  ***REMOVED***
    let recognized;
    if (recognizedOption !== undefined) ***REMOVED***
        recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);
  ***REMOVED***
    else ***REMOVED***
        recognized = recognizedDefault;
  ***REMOVED***
    for (const parameter of protectedHeader.crit) ***REMOVED***
        if (!recognized.has(parameter)) ***REMOVED***
            throw new errors_js_1.JOSENotSupported(`Extension Header Parameter "$***REMOVED***parameter}" is not recognized`);
      ***REMOVED***
        if (joseHeader[parameter] === undefined) ***REMOVED***
            throw new Err(`Extension Header Parameter "$***REMOVED***parameter}" is missing`);
      ***REMOVED***
        else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) ***REMOVED***
            throw new Err(`Extension Header Parameter "$***REMOVED***parameter}" MUST be integrity protected`);
      ***REMOVED***
  ***REMOVED***
    return new Set(protectedHeader.crit);
}
exports.default = validateCrit;
