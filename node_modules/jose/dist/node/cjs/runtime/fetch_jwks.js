"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
const http = require("http");
const https = require("https");
const events_1 = require("events");
const errors_js_1 = require("../util/errors.js");
const buffer_utils_js_1 = require("../lib/buffer_utils.js");
const fetchJwks = async (url, timeout, options) => ***REMOVED***
    let get;
    switch (url.protocol) ***REMOVED***
        case 'https:':
            get = https.get;
            break;
        case 'http:':
            get = http.get;
            break;
        default:
            throw new TypeError('Unsupported URL protocol.');
  ***REMOVED***
    const ***REMOVED*** agent, headers } = options;
    const req = get(url.href, ***REMOVED***
        agent,
        timeout,
        headers,
  ***REMOVED***);
    const [response] = (await Promise.race([(0, events_1.once)(req, 'response'), (0, events_1.once)(req, 'timeout')]));
    if (!response) ***REMOVED***
        req.destroy();
        throw new errors_js_1.JWKSTimeout();
  ***REMOVED***
    if (response.statusCode !== 200) ***REMOVED***
        throw new errors_js_1.JOSEError('Expected 200 OK from the JSON Web Key Set HTTP response');
  ***REMOVED***
    const parts = [];
    for await (const part of response) ***REMOVED***
        parts.push(part);
  ***REMOVED***
    try ***REMOVED***
        return JSON.parse(buffer_utils_js_1.decoder.decode((0, buffer_utils_js_1.concat)(...parts)));
  ***REMOVED***
    catch ***REMOVED***
        throw new errors_js_1.JOSEError('Failed to parse the JSON Web Key Set HTTP response as JSON');
  ***REMOVED***
};
exports.default = fetchJwks;
