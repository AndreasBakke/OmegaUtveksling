"use strict";
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.createRemoteJWKSet = void 0;
const fetch_jwks_js_1 = require("../runtime/fetch_jwks.js");
const env_js_1 = require("../runtime/env.js");
const errors_js_1 = require("../util/errors.js");
const local_js_1 = require("./local.js");
class RemoteJWKSet extends local_js_1.LocalJWKSet ***REMOVED***
    constructor(url, options) ***REMOVED***
        super(***REMOVED*** keys: [] });
        this._jwks = undefined;
        if (!(url instanceof URL)) ***REMOVED***
            throw new TypeError('url must be an instance of URL');
      ***REMOVED***
        this._url = new URL(url.href);
        this._options = ***REMOVED*** agent: options === null || options === void 0 ? void 0 : options.agent, headers: options === null || options === void 0 ? void 0 : options.headers };
        this._timeoutDuration =
            typeof (options === null || options === void 0 ? void 0 : options.timeoutDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.timeoutDuration : 5000;
        this._cooldownDuration =
            typeof (options === null || options === void 0 ? void 0 : options.cooldownDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.cooldownDuration : 30000;
        this._cacheMaxAge = typeof (options === null || options === void 0 ? void 0 : options.cacheMaxAge) === 'number' ? options === null || options === void 0 ? void 0 : options.cacheMaxAge : 600000;
  ***REMOVED***
    coolingDown() ***REMOVED***
        return typeof this._jwksTimestamp === 'number'
            ? Date.now() < this._jwksTimestamp + this._cooldownDuration
            : false;
  ***REMOVED***
    fresh() ***REMOVED***
        return typeof this._jwksTimestamp === 'number'
            ? Date.now() < this._jwksTimestamp + this._cacheMaxAge
            : false;
  ***REMOVED***
    async getKey(protectedHeader, token) ***REMOVED***
        if (!this._jwks || !this.fresh()) ***REMOVED***
            await this.reload();
      ***REMOVED***
        try ***REMOVED***
            return await super.getKey(protectedHeader, token);
      ***REMOVED***
        catch (err) ***REMOVED***
            if (err instanceof errors_js_1.JWKSNoMatchingKey) ***REMOVED***
                if (this.coolingDown() === false) ***REMOVED***
                    await this.reload();
                    return super.getKey(protectedHeader, token);
              ***REMOVED***
          ***REMOVED***
            throw err;
      ***REMOVED***
  ***REMOVED***
    async reload() ***REMOVED***
        if (this._pendingFetch && (0, env_js_1.isCloudflareWorkers)()) ***REMOVED***
            return new Promise((resolve) => ***REMOVED***
                const isDone = () => ***REMOVED***
                    if (this._pendingFetch === undefined) ***REMOVED***
                        resolve();
                  ***REMOVED***
                    else ***REMOVED***
                        setTimeout(isDone, 5);
                  ***REMOVED***
              ***REMOVED***;
                isDone();
          ***REMOVED***);
      ***REMOVED***
        if (!this._pendingFetch) ***REMOVED***
            this._pendingFetch = (0, fetch_jwks_js_1.default)(this._url, this._timeoutDuration, this._options)
                .then((json) => ***REMOVED***
                if (!(0, local_js_1.isJWKSLike)(json)) ***REMOVED***
                    throw new errors_js_1.JWKSInvalid('JSON Web Key Set malformed');
              ***REMOVED***
                this._jwks = ***REMOVED*** keys: json.keys };
                this._jwksTimestamp = Date.now();
                this._pendingFetch = undefined;
          ***REMOVED***)
                .catch((err) => ***REMOVED***
                this._pendingFetch = undefined;
                throw err;
          ***REMOVED***);
      ***REMOVED***
        await this._pendingFetch;
  ***REMOVED***
}
function createRemoteJWKSet(url, options) ***REMOVED***
    return RemoteJWKSet.prototype.getKey.bind(new RemoteJWKSet(url, options));
}
exports.createRemoteJWKSet = createRemoteJWKSet;
