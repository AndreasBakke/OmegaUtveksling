import ***REMOVED*** flattenedDecrypt } from '../flattened/decrypt.js';
import ***REMOVED*** JWEDecryptionFailed, JWEInvalid } from '../../util/errors.js';
import isObject from '../../lib/is_object.js';
export async function generalDecrypt(jwe, key, options) ***REMOVED***
    if (!isObject(jwe)) ***REMOVED***
        throw new JWEInvalid('General JWE must be an object');
  ***REMOVED***
    if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(isObject)) ***REMOVED***
        throw new JWEInvalid('JWE Recipients missing or incorrect type');
  ***REMOVED***
    if (!jwe.recipients.length) ***REMOVED***
        throw new JWEInvalid('JWE Recipients has no members');
  ***REMOVED***
    for (const recipient of jwe.recipients) ***REMOVED***
        try ***REMOVED***
            return await flattenedDecrypt(***REMOVED***
                aad: jwe.aad,
                ciphertext: jwe.ciphertext,
                encrypted_key: recipient.encrypted_key,
                header: recipient.header,
                iv: jwe.iv,
                protected: jwe.protected,
                tag: jwe.tag,
                unprotected: jwe.unprotected,
          ***REMOVED***, key, options);
      ***REMOVED***
        catch (_a) ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    throw new JWEDecryptionFailed();
}
