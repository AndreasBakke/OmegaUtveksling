import ***REMOVED*** flattenedVerify } from '../flattened/verify.js';
import ***REMOVED*** JWSInvalid, JWSSignatureVerificationFailed } from '../../util/errors.js';
import isObject from '../../lib/is_object.js';
export async function generalVerify(jws, key, options) ***REMOVED***
    if (!isObject(jws)) ***REMOVED***
        throw new JWSInvalid('General JWS must be an object');
  ***REMOVED***
    if (!Array.isArray(jws.signatures) || !jws.signatures.every(isObject)) ***REMOVED***
        throw new JWSInvalid('JWS Signatures missing or incorrect type');
  ***REMOVED***
    for (const signature of jws.signatures) ***REMOVED***
        try ***REMOVED***
            return await flattenedVerify(***REMOVED***
                header: signature.header,
                payload: jws.payload,
                protected: signature.protected,
                signature: signature.signature,
          ***REMOVED***, key, options);
      ***REMOVED***
        catch (_a) ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    throw new JWSSignatureVerificationFailed();
}
