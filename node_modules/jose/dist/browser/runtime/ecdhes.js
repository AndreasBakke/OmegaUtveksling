import ***REMOVED*** encoder, concat, uint32be, lengthAndInput, concatKdf } from '../lib/buffer_utils.js';
import crypto, ***REMOVED*** isCryptoKey } from './webcrypto.js';
import ***REMOVED*** checkEncCryptoKey } from '../lib/crypto_key.js';
import invalidKeyInput from '../lib/invalid_key_input.js';
import ***REMOVED*** types } from './is_key_like.js';
export async function deriveKey(publicKey, privateKey, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) ***REMOVED***
    if (!isCryptoKey(publicKey)) ***REMOVED***
        throw new TypeError(invalidKeyInput(publicKey, ...types));
  ***REMOVED***
    checkEncCryptoKey(publicKey, 'ECDH');
    if (!isCryptoKey(privateKey)) ***REMOVED***
        throw new TypeError(invalidKeyInput(privateKey, ...types));
  ***REMOVED***
    checkEncCryptoKey(privateKey, 'ECDH', 'deriveBits');
    const value = concat(lengthAndInput(encoder.encode(algorithm)), lengthAndInput(apu), lengthAndInput(apv), uint32be(keyLength));
    let length;
    if (publicKey.algorithm.name === 'X25519') ***REMOVED***
        length = 256;
  ***REMOVED***
    else if (publicKey.algorithm.name === 'X448') ***REMOVED***
        length = 448;
  ***REMOVED***
    else ***REMOVED***
        length =
            Math.ceil(parseInt(publicKey.algorithm.namedCurve.substr(-3), 10) / 8) << 3;
  ***REMOVED***
    const sharedSecret = new Uint8Array(await crypto.subtle.deriveBits(***REMOVED***
        name: publicKey.algorithm.name,
        public: publicKey,
  ***REMOVED***, privateKey, length));
    return concatKdf(sharedSecret, keyLength, value);
}
export async function generateEpk(key) ***REMOVED***
    if (!isCryptoKey(key)) ***REMOVED***
        throw new TypeError(invalidKeyInput(key, ...types));
  ***REMOVED***
    return crypto.subtle.generateKey(key.algorithm, true, ['deriveBits']);
}
export function ecdhAllowed(key) ***REMOVED***
    if (!isCryptoKey(key)) ***REMOVED***
        throw new TypeError(invalidKeyInput(key, ...types));
  ***REMOVED***
    return (['P-256', 'P-384', 'P-521'].includes(key.algorithm.namedCurve) ||
        key.algorithm.name === 'X25519' ||
        key.algorithm.name === 'X448');
}
