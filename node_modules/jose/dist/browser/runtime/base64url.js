import ***REMOVED*** encoder, decoder } from '../lib/buffer_utils.js';
export const encodeBase64 = (input) => ***REMOVED***
    let unencoded = input;
    if (typeof unencoded === 'string') ***REMOVED***
        unencoded = encoder.encode(unencoded);
  ***REMOVED***
    const CHUNK_SIZE = 0x8000;
    const arr = [];
    for (let i = 0; i < unencoded.length; i += CHUNK_SIZE) ***REMOVED***
        arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));
  ***REMOVED***
    return btoa(arr.join(''));
};
export const encode = (input) => ***REMOVED***
    return encodeBase64(input).replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
};
export const decodeBase64 = (encoded) => ***REMOVED***
    const binary = atob(encoded);
    const bytes = new Uint8Array(binary.length);
    for (let i = 0; i < binary.length; i++) ***REMOVED***
        bytes[i] = binary.charCodeAt(i);
  ***REMOVED***
    return bytes;
};
export const decode = (input) => ***REMOVED***
    let encoded = input;
    if (encoded instanceof Uint8Array) ***REMOVED***
        encoded = decoder.decode(encoded);
  ***REMOVED***
    encoded = encoded.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');
    try ***REMOVED***
        return decodeBase64(encoded);
  ***REMOVED***
    catch (_a) ***REMOVED***
        throw new TypeError('The input to be decoded is not correctly encoded.');
  ***REMOVED***
};
