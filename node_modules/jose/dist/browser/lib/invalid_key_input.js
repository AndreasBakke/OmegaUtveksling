function message(msg, actual, ...types) ***REMOVED***
    if (types.length > 2) ***REMOVED***
        const last = types.pop();
        msg += `one of type $***REMOVED***types.join(', ')}, or $***REMOVED***last}.`;
  ***REMOVED***
    else if (types.length === 2) ***REMOVED***
        msg += `one of type $***REMOVED***types[0]} or $***REMOVED***types[1]}.`;
  ***REMOVED***
    else ***REMOVED***
        msg += `of type $***REMOVED***types[0]}.`;
  ***REMOVED***
    if (actual == null) ***REMOVED***
        msg += ` Received $***REMOVED***actual}`;
  ***REMOVED***
    else if (typeof actual === 'function' && actual.name) ***REMOVED***
        msg += ` Received function $***REMOVED***actual.name}`;
  ***REMOVED***
    else if (typeof actual === 'object' && actual != null) ***REMOVED***
        if (actual.constructor && actual.constructor.name) ***REMOVED***
            msg += ` Received an instance of $***REMOVED***actual.constructor.name}`;
      ***REMOVED***
  ***REMOVED***
    return msg;
}
export default (actual, ...types) => ***REMOVED***
    return message('Key must be ', actual, ...types);
};
export function withAlg(alg, actual, ...types) ***REMOVED***
    return message(`Key for the $***REMOVED***alg} algorithm must be `, actual, ...types);
}
