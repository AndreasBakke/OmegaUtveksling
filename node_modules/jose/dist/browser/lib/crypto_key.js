import ***REMOVED*** isCloudflareWorkers } from '../runtime/env.js';
function unusable(name, prop = 'algorithm.name') ***REMOVED***
    return new TypeError(`CryptoKey does not support this operation, its $***REMOVED***prop} must be $***REMOVED***name}`);
}
function isAlgorithm(algorithm, name) ***REMOVED***
    return algorithm.name === name;
}
function getHashLength(hash) ***REMOVED***
    return parseInt(hash.name.slice(4), 10);
}
function getNamedCurve(alg) ***REMOVED***
    switch (alg) ***REMOVED***
        case 'ES256':
            return 'P-256';
        case 'ES384':
            return 'P-384';
        case 'ES512':
            return 'P-521';
        default:
            throw new Error('unreachable');
  ***REMOVED***
}
function checkUsage(key, usages) ***REMOVED***
    if (usages.length && !usages.some((expected) => key.usages.includes(expected))) ***REMOVED***
        let msg = 'CryptoKey does not support this operation, its usages must include ';
        if (usages.length > 2) ***REMOVED***
            const last = usages.pop();
            msg += `one of $***REMOVED***usages.join(', ')}, or $***REMOVED***last}.`;
      ***REMOVED***
        else if (usages.length === 2) ***REMOVED***
            msg += `one of $***REMOVED***usages[0]} or $***REMOVED***usages[1]}.`;
      ***REMOVED***
        else ***REMOVED***
            msg += `$***REMOVED***usages[0]}.`;
      ***REMOVED***
        throw new TypeError(msg);
  ***REMOVED***
}
export function checkSigCryptoKey(key, alg, ...usages) ***REMOVED***
    switch (alg) ***REMOVED***
        case 'HS256':
        case 'HS384':
        case 'HS512': ***REMOVED***
            if (!isAlgorithm(key.algorithm, 'HMAC'))
                throw unusable('HMAC');
            const expected = parseInt(alg.slice(2), 10);
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-$***REMOVED***expected}`, 'algorithm.hash');
            break;
      ***REMOVED***
        case 'RS256':
        case 'RS384':
        case 'RS512': ***REMOVED***
            if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5'))
                throw unusable('RSASSA-PKCS1-v1_5');
            const expected = parseInt(alg.slice(2), 10);
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-$***REMOVED***expected}`, 'algorithm.hash');
            break;
      ***REMOVED***
        case 'PS256':
        case 'PS384':
        case 'PS512': ***REMOVED***
            if (!isAlgorithm(key.algorithm, 'RSA-PSS'))
                throw unusable('RSA-PSS');
            const expected = parseInt(alg.slice(2), 10);
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-$***REMOVED***expected}`, 'algorithm.hash');
            break;
      ***REMOVED***
        case isCloudflareWorkers() && 'EdDSA': ***REMOVED***
            if (!isAlgorithm(key.algorithm, 'NODE-ED25519'))
                throw unusable('NODE-ED25519');
            break;
      ***REMOVED***
        case 'EdDSA': ***REMOVED***
            if (key.algorithm.name !== 'Ed25519' && key.algorithm.name !== 'Ed448') ***REMOVED***
                throw unusable('Ed25519 or Ed448');
          ***REMOVED***
            break;
      ***REMOVED***
        case 'ES256':
        case 'ES384':
        case 'ES512': ***REMOVED***
            if (!isAlgorithm(key.algorithm, 'ECDSA'))
                throw unusable('ECDSA');
            const expected = getNamedCurve(alg);
            const actual = key.algorithm.namedCurve;
            if (actual !== expected)
                throw unusable(expected, 'algorithm.namedCurve');
            break;
      ***REMOVED***
        default:
            throw new TypeError('CryptoKey does not support this operation');
  ***REMOVED***
    checkUsage(key, usages);
}
export function checkEncCryptoKey(key, alg, ...usages) ***REMOVED***
    switch (alg) ***REMOVED***
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM': ***REMOVED***
            if (!isAlgorithm(key.algorithm, 'AES-GCM'))
                throw unusable('AES-GCM');
            const expected = parseInt(alg.slice(1, 4), 10);
            const actual = key.algorithm.length;
            if (actual !== expected)
                throw unusable(expected, 'algorithm.length');
            break;
      ***REMOVED***
        case 'A128KW':
        case 'A192KW':
        case 'A256KW': ***REMOVED***
            if (!isAlgorithm(key.algorithm, 'AES-KW'))
                throw unusable('AES-KW');
            const expected = parseInt(alg.slice(1, 4), 10);
            const actual = key.algorithm.length;
            if (actual !== expected)
                throw unusable(expected, 'algorithm.length');
            break;
      ***REMOVED***
        case 'ECDH': ***REMOVED***
            switch (key.algorithm.name) ***REMOVED***
                case 'ECDH':
                case 'X25519':
                case 'X448':
                    break;
                default:
                    throw unusable('ECDH, X25519, or X448');
          ***REMOVED***
            break;
      ***REMOVED***
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW':
            if (!isAlgorithm(key.algorithm, 'PBKDF2'))
                throw unusable('PBKDF2');
            break;
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512': ***REMOVED***
            if (!isAlgorithm(key.algorithm, 'RSA-OAEP'))
                throw unusable('RSA-OAEP');
            const expected = parseInt(alg.slice(9), 10) || 1;
            const actual = getHashLength(key.algorithm.hash);
            if (actual !== expected)
                throw unusable(`SHA-$***REMOVED***expected}`, 'algorithm.hash');
            break;
      ***REMOVED***
        default:
            throw new TypeError('CryptoKey does not support this operation');
  ***REMOVED***
    checkUsage(key, usages);
}
