'use strict'

exports.parse = function (source, transform) ***REMOVED***
  return new ArrayParser(source, transform).parse()
}

class ArrayParser ***REMOVED***
  constructor (source, transform) ***REMOVED***
    this.source = source
    this.transform = transform || identity
    this.position = 0
    this.entries = []
    this.recorded = []
    this.dimension = 0
***REMOVED***

  isEof () ***REMOVED***
    return this.position >= this.source.length
***REMOVED***

  nextCharacter () ***REMOVED***
    var character = this.source[this.position++]
    if (character === '\\') ***REMOVED***
      return ***REMOVED***
        value: this.source[this.position++],
        escaped: true
    ***REMOVED***
  ***REMOVED***
    return ***REMOVED***
      value: character,
      escaped: false
  ***REMOVED***
***REMOVED***

  record (character) ***REMOVED***
    this.recorded.push(character)
***REMOVED***

  newEntry (includeEmpty) ***REMOVED***
    var entry
    if (this.recorded.length > 0 || includeEmpty) ***REMOVED***
      entry = this.recorded.join('')
      if (entry === 'NULL' && !includeEmpty) ***REMOVED***
        entry = null
    ***REMOVED***
      if (entry !== null) entry = this.transform(entry)
      this.entries.push(entry)
      this.recorded = []
  ***REMOVED***
***REMOVED***

  consumeDimensions () ***REMOVED***
    if (this.source[0] === '[') ***REMOVED***
      while (!this.isEof()) ***REMOVED***
        var char = this.nextCharacter()
        if (char.value === '=') break
    ***REMOVED***
  ***REMOVED***
***REMOVED***

  parse (nested) ***REMOVED***
    var character, parser, quote
    this.consumeDimensions()
    while (!this.isEof()) ***REMOVED***
      character = this.nextCharacter()
      if (character.value === '***REMOVED***' && !quote) ***REMOVED***
        this.dimension++
        if (this.dimension > 1) ***REMOVED***
          parser = new ArrayParser(this.source.substr(this.position - 1), this.transform)
          this.entries.push(parser.parse(true))
          this.position += parser.position - 2
      ***REMOVED***
    ***REMOVED*** else if (character.value === '}' && !quote) ***REMOVED***
        this.dimension--
        if (!this.dimension) ***REMOVED***
          this.newEntry()
          if (nested) return this.entries
      ***REMOVED***
    ***REMOVED*** else if (character.value === '"' && !character.escaped) ***REMOVED***
        if (quote) this.newEntry(true)
        quote = !quote
    ***REMOVED*** else if (character.value === ',' && !quote) ***REMOVED***
        this.newEntry()
    ***REMOVED*** else ***REMOVED***
        this.record(character.value)
    ***REMOVED***
  ***REMOVED***
    if (this.dimension !== 0) ***REMOVED***
      throw new Error('array dimension not balanced')
  ***REMOVED***
    return this.entries
***REMOVED***
}

function identity (value) ***REMOVED***
  return value
}
