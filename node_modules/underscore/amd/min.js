define(['./_isArrayLike', './values', './_cb', './each'], function (_isArrayLike, values, _cb, each) ***REMOVED***

  // Return the minimum element (or element-based computation).
  function min(obj, iteratee, context) ***REMOVED***
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) ***REMOVED***
      obj = _isArrayLike(obj) ? obj : values(obj);
      for (var i = 0, length = obj.length; i < length; i++) ***REMOVED***
        value = obj[i];
        if (value != null && value < result) ***REMOVED***
          result = value;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
      iteratee = _cb(iteratee, context);
      each(obj, function(v, index, list) ***REMOVED***
        computed = iteratee(v, index, list);
        if (computed < lastComputed || (computed === Infinity && result === Infinity)) ***REMOVED***
          result = v;
          lastComputed = computed;
      ***REMOVED***
    ***REMOVED***);
  ***REMOVED***
    return result;
***REMOVED***

  return min;

});
