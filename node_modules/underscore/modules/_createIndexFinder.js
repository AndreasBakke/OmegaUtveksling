import getLength from './_getLength.js';
import ***REMOVED*** slice } from './_setup.js';
import isNaN from './isNaN.js';

// Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.
export default function createIndexFinder(dir, predicateFind, sortedIndex) ***REMOVED***
  return function(array, item, idx) ***REMOVED***
    var i = 0, length = getLength(array);
    if (typeof idx == 'number') ***REMOVED***
      if (dir > 0) ***REMOVED***
        i = idx >= 0 ? idx : Math.max(idx + length, i);
    ***REMOVED*** else ***REMOVED***
        length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
    ***REMOVED***
  ***REMOVED*** else if (sortedIndex && idx && length) ***REMOVED***
      idx = sortedIndex(array, item);
      return array[idx] === item ? idx : -1;
  ***REMOVED***
    if (item !== item) ***REMOVED***
      idx = predicateFind(slice.call(array, i, length), isNaN);
      return idx >= 0 ? idx + i : -1;
  ***REMOVED***
    for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) ***REMOVED***
      if (array[idx] === item) return idx;
  ***REMOVED***
    return -1;
***REMOVED***;
}
