import restArguments from './restArguments.js';
import now from './now.js';

// When a sequence of calls of the returned function ends, the argument
// function is triggered. The end of a sequence is defined by the `wait`
// parameter. If `immediate` is passed, the argument function will be
// triggered at the beginning of the sequence instead of at the end.
export default function debounce(func, wait, immediate) ***REMOVED***
  var timeout, previous, args, result, context;

  var later = function() ***REMOVED***
    var passed = now() - previous;
    if (wait > passed) ***REMOVED***
      timeout = setTimeout(later, wait - passed);
  ***REMOVED*** else ***REMOVED***
      timeout = null;
      if (!immediate) result = func.apply(context, args);
      // This check is needed because `func` can recursively invoke `debounced`.
      if (!timeout) args = context = null;
  ***REMOVED***
***REMOVED***;

  var debounced = restArguments(function(_args) ***REMOVED***
    context = this;
    args = _args;
    previous = now();
    if (!timeout) ***REMOVED***
      timeout = setTimeout(later, wait);
      if (immediate) result = func.apply(context, args);
  ***REMOVED***
    return result;
***REMOVED***);

  debounced.cancel = function() ***REMOVED***
    clearTimeout(timeout);
    timeout = args = context = null;
***REMOVED***;

  return debounced;
}
