// @flow

function assertElement(element) ***REMOVED***
  if (!(element instanceof HTMLElement)) ***REMOVED***
    throw new Error('Must pass a DOM element to find/findAll(element, styledComponent)"');
***REMOVED***
}

function assertStyledComponent(styledComponent) ***REMOVED***
  if (
    !(styledComponent.styledComponentId && typeof styledComponent.styledComponentId === 'string')
  ) ***REMOVED***
    throw new Error(
      `$***REMOVED***styledComponent.displayName ||
        styledComponent.name ||
        'Component'} is not a styled component.`
    );
***REMOVED***
}

function enzymeFind(wrapper /* : Object */, styledComponent /* : Object */) ***REMOVED***
  assertStyledComponent(styledComponent);

  return wrapper.find(`.$***REMOVED***styledComponent.styledComponentId}`);
}

function find(element /* : Element */, styledComponent /* : Object */) ***REMOVED***
  assertElement(element);
  assertStyledComponent(styledComponent);
  return element.querySelector(`.$***REMOVED***styledComponent.styledComponentId}`);
}

function findAll(element /* : Element */, styledComponent /* : Object */) ***REMOVED***
  assertElement(element);
  assertStyledComponent(styledComponent);
  return element.querySelectorAll(`.$***REMOVED***styledComponent.styledComponentId}`);
}

exports.enzymeFind = enzymeFind;
exports.find = find;
exports.findAll = findAll;
