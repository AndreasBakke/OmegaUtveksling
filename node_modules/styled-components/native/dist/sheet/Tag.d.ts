import ***REMOVED*** SheetOptions } from './types';
/** Create a CSSStyleSheet-like tag depending on the environment */
export declare const makeTag: (***REMOVED*** isServer, useCSSOMInjection, target }: SheetOptions) => ***REMOVED***
    element: HTMLStyleElement;
    sheet: CSSStyleSheet;
    length: number;
    insertRule(index: number, rule: string): boolean;
    deleteRule(index: number): void;
    getRule(index: number): string;
} | ***REMOVED***
    element: HTMLStyleElement;
    nodes: NodeListOf<Node>;
    length: number;
    insertRule(index: number, rule: string): boolean;
    deleteRule(index: number): void;
    getRule(index: number): string;
} | ***REMOVED***
    rules: string[];
    length: number;
    insertRule(index: number, rule: string): boolean;
    deleteRule(index: number): void;
    getRule(index: number): string;
};
export declare const CSSOMTag: ***REMOVED***
    new (target?: HTMLElement): ***REMOVED***
        element: HTMLStyleElement;
        sheet: CSSStyleSheet;
        length: number;
        insertRule(index: number, rule: string): boolean;
        deleteRule(index: number): void;
        getRule(index: number): string;
  ***REMOVED***;
};
/** A Tag that emulates the CSSStyleSheet API but uses text nodes */
export declare const TextTag: ***REMOVED***
    new (target?: HTMLElement): ***REMOVED***
        element: HTMLStyleElement;
        nodes: NodeListOf<Node>;
        length: number;
        insertRule(index: number, rule: string): boolean;
        deleteRule(index: number): void;
        getRule(index: number): string;
  ***REMOVED***;
};
/** A completely virtual (server-side) Tag that doesn't manipulate the DOM */
export declare const VirtualTag: ***REMOVED***
    new (_target?: HTMLElement): ***REMOVED***
        rules: string[];
        length: number;
        insertRule(index: number, rule: string): boolean;
        deleteRule(index: number): void;
        getRule(index: number): string;
  ***REMOVED***;
};
