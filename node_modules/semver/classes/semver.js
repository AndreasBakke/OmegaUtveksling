const debug = require('../internal/debug')
const ***REMOVED*** MAX_LENGTH, MAX_SAFE_INTEGER } = require('../internal/constants')
const ***REMOVED*** re, t } = require('../internal/re')

const parseOptions = require('../internal/parse-options')
const ***REMOVED*** compareIdentifiers } = require('../internal/identifiers')
class SemVer ***REMOVED***
  constructor (version, options) ***REMOVED***
    options = parseOptions(options)

    if (version instanceof SemVer) ***REMOVED***
      if (version.loose === !!options.loose &&
          version.includePrerelease === !!options.includePrerelease) ***REMOVED***
        return version
    ***REMOVED*** else ***REMOVED***
        version = version.version
    ***REMOVED***
  ***REMOVED*** else if (typeof version !== 'string') ***REMOVED***
      throw new TypeError(`Invalid Version: $***REMOVED***version}`)
  ***REMOVED***

    if (version.length > MAX_LENGTH) ***REMOVED***
      throw new TypeError(
        `version is longer than $***REMOVED***MAX_LENGTH} characters`
      )
  ***REMOVED***

    debug('SemVer', version, options)
    this.options = options
    this.loose = !!options.loose
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease

    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])

    if (!m) ***REMOVED***
      throw new TypeError(`Invalid Version: $***REMOVED***version}`)
  ***REMOVED***

    this.raw = version

    // these are actually numbers
    this.major = +m[1]
    this.minor = +m[2]
    this.patch = +m[3]

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) ***REMOVED***
      throw new TypeError('Invalid major version')
  ***REMOVED***

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) ***REMOVED***
      throw new TypeError('Invalid minor version')
  ***REMOVED***

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) ***REMOVED***
      throw new TypeError('Invalid patch version')
  ***REMOVED***

    // numberify any prerelease numeric ids
    if (!m[4]) ***REMOVED***
      this.prerelease = []
  ***REMOVED*** else ***REMOVED***
      this.prerelease = m[4].split('.').map((id) => ***REMOVED***
        if (/^[0-9]+$/.test(id)) ***REMOVED***
          const num = +id
          if (num >= 0 && num < MAX_SAFE_INTEGER) ***REMOVED***
            return num
        ***REMOVED***
      ***REMOVED***
        return id
    ***REMOVED***)
  ***REMOVED***

    this.build = m[5] ? m[5].split('.') : []
    this.format()
***REMOVED***

  format () ***REMOVED***
    this.version = `$***REMOVED***this.major}.$***REMOVED***this.minor}.$***REMOVED***this.patch}`
    if (this.prerelease.length) ***REMOVED***
      this.version += `-$***REMOVED***this.prerelease.join('.')}`
  ***REMOVED***
    return this.version
***REMOVED***

  toString () ***REMOVED***
    return this.version
***REMOVED***

  compare (other) ***REMOVED***
    debug('SemVer.compare', this.version, this.options, other)
    if (!(other instanceof SemVer)) ***REMOVED***
      if (typeof other === 'string' && other === this.version) ***REMOVED***
        return 0
    ***REMOVED***
      other = new SemVer(other, this.options)
  ***REMOVED***

    if (other.version === this.version) ***REMOVED***
      return 0
  ***REMOVED***

    return this.compareMain(other) || this.comparePre(other)
***REMOVED***

  compareMain (other) ***REMOVED***
    if (!(other instanceof SemVer)) ***REMOVED***
      other = new SemVer(other, this.options)
  ***REMOVED***

    return (
      compareIdentifiers(this.major, other.major) ||
      compareIdentifiers(this.minor, other.minor) ||
      compareIdentifiers(this.patch, other.patch)
    )
***REMOVED***

  comparePre (other) ***REMOVED***
    if (!(other instanceof SemVer)) ***REMOVED***
      other = new SemVer(other, this.options)
  ***REMOVED***

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length) ***REMOVED***
      return -1
  ***REMOVED*** else if (!this.prerelease.length && other.prerelease.length) ***REMOVED***
      return 1
  ***REMOVED*** else if (!this.prerelease.length && !other.prerelease.length) ***REMOVED***
      return 0
  ***REMOVED***

    let i = 0
    do ***REMOVED***
      const a = this.prerelease[i]
      const b = other.prerelease[i]
      debug('prerelease compare', i, a, b)
      if (a === undefined && b === undefined) ***REMOVED***
        return 0
    ***REMOVED*** else if (b === undefined) ***REMOVED***
        return 1
    ***REMOVED*** else if (a === undefined) ***REMOVED***
        return -1
    ***REMOVED*** else if (a === b) ***REMOVED***
        continue
    ***REMOVED*** else ***REMOVED***
        return compareIdentifiers(a, b)
    ***REMOVED***
  ***REMOVED*** while (++i)
***REMOVED***

  compareBuild (other) ***REMOVED***
    if (!(other instanceof SemVer)) ***REMOVED***
      other = new SemVer(other, this.options)
  ***REMOVED***

    let i = 0
    do ***REMOVED***
      const a = this.build[i]
      const b = other.build[i]
      debug('prerelease compare', i, a, b)
      if (a === undefined && b === undefined) ***REMOVED***
        return 0
    ***REMOVED*** else if (b === undefined) ***REMOVED***
        return 1
    ***REMOVED*** else if (a === undefined) ***REMOVED***
        return -1
    ***REMOVED*** else if (a === b) ***REMOVED***
        continue
    ***REMOVED*** else ***REMOVED***
        return compareIdentifiers(a, b)
    ***REMOVED***
  ***REMOVED*** while (++i)
***REMOVED***

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  inc (release, identifier) ***REMOVED***
    switch (release) ***REMOVED***
      case 'premajor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor = 0
        this.major++
        this.inc('pre', identifier)
        break
      case 'preminor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor++
        this.inc('pre', identifier)
        break
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0
        this.inc('patch', identifier)
        this.inc('pre', identifier)
        break
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0) ***REMOVED***
          this.inc('patch', identifier)
      ***REMOVED***
        this.inc('pre', identifier)
        break

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (
          this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0
        ) ***REMOVED***
          this.major++
      ***REMOVED***
        this.minor = 0
        this.patch = 0
        this.prerelease = []
        break
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0) ***REMOVED***
          this.minor++
      ***REMOVED***
        this.patch = 0
        this.prerelease = []
        break
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0) ***REMOVED***
          this.patch++
      ***REMOVED***
        this.prerelease = []
        break
      // This probably shouldn't be used publicly.
      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
      case 'pre':
        if (this.prerelease.length === 0) ***REMOVED***
          this.prerelease = [0]
      ***REMOVED*** else ***REMOVED***
          let i = this.prerelease.length
          while (--i >= 0) ***REMOVED***
            if (typeof this.prerelease[i] === 'number') ***REMOVED***
              this.prerelease[i]++
              i = -2
          ***REMOVED***
        ***REMOVED***
          if (i === -1) ***REMOVED***
            // didn't increment anything
            this.prerelease.push(0)
        ***REMOVED***
      ***REMOVED***
        if (identifier) ***REMOVED***
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          if (compareIdentifiers(this.prerelease[0], identifier) === 0) ***REMOVED***
            if (isNaN(this.prerelease[1])) ***REMOVED***
              this.prerelease = [identifier, 0]
          ***REMOVED***
        ***REMOVED*** else ***REMOVED***
            this.prerelease = [identifier, 0]
        ***REMOVED***
      ***REMOVED***
        break

      default:
        throw new Error(`invalid increment argument: $***REMOVED***release}`)
  ***REMOVED***
    this.format()
    this.raw = this.version
    return this
***REMOVED***
}

module.exports = SemVer
