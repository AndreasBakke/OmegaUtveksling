const ANY = Symbol('SemVer ANY')
// hoisted class for cyclic dependency
class Comparator ***REMOVED***
  static get ANY () ***REMOVED***
    return ANY
***REMOVED***

  constructor (comp, options) ***REMOVED***
    options = parseOptions(options)

    if (comp instanceof Comparator) ***REMOVED***
      if (comp.loose === !!options.loose) ***REMOVED***
        return comp
    ***REMOVED*** else ***REMOVED***
        comp = comp.value
    ***REMOVED***
  ***REMOVED***

    debug('comparator', comp, options)
    this.options = options
    this.loose = !!options.loose
    this.parse(comp)

    if (this.semver === ANY) ***REMOVED***
      this.value = ''
  ***REMOVED*** else ***REMOVED***
      this.value = this.operator + this.semver.version
  ***REMOVED***

    debug('comp', this)
***REMOVED***

  parse (comp) ***REMOVED***
    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
    const m = comp.match(r)

    if (!m) ***REMOVED***
      throw new TypeError(`Invalid comparator: $***REMOVED***comp}`)
  ***REMOVED***

    this.operator = m[1] !== undefined ? m[1] : ''
    if (this.operator === '=') ***REMOVED***
      this.operator = ''
  ***REMOVED***

    // if it literally is just '>' or '' then allow anything.
    if (!m[2]) ***REMOVED***
      this.semver = ANY
  ***REMOVED*** else ***REMOVED***
      this.semver = new SemVer(m[2], this.options.loose)
  ***REMOVED***
***REMOVED***

  toString () ***REMOVED***
    return this.value
***REMOVED***

  test (version) ***REMOVED***
    debug('Comparator.test', version, this.options.loose)

    if (this.semver === ANY || version === ANY) ***REMOVED***
      return true
  ***REMOVED***

    if (typeof version === 'string') ***REMOVED***
      try ***REMOVED***
        version = new SemVer(version, this.options)
    ***REMOVED*** catch (er) ***REMOVED***
        return false
    ***REMOVED***
  ***REMOVED***

    return cmp(version, this.operator, this.semver, this.options)
***REMOVED***

  intersects (comp, options) ***REMOVED***
    if (!(comp instanceof Comparator)) ***REMOVED***
      throw new TypeError('a Comparator is required')
  ***REMOVED***

    if (!options || typeof options !== 'object') ***REMOVED***
      options = ***REMOVED***
        loose: !!options,
        includePrerelease: false,
    ***REMOVED***
  ***REMOVED***

    if (this.operator === '') ***REMOVED***
      if (this.value === '') ***REMOVED***
        return true
    ***REMOVED***
      return new Range(comp.value, options).test(this.value)
  ***REMOVED*** else if (comp.operator === '') ***REMOVED***
      if (comp.value === '') ***REMOVED***
        return true
    ***REMOVED***
      return new Range(this.value, options).test(comp.semver)
  ***REMOVED***

    const sameDirectionIncreasing =
      (this.operator === '>=' || this.operator === '>') &&
      (comp.operator === '>=' || comp.operator === '>')
    const sameDirectionDecreasing =
      (this.operator === '<=' || this.operator === '<') &&
      (comp.operator === '<=' || comp.operator === '<')
    const sameSemVer = this.semver.version === comp.semver.version
    const differentDirectionsInclusive =
      (this.operator === '>=' || this.operator === '<=') &&
      (comp.operator === '>=' || comp.operator === '<=')
    const oppositeDirectionsLessThan =
      cmp(this.semver, '<', comp.semver, options) &&
      (this.operator === '>=' || this.operator === '>') &&
        (comp.operator === '<=' || comp.operator === '<')
    const oppositeDirectionsGreaterThan =
      cmp(this.semver, '>', comp.semver, options) &&
      (this.operator === '<=' || this.operator === '<') &&
        (comp.operator === '>=' || comp.operator === '>')

    return (
      sameDirectionIncreasing ||
      sameDirectionDecreasing ||
      (sameSemVer && differentDirectionsInclusive) ||
      oppositeDirectionsLessThan ||
      oppositeDirectionsGreaterThan
    )
***REMOVED***
}

module.exports = Comparator

const parseOptions = require('../internal/parse-options')
const ***REMOVED*** re, t } = require('../internal/re')
const cmp = require('../functions/cmp')
const debug = require('../internal/debug')
const SemVer = require('./semver')
const Range = require('./range')
