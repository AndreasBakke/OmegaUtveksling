const SYMBOL_MATCH = 'SYMBOL_MATCH'

export default class TokenStream ***REMOVED***
  constructor(nodes, parent) ***REMOVED***
    this.index = 0
    this.nodes = nodes
    this.functionName = parent != null ? parent.value : null
    this.lastValue = null
    this.rewindIndex = -1
***REMOVED***

  hasTokens() ***REMOVED***
    return this.index <= this.nodes.length - 1
***REMOVED***

  [SYMBOL_MATCH](...tokenDescriptors) ***REMOVED***
    if (!this.hasTokens()) return null

    const node = this.nodes[this.index]

    for (let i = 0; i < tokenDescriptors.length; i += 1) ***REMOVED***
      const tokenDescriptor = tokenDescriptors[i]
      const value = tokenDescriptor(node)
      if (value !== null) ***REMOVED***
        this.index += 1
        this.lastValue = value
        return value
    ***REMOVED***
  ***REMOVED***

    return null
***REMOVED***

  matches(...tokenDescriptors) ***REMOVED***
    return this[SYMBOL_MATCH](...tokenDescriptors) !== null
***REMOVED***

  expect(...tokenDescriptors) ***REMOVED***
    const value = this[SYMBOL_MATCH](...tokenDescriptors)
    return value !== null ? value : this.throw()
***REMOVED***

  matchesFunction() ***REMOVED***
    const node = this.nodes[this.index]
    if (node.type !== 'function') return null
    const value = new TokenStream(node.nodes, node)
    this.index += 1
    this.lastValue = null
    return value
***REMOVED***

  expectFunction() ***REMOVED***
    const value = this.matchesFunction()
    return value !== null ? value : this.throw()
***REMOVED***

  expectEmpty() ***REMOVED***
    if (this.hasTokens()) this.throw()
***REMOVED***

  throw() ***REMOVED***
    throw new Error(`Unexpected token type: $***REMOVED***this.nodes[this.index].type}`)
***REMOVED***

  saveRewindPoint() ***REMOVED***
    this.rewindIndex = this.index
***REMOVED***

  rewind() ***REMOVED***
    if (this.rewindIndex === -1) throw new Error('Internal error')
    this.index = this.rewindIndex
    this.lastValue = null
***REMOVED***
}
