import parseFontFamily from './fontFamily'
import ***REMOVED***
  regExpToken,
  SPACE,
  LENGTH,
  UNSUPPORTED_LENGTH_UNIT,
  SLASH,
} from '../tokenTypes'

const NORMAL = regExpToken(/^(normal)$/)
const STYLE = regExpToken(/^(italic)$/)
const WEIGHT = regExpToken(/^([1-9]00|bold)$/)
const VARIANT = regExpToken(/^(small-caps)$/)

const defaultFontStyle = 'normal'
const defaultFontWeight = 'normal'
const defaultFontVariant = []

export default tokenStream => ***REMOVED***
  let fontStyle
  let fontWeight
  let fontVariant
  // let fontSize;
  let lineHeight
  // let fontFamily;

  let numStyleWeightVariantMatched = 0
  while (numStyleWeightVariantMatched < 3 && tokenStream.hasTokens()) ***REMOVED***
    if (tokenStream.matches(NORMAL)) ***REMOVED***
      /* pass */
  ***REMOVED*** else if (fontStyle === undefined && tokenStream.matches(STYLE)) ***REMOVED***
      fontStyle = tokenStream.lastValue
  ***REMOVED*** else if (fontWeight === undefined && tokenStream.matches(WEIGHT)) ***REMOVED***
      fontWeight = tokenStream.lastValue
  ***REMOVED*** else if (fontVariant === undefined && tokenStream.matches(VARIANT)) ***REMOVED***
      fontVariant = [tokenStream.lastValue]
  ***REMOVED*** else ***REMOVED***
      break
  ***REMOVED***

    tokenStream.expect(SPACE)
    numStyleWeightVariantMatched += 1
***REMOVED***

  const fontSize = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT)

  if (tokenStream.matches(SLASH)) ***REMOVED***
    lineHeight = tokenStream.expect(LENGTH, UNSUPPORTED_LENGTH_UNIT)
***REMOVED***

  tokenStream.expect(SPACE)

  const ***REMOVED*** fontFamily } = parseFontFamily(tokenStream)

  if (fontStyle === undefined) fontStyle = defaultFontStyle
  if (fontWeight === undefined) fontWeight = defaultFontWeight
  if (fontVariant === undefined) fontVariant = defaultFontVariant

  const out = ***REMOVED*** fontStyle, fontWeight, fontVariant, fontSize, fontFamily }
  if (lineHeight !== undefined) out.lineHeight = lineHeight

  return out
}
