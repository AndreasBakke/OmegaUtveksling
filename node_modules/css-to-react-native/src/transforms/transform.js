import ***REMOVED*** SPACE, COMMA, LENGTH, NUMBER, ANGLE } from '../tokenTypes'

const oneOfType = tokenType => functionStream => ***REMOVED***
  const value = functionStream.expect(tokenType)
  functionStream.expectEmpty()
  return value
}

const singleNumber = oneOfType(NUMBER)
const singleLength = oneOfType(LENGTH)
const singleAngle = oneOfType(ANGLE)
const xyTransformFactory = tokenType => (
  key,
  valueIfOmitted
) => functionStream => ***REMOVED***
  const x = functionStream.expect(tokenType)

  let y
  if (functionStream.hasTokens()) ***REMOVED***
    functionStream.expect(COMMA)
    y = functionStream.expect(tokenType)
***REMOVED*** else if (valueIfOmitted !== undefined) ***REMOVED***
    y = valueIfOmitted
***REMOVED*** else ***REMOVED***
    // Assumption, if x === y, then we can omit XY
    // I.e. scale(5) => [***REMOVED*** scale: 5 }] rather than [***REMOVED*** scaleX: 5 }, ***REMOVED*** scaleY: 5 }]
    return x
***REMOVED***

  functionStream.expectEmpty()

  return [***REMOVED*** [`$***REMOVED***key}Y`]: y }, ***REMOVED*** [`$***REMOVED***key}X`]: x }]
}
const xyNumber = xyTransformFactory(NUMBER)
const xyLength = xyTransformFactory(LENGTH)
const xyAngle = xyTransformFactory(ANGLE)

const partTransforms = ***REMOVED***
  perspective: singleNumber,
  scale: xyNumber('scale'),
  scaleX: singleNumber,
  scaleY: singleNumber,
  translate: xyLength('translate', 0),
  translateX: singleLength,
  translateY: singleLength,
  rotate: singleAngle,
  rotateX: singleAngle,
  rotateY: singleAngle,
  rotateZ: singleAngle,
  skewX: singleAngle,
  skewY: singleAngle,
  skew: xyAngle('skew', '0deg'),
}

export default tokenStream => ***REMOVED***
  let transforms = []

  let didParseFirst = false
  while (tokenStream.hasTokens()) ***REMOVED***
    if (didParseFirst) tokenStream.expect(SPACE)

    const functionStream = tokenStream.expectFunction()
    const ***REMOVED*** functionName } = functionStream
    let transformedValues = partTransforms[functionName](functionStream)
    if (!Array.isArray(transformedValues)) ***REMOVED***
      transformedValues = [***REMOVED*** [functionName]: transformedValues }]
  ***REMOVED***
    transforms = transformedValues.concat(transforms)

    didParseFirst = true
***REMOVED***

  return ***REMOVED*** transform: transforms }
}
