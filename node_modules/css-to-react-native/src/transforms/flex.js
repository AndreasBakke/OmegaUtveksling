import ***REMOVED***
  NONE,
  AUTO,
  NUMBER,
  LENGTH,
  UNSUPPORTED_LENGTH_UNIT,
  PERCENT,
  SPACE,
} from '../tokenTypes'

const defaultFlexGrow = 1
const defaultFlexShrink = 1
const defaultFlexBasis = 0

export default tokenStream => ***REMOVED***
  let flexGrow
  let flexShrink
  let flexBasis

  if (tokenStream.matches(NONE)) ***REMOVED***
    tokenStream.expectEmpty()
    return ***REMOVED*** flexGrow: 0, flexShrink: 0, flexBasis: 'auto' }
***REMOVED***

  tokenStream.saveRewindPoint()
  if (tokenStream.matches(AUTO) && !tokenStream.hasTokens()) ***REMOVED***
    return ***REMOVED*** flexGrow: 1, flexShrink: 1, flexBasis: 'auto' }
***REMOVED***
  tokenStream.rewind()

  let partsParsed = 0
  while (partsParsed < 2 && tokenStream.hasTokens()) ***REMOVED***
    if (partsParsed !== 0) tokenStream.expect(SPACE)

    if (flexGrow === undefined && tokenStream.matches(NUMBER)) ***REMOVED***
      flexGrow = tokenStream.lastValue

      tokenStream.saveRewindPoint()
      if (tokenStream.matches(SPACE) && tokenStream.matches(NUMBER)) ***REMOVED***
        flexShrink = tokenStream.lastValue
    ***REMOVED*** else ***REMOVED***
        tokenStream.rewind()
    ***REMOVED***
  ***REMOVED*** else if (
      flexBasis === undefined &&
      tokenStream.matches(LENGTH, UNSUPPORTED_LENGTH_UNIT, PERCENT)
    ) ***REMOVED***
      flexBasis = tokenStream.lastValue
  ***REMOVED*** else if (flexBasis === undefined && tokenStream.matches(AUTO)) ***REMOVED***
      flexBasis = 'auto'
  ***REMOVED*** else ***REMOVED***
      tokenStream.throw()
  ***REMOVED***

    partsParsed += 1
***REMOVED***

  tokenStream.expectEmpty()

  if (flexGrow === undefined) flexGrow = defaultFlexGrow
  if (flexShrink === undefined) flexShrink = defaultFlexShrink
  if (flexBasis === undefined) flexBasis = defaultFlexBasis

  return ***REMOVED*** flexGrow, flexShrink, flexBasis }
}
