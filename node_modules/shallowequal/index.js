//

module.exports = function shallowEqual(objA, objB, compare, compareContext) ***REMOVED***
  var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

  if (ret !== void 0) ***REMOVED***
    return !!ret;
***REMOVED***

  if (objA === objB) ***REMOVED***
    return true;
***REMOVED***

  if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) ***REMOVED***
    return false;
***REMOVED***

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) ***REMOVED***
    return false;
***REMOVED***

  var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);

  // Test for A's keys different from B.
  for (var idx = 0; idx < keysA.length; idx++) ***REMOVED***
    var key = keysA[idx];

    if (!bHasOwnProperty(key)) ***REMOVED***
      return false;
  ***REMOVED***

    var valueA = objA[key];
    var valueB = objB[key];

    ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;

    if (ret === false || (ret === void 0 && valueA !== valueB)) ***REMOVED***
      return false;
  ***REMOVED***
***REMOVED***

  return true;
};
