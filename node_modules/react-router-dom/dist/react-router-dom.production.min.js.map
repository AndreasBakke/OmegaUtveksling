***REMOVED***"version":3,"file":"react-router-dom.production.min.js","sources":["../dom.ts","../index.tsx"],"sourcesContent":["import type ***REMOVED*** FormEncType, FormMethod } from \"@remix-run/router\";\nimport type ***REMOVED*** RelativeRoutingType } from \"react-router\";\n\nexport const defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement ***REMOVED***\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement ***REMOVED***\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement ***REMOVED***\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement ***REMOVED***\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) ***REMOVED***\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) ***REMOVED***\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams(***REMOVED***\n *     sort: ['name', 'price']\n * ***REMOVED***);\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams ***REMOVED***\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => ***REMOVED***\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n      ***REMOVED***, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams\n) ***REMOVED***\n  let searchParams = createSearchParams(locationSearch);\n\n  for (let key of defaultSearchParams.keys()) ***REMOVED***\n    if (!searchParams.has(key)) ***REMOVED***\n      defaultSearchParams.getAll(key).forEach((value) => ***REMOVED***\n        searchParams.append(key, value);\n    ***REMOVED***);\n  ***REMOVED***\n***REMOVED***\n\n  return searchParams;\n}\n\nexport interface SubmitOptions ***REMOVED***\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: FormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   *\n   * Note: It is assumed the path is already resolved. If you need to resolve a\n   * relative path, use `useFormAction`.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | ***REMOVED*** [name: string]: string }\n    | null,\n  defaultAction: string,\n  options: SubmitOptions\n): ***REMOVED***\n  url: URL;\n  method: string;\n  encType: string;\n  formData: FormData;\n} ***REMOVED***\n  let method: string;\n  let action: string;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) ***REMOVED***\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) ***REMOVED***\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n  ***REMOVED***\n***REMOVED*** else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) ***REMOVED***\n    let form = target.form;\n\n    if (form == null) ***REMOVED***\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n  ***REMOVED***\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    action =\n      options.action ||\n      target.getAttribute(\"formaction\") ||\n      form.getAttribute(\"action\") ||\n      defaultAction;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) ***REMOVED***\n      formData.append(target.name, target.value);\n  ***REMOVED***\n***REMOVED*** else if (isHtmlElement(target)) ***REMOVED***\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n***REMOVED*** else ***REMOVED***\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) ***REMOVED***\n      formData = target;\n  ***REMOVED*** else ***REMOVED***\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) ***REMOVED***\n        for (let [name, value] of target) ***REMOVED***\n          formData.append(name, value);\n      ***REMOVED***\n    ***REMOVED*** else if (target != null) ***REMOVED***\n        for (let name of Object.keys(target)) ***REMOVED***\n          formData.append(name, target[name]);\n      ***REMOVED***\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  let ***REMOVED*** protocol, host } = window.location;\n  let url = new URL(action, `$***REMOVED***protocol}//$***REMOVED***host}`);\n\n  return ***REMOVED*** url, method: method.toLowerCase(), encType, formData };\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type ***REMOVED***\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport ***REMOVED***\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_enhanceManualRouteObjects as enhanceManualRouteObjects,\n} from \"react-router\";\nimport type ***REMOVED***\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HydrationState,\n  Router as RemixRouter,\n} from \"@remix-run/router\";\nimport ***REMOVED***\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  invariant,\n  joinPaths,\n  ErrorResponse,\n} from \"@remix-run/router\";\n\nimport type ***REMOVED***\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport ***REMOVED***\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type ***REMOVED***\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n};\nexport ***REMOVED*** createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type ***REMOVED***\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport ***REMOVED***\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport ***REMOVED***\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_enhanceManualRouteObjects,\n} from \"react-router\";\n//#endregion\n\ndeclare global ***REMOVED***\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: ***REMOVED***\n    basename?: string;\n    hydrationData?: HydrationState;\n    window?: Window;\n***REMOVED***\n): RemixRouter ***REMOVED***\n  return createRouter(***REMOVED***\n    basename: opts?.basename,\n    history: createBrowserHistory(***REMOVED*** window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes: enhanceManualRouteObjects(routes),\n***REMOVED***).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: ***REMOVED***\n    basename?: string;\n    hydrationData?: HydrationState;\n    window?: Window;\n***REMOVED***\n): RemixRouter ***REMOVED***\n  return createRouter(***REMOVED***\n    basename: opts?.basename,\n    history: createHashHistory(***REMOVED*** window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes: enhanceManualRouteObjects(routes),\n***REMOVED***).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined ***REMOVED***\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) ***REMOVED***\n    state = ***REMOVED***\n      ...state,\n      errors: deserializeErrors(state.errors),\n  ***REMOVED***;\n***REMOVED***\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] ***REMOVED***\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = ***REMOVED***};\n  for (let [key, val] of entries) ***REMOVED***\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") ***REMOVED***\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n  ***REMOVED*** else if (val && val.__type === \"Error\") ***REMOVED***\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n  ***REMOVED*** else ***REMOVED***\n      serialized[key] = val;\n  ***REMOVED***\n***REMOVED***\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps ***REMOVED***\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter(***REMOVED***\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) ***REMOVED***\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) ***REMOVED***\n    historyRef.current = createBrowserHistory(***REMOVED*** window, v5Compat: true });\n***REMOVED***\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState(***REMOVED***\n    action: history.action,\n    location: history.location,\n***REMOVED***);\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename=***REMOVED***basename}\n      children=***REMOVED***children}\n      location=***REMOVED***state.location}\n      navigationType=***REMOVED***state.action}\n      navigator=***REMOVED***history}\n    />\n  );\n}\n\nexport interface HashRouterProps ***REMOVED***\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter(***REMOVED*** basename, children, window }: HashRouterProps) ***REMOVED***\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) ***REMOVED***\n    historyRef.current = createHashHistory(***REMOVED*** window, v5Compat: true });\n***REMOVED***\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState(***REMOVED***\n    action: history.action,\n    location: history.location,\n***REMOVED***);\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename=***REMOVED***basename}\n      children=***REMOVED***children}\n      location=***REMOVED***state.location}\n      navigationType=***REMOVED***state.action}\n      navigator=***REMOVED***history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps ***REMOVED***\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(***REMOVED*** basename, children, history }: HistoryRouterProps) ***REMOVED***\n  const [state, setState] = React.useState(***REMOVED***\n    action: history.action,\n    location: history.location,\n***REMOVED***);\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename=***REMOVED***basename}\n      children=***REMOVED***children}\n      location=***REMOVED***state.location}\n      navigationType=***REMOVED***state.action}\n      navigator=***REMOVED***history}\n    />\n  );\n}\n\nif (__DEV__) ***REMOVED***\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport ***REMOVED*** HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> ***REMOVED***\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    ***REMOVED***\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n  ***REMOVED***,\n    ref\n  ) ***REMOVED***\n    let href = useHref(to, ***REMOVED*** relative });\n    let internalOnClick = useLinkClickHandler(to, ***REMOVED***\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n  ***REMOVED***);\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) ***REMOVED***\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) ***REMOVED***\n        internalOnClick(event);\n    ***REMOVED***\n  ***REMOVED***\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        ***REMOVED***...rest}\n        href=***REMOVED***href}\n        onClick=***REMOVED***reloadDocument ? onClick : handleClick}\n        ref=***REMOVED***ref}\n        target=***REMOVED***target}\n      />\n    );\n***REMOVED***\n);\n\nif (__DEV__) ***REMOVED***\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> ***REMOVED***\n  children?:\n    | React.ReactNode\n    | ((props: ***REMOVED*** isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: ***REMOVED***\n        isActive: boolean;\n        isPending: boolean;\n    ***REMOVED***) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: ***REMOVED***\n        isActive: boolean;\n        isPending: boolean;\n    ***REMOVED***) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    ***REMOVED***\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n  ***REMOVED***,\n    ref\n  ) ***REMOVED***\n    let path = useResolvedPath(to, ***REMOVED*** relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let ***REMOVED*** navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) ***REMOVED***\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n  ***REMOVED***\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") ***REMOVED***\n      className = classNameProp(***REMOVED*** isActive, isPending });\n  ***REMOVED*** else ***REMOVED***\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n  ***REMOVED***\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp(***REMOVED*** isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        ***REMOVED***...rest}\n        aria-current=***REMOVED***ariaCurrent}\n        className=***REMOVED***className}\n        ref=***REMOVED***ref}\n        style=***REMOVED***style}\n        to=***REMOVED***to}\n      >\n        ***REMOVED***typeof children === \"function\"\n          ? children(***REMOVED*** isActive, isPending })\n          : children}\n      </Link>\n    );\n***REMOVED***\n);\n\nif (__DEV__) ***REMOVED***\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> ***REMOVED***\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: FormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => ***REMOVED***\n    return <FormImpl ***REMOVED***...props} ref=***REMOVED***ref} />;\n***REMOVED***\n);\n\nif (__DEV__) ***REMOVED***\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps ***REMOVED***\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    ***REMOVED***\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      preventScrollReset,\n      ...props\n  ***REMOVED***,\n    forwardedRef\n  ) => ***REMOVED***\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: FormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, ***REMOVED*** relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => ***REMOVED***\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as FormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, ***REMOVED***\n        method: submitMethod,\n        replace,\n        relative,\n        preventScrollReset,\n    ***REMOVED***);\n  ***REMOVED***;\n\n    return (\n      <form\n        ref=***REMOVED***forwardedRef}\n        method=***REMOVED***formMethod}\n        action=***REMOVED***formAction}\n        onSubmit=***REMOVED***reloadDocument ? onSubmit : submitHandler}\n        ***REMOVED***...props}\n      />\n    );\n***REMOVED***\n);\n\nif (__DEV__) ***REMOVED***\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps ***REMOVED***\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration(***REMOVED***\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) ***REMOVED***\n  useScrollRestoration(***REMOVED*** getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) ***REMOVED***\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook ***REMOVED***\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook ***REMOVED***\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) ***REMOVED***\n  return `$***REMOVED***hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) ***REMOVED***\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) ***REMOVED***\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  ***REMOVED***\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n***REMOVED***: ***REMOVED***\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n***REMOVED*** = ***REMOVED***}\n): (event: React.MouseEvent<E, MouseEvent>) => void ***REMOVED***\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, ***REMOVED*** relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => ***REMOVED***\n      if (shouldProcessLinkClick(event, target)) ***REMOVED***\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, ***REMOVED*** replace, state, preventScrollReset, relative });\n    ***REMOVED***\n  ***REMOVED***,\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] ***REMOVED***\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      getSearchParamsForLocation(\n        location.search,\n        defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => ***REMOVED***\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      navigate(\"?\" + newSearchParams, navigateOptions);\n  ***REMOVED***,\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | ***REMOVED*** [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction ***REMOVED***\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction ***REMOVED***\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(fetcherKey?: string, routeId?: string): SubmitFunction ***REMOVED***\n  let ***REMOVED*** router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let defaultAction = useFormAction();\n\n  return React.useCallback(\n    (target, options = ***REMOVED***}) => ***REMOVED***\n      if (typeof document === \"undefined\") ***REMOVED***\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n    ***REMOVED***\n\n      let ***REMOVED*** method, encType, formData, url } = getFormSubmissionInfo(\n        target,\n        defaultAction,\n        options\n      );\n\n      let href = url.pathname + url.search;\n      let opts = ***REMOVED***\n        replace: options.replace,\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        formMethod: method as FormMethod,\n        formEncType: encType as FormEncType,\n    ***REMOVED***;\n      if (fetcherKey) ***REMOVED***\n        invariant(routeId != null, \"No routeId available for useFetcher()\");\n        router.fetch(fetcherKey, routeId, href, opts);\n    ***REMOVED*** else ***REMOVED***\n        router.navigate(href, opts);\n    ***REMOVED***\n  ***REMOVED***,\n    [defaultAction, router, fetcherKey, routeId]\n  );\n}\n\nexport function useFormAction(\n  action?: string,\n  ***REMOVED*** relative }: ***REMOVED*** relative?: RelativeRoutingType } = ***REMOVED***}\n): string ***REMOVED***\n  let ***REMOVED*** basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = ***REMOVED*** ...useResolvedPath(action ? action : \".\", ***REMOVED*** relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) ***REMOVED***\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) ***REMOVED***\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?$***REMOVED***params.toString()}` : \"\";\n  ***REMOVED***\n***REMOVED***\n\n  if ((!action || action === \".\") && match.route.index) ***REMOVED***\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n***REMOVED***\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") ***REMOVED***\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n***REMOVED***\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) ***REMOVED***\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => ***REMOVED***\n      return (\n        <FormImpl\n          ***REMOVED***...props}\n          ref=***REMOVED***ref}\n          fetcherKey=***REMOVED***fetcherKey}\n          routeId=***REMOVED***routeId}\n        />\n      );\n  ***REMOVED***\n  );\n  if (__DEV__) ***REMOVED***\n    FetcherForm.displayName = \"fetcher.Form\";\n***REMOVED***\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & ***REMOVED***\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace/preventScrollReset because they are not\n    // navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"preventScrollReset\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> ***REMOVED***\n  let ***REMOVED*** router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => ***REMOVED***\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n***REMOVED***);\n  let [load] = React.useState(() => (href: string) => ***REMOVED***\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n***REMOVED***);\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => (***REMOVED***\n      Form,\n      submit,\n      load,\n      ...fetcher,\n  ***REMOVED***),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => ***REMOVED***\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => ***REMOVED***\n      if (!router) ***REMOVED***\n        console.warn(`No fetcher available to clean up from useFetcher()`);\n        return;\n    ***REMOVED***\n      router.deleteFetcher(fetcherKey);\n  ***REMOVED***;\n***REMOVED***, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] ***REMOVED***\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = ***REMOVED***};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(***REMOVED***\n  getKey,\n  storageKey,\n}: ***REMOVED***\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = ***REMOVED***}) ***REMOVED***\n  let ***REMOVED*** router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let ***REMOVED*** restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => ***REMOVED***\n    window.history.scrollRestoration = \"manual\";\n    return () => ***REMOVED***\n      window.history.scrollRestoration = \"auto\";\n  ***REMOVED***;\n***REMOVED***, []);\n\n  // Save positions on unload\n  useBeforeUnload(\n    React.useCallback(() => ***REMOVED***\n      if (navigation.state === \"idle\") ***REMOVED***\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n    ***REMOVED***\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n  ***REMOVED***, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") ***REMOVED***\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => ***REMOVED***\n      try ***REMOVED***\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) ***REMOVED***\n          savedScrollPositions = JSON.parse(sessionPositions);\n      ***REMOVED***\n    ***REMOVED*** catch (e) ***REMOVED***\n        // no-op, use default empty object\n    ***REMOVED***\n  ***REMOVED***, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => ***REMOVED***\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n  ***REMOVED***, [router, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => ***REMOVED***\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) ***REMOVED***\n        return;\n    ***REMOVED***\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") ***REMOVED***\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n    ***REMOVED***\n\n      // try to scroll to the hash\n      if (location.hash) ***REMOVED***\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) ***REMOVED***\n          el.scrollIntoView();\n          return;\n      ***REMOVED***\n    ***REMOVED***\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) ***REMOVED***\n        return;\n    ***REMOVED***\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n  ***REMOVED***, [location, restoreScrollPosition, preventScrollReset]);\n***REMOVED***\n}\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: ***REMOVED*** capture?: boolean }\n): void ***REMOVED***\n  let ***REMOVED*** capture } = options || ***REMOVED***};\n  React.useEffect(() => ***REMOVED***\n    let opts = capture != null ? ***REMOVED*** capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => ***REMOVED***\n      window.removeEventListener(\"beforeunload\", callback, opts);\n  ***REMOVED***;\n***REMOVED***, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(***REMOVED*** when, message }: ***REMOVED*** when: boolean; message: string }) ***REMOVED***\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => ***REMOVED***\n    if (blocker.state === \"blocked\" && !when) ***REMOVED***\n      blocker.reset();\n  ***REMOVED***\n***REMOVED***, [blocker, when]);\n\n  React.useEffect(() => ***REMOVED***\n    if (blocker.state === \"blocked\") ***REMOVED***\n      let proceed = window.confirm(message);\n      if (proceed) ***REMOVED***\n        setTimeout(blocker.proceed, 0);\n    ***REMOVED*** else ***REMOVED***\n        blocker.reset();\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***, [blocker, message]);\n}\n\nexport ***REMOVED*** usePrompt as unstable_usePrompt };\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Utils\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: boolean, message: string): void ***REMOVED***\n  if (!cond) ***REMOVED***\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try ***REMOVED***\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n  ***REMOVED*** catch (e) ***REMOVED***}\n***REMOVED***\n}\n//#endregion\n\nexport ***REMOVED*** useScrollRestoration as UNSAFE_useScrollRestoration };\n"],"names":["defaultEncType","isHtmlElement","object","tagName","createSearchParams","init","URLSearchParams","Array","isArray","Object","keys","reduce","memo","key","value","concat","map","v","getFormSubmissionInfo","target","defaultAction","options","method","action","encType","formData","toLowerCase","submissionTrigger","getAttribute","FormData","name","append","isButtonElement","isInputElement","type","form","Error","protocol","host","window","location","url","URL","createBrowserRouter","routes","opts","createRouter","basename","history","createBrowserHistory","hydrationData","parseHydrationData","enhanceManualRouteObjects","initialize","createHashRouter","createHashHistory","state","__staticRouterHydrationData","errors","deserializeErrors","entries","serialized","val","__type","ErrorResponse","status","statusText","data","internal","error","message","stack","BrowserRouter","children","historyRef","React","useRef","current","v5Compat","setState","useState","useLayoutEffect","listen","Router","navigationType","navigator","HashRouter","HistoryRouter","Link","forwardRef","onClick","relative","reloadDocument","replace","to","preventScrollReset","rest","ref","href","useHref","internalOnClick","useLinkClickHandler","createElement","assign","event","defaultPrevented","NavLink","ariaCurrentProp","caseSensitive","className","classNameProp","end","style","styleProp","path","useResolvedPath","useLocation","routerState","useContext","DataRouterStateContext","NavigationContext","toPathname","encodeLocation","pathname","locationPathname","nextLocationPathname","navigation","isActive","startsWith","charAt","length","isPending","ariaCurrent","undefined","filter","Boolean","join","Form","props","FormImpl","onSubmit","fetcherKey","routeId","forwardedRef","submit","useSubmitImpl","formMethod","formAction","useFormAction","preventDefault","submitter","nativeEvent","submitMethod","currentTarget","ScrollRestoration","getKey","storageKey","useScrollRestoration","DataRouterHook","DataRouterStateHook","useDataRouterContext","hookName","ctx","DataRouterContext","invariant","useDataRouterState","replaceProp","navigate","useNavigate","useCallback","button","metaKey","altKey","ctrlKey","shiftKey","isModifiedEvent","shouldProcessLinkClick","createPath","useSearchParams","defaultInit","defaultSearchParamsRef","searchParams","useMemo","locationSearch","defaultSearchParams","has","getAll","forEach","getSearchParamsForLocation","search","setSearchParams","nextInit","navigateOptions","newSearchParams","useSubmit","router","UseSubmitImpl","document","formEncType","fetch","routeContext","RouteContext","match","matches","slice","hash","route","index","params","delete","toString","joinPaths","fetcherId","useFetcher","UseFetcher","id","String","createFetcherForm","load","fetcher","getFetcher","fetcherWithComponents","useEffect","deleteFetcher","console","warn","useFetchers","UseFetchers","fetchers","values","savedScrollPositions","UseScrollRestoration","restoreScrollPosition","useMatches","useNavigation","scrollRestoration","useBeforeUnload","scrollY","sessionStorage","setItem","JSON","stringify","sessionPositions","getItem","parse","e","disableScrollRestoration","enableScrollRestoration","el","getElementById","scrollIntoView","scrollTo","callback","capture","addEventListener","removeEventListener","usePrompt","when","blocker","useBlocker","reset","confirm","setTimeout","proceed"],"mappings":"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"}