"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
Object.defineProperty(exports, "Hub", ***REMOVED***
  enumerable: true,
  get: function () ***REMOVED***
    return _hub.default;
***REMOVED***
});
Object.defineProperty(exports, "NodePath", ***REMOVED***
  enumerable: true,
  get: function () ***REMOVED***
    return _path.default;
***REMOVED***
});
Object.defineProperty(exports, "Scope", ***REMOVED***
  enumerable: true,
  get: function () ***REMOVED***
    return _scope.default;
***REMOVED***
});
exports.visitors = exports.default = void 0;
var visitors = require("./visitors");
exports.visitors = visitors;
var _t = require("@babel/types");
var cache = require("./cache");
var _traverseNode = require("./traverse-node");
var _path = require("./path");
var _scope = require("./scope");
var _hub = require("./hub");
const ***REMOVED***
  VISITOR_KEYS,
  removeProperties,
  traverseFast
} = _t;
function traverse(parent, opts = ***REMOVED***}, scope, state, parentPath) ***REMOVED***
  if (!parent) return;
  if (!opts.noScope && !scope) ***REMOVED***
    if (parent.type !== "Program" && parent.type !== "File") ***REMOVED***
      throw new Error("You must pass a scope and parentPath unless traversing a Program/File. " + `Instead of that you tried to traverse a $***REMOVED***parent.type} node without ` + "passing scope and parentPath.");
  ***REMOVED***
***REMOVED***
  if (!VISITOR_KEYS[parent.type]) ***REMOVED***
    return;
***REMOVED***
  visitors.explode(opts);
  (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath);
}
var _default = traverse;
exports.default = _default;
traverse.visitors = visitors;
traverse.verify = visitors.verify;
traverse.explode = visitors.explode;
traverse.cheap = function (node, enter) ***REMOVED***
  return traverseFast(node, enter);
};
traverse.node = function (node, opts, scope, state, path, skipKeys) ***REMOVED***
  (0, _traverseNode.traverseNode)(node, opts, scope, state, path, skipKeys);
};
traverse.clearNode = function (node, opts) ***REMOVED***
  removeProperties(node, opts);
  cache.path.delete(node);
};
traverse.removeProperties = function (tree, opts) ***REMOVED***
  traverseFast(tree, traverse.clearNode, opts);
  return tree;
};
function hasDenylistedType(path, state) ***REMOVED***
  if (path.node.type === state.type) ***REMOVED***
    state.has = true;
    path.stop();
***REMOVED***
}
traverse.hasType = function (tree, type, denylistTypes) ***REMOVED***
  if (denylistTypes != null && denylistTypes.includes(tree.type)) return false;
  if (tree.type === type) return true;
  const state = ***REMOVED***
    has: false,
    type: type
***REMOVED***;
  traverse(tree, ***REMOVED***
    noScope: true,
    denylist: denylistTypes,
    enter: hasDenylistedType
***REMOVED***, null, state);
  return state.has;
};
traverse.cache = cache;

//# sourceMappingURL=index.js.map
