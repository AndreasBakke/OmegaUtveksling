"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = void 0;
var _path = require("./path");
var _t = require("@babel/types");
const ***REMOVED***
  VISITOR_KEYS
} = _t;
class TraversalContext ***REMOVED***
  constructor(scope, opts, state, parentPath) ***REMOVED***
    this.queue = null;
    this.priorityQueue = null;
    this.parentPath = parentPath;
    this.scope = scope;
    this.state = state;
    this.opts = opts;
***REMOVED***
  shouldVisit(node) ***REMOVED***
    const opts = this.opts;
    if (opts.enter || opts.exit) return true;
    if (opts[node.type]) return true;
    const keys = VISITOR_KEYS[node.type];
    if (!(keys != null && keys.length)) return false;
    for (const key of keys) ***REMOVED***
      if (node[key]) ***REMOVED***
        return true;
    ***REMOVED***
  ***REMOVED***
    return false;
***REMOVED***
  create(node, container, key, listKey) ***REMOVED***
    return _path.default.get(***REMOVED***
      parentPath: this.parentPath,
      parent: node,
      container,
      key: key,
      listKey
  ***REMOVED***);
***REMOVED***
  maybeQueue(path, notPriority) ***REMOVED***
    if (this.queue) ***REMOVED***
      if (notPriority) ***REMOVED***
        this.queue.push(path);
    ***REMOVED*** else ***REMOVED***
        this.priorityQueue.push(path);
    ***REMOVED***
  ***REMOVED***
***REMOVED***
  visitMultiple(container, parent, listKey) ***REMOVED***
    if (container.length === 0) return false;
    const queue = [];
    for (let key = 0; key < container.length; key++) ***REMOVED***
      const node = container[key];
      if (node && this.shouldVisit(node)) ***REMOVED***
        queue.push(this.create(parent, container, key, listKey));
    ***REMOVED***
  ***REMOVED***
    return this.visitQueue(queue);
***REMOVED***
  visitSingle(node, key) ***REMOVED***
    if (this.shouldVisit(node[key])) ***REMOVED***
      return this.visitQueue([this.create(node, node, key)]);
  ***REMOVED*** else ***REMOVED***
      return false;
  ***REMOVED***
***REMOVED***
  visitQueue(queue) ***REMOVED***
    this.queue = queue;
    this.priorityQueue = [];
    const visited = new WeakSet();
    let stop = false;
    for (const path of queue) ***REMOVED***
      path.resync();
      if (path.contexts.length === 0 || path.contexts[path.contexts.length - 1] !== this) ***REMOVED***
        path.pushContext(this);
    ***REMOVED***
      if (path.key === null) continue;
      const ***REMOVED***
        node
    ***REMOVED*** = path;
      if (visited.has(node)) continue;
      if (node) visited.add(node);
      if (path.visit()) ***REMOVED***
        stop = true;
        break;
    ***REMOVED***
      if (this.priorityQueue.length) ***REMOVED***
        stop = this.visitQueue(this.priorityQueue);
        this.priorityQueue = [];
        this.queue = queue;
        if (stop) break;
    ***REMOVED***
  ***REMOVED***
    for (const path of queue) ***REMOVED***
      path.popContext();
  ***REMOVED***
    this.queue = null;
    return stop;
***REMOVED***
  visit(node, key) ***REMOVED***
    const nodes = node[key];
    if (!nodes) return false;
    if (Array.isArray(nodes)) ***REMOVED***
      return this.visitMultiple(nodes, node, key);
  ***REMOVED*** else ***REMOVED***
      return this.visitSingle(node, key);
  ***REMOVED***
***REMOVED***
}
exports.default = TraversalContext;

//# sourceMappingURL=context.js.map
