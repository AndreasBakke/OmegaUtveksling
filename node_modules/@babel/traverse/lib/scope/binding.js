"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = void 0;
class Binding ***REMOVED***
  constructor(***REMOVED***
    identifier,
    scope,
    path,
    kind
***REMOVED***) ***REMOVED***
    this.identifier = void 0;
    this.scope = void 0;
    this.path = void 0;
    this.kind = void 0;
    this.constantViolations = [];
    this.constant = true;
    this.referencePaths = [];
    this.referenced = false;
    this.references = 0;
    this.identifier = identifier;
    this.scope = scope;
    this.path = path;
    this.kind = kind;
    if ((kind === "var" || kind === "hoisted") && isDeclaredInLoop(path || (() => ***REMOVED***
      throw new Error("Internal Babel error: unreachable ");
  ***REMOVED***)())) ***REMOVED***
      this.reassign(path);
  ***REMOVED***
    this.clearValue();
***REMOVED***
  deoptValue() ***REMOVED***
    this.clearValue();
    this.hasDeoptedValue = true;
***REMOVED***
  setValue(value) ***REMOVED***
    if (this.hasDeoptedValue) return;
    this.hasValue = true;
    this.value = value;
***REMOVED***
  clearValue() ***REMOVED***
    this.hasDeoptedValue = false;
    this.hasValue = false;
    this.value = null;
***REMOVED***
  reassign(path) ***REMOVED***
    this.constant = false;
    if (this.constantViolations.indexOf(path) !== -1) ***REMOVED***
      return;
  ***REMOVED***
    this.constantViolations.push(path);
***REMOVED***
  reference(path) ***REMOVED***
    if (this.referencePaths.indexOf(path) !== -1) ***REMOVED***
      return;
  ***REMOVED***
    this.referenced = true;
    this.references++;
    this.referencePaths.push(path);
***REMOVED***
  dereference() ***REMOVED***
    this.references--;
    this.referenced = !!this.references;
***REMOVED***
}
exports.default = Binding;
function isDeclaredInLoop(path) ***REMOVED***
  for (let ***REMOVED***
    parentPath,
    key
***REMOVED*** = path; parentPath; (***REMOVED***
    parentPath,
    key
***REMOVED*** = parentPath)) ***REMOVED***
    if (parentPath.isFunctionParent()) return false;
    if (parentPath.isWhile() || parentPath.isForXStatement() || parentPath.isForStatement() && key === "body") ***REMOVED***
      return true;
  ***REMOVED***
***REMOVED***
  return false;
}

//# sourceMappingURL=binding.js.map
