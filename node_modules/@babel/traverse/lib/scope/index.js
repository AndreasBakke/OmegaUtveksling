"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = void 0;
var _renamer = require("./lib/renamer");
var _index = require("../index");
var _binding = require("./binding");
var _globals = require("globals");
var _t = require("@babel/types");
var _cache = require("../cache");
const ***REMOVED***
  NOT_LOCAL_BINDING,
  callExpression,
  cloneNode,
  getBindingIdentifiers,
  identifier,
  isArrayExpression,
  isBinary,
  isClass,
  isClassBody,
  isClassDeclaration,
  isExportAllDeclaration,
  isExportDefaultDeclaration,
  isExportNamedDeclaration,
  isFunctionDeclaration,
  isIdentifier,
  isImportDeclaration,
  isLiteral,
  isMethod,
  isModuleSpecifier,
  isNullLiteral,
  isObjectExpression,
  isProperty,
  isPureish,
  isRegExpLiteral,
  isSuper,
  isTaggedTemplateExpression,
  isTemplateLiteral,
  isThisExpression,
  isUnaryExpression,
  isVariableDeclaration,
  matchesPattern,
  memberExpression,
  numericLiteral,
  toIdentifier,
  unaryExpression,
  variableDeclaration,
  variableDeclarator,
  isRecordExpression,
  isTupleExpression,
  isObjectProperty,
  isTopicReference,
  isMetaProperty,
  isPrivateName,
  isExportDeclaration
} = _t;
function gatherNodeParts(node, parts) ***REMOVED***
  switch (node == null ? void 0 : node.type) ***REMOVED***
    default:
      if (isImportDeclaration(node) || isExportDeclaration(node)) ***REMOVED***
        if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source) ***REMOVED***
          gatherNodeParts(node.source, parts);
      ***REMOVED*** else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.specifiers && node.specifiers.length) ***REMOVED***
          for (const e of node.specifiers) gatherNodeParts(e, parts);
      ***REMOVED*** else if ((isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration) ***REMOVED***
          gatherNodeParts(node.declaration, parts);
      ***REMOVED***
    ***REMOVED*** else if (isModuleSpecifier(node)) ***REMOVED***
        gatherNodeParts(node.local, parts);
    ***REMOVED*** else if (isLiteral(node) && !isNullLiteral(node) && !isRegExpLiteral(node) && !isTemplateLiteral(node)) ***REMOVED***
        parts.push(node.value);
    ***REMOVED***
      break;
    case "MemberExpression":
    case "OptionalMemberExpression":
    case "JSXMemberExpression":
      gatherNodeParts(node.object, parts);
      gatherNodeParts(node.property, parts);
      break;
    case "Identifier":
    case "JSXIdentifier":
      parts.push(node.name);
      break;
    case "CallExpression":
    case "OptionalCallExpression":
    case "NewExpression":
      gatherNodeParts(node.callee, parts);
      break;
    case "ObjectExpression":
    case "ObjectPattern":
      for (const e of node.properties) ***REMOVED***
        gatherNodeParts(e, parts);
    ***REMOVED***
      break;
    case "SpreadElement":
    case "RestElement":
      gatherNodeParts(node.argument, parts);
      break;
    case "ObjectProperty":
    case "ObjectMethod":
    case "ClassProperty":
    case "ClassMethod":
    case "ClassPrivateProperty":
    case "ClassPrivateMethod":
      gatherNodeParts(node.key, parts);
      break;
    case "ThisExpression":
      parts.push("this");
      break;
    case "Super":
      parts.push("super");
      break;
    case "Import":
      parts.push("import");
      break;
    case "DoExpression":
      parts.push("do");
      break;
    case "YieldExpression":
      parts.push("yield");
      gatherNodeParts(node.argument, parts);
      break;
    case "AwaitExpression":
      parts.push("await");
      gatherNodeParts(node.argument, parts);
      break;
    case "AssignmentExpression":
      gatherNodeParts(node.left, parts);
      break;
    case "VariableDeclarator":
      gatherNodeParts(node.id, parts);
      break;
    case "FunctionExpression":
    case "FunctionDeclaration":
    case "ClassExpression":
    case "ClassDeclaration":
      gatherNodeParts(node.id, parts);
      break;
    case "PrivateName":
      gatherNodeParts(node.id, parts);
      break;
    case "ParenthesizedExpression":
      gatherNodeParts(node.expression, parts);
      break;
    case "UnaryExpression":
    case "UpdateExpression":
      gatherNodeParts(node.argument, parts);
      break;
    case "MetaProperty":
      gatherNodeParts(node.meta, parts);
      gatherNodeParts(node.property, parts);
      break;
    case "JSXElement":
      gatherNodeParts(node.openingElement, parts);
      break;
    case "JSXOpeningElement":
      gatherNodeParts(node.name, parts);
      break;
    case "JSXFragment":
      gatherNodeParts(node.openingFragment, parts);
      break;
    case "JSXOpeningFragment":
      parts.push("Fragment");
      break;
    case "JSXNamespacedName":
      gatherNodeParts(node.namespace, parts);
      gatherNodeParts(node.name, parts);
      break;
***REMOVED***
}
const collectorVisitor = ***REMOVED***
  ForStatement(path) ***REMOVED***
    const declar = path.get("init");
    if (declar.isVar()) ***REMOVED***
      const ***REMOVED***
        scope
    ***REMOVED*** = path;
      const parentScope = scope.getFunctionParent() || scope.getProgramParent();
      parentScope.registerBinding("var", declar);
  ***REMOVED***
***REMOVED***,
  Declaration(path) ***REMOVED***
    if (path.isBlockScoped()) return;
    if (path.isImportDeclaration()) return;
    if (path.isExportDeclaration()) return;
    const parent = path.scope.getFunctionParent() || path.scope.getProgramParent();
    parent.registerDeclaration(path);
***REMOVED***,
  ImportDeclaration(path) ***REMOVED***
    const parent = path.scope.getBlockParent();
    parent.registerDeclaration(path);
***REMOVED***,
  ReferencedIdentifier(path, state) ***REMOVED***
    state.references.push(path);
***REMOVED***,
  ForXStatement(path, state) ***REMOVED***
    const left = path.get("left");
    if (left.isPattern() || left.isIdentifier()) ***REMOVED***
      state.constantViolations.push(path);
  ***REMOVED*** else if (left.isVar()) ***REMOVED***
      const ***REMOVED***
        scope
    ***REMOVED*** = path;
      const parentScope = scope.getFunctionParent() || scope.getProgramParent();
      parentScope.registerBinding("var", left);
  ***REMOVED***
***REMOVED***,
  ExportDeclaration: ***REMOVED***
    exit(path) ***REMOVED***
      const ***REMOVED***
        node,
        scope
    ***REMOVED*** = path;
      if (isExportAllDeclaration(node)) return;
      const declar = node.declaration;
      if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) ***REMOVED***
        const id = declar.id;
        if (!id) return;
        const binding = scope.getBinding(id.name);
        binding == null ? void 0 : binding.reference(path);
    ***REMOVED*** else if (isVariableDeclaration(declar)) ***REMOVED***
        for (const decl of declar.declarations) ***REMOVED***
          for (const name of Object.keys(getBindingIdentifiers(decl))) ***REMOVED***
            const binding = scope.getBinding(name);
            binding == null ? void 0 : binding.reference(path);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***,
  LabeledStatement(path) ***REMOVED***
    path.scope.getBlockParent().registerDeclaration(path);
***REMOVED***,
  AssignmentExpression(path, state) ***REMOVED***
    state.assignments.push(path);
***REMOVED***,
  UpdateExpression(path, state) ***REMOVED***
    state.constantViolations.push(path);
***REMOVED***,
  UnaryExpression(path, state) ***REMOVED***
    if (path.node.operator === "delete") ***REMOVED***
      state.constantViolations.push(path);
  ***REMOVED***
***REMOVED***,
  BlockScoped(path) ***REMOVED***
    let scope = path.scope;
    if (scope.path === path) scope = scope.parent;
    const parent = scope.getBlockParent();
    parent.registerDeclaration(path);
    if (path.isClassDeclaration() && path.node.id) ***REMOVED***
      const id = path.node.id;
      const name = id.name;
      path.scope.bindings[name] = path.scope.parent.getBinding(name);
  ***REMOVED***
***REMOVED***,
  CatchClause(path) ***REMOVED***
    path.scope.registerBinding("let", path);
***REMOVED***,
  Function(path) ***REMOVED***
    const params = path.get("params");
    for (const param of params) ***REMOVED***
      path.scope.registerBinding("param", param);
  ***REMOVED***
    if (path.isFunctionExpression() && path.has("id") && !path.get("id").node[NOT_LOCAL_BINDING]) ***REMOVED***
      path.scope.registerBinding("local", path.get("id"), path);
  ***REMOVED***
***REMOVED***,
  ClassExpression(path) ***REMOVED***
    if (path.has("id") && !path.get("id").node[NOT_LOCAL_BINDING]) ***REMOVED***
      path.scope.registerBinding("local", path);
  ***REMOVED***
***REMOVED***
};
let uid = 0;
class Scope ***REMOVED***
  constructor(path) ***REMOVED***
    this.uid = void 0;
    this.path = void 0;
    this.block = void 0;
    this.labels = void 0;
    this.inited = void 0;
    this.bindings = void 0;
    this.references = void 0;
    this.globals = void 0;
    this.uids = void 0;
    this.data = void 0;
    this.crawling = void 0;
    const ***REMOVED***
      node
  ***REMOVED*** = path;
    const cached = _cache.scope.get(node);
    if ((cached == null ? void 0 : cached.path) === path) ***REMOVED***
      return cached;
  ***REMOVED***
    _cache.scope.set(node, this);
    this.uid = uid++;
    this.block = node;
    this.path = path;
    this.labels = new Map();
    this.inited = false;
***REMOVED***
  get parent() ***REMOVED***
    var _parent;
    let parent,
      path = this.path;
    do ***REMOVED***
      const shouldSkip = path.key === "key" || path.listKey === "decorators";
      path = path.parentPath;
      if (shouldSkip && path.isMethod()) path = path.parentPath;
      if (path && path.isScope()) parent = path;
  ***REMOVED*** while (path && !parent);
    return (_parent = parent) == null ? void 0 : _parent.scope;
***REMOVED***
  get parentBlock() ***REMOVED***
    return this.path.parent;
***REMOVED***
  get hub() ***REMOVED***
    return this.path.hub;
***REMOVED***
  traverse(node, opts, state) ***REMOVED***
    (0, _index.default)(node, opts, this, state, this.path);
***REMOVED***
  generateDeclaredUidIdentifier(name) ***REMOVED***
    const id = this.generateUidIdentifier(name);
    this.push(***REMOVED***
      id
  ***REMOVED***);
    return cloneNode(id);
***REMOVED***
  generateUidIdentifier(name) ***REMOVED***
    return identifier(this.generateUid(name));
***REMOVED***
  generateUid(name = "temp") ***REMOVED***
    name = toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");
    let uid;
    let i = 1;
    do ***REMOVED***
      uid = this._generateUid(name, i);
      i++;
  ***REMOVED*** while (this.hasLabel(uid) || this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));
    const program = this.getProgramParent();
    program.references[uid] = true;
    program.uids[uid] = true;
    return uid;
***REMOVED***
  _generateUid(name, i) ***REMOVED***
    let id = name;
    if (i > 1) id += i;
    return `_$***REMOVED***id}`;
***REMOVED***
  generateUidBasedOnNode(node, defaultName) ***REMOVED***
    const parts = [];
    gatherNodeParts(node, parts);
    let id = parts.join("$");
    id = id.replace(/^_/, "") || defaultName || "ref";
    return this.generateUid(id.slice(0, 20));
***REMOVED***
  generateUidIdentifierBasedOnNode(node, defaultName) ***REMOVED***
    return identifier(this.generateUidBasedOnNode(node, defaultName));
***REMOVED***
  isStatic(node) ***REMOVED***
    if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) ***REMOVED***
      return true;
  ***REMOVED***
    if (isIdentifier(node)) ***REMOVED***
      const binding = this.getBinding(node.name);
      if (binding) ***REMOVED***
        return binding.constant;
    ***REMOVED*** else ***REMOVED***
        return this.hasBinding(node.name);
    ***REMOVED***
  ***REMOVED***
    return false;
***REMOVED***
  maybeGenerateMemoised(node, dontPush) ***REMOVED***
    if (this.isStatic(node)) ***REMOVED***
      return null;
  ***REMOVED*** else ***REMOVED***
      const id = this.generateUidIdentifierBasedOnNode(node);
      if (!dontPush) ***REMOVED***
        this.push(***REMOVED***
          id
      ***REMOVED***);
        return cloneNode(id);
    ***REMOVED***
      return id;
  ***REMOVED***
***REMOVED***
  checkBlockScopedCollisions(local, kind, name, id) ***REMOVED***
    if (kind === "param") return;
    if (local.kind === "local") return;
    const duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module" || local.kind === "param" && kind === "const";
    if (duplicate) ***REMOVED***
      throw this.hub.buildError(id, `Duplicate declaration "$***REMOVED***name}"`, TypeError);
  ***REMOVED***
***REMOVED***
  rename(oldName, newName, block) ***REMOVED***
    const binding = this.getBinding(oldName);
    if (binding) ***REMOVED***
      newName = newName || this.generateUidIdentifier(oldName).name;
      return new _renamer.default(binding, oldName, newName).rename(block);
  ***REMOVED***
***REMOVED***
  _renameFromMap(map, oldName, newName, value) ***REMOVED***
    if (map[oldName]) ***REMOVED***
      map[newName] = value;
      map[oldName] = null;
  ***REMOVED***
***REMOVED***
  dump() ***REMOVED***
    const sep = "-".repeat(60);
    console.log(sep);
    let scope = this;
    do ***REMOVED***
      console.log("#", scope.block.type);
      for (const name of Object.keys(scope.bindings)) ***REMOVED***
        const binding = scope.bindings[name];
        console.log(" -", name, ***REMOVED***
          constant: binding.constant,
          references: binding.references,
          violations: binding.constantViolations.length,
          kind: binding.kind
      ***REMOVED***);
    ***REMOVED***
  ***REMOVED*** while (scope = scope.parent);
    console.log(sep);
***REMOVED***
  toArray(node, i, arrayLikeIsIterable) ***REMOVED***
    if (isIdentifier(node)) ***REMOVED***
      const binding = this.getBinding(node.name);
      if (binding != null && binding.constant && binding.path.isGenericType("Array")) ***REMOVED***
        return node;
    ***REMOVED***
  ***REMOVED***
    if (isArrayExpression(node)) ***REMOVED***
      return node;
  ***REMOVED***
    if (isIdentifier(node, ***REMOVED***
      name: "arguments"
  ***REMOVED***)) ***REMOVED***
      return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);
  ***REMOVED***
    let helperName;
    const args = [node];
    if (i === true) ***REMOVED***
      helperName = "toConsumableArray";
  ***REMOVED*** else if (typeof i === "number") ***REMOVED***
      args.push(numericLiteral(i));
      helperName = "slicedToArray";
  ***REMOVED*** else ***REMOVED***
      helperName = "toArray";
  ***REMOVED***
    if (arrayLikeIsIterable) ***REMOVED***
      args.unshift(this.hub.addHelper(helperName));
      helperName = "maybeArrayLike";
  ***REMOVED***
    return callExpression(this.hub.addHelper(helperName), args);
***REMOVED***
  hasLabel(name) ***REMOVED***
    return !!this.getLabel(name);
***REMOVED***
  getLabel(name) ***REMOVED***
    return this.labels.get(name);
***REMOVED***
  registerLabel(path) ***REMOVED***
    this.labels.set(path.node.label.name, path);
***REMOVED***
  registerDeclaration(path) ***REMOVED***
    if (path.isLabeledStatement()) ***REMOVED***
      this.registerLabel(path);
  ***REMOVED*** else if (path.isFunctionDeclaration()) ***REMOVED***
      this.registerBinding("hoisted", path.get("id"), path);
  ***REMOVED*** else if (path.isVariableDeclaration()) ***REMOVED***
      const declarations = path.get("declarations");
      const ***REMOVED***
        kind
    ***REMOVED*** = path.node;
      for (const declar of declarations) ***REMOVED***
        this.registerBinding(kind === "using" ? "const" : kind, declar);
    ***REMOVED***
  ***REMOVED*** else if (path.isClassDeclaration()) ***REMOVED***
      if (path.node.declare) return;
      this.registerBinding("let", path);
  ***REMOVED*** else if (path.isImportDeclaration()) ***REMOVED***
      const isTypeDeclaration = path.node.importKind === "type" || path.node.importKind === "typeof";
      const specifiers = path.get("specifiers");
      for (const specifier of specifiers) ***REMOVED***
        const isTypeSpecifier = isTypeDeclaration || specifier.isImportSpecifier() && (specifier.node.importKind === "type" || specifier.node.importKind === "typeof");
        this.registerBinding(isTypeSpecifier ? "unknown" : "module", specifier);
    ***REMOVED***
  ***REMOVED*** else if (path.isExportDeclaration()) ***REMOVED***
      const declar = path.get("declaration");
      if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) ***REMOVED***
        this.registerDeclaration(declar);
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
      this.registerBinding("unknown", path);
  ***REMOVED***
***REMOVED***
  buildUndefinedNode() ***REMOVED***
    return unaryExpression("void", numericLiteral(0), true);
***REMOVED***
  registerConstantViolation(path) ***REMOVED***
    const ids = path.getBindingIdentifiers();
    for (const name of Object.keys(ids)) ***REMOVED***
      const binding = this.getBinding(name);
      if (binding) binding.reassign(path);
  ***REMOVED***
***REMOVED***
  registerBinding(kind, path, bindingPath = path) ***REMOVED***
    if (!kind) throw new ReferenceError("no `kind`");
    if (path.isVariableDeclaration()) ***REMOVED***
      const declarators = path.get("declarations");
      for (const declar of declarators) ***REMOVED***
        this.registerBinding(kind, declar);
    ***REMOVED***
      return;
  ***REMOVED***
    const parent = this.getProgramParent();
    const ids = path.getOuterBindingIdentifiers(true);
    for (const name of Object.keys(ids)) ***REMOVED***
      parent.references[name] = true;
      for (const id of ids[name]) ***REMOVED***
        const local = this.getOwnBinding(name);
        if (local) ***REMOVED***
          if (local.identifier === id) continue;
          this.checkBlockScopedCollisions(local, kind, name, id);
      ***REMOVED***
        if (local) ***REMOVED***
          this.registerConstantViolation(bindingPath);
      ***REMOVED*** else ***REMOVED***
          this.bindings[name] = new _binding.default(***REMOVED***
            identifier: id,
            scope: this,
            path: bindingPath,
            kind: kind
        ***REMOVED***);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***
  addGlobal(node) ***REMOVED***
    this.globals[node.name] = node;
***REMOVED***
  hasUid(name) ***REMOVED***
    let scope = this;
    do ***REMOVED***
      if (scope.uids[name]) return true;
  ***REMOVED*** while (scope = scope.parent);
    return false;
***REMOVED***
  hasGlobal(name) ***REMOVED***
    let scope = this;
    do ***REMOVED***
      if (scope.globals[name]) return true;
  ***REMOVED*** while (scope = scope.parent);
    return false;
***REMOVED***
  hasReference(name) ***REMOVED***
    return !!this.getProgramParent().references[name];
***REMOVED***
  isPure(node, constantsOnly) ***REMOVED***
    if (isIdentifier(node)) ***REMOVED***
      const binding = this.getBinding(node.name);
      if (!binding) return false;
      if (constantsOnly) return binding.constant;
      return true;
  ***REMOVED*** else if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node)) ***REMOVED***
      return true;
  ***REMOVED*** else if (isClass(node)) ***REMOVED***
      var _node$decorators;
      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) ***REMOVED***
        return false;
    ***REMOVED***
      if (((_node$decorators = node.decorators) == null ? void 0 : _node$decorators.length) > 0) ***REMOVED***
        return false;
    ***REMOVED***
      return this.isPure(node.body, constantsOnly);
  ***REMOVED*** else if (isClassBody(node)) ***REMOVED***
      for (const method of node.body) ***REMOVED***
        if (!this.isPure(method, constantsOnly)) return false;
    ***REMOVED***
      return true;
  ***REMOVED*** else if (isBinary(node)) ***REMOVED***
      return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
  ***REMOVED*** else if (isArrayExpression(node) || isTupleExpression(node)) ***REMOVED***
      for (const elem of node.elements) ***REMOVED***
        if (elem !== null && !this.isPure(elem, constantsOnly)) return false;
    ***REMOVED***
      return true;
  ***REMOVED*** else if (isObjectExpression(node) || isRecordExpression(node)) ***REMOVED***
      for (const prop of node.properties) ***REMOVED***
        if (!this.isPure(prop, constantsOnly)) return false;
    ***REMOVED***
      return true;
  ***REMOVED*** else if (isMethod(node)) ***REMOVED***
      var _node$decorators2;
      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
      if (((_node$decorators2 = node.decorators) == null ? void 0 : _node$decorators2.length) > 0) ***REMOVED***
        return false;
    ***REMOVED***
      return true;
  ***REMOVED*** else if (isProperty(node)) ***REMOVED***
      var _node$decorators3;
      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
      if (((_node$decorators3 = node.decorators) == null ? void 0 : _node$decorators3.length) > 0) ***REMOVED***
        return false;
    ***REMOVED***
      if (isObjectProperty(node) || node.static) ***REMOVED***
        if (node.value !== null && !this.isPure(node.value, constantsOnly)) ***REMOVED***
          return false;
      ***REMOVED***
    ***REMOVED***
      return true;
  ***REMOVED*** else if (isUnaryExpression(node)) ***REMOVED***
      return this.isPure(node.argument, constantsOnly);
  ***REMOVED*** else if (isTaggedTemplateExpression(node)) ***REMOVED***
      return matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", true) && this.isPure(node.quasi, constantsOnly);
  ***REMOVED*** else if (isTemplateLiteral(node)) ***REMOVED***
      for (const expression of node.expressions) ***REMOVED***
        if (!this.isPure(expression, constantsOnly)) return false;
    ***REMOVED***
      return true;
  ***REMOVED*** else ***REMOVED***
      return isPureish(node);
  ***REMOVED***
***REMOVED***
  setData(key, val) ***REMOVED***
    return this.data[key] = val;
***REMOVED***
  getData(key) ***REMOVED***
    let scope = this;
    do ***REMOVED***
      const data = scope.data[key];
      if (data != null) return data;
  ***REMOVED*** while (scope = scope.parent);
***REMOVED***
  removeData(key) ***REMOVED***
    let scope = this;
    do ***REMOVED***
      const data = scope.data[key];
      if (data != null) scope.data[key] = null;
  ***REMOVED*** while (scope = scope.parent);
***REMOVED***
  init() ***REMOVED***
    if (!this.inited) ***REMOVED***
      this.inited = true;
      this.crawl();
  ***REMOVED***
***REMOVED***
  crawl() ***REMOVED***
    const path = this.path;
    this.references = Object.create(null);
    this.bindings = Object.create(null);
    this.globals = Object.create(null);
    this.uids = Object.create(null);
    this.data = Object.create(null);
    const programParent = this.getProgramParent();
    if (programParent.crawling) return;
    const state = ***REMOVED***
      references: [],
      constantViolations: [],
      assignments: []
  ***REMOVED***;
    this.crawling = true;
    if (path.type !== "Program" && collectorVisitor._exploded) ***REMOVED***
      for (const visit of collectorVisitor.enter) ***REMOVED***
        visit(path, state);
    ***REMOVED***
      const typeVisitors = collectorVisitor[path.type];
      if (typeVisitors) ***REMOVED***
        for (const visit of typeVisitors.enter) ***REMOVED***
          visit(path, state);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
    path.traverse(collectorVisitor, state);
    this.crawling = false;
    for (const path of state.assignments) ***REMOVED***
      const ids = path.getBindingIdentifiers();
      for (const name of Object.keys(ids)) ***REMOVED***
        if (path.scope.getBinding(name)) continue;
        programParent.addGlobal(ids[name]);
    ***REMOVED***
      path.scope.registerConstantViolation(path);
  ***REMOVED***
    for (const ref of state.references) ***REMOVED***
      const binding = ref.scope.getBinding(ref.node.name);
      if (binding) ***REMOVED***
        binding.reference(ref);
    ***REMOVED*** else ***REMOVED***
        programParent.addGlobal(ref.node);
    ***REMOVED***
  ***REMOVED***
    for (const path of state.constantViolations) ***REMOVED***
      path.scope.registerConstantViolation(path);
  ***REMOVED***
***REMOVED***
  push(opts) ***REMOVED***
    let path = this.path;
    if (path.isPattern()) ***REMOVED***
      path = this.getPatternParent().path;
  ***REMOVED*** else if (!path.isBlockStatement() && !path.isProgram()) ***REMOVED***
      path = this.getBlockParent().path;
  ***REMOVED***
    if (path.isSwitchStatement()) ***REMOVED***
      path = (this.getFunctionParent() || this.getProgramParent()).path;
  ***REMOVED***
    if (path.isLoop() || path.isCatchClause() || path.isFunction()) ***REMOVED***
      path.ensureBlock();
      path = path.get("body");
  ***REMOVED***
    const unique = opts.unique;
    const kind = opts.kind || "var";
    const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
    const dataKey = `declaration:$***REMOVED***kind}:$***REMOVED***blockHoist}`;
    let declarPath = !unique && path.getData(dataKey);
    if (!declarPath) ***REMOVED***
      const declar = variableDeclaration(kind, []);
      declar._blockHoist = blockHoist;
      [declarPath] = path.unshiftContainer("body", [declar]);
      if (!unique) path.setData(dataKey, declarPath);
  ***REMOVED***
    const declarator = variableDeclarator(opts.id, opts.init);
    const len = declarPath.node.declarations.push(declarator);
    path.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
***REMOVED***
  getProgramParent() ***REMOVED***
    let scope = this;
    do ***REMOVED***
      if (scope.path.isProgram()) ***REMOVED***
        return scope;
    ***REMOVED***
  ***REMOVED*** while (scope = scope.parent);
    throw new Error("Couldn't find a Program");
***REMOVED***
  getFunctionParent() ***REMOVED***
    let scope = this;
    do ***REMOVED***
      if (scope.path.isFunctionParent()) ***REMOVED***
        return scope;
    ***REMOVED***
  ***REMOVED*** while (scope = scope.parent);
    return null;
***REMOVED***
  getBlockParent() ***REMOVED***
    let scope = this;
    do ***REMOVED***
      if (scope.path.isBlockParent()) ***REMOVED***
        return scope;
    ***REMOVED***
  ***REMOVED*** while (scope = scope.parent);
    throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
***REMOVED***
  getPatternParent() ***REMOVED***
    let scope = this;
    do ***REMOVED***
      if (!scope.path.isPattern()) ***REMOVED***
        return scope.getBlockParent();
    ***REMOVED***
  ***REMOVED*** while (scope = scope.parent.parent);
    throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
***REMOVED***
  getAllBindings() ***REMOVED***
    const ids = Object.create(null);
    let scope = this;
    do ***REMOVED***
      for (const key of Object.keys(scope.bindings)) ***REMOVED***
        if (key in ids === false) ***REMOVED***
          ids[key] = scope.bindings[key];
      ***REMOVED***
    ***REMOVED***
      scope = scope.parent;
  ***REMOVED*** while (scope);
    return ids;
***REMOVED***
  getAllBindingsOfKind(...kinds) ***REMOVED***
    const ids = Object.create(null);
    for (const kind of kinds) ***REMOVED***
      let scope = this;
      do ***REMOVED***
        for (const name of Object.keys(scope.bindings)) ***REMOVED***
          const binding = scope.bindings[name];
          if (binding.kind === kind) ids[name] = binding;
      ***REMOVED***
        scope = scope.parent;
    ***REMOVED*** while (scope);
  ***REMOVED***
    return ids;
***REMOVED***
  bindingIdentifierEquals(name, node) ***REMOVED***
    return this.getBindingIdentifier(name) === node;
***REMOVED***
  getBinding(name) ***REMOVED***
    let scope = this;
    let previousPath;
    do ***REMOVED***
      const binding = scope.getOwnBinding(name);
      if (binding) ***REMOVED***
        var _previousPath;
        if ((_previousPath = previousPath) != null && _previousPath.isPattern() && binding.kind !== "param" && binding.kind !== "local") ***REMOVED***} else ***REMOVED***
          return binding;
      ***REMOVED***
    ***REMOVED*** else if (!binding && name === "arguments" && scope.path.isFunction() && !scope.path.isArrowFunctionExpression()) ***REMOVED***
        break;
    ***REMOVED***
      previousPath = scope.path;
  ***REMOVED*** while (scope = scope.parent);
***REMOVED***
  getOwnBinding(name) ***REMOVED***
    return this.bindings[name];
***REMOVED***
  getBindingIdentifier(name) ***REMOVED***
    var _this$getBinding;
    return (_this$getBinding = this.getBinding(name)) == null ? void 0 : _this$getBinding.identifier;
***REMOVED***
  getOwnBindingIdentifier(name) ***REMOVED***
    const binding = this.bindings[name];
    return binding == null ? void 0 : binding.identifier;
***REMOVED***
  hasOwnBinding(name) ***REMOVED***
    return !!this.getOwnBinding(name);
***REMOVED***
  hasBinding(name, opts) ***REMOVED***
    var _opts, _opts2, _opts3;
    if (!name) return false;
    if (this.hasOwnBinding(name)) return true;
    ***REMOVED***
      if (typeof opts === "boolean") opts = ***REMOVED***
        noGlobals: opts
    ***REMOVED***;
  ***REMOVED***
    if (this.parentHasBinding(name, opts)) return true;
    if (!((_opts = opts) != null && _opts.noUids) && this.hasUid(name)) return true;
    if (!((_opts2 = opts) != null && _opts2.noGlobals) && Scope.globals.includes(name)) return true;
    if (!((_opts3 = opts) != null && _opts3.noGlobals) && Scope.contextVariables.includes(name)) return true;
    return false;
***REMOVED***
  parentHasBinding(name, opts) ***REMOVED***
    var _this$parent;
    return (_this$parent = this.parent) == null ? void 0 : _this$parent.hasBinding(name, opts);
***REMOVED***
  moveBindingTo(name, scope) ***REMOVED***
    const info = this.getBinding(name);
    if (info) ***REMOVED***
      info.scope.removeOwnBinding(name);
      info.scope = scope;
      scope.bindings[name] = info;
  ***REMOVED***
***REMOVED***
  removeOwnBinding(name) ***REMOVED***
    delete this.bindings[name];
***REMOVED***
  removeBinding(name) ***REMOVED***
    var _this$getBinding2;
    (_this$getBinding2 = this.getBinding(name)) == null ? void 0 : _this$getBinding2.scope.removeOwnBinding(name);
    let scope = this;
    do ***REMOVED***
      if (scope.uids[name]) ***REMOVED***
        scope.uids[name] = false;
    ***REMOVED***
  ***REMOVED*** while (scope = scope.parent);
***REMOVED***
}
exports.default = Scope;
Scope.globals = Object.keys(_globals.builtin);
Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];

//# sourceMappingURL=index.js.map
