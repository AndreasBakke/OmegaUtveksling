"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = void 0;
var _helperSplitExportDeclaration = require("@babel/helper-split-export-declaration");
var t = require("@babel/types");
var _helperEnvironmentVisitor = require("@babel/helper-environment-visitor");
var _traverseNode = require("../../traverse-node");
var _visitors = require("../../visitors");
const renameVisitor = ***REMOVED***
  ReferencedIdentifier(***REMOVED***
    node
***REMOVED***, state) ***REMOVED***
    if (node.name === state.oldName) ***REMOVED***
      node.name = state.newName;
  ***REMOVED***
***REMOVED***,
  Scope(path, state) ***REMOVED***
    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) ***REMOVED***
      path.skip();
      if (path.isMethod()) ***REMOVED***
        (0, _helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path);
    ***REMOVED***
  ***REMOVED***
***REMOVED***,
  "AssignmentExpression|Declaration|VariableDeclarator"(path, state) ***REMOVED***
    if (path.isVariableDeclaration()) return;
    const ids = path.getOuterBindingIdentifiers();
    for (const name in ids) ***REMOVED***
      if (name === state.oldName) ids[name].name = state.newName;
  ***REMOVED***
***REMOVED***
};
class Renamer ***REMOVED***
  constructor(binding, oldName, newName) ***REMOVED***
    this.newName = newName;
    this.oldName = oldName;
    this.binding = binding;
***REMOVED***
  maybeConvertFromExportDeclaration(parentDeclar) ***REMOVED***
    const maybeExportDeclar = parentDeclar.parentPath;
    if (!maybeExportDeclar.isExportDeclaration()) ***REMOVED***
      return;
  ***REMOVED***
    if (maybeExportDeclar.isExportDefaultDeclaration()) ***REMOVED***
      const ***REMOVED***
        declaration
    ***REMOVED*** = maybeExportDeclar.node;
      if (t.isDeclaration(declaration) && !declaration.id) ***REMOVED***
        return;
    ***REMOVED***
  ***REMOVED***
    if (maybeExportDeclar.isExportAllDeclaration()) ***REMOVED***
      return;
  ***REMOVED***
    (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);
***REMOVED***
  maybeConvertFromClassFunctionDeclaration(path) ***REMOVED***
    return path;
***REMOVED***
  maybeConvertFromClassFunctionExpression(path) ***REMOVED***
    return path;
***REMOVED***
  rename(block) ***REMOVED***
    const ***REMOVED***
      binding,
      oldName,
      newName
  ***REMOVED*** = this;
    const ***REMOVED***
      scope,
      path
  ***REMOVED*** = binding;
    const parentDeclar = path.find(path => path.isDeclaration() || path.isFunctionExpression() || path.isClassExpression());
    if (parentDeclar) ***REMOVED***
      const bindingIds = parentDeclar.getOuterBindingIdentifiers();
      if (bindingIds[oldName] === binding.identifier) ***REMOVED***
        this.maybeConvertFromExportDeclaration(parentDeclar);
    ***REMOVED***
  ***REMOVED***
    (0, _traverseNode.traverseNode)(block || scope.block, (0, _visitors.explode)(renameVisitor), scope, this, scope.path, ***REMOVED***
      discriminant: true
  ***REMOVED***);
    if (!block) ***REMOVED***
      scope.removeOwnBinding(oldName);
      scope.bindings[newName] = binding;
      this.binding.identifier.name = newName;
  ***REMOVED***
    if (parentDeclar) ***REMOVED***
      this.maybeConvertFromClassFunctionDeclaration(path);
      this.maybeConvertFromClassFunctionExpression(path);
  ***REMOVED***
***REMOVED***
}
exports.default = Renamer;

//# sourceMappingURL=renamer.js.map
