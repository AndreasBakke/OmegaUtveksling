"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = splitExportDeclaration;

var _t = require("@babel/types");

const ***REMOVED***
  cloneNode,
  exportNamedDeclaration,
  exportSpecifier,
  identifier,
  variableDeclaration,
  variableDeclarator
} = _t;

function splitExportDeclaration(exportDeclaration) ***REMOVED***
  if (!exportDeclaration.isExportDeclaration() || exportDeclaration.isExportAllDeclaration()) ***REMOVED***
    throw new Error("Only default and named export declarations can be split.");
***REMOVED***

  if (exportDeclaration.isExportDefaultDeclaration()) ***REMOVED***
    const declaration = exportDeclaration.get("declaration");
    const standaloneDeclaration = declaration.isFunctionDeclaration() || declaration.isClassDeclaration();
    const scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;
    let id = declaration.node.id;
    let needBindingRegistration = false;

    if (!id) ***REMOVED***
      needBindingRegistration = true;
      id = scope.generateUidIdentifier("default");

      if (standaloneDeclaration || declaration.isFunctionExpression() || declaration.isClassExpression()) ***REMOVED***
        declaration.node.id = cloneNode(id);
    ***REMOVED***
  ***REMOVED***

    const updatedDeclaration = standaloneDeclaration ? declaration.node : variableDeclaration("var", [variableDeclarator(cloneNode(id), declaration.node)]);
    const updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier("default"))]);
    exportDeclaration.insertAfter(updatedExportDeclaration);
    exportDeclaration.replaceWith(updatedDeclaration);

    if (needBindingRegistration) ***REMOVED***
      scope.registerDeclaration(exportDeclaration);
  ***REMOVED***

    return exportDeclaration;
***REMOVED*** else if (exportDeclaration.get("specifiers").length > 0) ***REMOVED***
    throw new Error("It doesn't make sense to split exported specifiers.");
***REMOVED***

  const declaration = exportDeclaration.get("declaration");
  const bindingIdentifiers = declaration.getOuterBindingIdentifiers();
  const specifiers = Object.keys(bindingIdentifiers).map(name => ***REMOVED***
    return exportSpecifier(identifier(name), identifier(name));
***REMOVED***);
  const aliasDeclar = exportNamedDeclaration(null, specifiers);
  exportDeclaration.insertAfter(aliasDeclar);
  exportDeclaration.replaceWith(declaration.node);
  return exportDeclaration;
}