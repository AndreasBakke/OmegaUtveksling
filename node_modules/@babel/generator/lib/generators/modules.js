"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.ExportAllDeclaration = ExportAllDeclaration;
exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
exports.ExportNamedDeclaration = ExportNamedDeclaration;
exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
exports.ExportSpecifier = ExportSpecifier;
exports.ImportAttribute = ImportAttribute;
exports.ImportDeclaration = ImportDeclaration;
exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
exports.ImportSpecifier = ImportSpecifier;
exports._printAssertions = _printAssertions;
var _t = require("@babel/types");
const ***REMOVED***
  isClassDeclaration,
  isExportDefaultSpecifier,
  isExportNamespaceSpecifier,
  isImportDefaultSpecifier,
  isImportNamespaceSpecifier,
  isStatement
} = _t;
function ImportSpecifier(node) ***REMOVED***
  if (node.importKind === "type" || node.importKind === "typeof") ***REMOVED***
    this.word(node.importKind);
    this.space();
***REMOVED***
  this.print(node.imported, node);
  if (node.local && node.local.name !== node.imported.name) ***REMOVED***
    this.space();
    this.word("as");
    this.space();
    this.print(node.local, node);
***REMOVED***
}
function ImportDefaultSpecifier(node) ***REMOVED***
  this.print(node.local, node);
}
function ExportDefaultSpecifier(node) ***REMOVED***
  this.print(node.exported, node);
}
function ExportSpecifier(node) ***REMOVED***
  if (node.exportKind === "type") ***REMOVED***
    this.word("type");
    this.space();
***REMOVED***
  this.print(node.local, node);
  if (node.exported && node.local.name !== node.exported.name) ***REMOVED***
    this.space();
    this.word("as");
    this.space();
    this.print(node.exported, node);
***REMOVED***
}
function ExportNamespaceSpecifier(node) ***REMOVED***
  this.tokenChar(42);
  this.space();
  this.word("as");
  this.space();
  this.print(node.exported, node);
}
function _printAssertions(node) ***REMOVED***
  this.word("assert");
  this.space();
  this.tokenChar(123);
  this.space();
  this.printList(node.assertions, node);
  this.space();
  this.tokenChar(125);
}
function ExportAllDeclaration(node) ***REMOVED***
  var _node$assertions;
  this.word("export");
  this.space();
  if (node.exportKind === "type") ***REMOVED***
    this.word("type");
    this.space();
***REMOVED***
  this.tokenChar(42);
  this.space();
  this.word("from");
  this.space();
  if ((_node$assertions = node.assertions) != null && _node$assertions.length) ***REMOVED***
    this.print(node.source, node, true);
    this.space();
    this._printAssertions(node);
***REMOVED*** else ***REMOVED***
    this.print(node.source, node);
***REMOVED***
  this.semicolon();
}
function ExportNamedDeclaration(node) ***REMOVED***
  ***REMOVED***
    if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) ***REMOVED***
      this.printJoin(node.declaration.decorators, node);
  ***REMOVED***
***REMOVED***
  this.word("export");
  this.space();
  if (node.declaration) ***REMOVED***
    const declar = node.declaration;
    this.print(declar, node);
    if (!isStatement(declar)) this.semicolon();
***REMOVED*** else ***REMOVED***
    if (node.exportKind === "type") ***REMOVED***
      this.word("type");
      this.space();
  ***REMOVED***
    const specifiers = node.specifiers.slice(0);

    let hasSpecial = false;
    for (;;) ***REMOVED***
      const first = specifiers[0];
      if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) ***REMOVED***
        hasSpecial = true;
        this.print(specifiers.shift(), node);
        if (specifiers.length) ***REMOVED***
          this.tokenChar(44);
          this.space();
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        break;
    ***REMOVED***
  ***REMOVED***
    if (specifiers.length || !specifiers.length && !hasSpecial) ***REMOVED***
      this.tokenChar(123);
      if (specifiers.length) ***REMOVED***
        this.space();
        this.printList(specifiers, node);
        this.space();
    ***REMOVED***
      this.tokenChar(125);
  ***REMOVED***
    if (node.source) ***REMOVED***
      var _node$assertions2;
      this.space();
      this.word("from");
      this.space();
      if ((_node$assertions2 = node.assertions) != null && _node$assertions2.length) ***REMOVED***
        this.print(node.source, node, true);
        this.space();
        this._printAssertions(node);
    ***REMOVED*** else ***REMOVED***
        this.print(node.source, node);
    ***REMOVED***
  ***REMOVED***
    this.semicolon();
***REMOVED***
}
function ExportDefaultDeclaration(node) ***REMOVED***
  ***REMOVED***
    if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) ***REMOVED***
      this.printJoin(node.declaration.decorators, node);
  ***REMOVED***
***REMOVED***
  this.word("export");
  this.noIndentInnerCommentsHere();
  this.space();
  this.word("default");
  this.space();
  const declar = node.declaration;
  this.print(declar, node);
  if (!isStatement(declar)) this.semicolon();
}
function ImportDeclaration(node) ***REMOVED***
  var _node$assertions3;
  this.word("import");
  this.space();
  const isTypeKind = node.importKind === "type" || node.importKind === "typeof";
  if (isTypeKind) ***REMOVED***
    this.noIndentInnerCommentsHere();
    this.word(node.importKind);
    this.space();
***REMOVED*** else if (node.module) ***REMOVED***
    this.noIndentInnerCommentsHere();
    this.word("module");
    this.space();
***REMOVED***
  const specifiers = node.specifiers.slice(0);
  const hasSpecifiers = !!specifiers.length;
  while (hasSpecifiers) ***REMOVED***
    const first = specifiers[0];
    if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) ***REMOVED***
      this.print(specifiers.shift(), node);
      if (specifiers.length) ***REMOVED***
        this.tokenChar(44);
        this.space();
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
      break;
  ***REMOVED***
***REMOVED***
  if (specifiers.length) ***REMOVED***
    this.tokenChar(123);
    this.space();
    this.printList(specifiers, node);
    this.space();
    this.tokenChar(125);
***REMOVED*** else if (isTypeKind && !hasSpecifiers) ***REMOVED***
    this.tokenChar(123);
    this.tokenChar(125);
***REMOVED***
  if (hasSpecifiers || isTypeKind) ***REMOVED***
    this.space();
    this.word("from");
    this.space();
***REMOVED***
  if ((_node$assertions3 = node.assertions) != null && _node$assertions3.length) ***REMOVED***
    this.print(node.source, node, true);
    this.space();
    this._printAssertions(node);
***REMOVED*** else ***REMOVED***
    this.print(node.source, node);
***REMOVED***
  ***REMOVED***
    var _node$attributes;
    if ((_node$attributes = node.attributes) != null && _node$attributes.length) ***REMOVED***
      this.space();
      this.word("with");
      this.space();
      this.printList(node.attributes, node);
  ***REMOVED***
***REMOVED***
  this.semicolon();
}
function ImportAttribute(node) ***REMOVED***
  this.print(node.key);
  this.tokenChar(58);
  this.space();
  this.print(node.value);
}
function ImportNamespaceSpecifier(node) ***REMOVED***
  this.tokenChar(42);
  this.space();
  this.word("as");
  this.space();
  this.print(node.local, node);
}

//# sourceMappingURL=modules.js.map
