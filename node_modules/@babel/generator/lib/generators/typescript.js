"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.TSAnyKeyword = TSAnyKeyword;
exports.TSArrayType = TSArrayType;
exports.TSSatisfiesExpression = exports.TSAsExpression = TSTypeExpression;
exports.TSBigIntKeyword = TSBigIntKeyword;
exports.TSBooleanKeyword = TSBooleanKeyword;
exports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;
exports.TSConditionalType = TSConditionalType;
exports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;
exports.TSConstructorType = TSConstructorType;
exports.TSDeclareFunction = TSDeclareFunction;
exports.TSDeclareMethod = TSDeclareMethod;
exports.TSEnumDeclaration = TSEnumDeclaration;
exports.TSEnumMember = TSEnumMember;
exports.TSExportAssignment = TSExportAssignment;
exports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;
exports.TSExternalModuleReference = TSExternalModuleReference;
exports.TSFunctionType = TSFunctionType;
exports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;
exports.TSImportType = TSImportType;
exports.TSIndexSignature = TSIndexSignature;
exports.TSIndexedAccessType = TSIndexedAccessType;
exports.TSInferType = TSInferType;
exports.TSInstantiationExpression = TSInstantiationExpression;
exports.TSInterfaceBody = TSInterfaceBody;
exports.TSInterfaceDeclaration = TSInterfaceDeclaration;
exports.TSIntersectionType = TSIntersectionType;
exports.TSIntrinsicKeyword = TSIntrinsicKeyword;
exports.TSLiteralType = TSLiteralType;
exports.TSMappedType = TSMappedType;
exports.TSMethodSignature = TSMethodSignature;
exports.TSModuleBlock = TSModuleBlock;
exports.TSModuleDeclaration = TSModuleDeclaration;
exports.TSNamedTupleMember = TSNamedTupleMember;
exports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;
exports.TSNeverKeyword = TSNeverKeyword;
exports.TSNonNullExpression = TSNonNullExpression;
exports.TSNullKeyword = TSNullKeyword;
exports.TSNumberKeyword = TSNumberKeyword;
exports.TSObjectKeyword = TSObjectKeyword;
exports.TSOptionalType = TSOptionalType;
exports.TSParameterProperty = TSParameterProperty;
exports.TSParenthesizedType = TSParenthesizedType;
exports.TSPropertySignature = TSPropertySignature;
exports.TSQualifiedName = TSQualifiedName;
exports.TSRestType = TSRestType;
exports.TSStringKeyword = TSStringKeyword;
exports.TSSymbolKeyword = TSSymbolKeyword;
exports.TSThisType = TSThisType;
exports.TSTupleType = TSTupleType;
exports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;
exports.TSTypeAnnotation = TSTypeAnnotation;
exports.TSTypeAssertion = TSTypeAssertion;
exports.TSTypeLiteral = TSTypeLiteral;
exports.TSTypeOperator = TSTypeOperator;
exports.TSTypeParameter = TSTypeParameter;
exports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;
exports.TSTypePredicate = TSTypePredicate;
exports.TSTypeQuery = TSTypeQuery;
exports.TSTypeReference = TSTypeReference;
exports.TSUndefinedKeyword = TSUndefinedKeyword;
exports.TSUnionType = TSUnionType;
exports.TSUnknownKeyword = TSUnknownKeyword;
exports.TSVoidKeyword = TSVoidKeyword;
exports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;
exports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;
exports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;
exports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;
exports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;
function TSTypeAnnotation(node) ***REMOVED***
  this.tokenChar(58);
  this.space();
  if (node.optional) this.tokenChar(63);
  this.print(node.typeAnnotation, node);
}
function TSTypeParameterInstantiation(node, parent) ***REMOVED***
  this.tokenChar(60);
  this.printList(node.params, node, ***REMOVED***});
  if (parent.type === "ArrowFunctionExpression" && node.params.length === 1) ***REMOVED***
    this.tokenChar(44);
***REMOVED***
  this.tokenChar(62);
}
function TSTypeParameter(node) ***REMOVED***
  if (node.in) ***REMOVED***
    this.word("in");
    this.space();
***REMOVED***
  if (node.out) ***REMOVED***
    this.word("out");
    this.space();
***REMOVED***
  this.word(node.name);
  if (node.constraint) ***REMOVED***
    this.space();
    this.word("extends");
    this.space();
    this.print(node.constraint, node);
***REMOVED***
  if (node.default) ***REMOVED***
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(node.default, node);
***REMOVED***
}
function TSParameterProperty(node) ***REMOVED***
  if (node.accessibility) ***REMOVED***
    this.word(node.accessibility);
    this.space();
***REMOVED***
  if (node.readonly) ***REMOVED***
    this.word("readonly");
    this.space();
***REMOVED***
  this._param(node.parameter);
}
function TSDeclareFunction(node) ***REMOVED***
  if (node.declare) ***REMOVED***
    this.word("declare");
    this.space();
***REMOVED***
  this._functionHead(node);
  this.tokenChar(59);
}
function TSDeclareMethod(node) ***REMOVED***
  this._classMethodHead(node);
  this.tokenChar(59);
}
function TSQualifiedName(node) ***REMOVED***
  this.print(node.left, node);
  this.tokenChar(46);
  this.print(node.right, node);
}
function TSCallSignatureDeclaration(node) ***REMOVED***
  this.tsPrintSignatureDeclarationBase(node);
  this.tokenChar(59);
}
function TSConstructSignatureDeclaration(node) ***REMOVED***
  this.word("new");
  this.space();
  this.tsPrintSignatureDeclarationBase(node);
  this.tokenChar(59);
}
function TSPropertySignature(node) ***REMOVED***
  const ***REMOVED***
    readonly,
    initializer
***REMOVED*** = node;
  if (readonly) ***REMOVED***
    this.word("readonly");
    this.space();
***REMOVED***
  this.tsPrintPropertyOrMethodName(node);
  this.print(node.typeAnnotation, node);
  if (initializer) ***REMOVED***
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(initializer, node);
***REMOVED***
  this.tokenChar(59);
}
function tsPrintPropertyOrMethodName(node) ***REMOVED***
  if (node.computed) ***REMOVED***
    this.tokenChar(91);
***REMOVED***
  this.print(node.key, node);
  if (node.computed) ***REMOVED***
    this.tokenChar(93);
***REMOVED***
  if (node.optional) ***REMOVED***
    this.tokenChar(63);
***REMOVED***
}
function TSMethodSignature(node) ***REMOVED***
  const ***REMOVED***
    kind
***REMOVED*** = node;
  if (kind === "set" || kind === "get") ***REMOVED***
    this.word(kind);
    this.space();
***REMOVED***
  this.tsPrintPropertyOrMethodName(node);
  this.tsPrintSignatureDeclarationBase(node);
  this.tokenChar(59);
}
function TSIndexSignature(node) ***REMOVED***
  const ***REMOVED***
    readonly,
    static: isStatic
***REMOVED*** = node;
  if (isStatic) ***REMOVED***
    this.word("static");
    this.space();
***REMOVED***
  if (readonly) ***REMOVED***
    this.word("readonly");
    this.space();
***REMOVED***
  this.tokenChar(91);
  this._parameters(node.parameters, node);
  this.tokenChar(93);
  this.print(node.typeAnnotation, node);
  this.tokenChar(59);
}
function TSAnyKeyword() ***REMOVED***
  this.word("any");
}
function TSBigIntKeyword() ***REMOVED***
  this.word("bigint");
}
function TSUnknownKeyword() ***REMOVED***
  this.word("unknown");
}
function TSNumberKeyword() ***REMOVED***
  this.word("number");
}
function TSObjectKeyword() ***REMOVED***
  this.word("object");
}
function TSBooleanKeyword() ***REMOVED***
  this.word("boolean");
}
function TSStringKeyword() ***REMOVED***
  this.word("string");
}
function TSSymbolKeyword() ***REMOVED***
  this.word("symbol");
}
function TSVoidKeyword() ***REMOVED***
  this.word("void");
}
function TSUndefinedKeyword() ***REMOVED***
  this.word("undefined");
}
function TSNullKeyword() ***REMOVED***
  this.word("null");
}
function TSNeverKeyword() ***REMOVED***
  this.word("never");
}
function TSIntrinsicKeyword() ***REMOVED***
  this.word("intrinsic");
}
function TSThisType() ***REMOVED***
  this.word("this");
}
function TSFunctionType(node) ***REMOVED***
  this.tsPrintFunctionOrConstructorType(node);
}
function TSConstructorType(node) ***REMOVED***
  if (node.abstract) ***REMOVED***
    this.word("abstract");
    this.space();
***REMOVED***
  this.word("new");
  this.space();
  this.tsPrintFunctionOrConstructorType(node);
}
function tsPrintFunctionOrConstructorType(node) ***REMOVED***
  const ***REMOVED***
    typeParameters
***REMOVED*** = node;
  const parameters =
  node.parameters;
  this.print(typeParameters, node);
  this.tokenChar(40);
  this._parameters(parameters, node);
  this.tokenChar(41);
  this.space();
  this.token("=>");
  this.space();
  const returnType =
  node.typeAnnotation;
  this.print(returnType.typeAnnotation, node);
}
function TSTypeReference(node) ***REMOVED***
  this.print(node.typeName, node, true);
  this.print(node.typeParameters, node, true);
}
function TSTypePredicate(node) ***REMOVED***
  if (node.asserts) ***REMOVED***
    this.word("asserts");
    this.space();
***REMOVED***
  this.print(node.parameterName);
  if (node.typeAnnotation) ***REMOVED***
    this.space();
    this.word("is");
    this.space();
    this.print(node.typeAnnotation.typeAnnotation);
***REMOVED***
}
function TSTypeQuery(node) ***REMOVED***
  this.word("typeof");
  this.space();
  this.print(node.exprName);
  if (node.typeParameters) ***REMOVED***
    this.print(node.typeParameters, node);
***REMOVED***
}
function TSTypeLiteral(node) ***REMOVED***
  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);
}
function tsPrintTypeLiteralOrInterfaceBody(members, node) ***REMOVED***
  tsPrintBraced(this, members, node);
}
function tsPrintBraced(printer, members, node) ***REMOVED***
  printer.token("***REMOVED***");
  if (members.length) ***REMOVED***
    printer.indent();
    printer.newline();
    for (const member of members) ***REMOVED***
      printer.print(member, node);
      printer.newline();
  ***REMOVED***
    printer.dedent();
***REMOVED***
  printer.sourceWithOffset("end", node.loc, 0, -1);
  printer.rightBrace();
}
function TSArrayType(node) ***REMOVED***
  this.print(node.elementType, node, true);
  this.token("[]");
}
function TSTupleType(node) ***REMOVED***
  this.tokenChar(91);
  this.printList(node.elementTypes, node);
  this.tokenChar(93);
}
function TSOptionalType(node) ***REMOVED***
  this.print(node.typeAnnotation, node);
  this.tokenChar(63);
}
function TSRestType(node) ***REMOVED***
  this.token("...");
  this.print(node.typeAnnotation, node);
}
function TSNamedTupleMember(node) ***REMOVED***
  this.print(node.label, node);
  if (node.optional) this.tokenChar(63);
  this.tokenChar(58);
  this.space();
  this.print(node.elementType, node);
}
function TSUnionType(node) ***REMOVED***
  tsPrintUnionOrIntersectionType(this, node, "|");
}
function TSIntersectionType(node) ***REMOVED***
  tsPrintUnionOrIntersectionType(this, node, "&");
}
function tsPrintUnionOrIntersectionType(printer, node, sep) ***REMOVED***
  printer.printJoin(node.types, node, ***REMOVED***
    separator() ***REMOVED***
      this.space();
      this.token(sep);
      this.space();
  ***REMOVED***
***REMOVED***);
}
function TSConditionalType(node) ***REMOVED***
  this.print(node.checkType);
  this.space();
  this.word("extends");
  this.space();
  this.print(node.extendsType);
  this.space();
  this.tokenChar(63);
  this.space();
  this.print(node.trueType);
  this.space();
  this.tokenChar(58);
  this.space();
  this.print(node.falseType);
}
function TSInferType(node) ***REMOVED***
  this.token("infer");
  this.space();
  this.print(node.typeParameter);
}
function TSParenthesizedType(node) ***REMOVED***
  this.tokenChar(40);
  this.print(node.typeAnnotation, node);
  this.tokenChar(41);
}
function TSTypeOperator(node) ***REMOVED***
  this.word(node.operator);
  this.space();
  this.print(node.typeAnnotation, node);
}
function TSIndexedAccessType(node) ***REMOVED***
  this.print(node.objectType, node, true);
  this.tokenChar(91);
  this.print(node.indexType, node);
  this.tokenChar(93);
}
function TSMappedType(node) ***REMOVED***
  const ***REMOVED***
    nameType,
    optional,
    readonly,
    typeParameter
***REMOVED*** = node;
  this.tokenChar(123);
  this.space();
  if (readonly) ***REMOVED***
    tokenIfPlusMinus(this, readonly);
    this.word("readonly");
    this.space();
***REMOVED***
  this.tokenChar(91);
  this.word(typeParameter.name);
  this.space();
  this.word("in");
  this.space();
  this.print(typeParameter.constraint, typeParameter);
  if (nameType) ***REMOVED***
    this.space();
    this.word("as");
    this.space();
    this.print(nameType, node);
***REMOVED***
  this.tokenChar(93);
  if (optional) ***REMOVED***
    tokenIfPlusMinus(this, optional);
    this.tokenChar(63);
***REMOVED***
  this.tokenChar(58);
  this.space();
  this.print(node.typeAnnotation, node);
  this.space();
  this.tokenChar(125);
}
function tokenIfPlusMinus(self, tok) ***REMOVED***
  if (tok !== true) ***REMOVED***
    self.token(tok);
***REMOVED***
}
function TSLiteralType(node) ***REMOVED***
  this.print(node.literal, node);
}
function TSExpressionWithTypeArguments(node) ***REMOVED***
  this.print(node.expression, node);
  this.print(node.typeParameters, node);
}
function TSInterfaceDeclaration(node) ***REMOVED***
  const ***REMOVED***
    declare,
    id,
    typeParameters,
    extends: extendz,
    body
***REMOVED*** = node;
  if (declare) ***REMOVED***
    this.word("declare");
    this.space();
***REMOVED***
  this.word("interface");
  this.space();
  this.print(id, node);
  this.print(typeParameters, node);
  if (extendz != null && extendz.length) ***REMOVED***
    this.space();
    this.word("extends");
    this.space();
    this.printList(extendz, node);
***REMOVED***
  this.space();
  this.print(body, node);
}
function TSInterfaceBody(node) ***REMOVED***
  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);
}
function TSTypeAliasDeclaration(node) ***REMOVED***
  const ***REMOVED***
    declare,
    id,
    typeParameters,
    typeAnnotation
***REMOVED*** = node;
  if (declare) ***REMOVED***
    this.word("declare");
    this.space();
***REMOVED***
  this.word("type");
  this.space();
  this.print(id, node);
  this.print(typeParameters, node);
  this.space();
  this.tokenChar(61);
  this.space();
  this.print(typeAnnotation, node);
  this.tokenChar(59);
}
function TSTypeExpression(node) ***REMOVED***
  var _expression$trailingC;
  const ***REMOVED***
    type,
    expression,
    typeAnnotation
***REMOVED*** = node;
  const forceParens = !!((_expression$trailingC = expression.trailingComments) != null && _expression$trailingC.length);
  this.print(expression, node, true, undefined, forceParens);
  this.space();
  this.word(type === "TSAsExpression" ? "as" : "satisfies");
  this.space();
  this.print(typeAnnotation, node);
}
function TSTypeAssertion(node) ***REMOVED***
  const ***REMOVED***
    typeAnnotation,
    expression
***REMOVED*** = node;
  this.tokenChar(60);
  this.print(typeAnnotation, node);
  this.tokenChar(62);
  this.space();
  this.print(expression, node);
}
function TSInstantiationExpression(node) ***REMOVED***
  this.print(node.expression, node);
  this.print(node.typeParameters, node);
}
function TSEnumDeclaration(node) ***REMOVED***
  const ***REMOVED***
    declare,
    const: isConst,
    id,
    members
***REMOVED*** = node;
  if (declare) ***REMOVED***
    this.word("declare");
    this.space();
***REMOVED***
  if (isConst) ***REMOVED***
    this.word("const");
    this.space();
***REMOVED***
  this.word("enum");
  this.space();
  this.print(id, node);
  this.space();
  tsPrintBraced(this, members, node);
}
function TSEnumMember(node) ***REMOVED***
  const ***REMOVED***
    id,
    initializer
***REMOVED*** = node;
  this.print(id, node);
  if (initializer) ***REMOVED***
    this.space();
    this.tokenChar(61);
    this.space();
    this.print(initializer, node);
***REMOVED***
  this.tokenChar(44);
}
function TSModuleDeclaration(node) ***REMOVED***
  const ***REMOVED***
    declare,
    id
***REMOVED*** = node;
  if (declare) ***REMOVED***
    this.word("declare");
    this.space();
***REMOVED***
  if (!node.global) ***REMOVED***
    this.word(id.type === "Identifier" ? "namespace" : "module");
    this.space();
***REMOVED***
  this.print(id, node);
  if (!node.body) ***REMOVED***
    this.tokenChar(59);
    return;
***REMOVED***
  let body = node.body;
  while (body.type === "TSModuleDeclaration") ***REMOVED***
    this.tokenChar(46);
    this.print(body.id, body);
    body = body.body;
***REMOVED***
  this.space();
  this.print(body, node);
}
function TSModuleBlock(node) ***REMOVED***
  tsPrintBraced(this, node.body, node);
}
function TSImportType(node) ***REMOVED***
  const ***REMOVED***
    argument,
    qualifier,
    typeParameters
***REMOVED*** = node;
  this.word("import");
  this.tokenChar(40);
  this.print(argument, node);
  this.tokenChar(41);
  if (qualifier) ***REMOVED***
    this.tokenChar(46);
    this.print(qualifier, node);
***REMOVED***
  if (typeParameters) ***REMOVED***
    this.print(typeParameters, node);
***REMOVED***
}
function TSImportEqualsDeclaration(node) ***REMOVED***
  const ***REMOVED***
    isExport,
    id,
    moduleReference
***REMOVED*** = node;
  if (isExport) ***REMOVED***
    this.word("export");
    this.space();
***REMOVED***
  this.word("import");
  this.space();
  this.print(id, node);
  this.space();
  this.tokenChar(61);
  this.space();
  this.print(moduleReference, node);
  this.tokenChar(59);
}
function TSExternalModuleReference(node) ***REMOVED***
  this.token("require(");
  this.print(node.expression, node);
  this.tokenChar(41);
}
function TSNonNullExpression(node) ***REMOVED***
  this.print(node.expression, node);
  this.tokenChar(33);
}
function TSExportAssignment(node) ***REMOVED***
  this.word("export");
  this.space();
  this.tokenChar(61);
  this.space();
  this.print(node.expression, node);
  this.tokenChar(59);
}
function TSNamespaceExportDeclaration(node) ***REMOVED***
  this.word("export");
  this.space();
  this.word("as");
  this.space();
  this.word("namespace");
  this.space();
  this.print(node.id, node);
}
function tsPrintSignatureDeclarationBase(node) ***REMOVED***
  const ***REMOVED***
    typeParameters
***REMOVED*** = node;
  const parameters = node.parameters;
  this.print(typeParameters, node);
  this.tokenChar(40);
  this._parameters(parameters, node);
  this.tokenChar(41);
  const returnType = node.typeAnnotation;
  this.print(returnType, node);
}
function tsPrintClassMemberModifiers(node) ***REMOVED***
  const isField = node.type === "ClassAccessorProperty" || node.type === "ClassProperty";
  if (isField && node.declare) ***REMOVED***
    this.word("declare");
    this.space();
***REMOVED***
  if (node.accessibility) ***REMOVED***
    this.word(node.accessibility);
    this.space();
***REMOVED***
  if (node.static) ***REMOVED***
    this.word("static");
    this.space();
***REMOVED***
  if (node.override) ***REMOVED***
    this.word("override");
    this.space();
***REMOVED***
  if (node.abstract) ***REMOVED***
    this.word("abstract");
    this.space();
***REMOVED***
  if (isField && node.readonly) ***REMOVED***
    this.word("readonly");
    this.space();
***REMOVED***
}

//# sourceMappingURL=typescript.js.map
