"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.LogicalExpression = exports.BinaryExpression = exports.AssignmentExpression = AssignmentExpression;
exports.AssignmentPattern = AssignmentPattern;
exports.AwaitExpression = AwaitExpression;
exports.BindExpression = BindExpression;
exports.CallExpression = CallExpression;
exports.ConditionalExpression = ConditionalExpression;
exports.Decorator = Decorator;
exports.DoExpression = DoExpression;
exports.EmptyStatement = EmptyStatement;
exports.ExpressionStatement = ExpressionStatement;
exports.Import = Import;
exports.MemberExpression = MemberExpression;
exports.MetaProperty = MetaProperty;
exports.ModuleExpression = ModuleExpression;
exports.NewExpression = NewExpression;
exports.OptionalCallExpression = OptionalCallExpression;
exports.OptionalMemberExpression = OptionalMemberExpression;
exports.ParenthesizedExpression = ParenthesizedExpression;
exports.PrivateName = PrivateName;
exports.SequenceExpression = SequenceExpression;
exports.Super = Super;
exports.ThisExpression = ThisExpression;
exports.UnaryExpression = UnaryExpression;
exports.UpdateExpression = UpdateExpression;
exports.V8IntrinsicIdentifier = V8IntrinsicIdentifier;
exports.YieldExpression = YieldExpression;
var _t = require("@babel/types");
var n = require("../node");
const ***REMOVED***
  isCallExpression,
  isLiteral,
  isMemberExpression,
  isNewExpression
} = _t;
function UnaryExpression(node) ***REMOVED***
  if (node.operator === "void" || node.operator === "delete" || node.operator === "typeof" ||
  node.operator === "throw") ***REMOVED***
    this.word(node.operator);
    this.space();
***REMOVED*** else ***REMOVED***
    this.token(node.operator);
***REMOVED***
  this.print(node.argument, node);
}
function DoExpression(node) ***REMOVED***
  if (node.async) ***REMOVED***
    this.word("async", true);
    this.space();
***REMOVED***
  this.word("do");
  this.space();
  this.print(node.body, node);
}
function ParenthesizedExpression(node) ***REMOVED***
  this.tokenChar(40);
  this.print(node.expression, node);
  this.tokenChar(41);
}
function UpdateExpression(node) ***REMOVED***
  if (node.prefix) ***REMOVED***
    this.token(node.operator);
    this.print(node.argument, node);
***REMOVED*** else ***REMOVED***
    this.printTerminatorless(node.argument, node, true);
    this.token(node.operator);
***REMOVED***
}
function ConditionalExpression(node) ***REMOVED***
  this.print(node.test, node);
  this.space();
  this.tokenChar(63);
  this.space();
  this.print(node.consequent, node);
  this.space();
  this.tokenChar(58);
  this.space();
  this.print(node.alternate, node);
}
function NewExpression(node, parent) ***REMOVED***
  this.word("new");
  this.space();
  this.print(node.callee, node);
  if (this.format.minified && node.arguments.length === 0 && !node.optional && !isCallExpression(parent, ***REMOVED***
    callee: node
***REMOVED***) && !isMemberExpression(parent) && !isNewExpression(parent)) ***REMOVED***
    return;
***REMOVED***
  this.print(node.typeArguments, node);
  this.print(node.typeParameters, node);

  if (node.optional) ***REMOVED***
    this.token("?.");
***REMOVED***
  this.tokenChar(40);
  this.printList(node.arguments, node);
  this.tokenChar(41);
}
function SequenceExpression(node) ***REMOVED***
  this.printList(node.expressions, node);
}
function ThisExpression() ***REMOVED***
  this.word("this");
}
function Super() ***REMOVED***
  this.word("super");
}
function isDecoratorMemberExpression(node) ***REMOVED***
  switch (node.type) ***REMOVED***
    case "Identifier":
      return true;
    case "MemberExpression":
      return !node.computed && node.property.type === "Identifier" && isDecoratorMemberExpression(node.object);
    default:
      return false;
***REMOVED***
}
function shouldParenthesizeDecoratorExpression(node) ***REMOVED***
  if (node.type === "ParenthesizedExpression") ***REMOVED***
    return false;
***REMOVED***
  return !isDecoratorMemberExpression(node.type === "CallExpression" ? node.callee : node);
}
function Decorator(node) ***REMOVED***
  this.tokenChar(64);
  const ***REMOVED***
    expression
***REMOVED*** = node;
  if (shouldParenthesizeDecoratorExpression(expression)) ***REMOVED***
    this.tokenChar(40);
    this.print(expression, node);
    this.tokenChar(41);
***REMOVED*** else ***REMOVED***
    this.print(expression, node);
***REMOVED***
  this.newline();
}
function OptionalMemberExpression(node) ***REMOVED***
  this.print(node.object, node);
  if (!node.computed && isMemberExpression(node.property)) ***REMOVED***
    throw new TypeError("Got a MemberExpression for MemberExpression property");
***REMOVED***
  let computed = node.computed;
  if (isLiteral(node.property) && typeof node.property.value === "number") ***REMOVED***
    computed = true;
***REMOVED***
  if (node.optional) ***REMOVED***
    this.token("?.");
***REMOVED***
  if (computed) ***REMOVED***
    this.tokenChar(91);
    this.print(node.property, node);
    this.tokenChar(93);
***REMOVED*** else ***REMOVED***
    if (!node.optional) ***REMOVED***
      this.tokenChar(46);
  ***REMOVED***
    this.print(node.property, node);
***REMOVED***
}
function OptionalCallExpression(node) ***REMOVED***
  this.print(node.callee, node);
  this.print(node.typeParameters, node);

  if (node.optional) ***REMOVED***
    this.token("?.");
***REMOVED***
  this.print(node.typeArguments, node);

  this.tokenChar(40);
  this.printList(node.arguments, node);
  this.tokenChar(41);
}
function CallExpression(node) ***REMOVED***
  this.print(node.callee, node);
  this.print(node.typeArguments, node);
  this.print(node.typeParameters, node);
  this.tokenChar(40);
  this.printList(node.arguments, node);
  this.tokenChar(41);
}
function Import() ***REMOVED***
  this.word("import");
}
function AwaitExpression(node) ***REMOVED***
  this.word("await");
  if (node.argument) ***REMOVED***
    this.space();
    this.printTerminatorless(node.argument, node, false);
***REMOVED***
}
function YieldExpression(node) ***REMOVED***
  this.word("yield", true);
  if (node.delegate) ***REMOVED***
    this.tokenChar(42);
    if (node.argument) ***REMOVED***
      this.space();
      this.print(node.argument, node);
  ***REMOVED***
***REMOVED*** else ***REMOVED***
    if (node.argument) ***REMOVED***
      this.space();
      this.printTerminatorless(node.argument, node, false);
  ***REMOVED***
***REMOVED***
}
function EmptyStatement() ***REMOVED***
  this.semicolon(true);
}

function ExpressionStatement(node) ***REMOVED***
  this.print(node.expression, node);
  this.semicolon();
}
function AssignmentPattern(node) ***REMOVED***
  this.print(node.left, node);
  if (node.left.optional) this.tokenChar(63);
  this.print(node.left.typeAnnotation, node);
  this.space();
  this.tokenChar(61);
  this.space();
  this.print(node.right, node);
}
function AssignmentExpression(node, parent) ***REMOVED***
  const parens = this.inForStatementInitCounter && node.operator === "in" && !n.needsParens(node, parent);
  if (parens) ***REMOVED***
    this.tokenChar(40);
***REMOVED***
  this.print(node.left, node);
  this.space();
  if (node.operator === "in" || node.operator === "instanceof") ***REMOVED***
    this.word(node.operator);
***REMOVED*** else ***REMOVED***
    this.token(node.operator);
***REMOVED***
  this.space();
  this.print(node.right, node);
  if (parens) ***REMOVED***
    this.tokenChar(41);
***REMOVED***
}
function BindExpression(node) ***REMOVED***
  this.print(node.object, node);
  this.token("::");
  this.print(node.callee, node);
}
function MemberExpression(node) ***REMOVED***
  this.print(node.object, node);
  if (!node.computed && isMemberExpression(node.property)) ***REMOVED***
    throw new TypeError("Got a MemberExpression for MemberExpression property");
***REMOVED***
  let computed = node.computed;
  if (isLiteral(node.property) && typeof node.property.value === "number") ***REMOVED***
    computed = true;
***REMOVED***
  if (computed) ***REMOVED***
    this.tokenChar(91);
    this.print(node.property, node);
    this.tokenChar(93);
***REMOVED*** else ***REMOVED***
    this.tokenChar(46);
    this.print(node.property, node);
***REMOVED***
}
function MetaProperty(node) ***REMOVED***
  this.print(node.meta, node);
  this.tokenChar(46);
  this.print(node.property, node);
}
function PrivateName(node) ***REMOVED***
  this.tokenChar(35);
  this.print(node.id, node);
}
function V8IntrinsicIdentifier(node) ***REMOVED***
  this.tokenChar(37);
  this.word(node.name);
}
function ModuleExpression(node) ***REMOVED***
  this.word("module", true);
  this.space();
  this.tokenChar(123);
  this.indent();
  const ***REMOVED***
    body
***REMOVED*** = node;
  if (body.body.length || body.directives.length) ***REMOVED***
    this.newline();
***REMOVED***
  this.print(body, node);
  this.dedent();
  this.sourceWithOffset("end", node.loc, 0, -1);
  this.rightBrace();
}

//# sourceMappingURL=expressions.js.map
