"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.CodeGenerator = void 0;
exports.default = generate;
var _sourceMap = require("./source-map");
var _printer = require("./printer");

class Generator extends _printer.default ***REMOVED***
  constructor(ast, opts = ***REMOVED***}, code) ***REMOVED***
    const format = normalizeOptions(code, opts);
    const map = opts.sourceMaps ? new _sourceMap.default(opts, code) : null;
    super(format, map);
    this.ast = void 0;
    this.ast = ast;
***REMOVED***

  generate() ***REMOVED***
    return super.generate(this.ast);
***REMOVED***
}

function normalizeOptions(code, opts) ***REMOVED***
  const format = ***REMOVED***
    auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
    auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
    shouldPrintComment: opts.shouldPrintComment,
    retainLines: opts.retainLines,
    retainFunctionParens: opts.retainFunctionParens,
    comments: opts.comments == null || opts.comments,
    compact: opts.compact,
    minified: opts.minified,
    concise: opts.concise,
    indent: ***REMOVED***
      adjustMultilineComment: true,
      style: "  "
  ***REMOVED***,
    jsescOption: Object.assign(***REMOVED***
      quotes: "double",
      wrap: true,
      minimal: false
  ***REMOVED***, opts.jsescOption),
    recordAndTupleSyntaxType: opts.recordAndTupleSyntaxType,
    topicToken: opts.topicToken
***REMOVED***;
  ***REMOVED***
    format.decoratorsBeforeExport = !!opts.decoratorsBeforeExport;
    format.jsonCompatibleStrings = opts.jsonCompatibleStrings;
***REMOVED***
  if (format.minified) ***REMOVED***
    format.compact = true;
    format.shouldPrintComment = format.shouldPrintComment || (() => format.comments);
***REMOVED*** else ***REMOVED***
    format.shouldPrintComment = format.shouldPrintComment || (value => format.comments || value.includes("@license") || value.includes("@preserve"));
***REMOVED***
  if (format.compact === "auto") ***REMOVED***
    format.compact = code.length > 500000;

    if (format.compact) ***REMOVED***
      console.error("[BABEL] Note: The code generator has deoptimised the styling of " + `$***REMOVED***opts.filename} as it exceeds the max of $***REMOVED***"500KB"}.`);
  ***REMOVED***
***REMOVED***
  if (format.compact) ***REMOVED***
    format.indent.adjustMultilineComment = false;
***REMOVED***
  const ***REMOVED***
    auxiliaryCommentBefore,
    auxiliaryCommentAfter,
    shouldPrintComment
***REMOVED*** = format;
  if (auxiliaryCommentBefore && !shouldPrintComment(auxiliaryCommentBefore)) ***REMOVED***
    format.auxiliaryCommentBefore = undefined;
***REMOVED***
  if (auxiliaryCommentAfter && !shouldPrintComment(auxiliaryCommentAfter)) ***REMOVED***
    format.auxiliaryCommentAfter = undefined;
***REMOVED***
  return format;
}

class CodeGenerator ***REMOVED***
  constructor(ast, opts, code) ***REMOVED***
    this._generator = void 0;
    this._generator = new Generator(ast, opts, code);
***REMOVED***
  generate() ***REMOVED***
    return this._generator.generate();
***REMOVED***
}

exports.CodeGenerator = CodeGenerator;
function generate(ast, opts, code) ***REMOVED***
  const gen = new Generator(ast, opts, code);
  return gen.generate();
}

//# sourceMappingURL=index.js.map
