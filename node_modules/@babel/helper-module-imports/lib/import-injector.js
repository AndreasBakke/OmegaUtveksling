"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = void 0;

var _assert = require("assert");

var _t = require("@babel/types");

var _importBuilder = require("./import-builder");

var _isModule = require("./is-module");

const ***REMOVED***
  numericLiteral,
  sequenceExpression
} = _t;

class ImportInjector ***REMOVED***
  constructor(path, importedSource, opts) ***REMOVED***
    this._defaultOpts = ***REMOVED***
      importedSource: null,
      importedType: "commonjs",
      importedInterop: "babel",
      importingInterop: "babel",
      ensureLiveReference: false,
      ensureNoContext: false,
      importPosition: "before"
  ***REMOVED***;
    const programPath = path.find(p => p.isProgram());
    this._programPath = programPath;
    this._programScope = programPath.scope;
    this._hub = programPath.hub;
    this._defaultOpts = this._applyDefaults(importedSource, opts, true);
***REMOVED***

  addDefault(importedSourceIn, opts) ***REMOVED***
    return this.addNamed("default", importedSourceIn, opts);
***REMOVED***

  addNamed(importName, importedSourceIn, opts) ***REMOVED***
    _assert(typeof importName === "string");

    return this._generateImport(this._applyDefaults(importedSourceIn, opts), importName);
***REMOVED***

  addNamespace(importedSourceIn, opts) ***REMOVED***
    return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
***REMOVED***

  addSideEffect(importedSourceIn, opts) ***REMOVED***
    return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);
***REMOVED***

  _applyDefaults(importedSource, opts, isInit = false) ***REMOVED***
    let newOpts;

    if (typeof importedSource === "string") ***REMOVED***
      newOpts = Object.assign(***REMOVED***}, this._defaultOpts, ***REMOVED***
        importedSource
    ***REMOVED***, opts);
  ***REMOVED*** else ***REMOVED***
      _assert(!opts, "Unexpected secondary arguments.");

      newOpts = Object.assign(***REMOVED***}, this._defaultOpts, importedSource);
  ***REMOVED***

    if (!isInit && opts) ***REMOVED***
      if (opts.nameHint !== undefined) newOpts.nameHint = opts.nameHint;
      if (opts.blockHoist !== undefined) newOpts.blockHoist = opts.blockHoist;
  ***REMOVED***

    return newOpts;
***REMOVED***

  _generateImport(opts, importName) ***REMOVED***
    const isDefault = importName === "default";
    const isNamed = !!importName && !isDefault;
    const isNamespace = importName === null;
    const ***REMOVED***
      importedSource,
      importedType,
      importedInterop,
      importingInterop,
      ensureLiveReference,
      ensureNoContext,
      nameHint,
      importPosition,
      blockHoist
  ***REMOVED*** = opts;
    let name = nameHint || importName;
    const isMod = (0, _isModule.default)(this._programPath);
    const isModuleForNode = isMod && importingInterop === "node";
    const isModuleForBabel = isMod && importingInterop === "babel";

    if (importPosition === "after" && !isMod) ***REMOVED***
      throw new Error(`"importPosition": "after" is only supported in modules`);
  ***REMOVED***

    const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);

    if (importedType === "es6") ***REMOVED***
      if (!isModuleForNode && !isModuleForBabel) ***REMOVED***
        throw new Error("Cannot import an ES6 module from CommonJS");
    ***REMOVED***

      builder.import();

      if (isNamespace) ***REMOVED***
        builder.namespace(nameHint || importedSource);
    ***REMOVED*** else if (isDefault || isNamed) ***REMOVED***
        builder.named(name, importName);
    ***REMOVED***
  ***REMOVED*** else if (importedType !== "commonjs") ***REMOVED***
      throw new Error(`Unexpected interopType "$***REMOVED***importedType}"`);
  ***REMOVED*** else if (importedInterop === "babel") ***REMOVED***
      if (isModuleForNode) ***REMOVED***
        name = name !== "default" ? name : importedSource;
        const es6Default = `$***REMOVED***importedSource}$es6Default`;
        builder.import();

        if (isNamespace) ***REMOVED***
          builder.default(es6Default).var(name || importedSource).wildcardInterop();
      ***REMOVED*** else if (isDefault) ***REMOVED***
          if (ensureLiveReference) ***REMOVED***
            builder.default(es6Default).var(name || importedSource).defaultInterop().read("default");
        ***REMOVED*** else ***REMOVED***
            builder.default(es6Default).var(name).defaultInterop().prop(importName);
        ***REMOVED***
      ***REMOVED*** else if (isNamed) ***REMOVED***
          builder.default(es6Default).read(importName);
      ***REMOVED***
    ***REMOVED*** else if (isModuleForBabel) ***REMOVED***
        builder.import();

        if (isNamespace) ***REMOVED***
          builder.namespace(name || importedSource);
      ***REMOVED*** else if (isDefault || isNamed) ***REMOVED***
          builder.named(name, importName);
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        builder.require();

        if (isNamespace) ***REMOVED***
          builder.var(name || importedSource).wildcardInterop();
      ***REMOVED*** else if ((isDefault || isNamed) && ensureLiveReference) ***REMOVED***
          if (isDefault) ***REMOVED***
            name = name !== "default" ? name : importedSource;
            builder.var(name).read(importName);
            builder.defaultInterop();
        ***REMOVED*** else ***REMOVED***
            builder.var(importedSource).read(importName);
        ***REMOVED***
      ***REMOVED*** else if (isDefault) ***REMOVED***
          builder.var(name).defaultInterop().prop(importName);
      ***REMOVED*** else if (isNamed) ***REMOVED***
          builder.var(name).prop(importName);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED*** else if (importedInterop === "compiled") ***REMOVED***
      if (isModuleForNode) ***REMOVED***
        builder.import();

        if (isNamespace) ***REMOVED***
          builder.default(name || importedSource);
      ***REMOVED*** else if (isDefault || isNamed) ***REMOVED***
          builder.default(importedSource).read(name);
      ***REMOVED***
    ***REMOVED*** else if (isModuleForBabel) ***REMOVED***
        builder.import();

        if (isNamespace) ***REMOVED***
          builder.namespace(name || importedSource);
      ***REMOVED*** else if (isDefault || isNamed) ***REMOVED***
          builder.named(name, importName);
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        builder.require();

        if (isNamespace) ***REMOVED***
          builder.var(name || importedSource);
      ***REMOVED*** else if (isDefault || isNamed) ***REMOVED***
          if (ensureLiveReference) ***REMOVED***
            builder.var(importedSource).read(name);
        ***REMOVED*** else ***REMOVED***
            builder.prop(importName).var(name);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED*** else if (importedInterop === "uncompiled") ***REMOVED***
      if (isDefault && ensureLiveReference) ***REMOVED***
        throw new Error("No live reference for commonjs default");
    ***REMOVED***

      if (isModuleForNode) ***REMOVED***
        builder.import();

        if (isNamespace) ***REMOVED***
          builder.default(name || importedSource);
      ***REMOVED*** else if (isDefault) ***REMOVED***
          builder.default(name);
      ***REMOVED*** else if (isNamed) ***REMOVED***
          builder.default(importedSource).read(name);
      ***REMOVED***
    ***REMOVED*** else if (isModuleForBabel) ***REMOVED***
        builder.import();

        if (isNamespace) ***REMOVED***
          builder.default(name || importedSource);
      ***REMOVED*** else if (isDefault) ***REMOVED***
          builder.default(name);
      ***REMOVED*** else if (isNamed) ***REMOVED***
          builder.named(name, importName);
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        builder.require();

        if (isNamespace) ***REMOVED***
          builder.var(name || importedSource);
      ***REMOVED*** else if (isDefault) ***REMOVED***
          builder.var(name);
      ***REMOVED*** else if (isNamed) ***REMOVED***
          if (ensureLiveReference) ***REMOVED***
            builder.var(importedSource).read(name);
        ***REMOVED*** else ***REMOVED***
            builder.var(name).prop(importName);
        ***REMOVED***
      ***REMOVED***
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
      throw new Error(`Unknown importedInterop "$***REMOVED***importedInterop}".`);
  ***REMOVED***

    const ***REMOVED***
      statements,
      resultName
  ***REMOVED*** = builder.done();

    this._insertStatements(statements, importPosition, blockHoist);

    if ((isDefault || isNamed) && ensureNoContext && resultName.type !== "Identifier") ***REMOVED***
      return sequenceExpression([numericLiteral(0), resultName]);
  ***REMOVED***

    return resultName;
***REMOVED***

  _insertStatements(statements, importPosition = "before", blockHoist = 3) ***REMOVED***
    const body = this._programPath.get("body");

    if (importPosition === "after") ***REMOVED***
      for (let i = body.length - 1; i >= 0; i--) ***REMOVED***
        if (body[i].isImportDeclaration()) ***REMOVED***
          body[i].insertAfter(statements);
          return;
      ***REMOVED***
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
      statements.forEach(node => ***REMOVED***
        node._blockHoist = blockHoist;
    ***REMOVED***);
      const targetPath = body.find(p => ***REMOVED***
        const val = p.node._blockHoist;
        return Number.isFinite(val) && val < 4;
    ***REMOVED***);

      if (targetPath) ***REMOVED***
        targetPath.insertBefore(statements);
        return;
    ***REMOVED***
  ***REMOVED***

    this._programPath.unshiftContainer("body", statements);
***REMOVED***

}

exports.default = ImportInjector;