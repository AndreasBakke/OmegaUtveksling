"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = void 0;

var _assert = require("assert");

var _t = require("@babel/types");

const ***REMOVED***
  callExpression,
  cloneNode,
  expressionStatement,
  identifier,
  importDeclaration,
  importDefaultSpecifier,
  importNamespaceSpecifier,
  importSpecifier,
  memberExpression,
  stringLiteral,
  variableDeclaration,
  variableDeclarator
} = _t;

class ImportBuilder ***REMOVED***
  constructor(importedSource, scope, hub) ***REMOVED***
    this._statements = [];
    this._resultName = null;
    this._importedSource = void 0;
    this._scope = scope;
    this._hub = hub;
    this._importedSource = importedSource;
***REMOVED***

  done() ***REMOVED***
    return ***REMOVED***
      statements: this._statements,
      resultName: this._resultName
  ***REMOVED***;
***REMOVED***

  import() ***REMOVED***
    this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));

    return this;
***REMOVED***

  require() ***REMOVED***
    this._statements.push(expressionStatement(callExpression(identifier("require"), [stringLiteral(this._importedSource)])));

    return this;
***REMOVED***

  namespace(name = "namespace") ***REMOVED***
    const local = this._scope.generateUidIdentifier(name);

    const statement = this._statements[this._statements.length - 1];

    _assert(statement.type === "ImportDeclaration");

    _assert(statement.specifiers.length === 0);

    statement.specifiers = [importNamespaceSpecifier(local)];
    this._resultName = cloneNode(local);
    return this;
***REMOVED***

  default(name) ***REMOVED***
    const id = this._scope.generateUidIdentifier(name);

    const statement = this._statements[this._statements.length - 1];

    _assert(statement.type === "ImportDeclaration");

    _assert(statement.specifiers.length === 0);

    statement.specifiers = [importDefaultSpecifier(id)];
    this._resultName = cloneNode(id);
    return this;
***REMOVED***

  named(name, importName) ***REMOVED***
    if (importName === "default") return this.default(name);

    const id = this._scope.generateUidIdentifier(name);

    const statement = this._statements[this._statements.length - 1];

    _assert(statement.type === "ImportDeclaration");

    _assert(statement.specifiers.length === 0);

    statement.specifiers = [importSpecifier(id, identifier(importName))];
    this._resultName = cloneNode(id);
    return this;
***REMOVED***

  var(name) ***REMOVED***
    const id = this._scope.generateUidIdentifier(name);

    let statement = this._statements[this._statements.length - 1];

    if (statement.type !== "ExpressionStatement") ***REMOVED***
      _assert(this._resultName);

      statement = expressionStatement(this._resultName);

      this._statements.push(statement);
  ***REMOVED***

    this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]);
    this._resultName = cloneNode(id);
    return this;
***REMOVED***

  defaultInterop() ***REMOVED***
    return this._interop(this._hub.addHelper("interopRequireDefault"));
***REMOVED***

  wildcardInterop() ***REMOVED***
    return this._interop(this._hub.addHelper("interopRequireWildcard"));
***REMOVED***

  _interop(callee) ***REMOVED***
    const statement = this._statements[this._statements.length - 1];

    if (statement.type === "ExpressionStatement") ***REMOVED***
      statement.expression = callExpression(callee, [statement.expression]);
  ***REMOVED*** else if (statement.type === "VariableDeclaration") ***REMOVED***
      _assert(statement.declarations.length === 1);

      statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);
  ***REMOVED*** else ***REMOVED***
      _assert.fail("Unexpected type.");
  ***REMOVED***

    return this;
***REMOVED***

  prop(name) ***REMOVED***
    const statement = this._statements[this._statements.length - 1];

    if (statement.type === "ExpressionStatement") ***REMOVED***
      statement.expression = memberExpression(statement.expression, identifier(name));
  ***REMOVED*** else if (statement.type === "VariableDeclaration") ***REMOVED***
      _assert(statement.declarations.length === 1);

      statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name));
  ***REMOVED*** else ***REMOVED***
      _assert.fail("Unexpected type:" + statement.type);
  ***REMOVED***

    return this;
***REMOVED***

  read(name) ***REMOVED***
    this._resultName = memberExpression(this._resultName, identifier(name));
***REMOVED***

}

exports.default = ImportBuilder;