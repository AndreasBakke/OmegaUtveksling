"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = populatePlaceholders;
var _t = require("@babel/types");
const ***REMOVED***
  blockStatement,
  cloneNode,
  emptyStatement,
  expressionStatement,
  identifier,
  isStatement,
  isStringLiteral,
  stringLiteral,
  validate
} = _t;
function populatePlaceholders(metadata, replacements) ***REMOVED***
  const ast = cloneNode(metadata.ast);
  if (replacements) ***REMOVED***
    metadata.placeholders.forEach(placeholder => ***REMOVED***
      if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) ***REMOVED***
        const placeholderName = placeholder.name;
        throw new Error(`Error: No substitution given for "$***REMOVED***placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - ***REMOVED*** placeholderPattern: false, placeholderWhitelist: new Set(['$***REMOVED***placeholderName}'])}
            - ***REMOVED*** placeholderPattern: /^$***REMOVED***placeholderName}$/ }`);
    ***REMOVED***
  ***REMOVED***);
    Object.keys(replacements).forEach(key => ***REMOVED***
      if (!metadata.placeholderNames.has(key)) ***REMOVED***
        throw new Error(`Unknown substitution "$***REMOVED***key}" given`);
    ***REMOVED***
  ***REMOVED***);
***REMOVED***

  metadata.placeholders.slice().reverse().forEach(placeholder => ***REMOVED***
    try ***REMOVED***
      applyReplacement(placeholder, ast, replacements && replacements[placeholder.name] || null);
  ***REMOVED*** catch (e) ***REMOVED***
      e.message = `@babel/template placeholder "$***REMOVED***placeholder.name}": $***REMOVED***e.message}`;
      throw e;
  ***REMOVED***
***REMOVED***);
  return ast;
}
function applyReplacement(placeholder, ast, replacement) ***REMOVED***
  if (placeholder.isDuplicate) ***REMOVED***
    if (Array.isArray(replacement)) ***REMOVED***
      replacement = replacement.map(node => cloneNode(node));
  ***REMOVED*** else if (typeof replacement === "object") ***REMOVED***
      replacement = cloneNode(replacement);
  ***REMOVED***
***REMOVED***
  const ***REMOVED***
    parent,
    key,
    index
***REMOVED*** = placeholder.resolve(ast);
  if (placeholder.type === "string") ***REMOVED***
    if (typeof replacement === "string") ***REMOVED***
      replacement = stringLiteral(replacement);
  ***REMOVED***
    if (!replacement || !isStringLiteral(replacement)) ***REMOVED***
      throw new Error("Expected string substitution");
  ***REMOVED***
***REMOVED*** else if (placeholder.type === "statement") ***REMOVED***
    if (index === undefined) ***REMOVED***
      if (!replacement) ***REMOVED***
        replacement = emptyStatement();
    ***REMOVED*** else if (Array.isArray(replacement)) ***REMOVED***
        replacement = blockStatement(replacement);
    ***REMOVED*** else if (typeof replacement === "string") ***REMOVED***
        replacement = expressionStatement(identifier(replacement));
    ***REMOVED*** else if (!isStatement(replacement)) ***REMOVED***
        replacement = expressionStatement(replacement);
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
      if (replacement && !Array.isArray(replacement)) ***REMOVED***
        if (typeof replacement === "string") ***REMOVED***
          replacement = identifier(replacement);
      ***REMOVED***
        if (!isStatement(replacement)) ***REMOVED***
          replacement = expressionStatement(replacement);
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED*** else if (placeholder.type === "param") ***REMOVED***
    if (typeof replacement === "string") ***REMOVED***
      replacement = identifier(replacement);
  ***REMOVED***
    if (index === undefined) throw new Error("Assertion failure.");
***REMOVED*** else ***REMOVED***
    if (typeof replacement === "string") ***REMOVED***
      replacement = identifier(replacement);
  ***REMOVED***
    if (Array.isArray(replacement)) ***REMOVED***
      throw new Error("Cannot replace single expression with an array.");
  ***REMOVED***
***REMOVED***
  if (index === undefined) ***REMOVED***
    validate(parent, key, replacement);
    parent[key] = replacement;
***REMOVED*** else ***REMOVED***
    const items = parent[key].slice();
    if (placeholder.type === "statement" || placeholder.type === "param") ***REMOVED***
      if (replacement == null) ***REMOVED***
        items.splice(index, 1);
    ***REMOVED*** else if (Array.isArray(replacement)) ***REMOVED***
        items.splice(index, 1, ...replacement);
    ***REMOVED*** else ***REMOVED***
        items[index] = replacement;
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
      items[index] = replacement;
  ***REMOVED***
    validate(parent, key, items);
    parent[key] = items;
***REMOVED***
}

//# sourceMappingURL=populate.js.map
