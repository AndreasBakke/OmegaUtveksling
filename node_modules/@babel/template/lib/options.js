"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.merge = merge;
exports.normalizeReplacements = normalizeReplacements;
exports.validate = validate;
const _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
function _objectWithoutPropertiesLoose(source, excluded) ***REMOVED*** if (source == null) return ***REMOVED***}; var target = ***REMOVED***}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) ***REMOVED*** key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function merge(a, b) ***REMOVED***
  const ***REMOVED***
    placeholderWhitelist = a.placeholderWhitelist,
    placeholderPattern = a.placeholderPattern,
    preserveComments = a.preserveComments,
    syntacticPlaceholders = a.syntacticPlaceholders
***REMOVED*** = b;
  return ***REMOVED***
    parser: Object.assign(***REMOVED***}, a.parser, b.parser),
    placeholderWhitelist,
    placeholderPattern,
    preserveComments,
    syntacticPlaceholders
***REMOVED***;
}
function validate(opts) ***REMOVED***
  if (opts != null && typeof opts !== "object") ***REMOVED***
    throw new Error("Unknown template options.");
***REMOVED***
  const _ref = opts || ***REMOVED***},
    ***REMOVED***
      placeholderWhitelist,
      placeholderPattern,
      preserveComments,
      syntacticPlaceholders
  ***REMOVED*** = _ref,
    parser = _objectWithoutPropertiesLoose(_ref, _excluded);
  if (placeholderWhitelist != null && !(placeholderWhitelist instanceof Set)) ***REMOVED***
    throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
***REMOVED***
  if (placeholderPattern != null && !(placeholderPattern instanceof RegExp) && placeholderPattern !== false) ***REMOVED***
    throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
***REMOVED***
  if (preserveComments != null && typeof preserveComments !== "boolean") ***REMOVED***
    throw new Error("'.preserveComments' must be a boolean, null, or undefined");
***REMOVED***
  if (syntacticPlaceholders != null && typeof syntacticPlaceholders !== "boolean") ***REMOVED***
    throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
***REMOVED***
  if (syntacticPlaceholders === true && (placeholderWhitelist != null || placeholderPattern != null)) ***REMOVED***
    throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible" + " with '.syntacticPlaceholders: true'");
***REMOVED***
  return ***REMOVED***
    parser,
    placeholderWhitelist: placeholderWhitelist || undefined,
    placeholderPattern: placeholderPattern == null ? undefined : placeholderPattern,
    preserveComments: preserveComments == null ? undefined : preserveComments,
    syntacticPlaceholders: syntacticPlaceholders == null ? undefined : syntacticPlaceholders
***REMOVED***;
}
function normalizeReplacements(replacements) ***REMOVED***
  if (Array.isArray(replacements)) ***REMOVED***
    return replacements.reduce((acc, replacement, i) => ***REMOVED***
      acc["$" + i] = replacement;
      return acc;
  ***REMOVED***, ***REMOVED***});
***REMOVED*** else if (typeof replacements === "object" || replacements == null) ***REMOVED***
    return replacements || undefined;
***REMOVED***
  throw new Error("Template replacements must be an array, object, null, or undefined");
}

//# sourceMappingURL=options.js.map
