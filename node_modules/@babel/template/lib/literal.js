"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = literalTemplate;
var _options = require("./options");
var _parse = require("./parse");
var _populate = require("./populate");
function literalTemplate(formatter, tpl, opts) ***REMOVED***
  const ***REMOVED***
    metadata,
    names
***REMOVED*** = buildLiteralData(formatter, tpl, opts);
  return arg => ***REMOVED***
    const defaultReplacements = ***REMOVED***};
    arg.forEach((replacement, i) => ***REMOVED***
      defaultReplacements[names[i]] = replacement;
  ***REMOVED***);
    return arg => ***REMOVED***
      const replacements = (0, _options.normalizeReplacements)(arg);
      if (replacements) ***REMOVED***
        Object.keys(replacements).forEach(key => ***REMOVED***
          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) ***REMOVED***
            throw new Error("Unexpected replacement overlap.");
        ***REMOVED***
      ***REMOVED***);
    ***REMOVED***
      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
  ***REMOVED***;
***REMOVED***;
}
function buildLiteralData(formatter, tpl, opts) ***REMOVED***
  let names;
  let nameSet;
  let metadata;
  let prefix = "";
  do ***REMOVED***
    prefix += "$";
    const result = buildTemplateCode(tpl, prefix);
    names = result.names;
    nameSet = new Set(names);
    metadata = (0, _parse.default)(formatter, formatter.code(result.code), ***REMOVED***
      parser: opts.parser,
      placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),
      placeholderPattern: opts.placeholderPattern,
      preserveComments: opts.preserveComments,
      syntacticPlaceholders: opts.syntacticPlaceholders
  ***REMOVED***);
***REMOVED*** while (metadata.placeholders.some(placeholder => placeholder.isDuplicate && nameSet.has(placeholder.name)));
  return ***REMOVED***
    metadata,
    names
***REMOVED***;
}
function buildTemplateCode(tpl, prefix) ***REMOVED***
  const names = [];
  let code = tpl[0];
  for (let i = 1; i < tpl.length; i++) ***REMOVED***
    const value = `$***REMOVED***prefix}$***REMOVED***i - 1}`;
    names.push(value);
    code += value + tpl[i];
***REMOVED***
  return ***REMOVED***
    names,
    code
***REMOVED***;
}

//# sourceMappingURL=literal.js.map
