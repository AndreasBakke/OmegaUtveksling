"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = hoistVariables;

var _t = require("@babel/types");

const ***REMOVED***
  assignmentExpression,
  expressionStatement,
  identifier
} = _t;
const visitor = ***REMOVED***
  Scope(path, state) ***REMOVED***
    if (state.kind === "let") path.skip();
***REMOVED***,

  FunctionParent(path) ***REMOVED***
    path.skip();
***REMOVED***,

  VariableDeclaration(path, state) ***REMOVED***
    if (state.kind && path.node.kind !== state.kind) return;
    const nodes = [];
    const declarations = path.get("declarations");
    let firstId;

    for (const declar of declarations) ***REMOVED***
      firstId = declar.node.id;

      if (declar.node.init) ***REMOVED***
        nodes.push(expressionStatement(assignmentExpression("=", declar.node.id, declar.node.init)));
    ***REMOVED***

      for (const name of Object.keys(declar.getBindingIdentifiers())) ***REMOVED***
        state.emit(identifier(name), name, declar.node.init !== null);
    ***REMOVED***
  ***REMOVED***

    if (path.parentPath.isFor(***REMOVED***
      left: path.node
  ***REMOVED***)) ***REMOVED***
      path.replaceWith(firstId);
  ***REMOVED*** else ***REMOVED***
      path.replaceWithMultiple(nodes);
  ***REMOVED***
***REMOVED***

};

function hoistVariables(path, emit, kind = "var") ***REMOVED***
  path.traverse(visitor, ***REMOVED***
    kind,
    emit
***REMOVED***);
}