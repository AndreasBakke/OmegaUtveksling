"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = void 0;
var _isValidIdentifier = require("../validators/isValidIdentifier");
var _generated = require("../builders/generated");
var _default = valueToNode;
exports.default = _default;
const objectToString = Function.call.bind(Object.prototype.toString);
function isRegExp(value) ***REMOVED***
  return objectToString(value) === "[object RegExp]";
}
function isPlainObject(value) ***REMOVED***
  if (typeof value !== "object" || value === null || Object.prototype.toString.call(value) !== "[object Object]") ***REMOVED***
    return false;
***REMOVED***
  const proto = Object.getPrototypeOf(value);
  return proto === null || Object.getPrototypeOf(proto) === null;
}
function valueToNode(value) ***REMOVED***
  if (value === undefined) ***REMOVED***
    return (0, _generated.identifier)("undefined");
***REMOVED***

  if (value === true || value === false) ***REMOVED***
    return (0, _generated.booleanLiteral)(value);
***REMOVED***

  if (value === null) ***REMOVED***
    return (0, _generated.nullLiteral)();
***REMOVED***

  if (typeof value === "string") ***REMOVED***
    return (0, _generated.stringLiteral)(value);
***REMOVED***

  if (typeof value === "number") ***REMOVED***
    let result;
    if (Number.isFinite(value)) ***REMOVED***
      result = (0, _generated.numericLiteral)(Math.abs(value));
  ***REMOVED*** else ***REMOVED***
      let numerator;
      if (Number.isNaN(value)) ***REMOVED***
        numerator = (0, _generated.numericLiteral)(0);
    ***REMOVED*** else ***REMOVED***
        numerator = (0, _generated.numericLiteral)(1);
    ***REMOVED***
      result = (0, _generated.binaryExpression)("/", numerator, (0, _generated.numericLiteral)(0));
  ***REMOVED***
    if (value < 0 || Object.is(value, -0)) ***REMOVED***
      result = (0, _generated.unaryExpression)("-", result);
  ***REMOVED***
    return result;
***REMOVED***

  if (isRegExp(value)) ***REMOVED***
    const pattern = value.source;
    const flags = value.toString().match(/\/([a-z]+|)$/)[1];
    return (0, _generated.regExpLiteral)(pattern, flags);
***REMOVED***

  if (Array.isArray(value)) ***REMOVED***
    return (0, _generated.arrayExpression)(value.map(valueToNode));
***REMOVED***

  if (isPlainObject(value)) ***REMOVED***
    const props = [];
    for (const key of Object.keys(value)) ***REMOVED***
      let nodeKey;
      if ((0, _isValidIdentifier.default)(key)) ***REMOVED***
        nodeKey = (0, _generated.identifier)(key);
    ***REMOVED*** else ***REMOVED***
        nodeKey = (0, _generated.stringLiteral)(key);
    ***REMOVED***
      props.push((0, _generated.objectProperty)(nodeKey, valueToNode(
      value[key])));
  ***REMOVED***
    return (0, _generated.objectExpression)(props);
***REMOVED***
  throw new Error("don't know how to turn this value into a node");
}

//# sourceMappingURL=valueToNode.js.map
