"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = gatherSequenceExpressions;
var _getBindingIdentifiers = require("../retrievers/getBindingIdentifiers");
var _generated = require("../validators/generated");
var _generated2 = require("../builders/generated");
var _cloneNode = require("../clone/cloneNode");
function gatherSequenceExpressions(nodes, scope, declars) ***REMOVED***
  const exprs = [];
  let ensureLastUndefined = true;
  for (const node of nodes) ***REMOVED***
    if (!(0, _generated.isEmptyStatement)(node)) ***REMOVED***
      ensureLastUndefined = false;
  ***REMOVED***
    if ((0, _generated.isExpression)(node)) ***REMOVED***
      exprs.push(node);
  ***REMOVED*** else if ((0, _generated.isExpressionStatement)(node)) ***REMOVED***
      exprs.push(node.expression);
  ***REMOVED*** else if ((0, _generated.isVariableDeclaration)(node)) ***REMOVED***
      if (node.kind !== "var") return;

      for (const declar of node.declarations) ***REMOVED***
        const bindings = (0, _getBindingIdentifiers.default)(declar);
        for (const key of Object.keys(bindings)) ***REMOVED***
          declars.push(***REMOVED***
            kind: node.kind,
            id: (0, _cloneNode.default)(bindings[key])
        ***REMOVED***);
      ***REMOVED***
        if (declar.init) ***REMOVED***
          exprs.push((0, _generated2.assignmentExpression)("=", declar.id, declar.init));
      ***REMOVED***
    ***REMOVED***
      ensureLastUndefined = true;
  ***REMOVED*** else if ((0, _generated.isIfStatement)(node)) ***REMOVED***
      const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode();
      const alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();
      if (!consequent || !alternate) return;

      exprs.push((0, _generated2.conditionalExpression)(node.test, consequent, alternate));
  ***REMOVED*** else if ((0, _generated.isBlockStatement)(node)) ***REMOVED***
      const body = gatherSequenceExpressions(node.body, scope, declars);
      if (!body) return;

      exprs.push(body);
  ***REMOVED*** else if ((0, _generated.isEmptyStatement)(node)) ***REMOVED***
      if (nodes.indexOf(node) === 0) ***REMOVED***
        ensureLastUndefined = true;
    ***REMOVED***
  ***REMOVED*** else ***REMOVED***
      return;
  ***REMOVED***
***REMOVED***
  if (ensureLastUndefined) ***REMOVED***
    exprs.push(scope.buildUndefinedNode());
***REMOVED***
  if (exprs.length === 1) ***REMOVED***
    return exprs[0];
***REMOVED*** else ***REMOVED***
    return (0, _generated2.sequenceExpression)(exprs);
***REMOVED***
}

//# sourceMappingURL=gatherSequenceExpressions.js.map
