***REMOVED***"version":3,"names":["toStatement","node","ignore","isStatement","mustHaveId","newType","isClass","isFunction","isAssignmentExpression","expressionStatement","id","Error","type"],"sources":["../../src/converters/toStatement.ts"],"sourcesContent":["import ***REMOVED***\n  isStatement,\n  isFunction,\n  isClass,\n  isAssignmentExpression,\n} from \"../validators/generated\";\nimport ***REMOVED*** expressionStatement } from \"../builders/generated\";\nimport type * as t from \"..\";\n\nexport default toStatement as ***REMOVED***\n  (node: t.AssignmentExpression, ignore?: boolean): t.ExpressionStatement;\n\n  <T extends t.Statement>(node: T, ignore: false): T;\n  <T extends t.Statement>(node: T, ignore?: boolean): T | false;\n\n  (node: t.Class, ignore: false): t.ClassDeclaration;\n  (node: t.Class, ignore?: boolean): t.ClassDeclaration | false;\n\n  (node: t.Function, ignore: false): t.FunctionDeclaration;\n  (node: t.Function, ignore?: boolean): t.FunctionDeclaration | false;\n\n  (node: t.Node, ignore: false): t.Statement;\n  (node: t.Node, ignore?: boolean): t.Statement | false;\n};\n\nfunction toStatement(node: t.Node, ignore?: boolean): t.Statement | false ***REMOVED***\n  if (isStatement(node)) ***REMOVED***\n    return node;\n***REMOVED***\n\n  let mustHaveId = false;\n  let newType;\n\n  if (isClass(node)) ***REMOVED***\n    mustHaveId = true;\n    newType = \"ClassDeclaration\" as const;\n***REMOVED*** else if (isFunction(node)) ***REMOVED***\n    mustHaveId = true;\n    newType = \"FunctionDeclaration\" as const;\n***REMOVED*** else if (isAssignmentExpression(node)) ***REMOVED***\n    return expressionStatement(node);\n***REMOVED***\n\n  // @ts-expect-error todo(flow->ts): node.id might be missing\n  if (mustHaveId && !node.id) ***REMOVED***\n    newType = false as false;\n***REMOVED***\n\n  if (!newType) ***REMOVED***\n    if (ignore) ***REMOVED***\n      return false;\n  ***REMOVED*** else ***REMOVED***\n      throw new Error(`cannot turn $***REMOVED***node.type} to a statement`);\n  ***REMOVED***\n***REMOVED***\n\n  // @ts-expect-error manipulating node.type\n  node.type = newType;\n\n  // @ts-expect-error todo(flow->ts) refactor to avoid type unsafe mutations like reassigning node type above\n  return node;\n}\n"],"mappings":";;;;;;AAAA;AAMA;AAA4D,eAG7CA,WAAW;AAAA;AAgB1B,SAASA,WAAW,CAACC,IAAY,EAAEC,MAAgB,EAAuB;EACxE,IAAI,IAAAC,sBAAW,EAACF,IAAI,CAAC,EAAE;IACrB,OAAOA,IAAI;EACb;EAEA,IAAIG,UAAU,GAAG,KAAK;EACtB,IAAIC,OAAO;EAEX,IAAI,IAAAC,kBAAO,EAACL,IAAI,CAAC,EAAE;IACjBG,UAAU,GAAG,IAAI;IACjBC,OAAO,GAAG,kBAA2B;EACvC,CAAC,MAAM,IAAI,IAAAE,qBAAU,EAACN,IAAI,CAAC,EAAE;IAC3BG,UAAU,GAAG,IAAI;IACjBC,OAAO,GAAG,qBAA8B;EAC1C,CAAC,MAAM,IAAI,IAAAG,iCAAsB,EAACP,IAAI,CAAC,EAAE;IACvC,OAAO,IAAAQ,+BAAmB,EAACR,IAAI,CAAC;EAClC;;EAGA,IAAIG,UAAU,IAAI,CAACH,IAAI,CAACS,EAAE,EAAE;IAC1BL,OAAO,GAAG,KAAc;EAC1B;EAEA,IAAI,CAACA,OAAO,EAAE;IACZ,IAAIH,MAAM,EAAE;MACV,OAAO,KAAK;IACd,CAAC,MAAM;MACL,MAAM,IAAIS,KAAK,CAAE,eAAcV,IAAI,CAACW,IAAK,iBAAgB,CAAC;IAC5D;EACF;;EAGAX,IAAI,CAACW,IAAI,GAAGP,OAAO;;EAGnB,OAAOJ,IAAI;AACb"}