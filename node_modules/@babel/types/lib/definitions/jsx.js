"use strict";

var _utils = require("./utils");
const defineType = (0, _utils.defineAliasedType)("JSX");
defineType("JSXAttribute", ***REMOVED***
  visitor: ["name", "value"],
  aliases: ["Immutable"],
  fields: ***REMOVED***
    name: ***REMOVED***
      validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
  ***REMOVED***,
    value: ***REMOVED***
      optional: true,
      validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer")
  ***REMOVED***
***REMOVED***
});
defineType("JSXClosingElement", ***REMOVED***
  visitor: ["name"],
  aliases: ["Immutable"],
  fields: ***REMOVED***
    name: ***REMOVED***
      validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
  ***REMOVED***
***REMOVED***
});
defineType("JSXElement", ***REMOVED***
  builder: ["openingElement", "closingElement", "children", "selfClosing"],
  visitor: ["openingElement", "children", "closingElement"],
  aliases: ["Immutable", "Expression"],
  fields: Object.assign(***REMOVED***
    openingElement: ***REMOVED***
      validate: (0, _utils.assertNodeType)("JSXOpeningElement")
  ***REMOVED***,
    closingElement: ***REMOVED***
      optional: true,
      validate: (0, _utils.assertNodeType)("JSXClosingElement")
  ***REMOVED***,
    children: ***REMOVED***
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
  ***REMOVED***
***REMOVED***, ***REMOVED***
    selfClosing: ***REMOVED***
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
  ***REMOVED***
***REMOVED***)
});
defineType("JSXEmptyExpression", ***REMOVED***});
defineType("JSXExpressionContainer", ***REMOVED***
  visitor: ["expression"],
  aliases: ["Immutable"],
  fields: ***REMOVED***
    expression: ***REMOVED***
      validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression")
  ***REMOVED***
***REMOVED***
});
defineType("JSXSpreadChild", ***REMOVED***
  visitor: ["expression"],
  aliases: ["Immutable"],
  fields: ***REMOVED***
    expression: ***REMOVED***
      validate: (0, _utils.assertNodeType)("Expression")
  ***REMOVED***
***REMOVED***
});
defineType("JSXIdentifier", ***REMOVED***
  builder: ["name"],
  fields: ***REMOVED***
    name: ***REMOVED***
      validate: (0, _utils.assertValueType)("string")
  ***REMOVED***
***REMOVED***
});
defineType("JSXMemberExpression", ***REMOVED***
  visitor: ["object", "property"],
  fields: ***REMOVED***
    object: ***REMOVED***
      validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
  ***REMOVED***,
    property: ***REMOVED***
      validate: (0, _utils.assertNodeType)("JSXIdentifier")
  ***REMOVED***
***REMOVED***
});
defineType("JSXNamespacedName", ***REMOVED***
  visitor: ["namespace", "name"],
  fields: ***REMOVED***
    namespace: ***REMOVED***
      validate: (0, _utils.assertNodeType)("JSXIdentifier")
  ***REMOVED***,
    name: ***REMOVED***
      validate: (0, _utils.assertNodeType)("JSXIdentifier")
  ***REMOVED***
***REMOVED***
});
defineType("JSXOpeningElement", ***REMOVED***
  builder: ["name", "attributes", "selfClosing"],
  visitor: ["name", "attributes"],
  aliases: ["Immutable"],
  fields: ***REMOVED***
    name: ***REMOVED***
      validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName")
  ***REMOVED***,
    selfClosing: ***REMOVED***
      default: false
  ***REMOVED***,
    attributes: ***REMOVED***
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXAttribute", "JSXSpreadAttribute")))
  ***REMOVED***,
    typeParameters: ***REMOVED***
      validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"),
      optional: true
  ***REMOVED***
***REMOVED***
});
defineType("JSXSpreadAttribute", ***REMOVED***
  visitor: ["argument"],
  fields: ***REMOVED***
    argument: ***REMOVED***
      validate: (0, _utils.assertNodeType)("Expression")
  ***REMOVED***
***REMOVED***
});
defineType("JSXText", ***REMOVED***
  aliases: ["Immutable"],
  builder: ["value"],
  fields: ***REMOVED***
    value: ***REMOVED***
      validate: (0, _utils.assertValueType)("string")
  ***REMOVED***
***REMOVED***
});
defineType("JSXFragment", ***REMOVED***
  builder: ["openingFragment", "closingFragment", "children"],
  visitor: ["openingFragment", "children", "closingFragment"],
  aliases: ["Immutable", "Expression"],
  fields: ***REMOVED***
    openingFragment: ***REMOVED***
      validate: (0, _utils.assertNodeType)("JSXOpeningFragment")
  ***REMOVED***,
    closingFragment: ***REMOVED***
      validate: (0, _utils.assertNodeType)("JSXClosingFragment")
  ***REMOVED***,
    children: ***REMOVED***
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment")))
  ***REMOVED***
***REMOVED***
});
defineType("JSXOpeningFragment", ***REMOVED***
  aliases: ["Immutable"]
});
defineType("JSXClosingFragment", ***REMOVED***
  aliases: ["Immutable"]
});

//# sourceMappingURL=jsx.js.map
