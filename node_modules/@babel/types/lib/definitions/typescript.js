"use strict";

var _utils = require("./utils");
var _core = require("./core");
var _is = require("../validators/is");
const defineType = (0, _utils.defineAliasedType)("TypeScript");
const bool = (0, _utils.assertValueType)("boolean");
const tSFunctionTypeAnnotationCommon = () => (***REMOVED***
  returnType: ***REMOVED***
    validate:
    (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"),
    optional: true
***REMOVED***,
  typeParameters: ***REMOVED***
    validate:
    (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"),
    optional: true
***REMOVED***
});
defineType("TSParameterProperty", ***REMOVED***
  aliases: ["LVal"],
  visitor: ["parameter"],
  fields: ***REMOVED***
    accessibility: ***REMOVED***
      validate: (0, _utils.assertOneOf)("public", "private", "protected"),
      optional: true
  ***REMOVED***,
    readonly: ***REMOVED***
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
  ***REMOVED***,
    parameter: ***REMOVED***
      validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern")
  ***REMOVED***,
    override: ***REMOVED***
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
  ***REMOVED***,
    decorators: ***REMOVED***
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))),
      optional: true
  ***REMOVED***
***REMOVED***
});
defineType("TSDeclareFunction", ***REMOVED***
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "typeParameters", "params", "returnType"],
  fields: Object.assign(***REMOVED***}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon())
});
defineType("TSDeclareMethod", ***REMOVED***
  visitor: ["decorators", "key", "typeParameters", "params", "returnType"],
  fields: Object.assign(***REMOVED***}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon())
});
defineType("TSQualifiedName", ***REMOVED***
  aliases: ["TSEntityName"],
  visitor: ["left", "right"],
  fields: ***REMOVED***
    left: (0, _utils.validateType)("TSEntityName"),
    right: (0, _utils.validateType)("Identifier")
***REMOVED***
});
const signatureDeclarationCommon = () => (***REMOVED***
  typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
  ["parameters"]: (0, _utils.validateArrayOfType)(["Identifier", "RestElement"]),
  ["typeAnnotation"]: (0, _utils.validateOptionalType)("TSTypeAnnotation")
});
const callConstructSignatureDeclaration = ***REMOVED***
  aliases: ["TSTypeElement"],
  visitor: ["typeParameters", "parameters", "typeAnnotation"],
  fields: signatureDeclarationCommon()
};
defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration);
defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
const namedTypeElementCommon = () => (***REMOVED***
  key: (0, _utils.validateType)("Expression"),
  computed: ***REMOVED***
    default: false
***REMOVED***,
  optional: (0, _utils.validateOptional)(bool)
});
defineType("TSPropertySignature", ***REMOVED***
  aliases: ["TSTypeElement"],
  visitor: ["key", "typeAnnotation", "initializer"],
  fields: Object.assign(***REMOVED***}, namedTypeElementCommon(), ***REMOVED***
    readonly: (0, _utils.validateOptional)(bool),
    typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
    initializer: (0, _utils.validateOptionalType)("Expression"),
    kind: ***REMOVED***
      validate: (0, _utils.assertOneOf)("get", "set")
  ***REMOVED***
***REMOVED***)
});
defineType("TSMethodSignature", ***REMOVED***
  aliases: ["TSTypeElement"],
  visitor: ["key", "typeParameters", "parameters", "typeAnnotation"],
  fields: Object.assign(***REMOVED***}, signatureDeclarationCommon(), namedTypeElementCommon(), ***REMOVED***
    kind: ***REMOVED***
      validate: (0, _utils.assertOneOf)("method", "get", "set")
  ***REMOVED***
***REMOVED***)
});
defineType("TSIndexSignature", ***REMOVED***
  aliases: ["TSTypeElement"],
  visitor: ["parameters", "typeAnnotation"],
  fields: ***REMOVED***
    readonly: (0, _utils.validateOptional)(bool),
    static: (0, _utils.validateOptional)(bool),
    parameters: (0, _utils.validateArrayOfType)("Identifier"),
    typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation")
***REMOVED***
});
const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
for (const type of tsKeywordTypes) ***REMOVED***
  defineType(type, ***REMOVED***
    aliases: ["TSType", "TSBaseType"],
    visitor: [],
    fields: ***REMOVED***}
***REMOVED***);
}
defineType("TSThisType", ***REMOVED***
  aliases: ["TSType", "TSBaseType"],
  visitor: [],
  fields: ***REMOVED***}
});
const fnOrCtrBase = ***REMOVED***
  aliases: ["TSType"],
  visitor: ["typeParameters", "parameters", "typeAnnotation"]
};
defineType("TSFunctionType", Object.assign(***REMOVED***}, fnOrCtrBase, ***REMOVED***
  fields: signatureDeclarationCommon()
}));
defineType("TSConstructorType", Object.assign(***REMOVED***}, fnOrCtrBase, ***REMOVED***
  fields: Object.assign(***REMOVED***}, signatureDeclarationCommon(), ***REMOVED***
    abstract: (0, _utils.validateOptional)(bool)
***REMOVED***)
}));
defineType("TSTypeReference", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["typeName", "typeParameters"],
  fields: ***REMOVED***
    typeName: (0, _utils.validateType)("TSEntityName"),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
***REMOVED***
});
defineType("TSTypePredicate", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["parameterName", "typeAnnotation"],
  builder: ["parameterName", "typeAnnotation", "asserts"],
  fields: ***REMOVED***
    parameterName: (0, _utils.validateType)(["Identifier", "TSThisType"]),
    typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"),
    asserts: (0, _utils.validateOptional)(bool)
***REMOVED***
});
defineType("TSTypeQuery", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["exprName", "typeParameters"],
  fields: ***REMOVED***
    exprName: (0, _utils.validateType)(["TSEntityName", "TSImportType"]),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
***REMOVED***
});
defineType("TSTypeLiteral", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["members"],
  fields: ***REMOVED***
    members: (0, _utils.validateArrayOfType)("TSTypeElement")
***REMOVED***
});
defineType("TSArrayType", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["elementType"],
  fields: ***REMOVED***
    elementType: (0, _utils.validateType)("TSType")
***REMOVED***
});
defineType("TSTupleType", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["elementTypes"],
  fields: ***REMOVED***
    elementTypes: (0, _utils.validateArrayOfType)(["TSType", "TSNamedTupleMember"])
***REMOVED***
});
defineType("TSOptionalType", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["typeAnnotation"],
  fields: ***REMOVED***
    typeAnnotation: (0, _utils.validateType)("TSType")
***REMOVED***
});
defineType("TSRestType", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["typeAnnotation"],
  fields: ***REMOVED***
    typeAnnotation: (0, _utils.validateType)("TSType")
***REMOVED***
});
defineType("TSNamedTupleMember", ***REMOVED***
  visitor: ["label", "elementType"],
  builder: ["label", "elementType", "optional"],
  fields: ***REMOVED***
    label: (0, _utils.validateType)("Identifier"),
    optional: ***REMOVED***
      validate: bool,
      default: false
  ***REMOVED***,
    elementType: (0, _utils.validateType)("TSType")
***REMOVED***
});
const unionOrIntersection = ***REMOVED***
  aliases: ["TSType"],
  visitor: ["types"],
  fields: ***REMOVED***
    types: (0, _utils.validateArrayOfType)("TSType")
***REMOVED***
};
defineType("TSUnionType", unionOrIntersection);
defineType("TSIntersectionType", unionOrIntersection);
defineType("TSConditionalType", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["checkType", "extendsType", "trueType", "falseType"],
  fields: ***REMOVED***
    checkType: (0, _utils.validateType)("TSType"),
    extendsType: (0, _utils.validateType)("TSType"),
    trueType: (0, _utils.validateType)("TSType"),
    falseType: (0, _utils.validateType)("TSType")
***REMOVED***
});
defineType("TSInferType", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["typeParameter"],
  fields: ***REMOVED***
    typeParameter: (0, _utils.validateType)("TSTypeParameter")
***REMOVED***
});
defineType("TSParenthesizedType", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["typeAnnotation"],
  fields: ***REMOVED***
    typeAnnotation: (0, _utils.validateType)("TSType")
***REMOVED***
});
defineType("TSTypeOperator", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["typeAnnotation"],
  fields: ***REMOVED***
    operator: (0, _utils.validate)((0, _utils.assertValueType)("string")),
    typeAnnotation: (0, _utils.validateType)("TSType")
***REMOVED***
});
defineType("TSIndexedAccessType", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["objectType", "indexType"],
  fields: ***REMOVED***
    objectType: (0, _utils.validateType)("TSType"),
    indexType: (0, _utils.validateType)("TSType")
***REMOVED***
});
defineType("TSMappedType", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["typeParameter", "typeAnnotation", "nameType"],
  fields: ***REMOVED***
    readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
    typeParameter: (0, _utils.validateType)("TSTypeParameter"),
    optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")),
    typeAnnotation: (0, _utils.validateOptionalType)("TSType"),
    nameType: (0, _utils.validateOptionalType)("TSType")
***REMOVED***
});
defineType("TSLiteralType", ***REMOVED***
  aliases: ["TSType", "TSBaseType"],
  visitor: ["literal"],
  fields: ***REMOVED***
    literal: ***REMOVED***
      validate: function () ***REMOVED***
        const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral");
        const unaryOperator = (0, _utils.assertOneOf)("-");
        const literal = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
        function validator(parent, key, node) ***REMOVED***
          if ((0, _is.default)("UnaryExpression", node)) ***REMOVED***
            unaryOperator(node, "operator", node.operator);
            unaryExpression(node, "argument", node.argument);
        ***REMOVED*** else ***REMOVED***
            literal(parent, key, node);
        ***REMOVED***
      ***REMOVED***
        validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"];
        return validator;
    ***REMOVED***()
  ***REMOVED***
***REMOVED***
});
defineType("TSExpressionWithTypeArguments", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["expression", "typeParameters"],
  fields: ***REMOVED***
    expression: (0, _utils.validateType)("TSEntityName"),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
***REMOVED***
});
defineType("TSInterfaceDeclaration", ***REMOVED***
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "typeParameters", "extends", "body"],
  fields: ***REMOVED***
    declare: (0, _utils.validateOptional)(bool),
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")),
    body: (0, _utils.validateType)("TSInterfaceBody")
***REMOVED***
});
defineType("TSInterfaceBody", ***REMOVED***
  visitor: ["body"],
  fields: ***REMOVED***
    body: (0, _utils.validateArrayOfType)("TSTypeElement")
***REMOVED***
});
defineType("TSTypeAliasDeclaration", ***REMOVED***
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "typeParameters", "typeAnnotation"],
  fields: ***REMOVED***
    declare: (0, _utils.validateOptional)(bool),
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"),
    typeAnnotation: (0, _utils.validateType)("TSType")
***REMOVED***
});
defineType("TSInstantiationExpression", ***REMOVED***
  aliases: ["Expression"],
  visitor: ["expression", "typeParameters"],
  fields: ***REMOVED***
    expression: (0, _utils.validateType)("Expression"),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
***REMOVED***
});
const TSTypeExpression = ***REMOVED***
  aliases: ["Expression", "LVal", "PatternLike"],
  visitor: ["expression", "typeAnnotation"],
  fields: ***REMOVED***
    expression: (0, _utils.validateType)("Expression"),
    typeAnnotation: (0, _utils.validateType)("TSType")
***REMOVED***
};
defineType("TSAsExpression", TSTypeExpression);
defineType("TSSatisfiesExpression", TSTypeExpression);
defineType("TSTypeAssertion", ***REMOVED***
  aliases: ["Expression", "LVal", "PatternLike"],
  visitor: ["typeAnnotation", "expression"],
  fields: ***REMOVED***
    typeAnnotation: (0, _utils.validateType)("TSType"),
    expression: (0, _utils.validateType)("Expression")
***REMOVED***
});
defineType("TSEnumDeclaration", ***REMOVED***
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "members"],
  fields: ***REMOVED***
    declare: (0, _utils.validateOptional)(bool),
    const: (0, _utils.validateOptional)(bool),
    id: (0, _utils.validateType)("Identifier"),
    members: (0, _utils.validateArrayOfType)("TSEnumMember"),
    initializer: (0, _utils.validateOptionalType)("Expression")
***REMOVED***
});
defineType("TSEnumMember", ***REMOVED***
  visitor: ["id", "initializer"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
    initializer: (0, _utils.validateOptionalType)("Expression")
***REMOVED***
});
defineType("TSModuleDeclaration", ***REMOVED***
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "body"],
  fields: ***REMOVED***
    declare: (0, _utils.validateOptional)(bool),
    global: (0, _utils.validateOptional)(bool),
    id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
    body: (0, _utils.validateType)(["TSModuleBlock", "TSModuleDeclaration"])
***REMOVED***
});
defineType("TSModuleBlock", ***REMOVED***
  aliases: ["Scopable", "Block", "BlockParent", "FunctionParent"],
  visitor: ["body"],
  fields: ***REMOVED***
    body: (0, _utils.validateArrayOfType)("Statement")
***REMOVED***
});
defineType("TSImportType", ***REMOVED***
  aliases: ["TSType"],
  visitor: ["argument", "qualifier", "typeParameters"],
  fields: ***REMOVED***
    argument: (0, _utils.validateType)("StringLiteral"),
    qualifier: (0, _utils.validateOptionalType)("TSEntityName"),
    typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation")
***REMOVED***
});
defineType("TSImportEqualsDeclaration", ***REMOVED***
  aliases: ["Statement"],
  visitor: ["id", "moduleReference"],
  fields: ***REMOVED***
    isExport: (0, _utils.validate)(bool),
    id: (0, _utils.validateType)("Identifier"),
    moduleReference: (0, _utils.validateType)(["TSEntityName", "TSExternalModuleReference"]),
    importKind: ***REMOVED***
      validate: (0, _utils.assertOneOf)("type", "value"),
      optional: true
  ***REMOVED***
***REMOVED***
});
defineType("TSExternalModuleReference", ***REMOVED***
  visitor: ["expression"],
  fields: ***REMOVED***
    expression: (0, _utils.validateType)("StringLiteral")
***REMOVED***
});
defineType("TSNonNullExpression", ***REMOVED***
  aliases: ["Expression", "LVal", "PatternLike"],
  visitor: ["expression"],
  fields: ***REMOVED***
    expression: (0, _utils.validateType)("Expression")
***REMOVED***
});
defineType("TSExportAssignment", ***REMOVED***
  aliases: ["Statement"],
  visitor: ["expression"],
  fields: ***REMOVED***
    expression: (0, _utils.validateType)("Expression")
***REMOVED***
});
defineType("TSNamespaceExportDeclaration", ***REMOVED***
  aliases: ["Statement"],
  visitor: ["id"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier")
***REMOVED***
});
defineType("TSTypeAnnotation", ***REMOVED***
  visitor: ["typeAnnotation"],
  fields: ***REMOVED***
    typeAnnotation: ***REMOVED***
      validate: (0, _utils.assertNodeType)("TSType")
  ***REMOVED***
***REMOVED***
});
defineType("TSTypeParameterInstantiation", ***REMOVED***
  visitor: ["params"],
  fields: ***REMOVED***
    params: ***REMOVED***
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType")))
  ***REMOVED***
***REMOVED***
});
defineType("TSTypeParameterDeclaration", ***REMOVED***
  visitor: ["params"],
  fields: ***REMOVED***
    params: ***REMOVED***
      validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSTypeParameter")))
  ***REMOVED***
***REMOVED***
});
defineType("TSTypeParameter", ***REMOVED***
  builder: ["constraint", "default", "name"],
  visitor: ["constraint", "default"],
  fields: ***REMOVED***
    name: ***REMOVED***
      validate: (0, _utils.assertValueType)("string")
  ***REMOVED***,
    in: ***REMOVED***
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
  ***REMOVED***,
    out: ***REMOVED***
      validate: (0, _utils.assertValueType)("boolean"),
      optional: true
  ***REMOVED***,
    constraint: ***REMOVED***
      validate: (0, _utils.assertNodeType)("TSType"),
      optional: true
  ***REMOVED***,
    default: ***REMOVED***
      validate: (0, _utils.assertNodeType)("TSType"),
      optional: true
  ***REMOVED***
***REMOVED***
});

//# sourceMappingURL=typescript.js.map
