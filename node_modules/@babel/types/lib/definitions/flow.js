"use strict";

var _utils = require("./utils");
const defineType = (0, _utils.defineAliasedType)("Flow");
const defineInterfaceishType = name => ***REMOVED***
  defineType(name, ***REMOVED***
    builder: ["id", "typeParameters", "extends", "body"],
    visitor: ["id", "typeParameters", "extends", "mixins", "implements", "body"],
    aliases: ["FlowDeclaration", "Statement", "Declaration"],
    fields: ***REMOVED***
      id: (0, _utils.validateType)("Identifier"),
      typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
      extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
      mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
      implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements")),
      body: (0, _utils.validateType)("ObjectTypeAnnotation")
  ***REMOVED***
***REMOVED***);
};
defineType("AnyTypeAnnotation", ***REMOVED***
  aliases: ["FlowType", "FlowBaseAnnotation"]
});
defineType("ArrayTypeAnnotation", ***REMOVED***
  visitor: ["elementType"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    elementType: (0, _utils.validateType)("FlowType")
***REMOVED***
});
defineType("BooleanTypeAnnotation", ***REMOVED***
  aliases: ["FlowType", "FlowBaseAnnotation"]
});
defineType("BooleanLiteralTypeAnnotation", ***REMOVED***
  builder: ["value"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    value: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});
defineType("NullLiteralTypeAnnotation", ***REMOVED***
  aliases: ["FlowType", "FlowBaseAnnotation"]
});
defineType("ClassImplements", ***REMOVED***
  visitor: ["id", "typeParameters"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
***REMOVED***
});
defineInterfaceishType("DeclareClass");
defineType("DeclareFunction", ***REMOVED***
  visitor: ["id"],
  aliases: ["FlowDeclaration", "Statement", "Declaration"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    predicate: (0, _utils.validateOptionalType)("DeclaredPredicate")
***REMOVED***
});
defineInterfaceishType("DeclareInterface");
defineType("DeclareModule", ***REMOVED***
  builder: ["id", "body", "kind"],
  visitor: ["id", "body"],
  aliases: ["FlowDeclaration", "Statement", "Declaration"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
    body: (0, _utils.validateType)("BlockStatement"),
    kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES"))
***REMOVED***
});
defineType("DeclareModuleExports", ***REMOVED***
  visitor: ["typeAnnotation"],
  aliases: ["FlowDeclaration", "Statement", "Declaration"],
  fields: ***REMOVED***
    typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
***REMOVED***
});
defineType("DeclareTypeAlias", ***REMOVED***
  visitor: ["id", "typeParameters", "right"],
  aliases: ["FlowDeclaration", "Statement", "Declaration"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
    right: (0, _utils.validateType)("FlowType")
***REMOVED***
});
defineType("DeclareOpaqueType", ***REMOVED***
  visitor: ["id", "typeParameters", "supertype"],
  aliases: ["FlowDeclaration", "Statement", "Declaration"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
    supertype: (0, _utils.validateOptionalType)("FlowType"),
    impltype: (0, _utils.validateOptionalType)("FlowType")
***REMOVED***
});
defineType("DeclareVariable", ***REMOVED***
  visitor: ["id"],
  aliases: ["FlowDeclaration", "Statement", "Declaration"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier")
***REMOVED***
});
defineType("DeclareExportDeclaration", ***REMOVED***
  visitor: ["declaration", "specifiers", "source"],
  aliases: ["FlowDeclaration", "Statement", "Declaration"],
  fields: ***REMOVED***
    declaration: (0, _utils.validateOptionalType)("Flow"),
    specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)(["ExportSpecifier", "ExportNamespaceSpecifier"])),
    source: (0, _utils.validateOptionalType)("StringLiteral"),
    default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});
defineType("DeclareExportAllDeclaration", ***REMOVED***
  visitor: ["source"],
  aliases: ["FlowDeclaration", "Statement", "Declaration"],
  fields: ***REMOVED***
    source: (0, _utils.validateType)("StringLiteral"),
    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value"))
***REMOVED***
});
defineType("DeclaredPredicate", ***REMOVED***
  visitor: ["value"],
  aliases: ["FlowPredicate"],
  fields: ***REMOVED***
    value: (0, _utils.validateType)("Flow")
***REMOVED***
});
defineType("ExistsTypeAnnotation", ***REMOVED***
  aliases: ["FlowType"]
});
defineType("FunctionTypeAnnotation", ***REMOVED***
  visitor: ["typeParameters", "params", "rest", "returnType"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
    params: (0, _utils.validate)((0, _utils.arrayOfType)("FunctionTypeParam")),
    rest: (0, _utils.validateOptionalType)("FunctionTypeParam"),
    this: (0, _utils.validateOptionalType)("FunctionTypeParam"),
    returnType: (0, _utils.validateType)("FlowType")
***REMOVED***
});
defineType("FunctionTypeParam", ***REMOVED***
  visitor: ["name", "typeAnnotation"],
  fields: ***REMOVED***
    name: (0, _utils.validateOptionalType)("Identifier"),
    typeAnnotation: (0, _utils.validateType)("FlowType"),
    optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});
defineType("GenericTypeAnnotation", ***REMOVED***
  visitor: ["id", "typeParameters"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
***REMOVED***
});
defineType("InferredPredicate", ***REMOVED***
  aliases: ["FlowPredicate"]
});
defineType("InterfaceExtends", ***REMOVED***
  visitor: ["id", "typeParameters"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation")
***REMOVED***
});
defineInterfaceishType("InterfaceDeclaration");
defineType("InterfaceTypeAnnotation", ***REMOVED***
  visitor: ["extends", "body"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")),
    body: (0, _utils.validateType)("ObjectTypeAnnotation")
***REMOVED***
});
defineType("IntersectionTypeAnnotation", ***REMOVED***
  visitor: ["types"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
***REMOVED***
});
defineType("MixedTypeAnnotation", ***REMOVED***
  aliases: ["FlowType", "FlowBaseAnnotation"]
});
defineType("EmptyTypeAnnotation", ***REMOVED***
  aliases: ["FlowType", "FlowBaseAnnotation"]
});
defineType("NullableTypeAnnotation", ***REMOVED***
  visitor: ["typeAnnotation"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    typeAnnotation: (0, _utils.validateType)("FlowType")
***REMOVED***
});
defineType("NumberLiteralTypeAnnotation", ***REMOVED***
  builder: ["value"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    value: (0, _utils.validate)((0, _utils.assertValueType)("number"))
***REMOVED***
});
defineType("NumberTypeAnnotation", ***REMOVED***
  aliases: ["FlowType", "FlowBaseAnnotation"]
});
defineType("ObjectTypeAnnotation", ***REMOVED***
  visitor: ["properties", "indexers", "callProperties", "internalSlots"],
  aliases: ["FlowType"],
  builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"],
  fields: ***REMOVED***
    properties: (0, _utils.validate)((0, _utils.arrayOfType)(["ObjectTypeProperty", "ObjectTypeSpreadProperty"])),
    indexers: ***REMOVED***
      validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"),
      optional: true,
      default: []
  ***REMOVED***,
    callProperties: ***REMOVED***
      validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"),
      optional: true,
      default: []
  ***REMOVED***,
    internalSlots: ***REMOVED***
      validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"),
      optional: true,
      default: []
  ***REMOVED***,
    exact: ***REMOVED***
      validate: (0, _utils.assertValueType)("boolean"),
      default: false
  ***REMOVED***,
    inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});
defineType("ObjectTypeInternalSlot", ***REMOVED***
  visitor: ["id", "value", "optional", "static", "method"],
  aliases: ["UserWhitespacable"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    value: (0, _utils.validateType)("FlowType"),
    optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});
defineType("ObjectTypeCallProperty", ***REMOVED***
  visitor: ["value"],
  aliases: ["UserWhitespacable"],
  fields: ***REMOVED***
    value: (0, _utils.validateType)("FlowType"),
    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});
defineType("ObjectTypeIndexer", ***REMOVED***
  visitor: ["id", "key", "value", "variance"],
  aliases: ["UserWhitespacable"],
  fields: ***REMOVED***
    id: (0, _utils.validateOptionalType)("Identifier"),
    key: (0, _utils.validateType)("FlowType"),
    value: (0, _utils.validateType)("FlowType"),
    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    variance: (0, _utils.validateOptionalType)("Variance")
***REMOVED***
});
defineType("ObjectTypeProperty", ***REMOVED***
  visitor: ["key", "value", "variance"],
  aliases: ["UserWhitespacable"],
  fields: ***REMOVED***
    key: (0, _utils.validateType)(["Identifier", "StringLiteral"]),
    value: (0, _utils.validateType)("FlowType"),
    kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")),
    static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    variance: (0, _utils.validateOptionalType)("Variance"),
    method: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});
defineType("ObjectTypeSpreadProperty", ***REMOVED***
  visitor: ["argument"],
  aliases: ["UserWhitespacable"],
  fields: ***REMOVED***
    argument: (0, _utils.validateType)("FlowType")
***REMOVED***
});
defineType("OpaqueType", ***REMOVED***
  visitor: ["id", "typeParameters", "supertype", "impltype"],
  aliases: ["FlowDeclaration", "Statement", "Declaration"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
    supertype: (0, _utils.validateOptionalType)("FlowType"),
    impltype: (0, _utils.validateType)("FlowType")
***REMOVED***
});
defineType("QualifiedTypeIdentifier", ***REMOVED***
  visitor: ["id", "qualification"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    qualification: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"])
***REMOVED***
});
defineType("StringLiteralTypeAnnotation", ***REMOVED***
  builder: ["value"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    value: (0, _utils.validate)((0, _utils.assertValueType)("string"))
***REMOVED***
});
defineType("StringTypeAnnotation", ***REMOVED***
  aliases: ["FlowType", "FlowBaseAnnotation"]
});
defineType("SymbolTypeAnnotation", ***REMOVED***
  aliases: ["FlowType", "FlowBaseAnnotation"]
});
defineType("ThisTypeAnnotation", ***REMOVED***
  aliases: ["FlowType", "FlowBaseAnnotation"]
});
defineType("TupleTypeAnnotation", ***REMOVED***
  visitor: ["types"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
***REMOVED***
});
defineType("TypeofTypeAnnotation", ***REMOVED***
  visitor: ["argument"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    argument: (0, _utils.validateType)("FlowType")
***REMOVED***
});
defineType("TypeAlias", ***REMOVED***
  visitor: ["id", "typeParameters", "right"],
  aliases: ["FlowDeclaration", "Statement", "Declaration"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"),
    right: (0, _utils.validateType)("FlowType")
***REMOVED***
});
defineType("TypeAnnotation", ***REMOVED***
  visitor: ["typeAnnotation"],
  fields: ***REMOVED***
    typeAnnotation: (0, _utils.validateType)("FlowType")
***REMOVED***
});
defineType("TypeCastExpression", ***REMOVED***
  visitor: ["expression", "typeAnnotation"],
  aliases: ["ExpressionWrapper", "Expression"],
  fields: ***REMOVED***
    expression: (0, _utils.validateType)("Expression"),
    typeAnnotation: (0, _utils.validateType)("TypeAnnotation")
***REMOVED***
});
defineType("TypeParameter", ***REMOVED***
  visitor: ["bound", "default", "variance"],
  fields: ***REMOVED***
    name: (0, _utils.validate)((0, _utils.assertValueType)("string")),
    bound: (0, _utils.validateOptionalType)("TypeAnnotation"),
    default: (0, _utils.validateOptionalType)("FlowType"),
    variance: (0, _utils.validateOptionalType)("Variance")
***REMOVED***
});
defineType("TypeParameterDeclaration", ***REMOVED***
  visitor: ["params"],
  fields: ***REMOVED***
    params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter"))
***REMOVED***
});
defineType("TypeParameterInstantiation", ***REMOVED***
  visitor: ["params"],
  fields: ***REMOVED***
    params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
***REMOVED***
});
defineType("UnionTypeAnnotation", ***REMOVED***
  visitor: ["types"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType"))
***REMOVED***
});
defineType("Variance", ***REMOVED***
  builder: ["kind"],
  fields: ***REMOVED***
    kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus"))
***REMOVED***
});
defineType("VoidTypeAnnotation", ***REMOVED***
  aliases: ["FlowType", "FlowBaseAnnotation"]
});

defineType("EnumDeclaration", ***REMOVED***
  aliases: ["Statement", "Declaration"],
  visitor: ["id", "body"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    body: (0, _utils.validateType)(["EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody"])
***REMOVED***
});
defineType("EnumBooleanBody", ***REMOVED***
  aliases: ["EnumBody"],
  visitor: ["members"],
  fields: ***REMOVED***
    explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    members: (0, _utils.validateArrayOfType)("EnumBooleanMember"),
    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});
defineType("EnumNumberBody", ***REMOVED***
  aliases: ["EnumBody"],
  visitor: ["members"],
  fields: ***REMOVED***
    explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    members: (0, _utils.validateArrayOfType)("EnumNumberMember"),
    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});
defineType("EnumStringBody", ***REMOVED***
  aliases: ["EnumBody"],
  visitor: ["members"],
  fields: ***REMOVED***
    explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")),
    members: (0, _utils.validateArrayOfType)(["EnumStringMember", "EnumDefaultedMember"]),
    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});
defineType("EnumSymbolBody", ***REMOVED***
  aliases: ["EnumBody"],
  visitor: ["members"],
  fields: ***REMOVED***
    members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"),
    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});
defineType("EnumBooleanMember", ***REMOVED***
  aliases: ["EnumMember"],
  visitor: ["id"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    init: (0, _utils.validateType)("BooleanLiteral")
***REMOVED***
});
defineType("EnumNumberMember", ***REMOVED***
  aliases: ["EnumMember"],
  visitor: ["id", "init"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    init: (0, _utils.validateType)("NumericLiteral")
***REMOVED***
});
defineType("EnumStringMember", ***REMOVED***
  aliases: ["EnumMember"],
  visitor: ["id", "init"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier"),
    init: (0, _utils.validateType)("StringLiteral")
***REMOVED***
});
defineType("EnumDefaultedMember", ***REMOVED***
  aliases: ["EnumMember"],
  visitor: ["id"],
  fields: ***REMOVED***
    id: (0, _utils.validateType)("Identifier")
***REMOVED***
});
defineType("IndexedAccessType", ***REMOVED***
  visitor: ["objectType", "indexType"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    objectType: (0, _utils.validateType)("FlowType"),
    indexType: (0, _utils.validateType)("FlowType")
***REMOVED***
});
defineType("OptionalIndexedAccessType", ***REMOVED***
  visitor: ["objectType", "indexType"],
  aliases: ["FlowType"],
  fields: ***REMOVED***
    objectType: (0, _utils.validateType)("FlowType"),
    indexType: (0, _utils.validateType)("FlowType"),
    optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean"))
***REMOVED***
});

//# sourceMappingURL=flow.js.map
