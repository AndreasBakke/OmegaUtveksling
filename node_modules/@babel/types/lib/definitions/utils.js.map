***REMOVED***"version":3,"names":["VISITOR_KEYS","ALIAS_KEYS","FLIPPED_ALIAS_KEYS","NODE_FIELDS","BUILDER_KEYS","DEPRECATED_KEYS","NODE_PARENT_VALIDATIONS","getType","val","Array","isArray","validate","typeIs","typeName","assertNodeType","validateType","validateOptional","optional","validateOptionalType","arrayOf","elementType","chain","assertValueType","assertEach","arrayOfType","validateArrayOfType","callback","validator","node","key","i","length","subkey","v","process","env","BABEL_TYPES_8_BREAKING","validateChild","each","assertOneOf","values","indexOf","TypeError","JSON","stringify","oneOf","types","type","is","oneOfNodeTypes","assertNodeOrValueType","oneOfNodeOrValueTypes","valid","assertShape","shape","errors","property","Object","keys","validateField","error","push","message","join","shapeOf","assertOptionalChainStart","current","callee","object","fns","args","fn","chainOf","Error","validTypeOpts","validFieldKeys","store","defineAliasedType","aliases","opts","defined","inherits","slice","additional","filter","a","includes","unshift","defineType","fields","getOwnPropertyNames","field","def","default","visitor","builder","k","deprecatedAlias","concat","undefined","forEach","alias"],"sources":["../../src/definitions/utils.ts"],"sourcesContent":["import is from \"../validators/is\";\nimport ***REMOVED*** validateField, validateChild } from \"../validators/validate\";\nimport type * as t from \"..\";\n\nexport const VISITOR_KEYS: Record<string, string[]> = ***REMOVED***};\nexport const ALIAS_KEYS: Partial<Record<NodeTypesWithoutComment, string[]>> =\n  ***REMOVED***};\nexport const FLIPPED_ALIAS_KEYS: Record<string, NodeTypesWithoutComment[]> = ***REMOVED***};\nexport const NODE_FIELDS: Record<string, FieldDefinitions> = ***REMOVED***};\nexport const BUILDER_KEYS: Record<string, string[]> = ***REMOVED***};\nexport const DEPRECATED_KEYS: Record<string, NodeTypesWithoutComment> = ***REMOVED***};\nexport const NODE_PARENT_VALIDATIONS: Record<string, Validator> = ***REMOVED***};\n\nfunction getType(val: any) ***REMOVED***\n  if (Array.isArray(val)) ***REMOVED***\n    return \"array\";\n***REMOVED*** else if (val === null) ***REMOVED***\n    return \"null\";\n***REMOVED*** else ***REMOVED***\n    return typeof val;\n***REMOVED***\n}\n\ntype NodeTypesWithoutComment = t.Node[\"type\"] | keyof t.Aliases;\n\ntype NodeTypes = NodeTypesWithoutComment | t.Comment[\"type\"];\n\ntype PrimitiveTypes = ReturnType<typeof getType>;\n\ntype FieldDefinitions = ***REMOVED***\n  [x: string]: FieldOptions;\n};\n\ntype DefineTypeOpts = ***REMOVED***\n  fields?: FieldDefinitions;\n  visitor?: Array<string>;\n  aliases?: Array<string>;\n  builder?: Array<string>;\n  inherits?: NodeTypes;\n  deprecatedAlias?: string;\n  validate?: Validator;\n};\n\nexport type Validator = (\n  | ***REMOVED*** type: PrimitiveTypes }\n  | ***REMOVED*** each: Validator }\n  | ***REMOVED*** chainOf: Validator[] }\n  | ***REMOVED*** oneOf: any[] }\n  | ***REMOVED*** oneOfNodeTypes: NodeTypes[] }\n  | ***REMOVED*** oneOfNodeOrValueTypes: (NodeTypes | PrimitiveTypes)[] }\n  | ***REMOVED*** shapeOf: ***REMOVED*** [x: string]: FieldOptions } }\n  | ***REMOVED***}\n) &\n  ((node: t.Node, key: string, val: any) => void);\n\nexport type FieldOptions = ***REMOVED***\n  default?: string | number | boolean | [];\n  optional?: boolean;\n  validate?: Validator;\n};\n\nexport function validate(validate: Validator): FieldOptions ***REMOVED***\n  return ***REMOVED*** validate };\n}\n\nexport function typeIs(typeName: NodeTypes | NodeTypes[]) ***REMOVED***\n  return typeof typeName === \"string\"\n    ? assertNodeType(typeName)\n    : assertNodeType(...typeName);\n}\n\nexport function validateType(typeName: NodeTypes | NodeTypes[]) ***REMOVED***\n  return validate(typeIs(typeName));\n}\n\nexport function validateOptional(validate: Validator): FieldOptions ***REMOVED***\n  return ***REMOVED*** validate, optional: true };\n}\n\nexport function validateOptionalType(\n  typeName: NodeTypes | NodeTypes[],\n): FieldOptions ***REMOVED***\n  return ***REMOVED*** validate: typeIs(typeName), optional: true };\n}\n\nexport function arrayOf(elementType: Validator): Validator ***REMOVED***\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nexport function arrayOfType(typeName: NodeTypes | NodeTypes[]) ***REMOVED***\n  return arrayOf(typeIs(typeName));\n}\n\nexport function validateArrayOfType(typeName: NodeTypes | NodeTypes[]) ***REMOVED***\n  return validate(arrayOfType(typeName));\n}\n\nexport function assertEach(callback: Validator): Validator ***REMOVED***\n  function validator(node: t.Node, key: string, val: any) ***REMOVED***\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) ***REMOVED***\n      const subkey = `$***REMOVED***key}[$***REMOVED***i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) validateChild(node, subkey, v);\n  ***REMOVED***\n***REMOVED***\n  validator.each = callback;\n  return validator;\n}\n\nexport function assertOneOf(...values: Array<any>): Validator ***REMOVED***\n  function validate(node: any, key: string, val: any) ***REMOVED***\n    if (values.indexOf(val) < 0) ***REMOVED***\n      throw new TypeError(\n        `Property $***REMOVED***key} expected value to be one of $***REMOVED***JSON.stringify(\n          values,\n        )} but got $***REMOVED***JSON.stringify(val)}`,\n      );\n  ***REMOVED***\n***REMOVED***\n\n  validate.oneOf = values;\n\n  return validate;\n}\n\nexport function assertNodeType(...types: NodeTypes[]): Validator ***REMOVED***\n  function validate(node: t.Node, key: string, val: any) ***REMOVED***\n    for (const type of types) ***REMOVED***\n      if (is(type, val)) ***REMOVED***\n        validateChild(node, key, val);\n        return;\n    ***REMOVED***\n  ***REMOVED***\n\n    throw new TypeError(\n      `Property $***REMOVED***key} of $***REMOVED***\n        node.type\n    ***REMOVED*** expected node to be of a type $***REMOVED***JSON.stringify(\n        types,\n      )} but instead got $***REMOVED***JSON.stringify(val?.type)}`,\n    );\n***REMOVED***\n\n  validate.oneOfNodeTypes = types;\n\n  return validate;\n}\n\nexport function assertNodeOrValueType(\n  ...types: (NodeTypes | PrimitiveTypes)[]\n): Validator ***REMOVED***\n  function validate(node: t.Node, key: string, val: any) ***REMOVED***\n    for (const type of types) ***REMOVED***\n      if (getType(val) === type || is(type, val)) ***REMOVED***\n        validateChild(node, key, val);\n        return;\n    ***REMOVED***\n  ***REMOVED***\n\n    throw new TypeError(\n      `Property $***REMOVED***key} of $***REMOVED***\n        node.type\n    ***REMOVED*** expected node to be of a type $***REMOVED***JSON.stringify(\n        types,\n      )} but instead got $***REMOVED***JSON.stringify(val?.type)}`,\n    );\n***REMOVED***\n\n  validate.oneOfNodeOrValueTypes = types;\n\n  return validate;\n}\n\nexport function assertValueType(type: PrimitiveTypes): Validator ***REMOVED***\n  function validate(node: t.Node, key: string, val: any) ***REMOVED***\n    const valid = getType(val) === type;\n\n    if (!valid) ***REMOVED***\n      throw new TypeError(\n        `Property $***REMOVED***key} expected type of $***REMOVED***type} but got $***REMOVED***getType(val)}`,\n      );\n  ***REMOVED***\n***REMOVED***\n\n  validate.type = type;\n\n  return validate;\n}\n\nexport function assertShape(shape: ***REMOVED*** [x: string]: FieldOptions }): Validator ***REMOVED***\n  function validate(node: t.Node, key: string, val: any) ***REMOVED***\n    const errors = [];\n    for (const property of Object.keys(shape)) ***REMOVED***\n      try ***REMOVED***\n        validateField(node, property, val[property], shape[property]);\n    ***REMOVED*** catch (error) ***REMOVED***\n        if (error instanceof TypeError) ***REMOVED***\n          errors.push(error.message);\n          continue;\n      ***REMOVED***\n        throw error;\n    ***REMOVED***\n  ***REMOVED***\n    if (errors.length) ***REMOVED***\n      throw new TypeError(\n        `Property $***REMOVED***key} of $***REMOVED***\n          node.type\n      ***REMOVED*** expected to have the following:\\n$***REMOVED***errors.join(\"\\n\")}`,\n      );\n  ***REMOVED***\n***REMOVED***\n\n  validate.shapeOf = shape;\n\n  return validate;\n}\n\nexport function assertOptionalChainStart(): Validator ***REMOVED***\n  function validate(node: t.Node) ***REMOVED***\n    let current = node;\n    while (node) ***REMOVED***\n      const ***REMOVED*** type } = current;\n      if (type === \"OptionalCallExpression\") ***REMOVED***\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n    ***REMOVED***\n\n      if (type === \"OptionalMemberExpression\") ***REMOVED***\n        if (current.optional) return;\n        current = current.object;\n        continue;\n    ***REMOVED***\n\n      break;\n  ***REMOVED***\n\n    throw new TypeError(\n      `Non-optional $***REMOVED***node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from $***REMOVED***current?.type}`,\n    );\n***REMOVED***\n\n  return validate;\n}\n\nexport function chain(...fns: Array<Validator>): Validator ***REMOVED***\n  function validate(...args: Parameters<Validator>) ***REMOVED***\n    for (const fn of fns) ***REMOVED***\n      fn(...args);\n  ***REMOVED***\n***REMOVED***\n  validate.chainOf = fns;\n\n  if (\n    fns.length >= 2 &&\n    \"type\" in fns[0] &&\n    fns[0].type === \"array\" &&\n    !(\"each\" in fns[1])\n  ) ***REMOVED***\n    throw new Error(\n      `An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`,\n    );\n***REMOVED***\n\n  return validate;\n}\n\nconst validTypeOpts = [\n  \"aliases\",\n  \"builder\",\n  \"deprecatedAlias\",\n  \"fields\",\n  \"inherits\",\n  \"visitor\",\n  \"validate\",\n];\nconst validFieldKeys = [\"default\", \"optional\", \"validate\"];\n\nconst store = ***REMOVED***} as Record<string, DefineTypeOpts>;\n\n// Wraps defineType to ensure these aliases are included.\nexport function defineAliasedType(...aliases: string[]) ***REMOVED***\n  return (type: string, opts: DefineTypeOpts = ***REMOVED***}) => ***REMOVED***\n    let defined = opts.aliases;\n    if (!defined) ***REMOVED***\n      if (opts.inherits) defined = store[opts.inherits].aliases?.slice();\n      defined ??= [];\n      opts.aliases = defined;\n  ***REMOVED***\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    return defineType(type, opts);\n***REMOVED***;\n}\n\nexport default function defineType(type: string, opts: DefineTypeOpts = ***REMOVED***}) ***REMOVED***\n  const inherits = (opts.inherits && store[opts.inherits]) || ***REMOVED***};\n\n  let fields = opts.fields;\n  if (!fields) ***REMOVED***\n    fields = ***REMOVED***};\n    if (inherits.fields) ***REMOVED***\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) ***REMOVED***\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (\n          Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\"\n        ) ***REMOVED***\n          throw new Error(\n            \"field defaults can only be primitives or empty arrays currently\",\n          );\n      ***REMOVED***\n        fields[key] = ***REMOVED***\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          validate: field.validate,\n      ***REMOVED***;\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  const visitor: Array<string> = opts.visitor || inherits.visitor || [];\n  const aliases: Array<string> = opts.aliases || inherits.aliases || [];\n  const builder: Array<string> =\n    opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) ***REMOVED***\n    if (validTypeOpts.indexOf(k) === -1) ***REMOVED***\n      throw new Error(`Unknown type option \"$***REMOVED***k}\" on $***REMOVED***type}`);\n  ***REMOVED***\n***REMOVED***\n\n  if (opts.deprecatedAlias) ***REMOVED***\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type as NodeTypesWithoutComment;\n***REMOVED***\n\n  // ensure all field keys are represented in `fields`\n  for (const key of visitor.concat(builder)) ***REMOVED***\n    fields[key] = fields[key] || ***REMOVED***};\n***REMOVED***\n\n  for (const key of Object.keys(fields)) ***REMOVED***\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) ***REMOVED***\n      field.optional = true;\n  ***REMOVED***\n    if (field.default === undefined) ***REMOVED***\n      field.default = null;\n  ***REMOVED*** else if (!field.validate && field.default != null) ***REMOVED***\n      field.validate = assertValueType(getType(field.default));\n  ***REMOVED***\n\n    for (const k of Object.keys(field)) ***REMOVED***\n      if (validFieldKeys.indexOf(k) === -1) ***REMOVED***\n        throw new Error(`Unknown field key \"$***REMOVED***k}\" on $***REMOVED***type}.$***REMOVED***key}`);\n    ***REMOVED***\n  ***REMOVED***\n***REMOVED***\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type as NodeTypesWithoutComment] = opts.aliases = aliases;\n  aliases.forEach(alias => ***REMOVED***\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type as NodeTypesWithoutComment);\n***REMOVED***);\n\n  if (opts.validate) ***REMOVED***\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n***REMOVED***\n\n  store[type] = opts;\n}\n"],"mappings":"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"}