"use strict";

Object.defineProperty(exports, "__esModule", ***REMOVED***
  value: true
});
exports.default = removeTypeDuplicates;
var _generated = require("../../validators/generated");
function getQualifiedName(node) ***REMOVED***
  return (0, _generated.isIdentifier)(node) ? node.name : `$***REMOVED***node.id.name}.$***REMOVED***getQualifiedName(node.qualification)}`;
}

function removeTypeDuplicates(
nodes) ***REMOVED***
  const generics = new Map();
  const bases = new Map();

  const typeGroups = new Set();
  const types = [];
  for (let i = 0; i < nodes.length; i++) ***REMOVED***
    const node = nodes[i];
    if (!node) continue;

    if (types.indexOf(node) >= 0) ***REMOVED***
      continue;
  ***REMOVED***

    if ((0, _generated.isAnyTypeAnnotation)(node)) ***REMOVED***
      return [node];
  ***REMOVED***
    if ((0, _generated.isFlowBaseAnnotation)(node)) ***REMOVED***
      bases.set(node.type, node);
      continue;
  ***REMOVED***
    if ((0, _generated.isUnionTypeAnnotation)(node)) ***REMOVED***
      if (!typeGroups.has(node.types)) ***REMOVED***
        nodes = nodes.concat(node.types);
        typeGroups.add(node.types);
    ***REMOVED***
      continue;
  ***REMOVED***

    if ((0, _generated.isGenericTypeAnnotation)(node)) ***REMOVED***
      const name = getQualifiedName(node.id);
      if (generics.has(name)) ***REMOVED***
        let existing = generics.get(name);
        if (existing.typeParameters) ***REMOVED***
          if (node.typeParameters) ***REMOVED***
            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
        ***REMOVED***
      ***REMOVED*** else ***REMOVED***
          existing = node.typeParameters;
      ***REMOVED***
    ***REMOVED*** else ***REMOVED***
        generics.set(name, node);
    ***REMOVED***
      continue;
  ***REMOVED***
    types.push(node);
***REMOVED***

  for (const [, baseType] of bases) ***REMOVED***
    types.push(baseType);
***REMOVED***

  for (const [, genericName] of generics) ***REMOVED***
    types.push(genericName);
***REMOVED***
  return types;
}

//# sourceMappingURL=removeTypeDuplicates.js.map
