"use strict";
/**
 * Copyright (C) 2016-2019 Michael Kourlas
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
var error_1 = require("../error");
var validate_1 = require("../validate");
/**
 * Represents a processing instruction.
 *
 * A processing instruction is structured as follows, where `***REMOVED***target}` and
 * `***REMOVED***content}` are the target and content of the processing instruction
 * respectively:
 *
 * ```xml
 * <?***REMOVED***target} ***REMOVED***content}?>
 * ```
 */
var XmlProcInst = /** @class */ (function () ***REMOVED***
    function XmlProcInst(parent, validation, options) ***REMOVED***
        this._validation = validation;
        this._parent = parent;
        this.content = options.content;
        this.target = options.target;
  ***REMOVED***
    Object.defineProperty(XmlProcInst.prototype, "content", ***REMOVED***
        /**
         * Gets the content of this processing instruction.
         */
        get: function () ***REMOVED***
            return this._content;
      ***REMOVED***,
        /**
         * Sets the content of this processing instruction.
         */
        set: function (content) ***REMOVED***
            if (!(0, validate_1.isUndefined)(content)) ***REMOVED***
                if (this._validation && !(0, validate_1.validateChar)(content)) ***REMOVED***
                    throw new Error((0, error_1.getContext)(this.up()) + ": processing"
                        + (" instruction content \"" + content + "\" should")
                        + " not contain characters not allowed in XML");
              ***REMOVED***
                else if (this._validation && content.indexOf("?>") !== -1) ***REMOVED***
                    throw new Error((0, error_1.getContext)(this.up()) + ": processing"
                        + (" instruction content \"" + content + "\" should")
                        + " not contain the string '?>'");
              ***REMOVED***
          ***REMOVED***
            this._content = content;
      ***REMOVED***,
        enumerable: false,
        configurable: true
  ***REMOVED***);
    Object.defineProperty(XmlProcInst.prototype, "target", ***REMOVED***
        /**
         * Gets the target of this processing instruction.
         */
        get: function () ***REMOVED***
            return this._target;
      ***REMOVED***,
        /**
         * Sets the content of this processing instruction.
         */
        set: function (target) ***REMOVED***
            if (this._validation && !(0, validate_1.validateName)(target)) ***REMOVED***
                throw new Error((0, error_1.getContext)(this.up()) + ": processing"
                    + (" instruction target \"" + target + "\" should")
                    + " not contain characters not allowed in XML"
                    + " names");
          ***REMOVED***
            if (this._validation && target === "xml") ***REMOVED***
                throw new Error((0, error_1.getContext)(this.up()) + ": processing"
                    + (" instruction target \"" + target + "\" should")
                    + " not be the string 'xml'");
          ***REMOVED***
            this._target = target;
      ***REMOVED***,
        enumerable: false,
        configurable: true
  ***REMOVED***);
    /**
     * Returns an XML string representation of this processing instruction.
     */
    XmlProcInst.prototype.toString = function () ***REMOVED***
        if ((0, validate_1.isUndefined)(this._content)) ***REMOVED***
            return "<?" + this._target + "?>";
      ***REMOVED***
        else ***REMOVED***
            return "<?" + this._target + " " + this._content + "?>";
      ***REMOVED***
  ***REMOVED***;
    /**
     * Returns the parent of this processing instruction.
     */
    XmlProcInst.prototype.up = function () ***REMOVED***
        return this._parent;
  ***REMOVED***;
    return XmlProcInst;
}());
exports.default = XmlProcInst;
