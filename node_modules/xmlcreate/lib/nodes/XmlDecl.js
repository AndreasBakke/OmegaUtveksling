"use strict";
/**
 * Copyright (C) 2016-2019 Michael Kourlas
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
var error_1 = require("../error");
var options_1 = require("../options");
var validate_1 = require("../validate");
/**
 * Represents a declaration.
 *
 * A declaration is structured as follows, where `***REMOVED***version}` is the XML
 * version, `***REMOVED***encoding}` is the encoding of the document, and `***REMOVED***standalone}`
 * is either "yes" or "no", depending on whether the document may contain
 * external markup declarations:
 *
 * ```xml
 * <?xml version="***REMOVED***version}" encoding="***REMOVED***encoding}" standalone="***REMOVED***standalone}"?>
 * ```
 */
var XmlDecl = /** @class */ (function () ***REMOVED***
    function XmlDecl(parent, validation, options) ***REMOVED***
        this._version = "1.0";
        this._validation = validation;
        this._parent = parent;
        this.encoding = options.encoding;
        this.standalone = options.standalone;
        if (!(0, validate_1.isUndefined)(options.version)) ***REMOVED***
            this.version = options.version;
      ***REMOVED***
  ***REMOVED***
    Object.defineProperty(XmlDecl.prototype, "encoding", ***REMOVED***
        /**
         * Gets the encoding associated with this declaration.
         */
        get: function () ***REMOVED***
            return this._encoding;
      ***REMOVED***,
        /**
         * Sets the encoding associated with this declaration.
         */
        set: function (encoding) ***REMOVED***
            if (this._validation && !(0, validate_1.isUndefined)(encoding)) ***REMOVED***
                if (!validateEncoding(encoding)) ***REMOVED***
                    throw new Error((0, error_1.getContext)(this.up()) + ": declaration"
                        + (" encoding attribute " + encoding + " should be a")
                        + " valid encoding");
              ***REMOVED***
          ***REMOVED***
            this._encoding = encoding;
      ***REMOVED***,
        enumerable: false,
        configurable: true
  ***REMOVED***);
    Object.defineProperty(XmlDecl.prototype, "standalone", ***REMOVED***
        /**
         * Gets the value of the standalone attribute associated with this
         * declaration.
         */
        get: function () ***REMOVED***
            return this._standalone;
      ***REMOVED***,
        /**
         * Sets the value of the standalone attribute associated with this
         * declaration.
         */
        set: function (standalone) ***REMOVED***
            if (this._validation && !(0, validate_1.isUndefined)(standalone)) ***REMOVED***
                if (standalone !== "yes" && standalone !== "no") ***REMOVED***
                    throw new Error((0, error_1.getContext)(this.up()) + ": declaration"
                        + (" standalone attribute " + standalone + " should")
                        + " be the string 'yes' or the string 'no'");
              ***REMOVED***
          ***REMOVED***
            this._standalone = standalone;
      ***REMOVED***,
        enumerable: false,
        configurable: true
  ***REMOVED***);
    Object.defineProperty(XmlDecl.prototype, "version", ***REMOVED***
        /**
         * Gets the XML version associated with this declaration.
         */
        get: function () ***REMOVED***
            return this._version;
      ***REMOVED***,
        /**
         * Sets the XML version associated with this declaration.
         */
        set: function (version) ***REMOVED***
            if (this._validation && !validateVersion(version)) ***REMOVED***
                throw new Error((0, error_1.getContext)(this.up()) + ": declaration version"
                    + (" attribute " + version + " should be a valid XML")
                    + " version");
          ***REMOVED***
            this._version = version;
      ***REMOVED***,
        enumerable: false,
        configurable: true
  ***REMOVED***);
    /**
     * Returns an XML string representation of this declaration.
     */
    XmlDecl.prototype.toString = function (options) ***REMOVED***
        if (options === void 0) ***REMOVED*** options = ***REMOVED***}; }
        var optionsObj = new options_1.StringOptions(options);
        var quote = optionsObj.doubleQuotes ? '"' : "'";
        var str = "<?xml version=" + quote + this._version + quote;
        if (!(0, validate_1.isUndefined)(this._encoding)) ***REMOVED***
            str += " encoding=" + quote + this._encoding + quote;
      ***REMOVED***
        if (!(0, validate_1.isUndefined)(this._standalone)) ***REMOVED***
            str += " standalone=" + quote + this._standalone + quote;
      ***REMOVED***
        str += "?>";
        return str;
  ***REMOVED***;
    /**
     * Returns the parent of this declaration.
     */
    XmlDecl.prototype.up = function () ***REMOVED***
        return this._parent;
  ***REMOVED***;
    return XmlDecl;
}());
exports.default = XmlDecl;
/**
 * Returns true if the specified encoding only contains characters permitted by
 * the XML specification.
 */
function validateEncoding(str) ***REMOVED***
    if (str.length === 0) ***REMOVED***
        return false;
  ***REMOVED***
    var initialChar = str.charCodeAt(0);
    if (!((initialChar >= 0x41 && initialChar <= 0x5A)
        || (initialChar >= 0x61 && initialChar <= 0x7A))) ***REMOVED***
        return false;
  ***REMOVED***
    for (var i = 1; i < str.length; i++) ***REMOVED***
        var char = str.charCodeAt(i);
        if (char === 0x5F
            || char === 0x2D
            || char === 0x2E
            || (char >= 0x30 && char <= 0x39)
            || (char >= 0x41 && char <= 0x5A)
            || (char >= 0x61 && char <= 0x7A)) ***REMOVED***
            continue;
      ***REMOVED***
        if (i + 1 === str.length) ***REMOVED***
            return false;
      ***REMOVED***
        return false;
  ***REMOVED***
    return true;
}
/**
 * Returns true if the specified version only contains characters permitted by
 * the XML specification.
 */
function validateVersion(str) ***REMOVED***
    for (var i = 0; i <= 9; i++) ***REMOVED***
        if (str === "1." + i) ***REMOVED***
            return true;
      ***REMOVED***
  ***REMOVED***
    return false;
}
