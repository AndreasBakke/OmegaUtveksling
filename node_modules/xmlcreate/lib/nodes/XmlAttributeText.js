"use strict";
/**
 * Copyright (C) 2016-2019 Michael Kourlas
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
var error_1 = require("../error");
var escape_1 = require("../escape");
var validate_1 = require("../validate");
/**
 * Represents text in an attribute value.
 *
 * Restricted characters, such as the ampersand (`&`) and the opening angle
 * bracket (`<`), are all automatically escaped.
 */
var XmlAttributeText = /** @class */ (function () ***REMOVED***
    function XmlAttributeText(parent, validation, options) ***REMOVED***
        this._validation = validation;
        if (!(0, validate_1.isUndefined)(options.replaceInvalidCharsInCharData)) ***REMOVED***
            this._replaceInvalidCharsInCharData = (options.replaceInvalidCharsInCharData);
      ***REMOVED***
        else ***REMOVED***
            this._replaceInvalidCharsInCharData = false;
      ***REMOVED***
        this._parent = parent;
        this.charData = options.charData;
  ***REMOVED***
    Object.defineProperty(XmlAttributeText.prototype, "charData", ***REMOVED***
        /**
         * Gets this attribute text.
         */
        get: function () ***REMOVED***
            return this._charData;
      ***REMOVED***,
        /**
         * Sets this attribute text.
         */
        set: function (charData) ***REMOVED***
            if (this._replaceInvalidCharsInCharData) ***REMOVED***
                charData = (0, validate_1.fixChar)(charData);
          ***REMOVED***
            else if (this._validation && !(0, validate_1.validateChar)(charData)) ***REMOVED***
                throw new Error((0, error_1.getContext)(this.up()) + ": attribute text"
                    + (" \"" + charData + "\" should not contain characters not")
                    + " allowed in XML");
          ***REMOVED***
            this._charData = charData;
      ***REMOVED***,
        enumerable: false,
        configurable: true
  ***REMOVED***);
    /**
     * Returns an XML string representation of this attribute text.
     */
    XmlAttributeText.prototype.toString = function () ***REMOVED***
        var str = this._charData;
        str = (0, escape_1.escapeAmpersands)(str);
        str = (0, escape_1.escapeLeftAngleBrackets)(str);
        return str;
  ***REMOVED***;
    /**
     * Returns the parent of this attribute text.
     */
    XmlAttributeText.prototype.up = function () ***REMOVED***
        return this._parent;
  ***REMOVED***;
    return XmlAttributeText;
}());
exports.default = XmlAttributeText;
