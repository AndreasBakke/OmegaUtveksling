const Encodings = require('./encodings');
const ***REMOVED*** UTF8Decoder, UTF8Encoder } = require('./implementations/utf8');
const ***REMOVED*** UTF16Decoder, UTF16Encoder } = require('./implementations/utf16');
const ***REMOVED*** GB18030Decoder, GB18030Encoder } = require('./implementations/gb18030');
const ***REMOVED*** Big5Decoder, Big5Encoder } = require('./implementations/big5');
const ***REMOVED*** EUCJPDecoder, EUCJPEncoder } = require('./implementations/euc-jp');
const ***REMOVED*** EUCKRDecoder, EUCKREncoder } = require('./implementations/euc-kr');
const ***REMOVED*** ISO2022JPDecoder, ISO2022JPEncoder } = require('./implementations/iso-2022-jp');
const ***REMOVED*** XUserDefinedDecoder, XUserDefinedEncoder } = require('./implementations/x-user-defined');
const ***REMOVED*** ShiftJISDecoder, ShiftJISEncoder } = require('./implementations/shift-jis');
const ***REMOVED*** SingleByteDecoder, SingleByteEncoder } = require('./implementations/single-byte');
const index = require('./indexes');;

// 5.2 Names and labels

// TODO: Define @typedef for Encoding: ***REMOVED***name:string,labels:Array.<string>}
// https://github.com/google/closure-compiler/issues/247


// Label to encoding registry.
/** @type ***REMOVED***Object.<string,***REMOVED***name:string,labels:Array.<string>}>} */
const label_to_encoding = ***REMOVED***}
Encodings.forEach((***REMOVED*** encodings }) => ***REMOVED***
  encodings.forEach((encoding) => ***REMOVED***
    encoding.labels.forEach((label) => ***REMOVED***
      label_to_encoding[label] = encoding
  ***REMOVED***)
***REMOVED***)
})

// Registry of of encoder/decoder factories, by encoding name.
const encoders = ***REMOVED***
  'UTF-8'() ***REMOVED*** // 9.1 utf-8
    return new UTF8Encoder()
***REMOVED***,
  'GBK'(options) ***REMOVED*** // 11.1.2 gbk encoder;
    // gbk's encoder is gb18030's encoder with its gbk flag set.
    return new GB18030Encoder(options, true)
***REMOVED***,
  'gb18030'() ***REMOVED***
    return new GB18030Encoder()
***REMOVED***,
  'Big5'() ***REMOVED***
    return new Big5Encoder()
***REMOVED***,
  'EUC-JP'() ***REMOVED***
    return new EUCJPEncoder()
***REMOVED***,
  'EUC-KR'() ***REMOVED***
    return new EUCKREncoder()
***REMOVED***,
  'ISO-2022-JP'() ***REMOVED***
    return new ISO2022JPEncoder()
***REMOVED***,
  'UTF-16BE'() ***REMOVED*** // 15.3 utf-16be
    return new UTF16Encoder(true)
***REMOVED***,
  'UTF-16LE'() ***REMOVED*** // 15.4 utf-16le
    return new UTF16Encoder()
***REMOVED***,
  'x-user-defined'() ***REMOVED***
    return new XUserDefinedEncoder()
***REMOVED***,
  'Shift_JIS'() ***REMOVED***
    return new ShiftJISEncoder()
***REMOVED***,
}

/** @type ***REMOVED***Object.<string, function(***REMOVED***fatal:boolean}): Decoder>} */
const decoders = ***REMOVED***
  'UTF-8'(options) ***REMOVED*** // 9.1.1 utf-8 decoder
    return new UTF8Decoder(options)
***REMOVED***,
  'GBK'(options) ***REMOVED*** // 11.1.1 gbk decoder;  gbk's decoder is gb18030's decoder.
    return new GB18030Decoder(options)
***REMOVED***,
  'gb18030'(options) ***REMOVED***
    return new GB18030Decoder(options)
***REMOVED***,
  'Big5'(options) ***REMOVED***
    return new Big5Decoder(options)
***REMOVED***,
  'EUC-JP'(options) ***REMOVED***
    return new EUCJPDecoder(options)
***REMOVED***,
  'EUC-KR'(options) ***REMOVED***
    return new EUCKRDecoder(options)
***REMOVED***,
  'ISO-2022-JP'(options) ***REMOVED***
    return new ISO2022JPDecoder(options)
***REMOVED***,
  'UTF-16BE'(options) ***REMOVED*** // 15.3.1 utf-16be decoder
    return new UTF16Decoder(true, options)
***REMOVED***,
  'UTF-16LE'(options) ***REMOVED*** // 15.4.1 utf-16le decoder
    return new UTF16Decoder(false, options)
***REMOVED***,
  'x-user-defined'() ***REMOVED***
    return new XUserDefinedDecoder()
***REMOVED***,
  'Shift_JIS'(options) ***REMOVED***
    return new ShiftJISDecoder(options)
***REMOVED***,
}

Encodings.forEach((***REMOVED*** heading, encodings }) => ***REMOVED***
  if (heading != 'Legacy single-byte encodings')
    return
  encodings.forEach((encoding) => ***REMOVED***
    const name = encoding.name
    const idx = index(name.toLowerCase())
    decoders[name] = (options) => ***REMOVED***
      return new SingleByteDecoder(idx, options)
  ***REMOVED***
    encoders[name] = (options) => ***REMOVED***
      return new SingleByteEncoder(idx, options)
  ***REMOVED***
***REMOVED***)
})

module.exports.label_to_encoding = label_to_encoding
module.exports.encoders = encoders
module.exports.decoders = decoders