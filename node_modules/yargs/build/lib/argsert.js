import ***REMOVED*** YError } from './yerror.js';
import ***REMOVED*** parseCommand } from './parse-command.js';
const positionName = ['first', 'second', 'third', 'fourth', 'fifth', 'sixth'];
export function argsert(arg1, arg2, arg3) ***REMOVED***
    function parseArgs() ***REMOVED***
        return typeof arg1 === 'object'
            ? [***REMOVED*** demanded: [], optional: [] }, arg1, arg2]
            : [
                parseCommand(`cmd $***REMOVED***arg1}`),
                arg2,
                arg3,
            ];
  ***REMOVED***
    try ***REMOVED***
        let position = 0;
        const [parsed, callerArguments, _length] = parseArgs();
        const args = [].slice.call(callerArguments);
        while (args.length && args[args.length - 1] === undefined)
            args.pop();
        const length = _length || args.length;
        if (length < parsed.demanded.length) ***REMOVED***
            throw new YError(`Not enough arguments provided. Expected $***REMOVED***parsed.demanded.length} but received $***REMOVED***args.length}.`);
      ***REMOVED***
        const totalCommands = parsed.demanded.length + parsed.optional.length;
        if (length > totalCommands) ***REMOVED***
            throw new YError(`Too many arguments provided. Expected max $***REMOVED***totalCommands} but received $***REMOVED***length}.`);
      ***REMOVED***
        parsed.demanded.forEach(demanded => ***REMOVED***
            const arg = args.shift();
            const observedType = guessType(arg);
            const matchingTypes = demanded.cmd.filter(type => type === observedType || type === '*');
            if (matchingTypes.length === 0)
                argumentTypeError(observedType, demanded.cmd, position);
            position += 1;
      ***REMOVED***);
        parsed.optional.forEach(optional => ***REMOVED***
            if (args.length === 0)
                return;
            const arg = args.shift();
            const observedType = guessType(arg);
            const matchingTypes = optional.cmd.filter(type => type === observedType || type === '*');
            if (matchingTypes.length === 0)
                argumentTypeError(observedType, optional.cmd, position);
            position += 1;
      ***REMOVED***);
  ***REMOVED***
    catch (err) ***REMOVED***
        console.warn(err.stack);
  ***REMOVED***
}
function guessType(arg) ***REMOVED***
    if (Array.isArray(arg)) ***REMOVED***
        return 'array';
  ***REMOVED***
    else if (arg === null) ***REMOVED***
        return 'null';
  ***REMOVED***
    return typeof arg;
}
function argumentTypeError(observedType, allowedTypes, position) ***REMOVED***
    throw new YError(`Invalid $***REMOVED***positionName[position] || 'manyith'} argument. Expected $***REMOVED***allowedTypes.join(' or ')} but received $***REMOVED***observedType}.`);
}
