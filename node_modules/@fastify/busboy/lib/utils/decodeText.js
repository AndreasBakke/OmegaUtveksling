'use strict'

let TextDecoder
try ***REMOVED***
  TextDecoder = require('util').TextDecoder
} catch (e) ***REMOVED*** }

const ***REMOVED*** TextDecoder: PolyfillTextDecoder, getEncoding } = require('text-decoding')

// Node has always utf-8
const textDecoders = new Map()
if (TextDecoder) ***REMOVED***
  textDecoders.set('utf-8', new TextDecoder('utf-8'))
} else ***REMOVED***
  textDecoders.set('utf-8', new PolyfillTextDecoder('utf-8'))
}
textDecoders.set('utf8', textDecoders.get('utf-8'))

function decodeText (text, textEncoding, destEncoding) ***REMOVED***
  if (text) ***REMOVED***
    if (textDecoders.has(destEncoding)) ***REMOVED***
      try ***REMOVED***
        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))
    ***REMOVED*** catch (e) ***REMOVED*** }
  ***REMOVED*** else ***REMOVED***
      try ***REMOVED***
        textDecoders.set(destEncoding, new TextDecoder(destEncoding))
        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))
    ***REMOVED*** catch (e) ***REMOVED***
        if (getEncoding(destEncoding)) ***REMOVED***
          try ***REMOVED***
            textDecoders.set(destEncoding, new PolyfillTextDecoder(destEncoding))
            return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))
        ***REMOVED*** catch (e) ***REMOVED*** }
      ***REMOVED***
    ***REMOVED***
  ***REMOVED***
***REMOVED***
  return text
}

function decodeTextPolyfill (text, textEncoding, destEncoding) ***REMOVED***
  if (text) ***REMOVED***
    if (textDecoders.has(destEncoding)) ***REMOVED***
      try ***REMOVED***
        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))
    ***REMOVED*** catch (e) ***REMOVED*** }
  ***REMOVED*** else ***REMOVED***
      if (getEncoding(destEncoding)) ***REMOVED***
        try ***REMOVED***
          textDecoders.set(destEncoding, new PolyfillTextDecoder(destEncoding))
          return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))
      ***REMOVED*** catch (e) ***REMOVED*** }
    ***REMOVED***
  ***REMOVED***
***REMOVED***
  return text
}

module.exports = TextDecoder ? decodeText : decodeTextPolyfill
