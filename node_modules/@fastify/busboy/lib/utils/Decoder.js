'use strict'

const RE_PLUS = /\+/g

const HEX = [
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
]

function Decoder () ***REMOVED***
  this.buffer = undefined
}
Decoder.prototype.write = function (str) ***REMOVED***
  // Replace '+' with ' ' before decoding
  str = str.replace(RE_PLUS, ' ')
  let res = ''
  let i = 0; let p = 0; const len = str.length
  for (; i < len; ++i) ***REMOVED***
    if (this.buffer !== undefined) ***REMOVED***
      if (!HEX[str.charCodeAt(i)]) ***REMOVED***
        res += '%' + this.buffer
        this.buffer = undefined
        --i // retry character
    ***REMOVED*** else ***REMOVED***
        this.buffer += str[i]
        ++p
        if (this.buffer.length === 2) ***REMOVED***
          res += String.fromCharCode(parseInt(this.buffer, 16))
          this.buffer = undefined
      ***REMOVED***
    ***REMOVED***
  ***REMOVED*** else if (str[i] === '%') ***REMOVED***
      if (i > p) ***REMOVED***
        res += str.substring(p, i)
        p = i
    ***REMOVED***
      this.buffer = ''
      ++p
  ***REMOVED***
***REMOVED***
  if (p < len && this.buffer === undefined) ***REMOVED*** res += str.substring(p) }
  return res
}
Decoder.prototype.reset = function () ***REMOVED***
  this.buffer = undefined
}

module.exports = Decoder
