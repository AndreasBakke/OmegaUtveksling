'use strict'

const decodeText = require('./decodeText')

const RE_ENCODED = /%([a-fA-F0-9]***REMOVED***2})/g

function encodedReplacer (match, byte) ***REMOVED***
  return String.fromCharCode(parseInt(byte, 16))
}

function parseParams (str) ***REMOVED***
  const res = []
  let state = 'key'
  let charset = ''
  let inquote = false
  let escaping = false
  let p = 0
  let tmp = ''

  for (var i = 0, len = str.length; i < len; ++i) ***REMOVED*** // eslint-disable-line no-var
    const char = str[i]
    if (char === '\\' && inquote) ***REMOVED***
      if (escaping) ***REMOVED*** escaping = false } else ***REMOVED***
        escaping = true
        continue
    ***REMOVED***
  ***REMOVED*** else if (char === '"') ***REMOVED***
      if (!escaping) ***REMOVED***
        if (inquote) ***REMOVED***
          inquote = false
          state = 'key'
      ***REMOVED*** else ***REMOVED*** inquote = true }
        continue
    ***REMOVED*** else ***REMOVED*** escaping = false }
  ***REMOVED*** else ***REMOVED***
      if (escaping && inquote) ***REMOVED*** tmp += '\\' }
      escaping = false
      if ((state === 'charset' || state === 'lang') && char === "'") ***REMOVED***
        if (state === 'charset') ***REMOVED***
          state = 'lang'
          charset = tmp.substring(1)
      ***REMOVED*** else ***REMOVED*** state = 'value' }
        tmp = ''
        continue
    ***REMOVED*** else if (state === 'key' &&
        (char === '*' || char === '=') &&
        res.length) ***REMOVED***
        if (char === '*') ***REMOVED*** state = 'charset' } else ***REMOVED*** state = 'value' }
        res[p] = [tmp, undefined]
        tmp = ''
        continue
    ***REMOVED*** else if (!inquote && char === ';') ***REMOVED***
        state = 'key'
        if (charset) ***REMOVED***
          if (tmp.length) ***REMOVED***
            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),
              'binary',
              charset)
        ***REMOVED***
          charset = ''
      ***REMOVED*** else if (tmp.length) ***REMOVED***
          tmp = decodeText(tmp, 'binary', 'utf8')
      ***REMOVED***
        if (res[p] === undefined) ***REMOVED*** res[p] = tmp } else ***REMOVED*** res[p][1] = tmp }
        tmp = ''
        ++p
        continue
    ***REMOVED*** else if (!inquote && (char === ' ' || char === '\t')) ***REMOVED*** continue }
  ***REMOVED***
    tmp += char
***REMOVED***
  if (charset && tmp.length) ***REMOVED***
    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),
      'binary',
      charset)
***REMOVED*** else if (tmp) ***REMOVED***
    tmp = decodeText(tmp, 'binary', 'utf8')
***REMOVED***

  if (res[p] === undefined) ***REMOVED***
    if (tmp) ***REMOVED*** res[p] = tmp }
***REMOVED*** else ***REMOVED*** res[p][1] = tmp }

  return res
}

module.exports = parseParams
