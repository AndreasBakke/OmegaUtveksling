/* @preserve
 * The MIT License (MIT)
 * 
 * Copyright (c) 2013-2018 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
/**
 * bluebird build version 3.7.2
 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, using, timers, filter, any, each
*/
!function(e)***REMOVED***if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else***REMOVED***var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Promise=e()}}(function()***REMOVED***var define,module,exports;return (function e(t,n,r)***REMOVED***function s(o,u)***REMOVED***if(!n[o])***REMOVED***if(!t[o])***REMOVED***var a=typeof _dereq_=="function"&&_dereq_;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]=***REMOVED***exports:***REMOVED***}};t[o][0].call(l.exports,function(e)***REMOVED***var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof _dereq_=="function"&&_dereq_;for(var o=0;o<r.length;o++)s(r[o]);return s})(***REMOVED***1:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise) ***REMOVED***
var SomePromiseArray = Promise._SomePromiseArray;
function any(promises) ***REMOVED***
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(1);
    ret.setUnwrap();
    ret.init();
    return promise;
}

Promise.any = function (promises) ***REMOVED***
    return any(promises);
};

Promise.prototype.any = function () ***REMOVED***
    return any(this);
};

};

},***REMOVED***}],2:[function(_dereq_,module,exports)***REMOVED***
"use strict";
var firstLineError;
try ***REMOVED***throw new Error(); } catch (e) ***REMOVED***firstLineError = e;}
var schedule = _dereq_("./schedule");
var Queue = _dereq_("./queue");

function Async() ***REMOVED***
    this._customScheduler = false;
    this._isTickUsed = false;
    this._lateQueue = new Queue(16);
    this._normalQueue = new Queue(16);
    this._haveDrainedQueues = false;
    var self = this;
    this.drainQueues = function () ***REMOVED***
        self._drainQueues();
  ***REMOVED***;
    this._schedule = schedule;
}

Async.prototype.setScheduler = function(fn) ***REMOVED***
    var prev = this._schedule;
    this._schedule = fn;
    this._customScheduler = true;
    return prev;
};

Async.prototype.hasCustomScheduler = function() ***REMOVED***
    return this._customScheduler;
};

Async.prototype.haveItemsQueued = function () ***REMOVED***
    return this._isTickUsed || this._haveDrainedQueues;
};


Async.prototype.fatalError = function(e, isNode) ***REMOVED***
    if (isNode) ***REMOVED***
        process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
            "\n");
        process.exit(2);
  ***REMOVED*** else ***REMOVED***
        this.throwLater(e);
  ***REMOVED***
};

Async.prototype.throwLater = function(fn, arg) ***REMOVED***
    if (arguments.length === 1) ***REMOVED***
        arg = fn;
        fn = function () ***REMOVED*** throw arg; };
  ***REMOVED***
    if (typeof setTimeout !== "undefined") ***REMOVED***
        setTimeout(function() ***REMOVED***
            fn(arg);
      ***REMOVED***, 0);
  ***REMOVED*** else try ***REMOVED***
        this._schedule(function() ***REMOVED***
            fn(arg);
      ***REMOVED***);
  ***REMOVED*** catch (e) ***REMOVED***
        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED***
};

function AsyncInvokeLater(fn, receiver, arg) ***REMOVED***
    this._lateQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncInvoke(fn, receiver, arg) ***REMOVED***
    this._normalQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncSettlePromises(promise) ***REMOVED***
    this._normalQueue._pushOne(promise);
    this._queueTick();
}

Async.prototype.invokeLater = AsyncInvokeLater;
Async.prototype.invoke = AsyncInvoke;
Async.prototype.settlePromises = AsyncSettlePromises;


function _drainQueue(queue) ***REMOVED***
    while (queue.length() > 0) ***REMOVED***
        _drainQueueStep(queue);
  ***REMOVED***
}

function _drainQueueStep(queue) ***REMOVED***
    var fn = queue.shift();
    if (typeof fn !== "function") ***REMOVED***
        fn._settlePromises();
  ***REMOVED*** else ***REMOVED***
        var receiver = queue.shift();
        var arg = queue.shift();
        fn.call(receiver, arg);
  ***REMOVED***
}

Async.prototype._drainQueues = function () ***REMOVED***
    _drainQueue(this._normalQueue);
    this._reset();
    this._haveDrainedQueues = true;
    _drainQueue(this._lateQueue);
};

Async.prototype._queueTick = function () ***REMOVED***
    if (!this._isTickUsed) ***REMOVED***
        this._isTickUsed = true;
        this._schedule(this.drainQueues);
  ***REMOVED***
};

Async.prototype._reset = function () ***REMOVED***
    this._isTickUsed = false;
};

module.exports = Async;
module.exports.firstLineError = firstLineError;

},***REMOVED***"./queue":26,"./schedule":29}],3:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise, debug) ***REMOVED***
var calledBind = false;
var rejectThis = function(_, e) ***REMOVED***
    this._reject(e);
};

var targetRejected = function(e, context) ***REMOVED***
    context.promiseRejectionQueued = true;
    context.bindingPromise._then(rejectThis, rejectThis, null, this, e);
};

var bindingResolved = function(thisArg, context) ***REMOVED***
    if (((this._bitField & 50397184) === 0)) ***REMOVED***
        this._resolveCallback(context.target);
  ***REMOVED***
};

var bindingRejected = function(e, context) ***REMOVED***
    if (!context.promiseRejectionQueued) this._reject(e);
};

Promise.prototype.bind = function (thisArg) ***REMOVED***
    if (!calledBind) ***REMOVED***
        calledBind = true;
        Promise.prototype._propagateFrom = debug.propagateFromFunction();
        Promise.prototype._boundValue = debug.boundValueFunction();
  ***REMOVED***
    var maybePromise = tryConvertToPromise(thisArg);
    var ret = new Promise(INTERNAL);
    ret._propagateFrom(this, 1);
    var target = this._target();
    ret._setBoundTo(maybePromise);
    if (maybePromise instanceof Promise) ***REMOVED***
        var context = ***REMOVED***
            promiseRejectionQueued: false,
            promise: ret,
            target: target,
            bindingPromise: maybePromise
      ***REMOVED***;
        target._then(INTERNAL, targetRejected, undefined, ret, context);
        maybePromise._then(
            bindingResolved, bindingRejected, undefined, ret, context);
        ret._setOnCancel(maybePromise);
  ***REMOVED*** else ***REMOVED***
        ret._resolveCallback(target);
  ***REMOVED***
    return ret;
};

Promise.prototype._setBoundTo = function (obj) ***REMOVED***
    if (obj !== undefined) ***REMOVED***
        this._bitField = this._bitField | 2097152;
        this._boundTo = obj;
  ***REMOVED*** else ***REMOVED***
        this._bitField = this._bitField & (~2097152);
  ***REMOVED***
};

Promise.prototype._isBound = function () ***REMOVED***
    return (this._bitField & 2097152) === 2097152;
};

Promise.bind = function (thisArg, value) ***REMOVED***
    return Promise.resolve(value).bind(thisArg);
};
};

},***REMOVED***}],4:[function(_dereq_,module,exports)***REMOVED***
"use strict";
var old;
if (typeof Promise !== "undefined") old = Promise;
function noConflict() ***REMOVED***
    try ***REMOVED*** if (Promise === bluebird) Promise = old; }
    catch (e) ***REMOVED***}
    return bluebird;
}
var bluebird = _dereq_("./promise")();
bluebird.noConflict = noConflict;
module.exports = bluebird;

},***REMOVED***"./promise":22}],5:[function(_dereq_,module,exports)***REMOVED***
"use strict";
var cr = Object.create;
if (cr) ***REMOVED***
    var callerCache = cr(null);
    var getterCache = cr(null);
    callerCache[" size"] = getterCache[" size"] = 0;
}

module.exports = function(Promise) ***REMOVED***
var util = _dereq_("./util");
var canEvaluate = util.canEvaluate;
var isIdentifier = util.isIdentifier;

var getMethodCaller;
var getGetter;
if (!true) ***REMOVED***
var makeMethodCaller = function (methodName) ***REMOVED***
    return new Function("ensureMethod", "                                    \n\
        return function(obj) ***REMOVED***                                               \n\
            'use strict'                                                     \n\
            var len = this.length;                                           \n\
            ensureMethod(obj, 'methodName');                                 \n\
            switch(len) ***REMOVED***                                                    \n\
                case 1: return obj.methodName(this[0]);                      \n\
                case 2: return obj.methodName(this[0], this[1]);             \n\
                case 3: return obj.methodName(this[0], this[1], this[2]);    \n\
                case 0: return obj.methodName();                             \n\
                default:                                                     \n\
                    return obj.methodName.apply(obj, this);                  \n\
          ***REMOVED***                                                                \n\
      ***REMOVED***;                                                                   \n\
        ".replace(/methodName/g, methodName))(ensureMethod);
};

var makeGetter = function (propertyName) ***REMOVED***
    return new Function("obj", "                                             \n\
        'use strict';                                                        \n\
        return obj.propertyName;                                             \n\
        ".replace("propertyName", propertyName));
};

var getCompiled = function(name, compiler, cache) ***REMOVED***
    var ret = cache[name];
    if (typeof ret !== "function") ***REMOVED***
        if (!isIdentifier(name)) ***REMOVED***
            return null;
      ***REMOVED***
        ret = compiler(name);
        cache[name] = ret;
        cache[" size"]++;
        if (cache[" size"] > 512) ***REMOVED***
            var keys = Object.keys(cache);
            for (var i = 0; i < 256; ++i) delete cache[keys[i]];
            cache[" size"] = keys.length - 256;
      ***REMOVED***
  ***REMOVED***
    return ret;
};

getMethodCaller = function(name) ***REMOVED***
    return getCompiled(name, makeMethodCaller, callerCache);
};

getGetter = function(name) ***REMOVED***
    return getCompiled(name, makeGetter, getterCache);
};
}

function ensureMethod(obj, methodName) ***REMOVED***
    var fn;
    if (obj != null) fn = obj[methodName];
    if (typeof fn !== "function") ***REMOVED***
        var message = "Object " + util.classString(obj) + " has no method '" +
            util.toString(methodName) + "'";
        throw new Promise.TypeError(message);
  ***REMOVED***
    return fn;
}

function caller(obj) ***REMOVED***
    var methodName = this.pop();
    var fn = ensureMethod(obj, methodName);
    return fn.apply(obj, this);
}
Promise.prototype.call = function (methodName) ***REMOVED***
    var args = [].slice.call(arguments, 1);;
    if (!true) ***REMOVED***
        if (canEvaluate) ***REMOVED***
            var maybeCaller = getMethodCaller(methodName);
            if (maybeCaller !== null) ***REMOVED***
                return this._then(
                    maybeCaller, undefined, undefined, args, undefined);
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    args.push(methodName);
    return this._then(caller, undefined, undefined, args, undefined);
};

function namedGetter(obj) ***REMOVED***
    return obj[this];
}
function indexedGetter(obj) ***REMOVED***
    var index = +this;
    if (index < 0) index = Math.max(0, index + obj.length);
    return obj[index];
}
Promise.prototype.get = function (propertyName) ***REMOVED***
    var isIndex = (typeof propertyName === "number");
    var getter;
    if (!isIndex) ***REMOVED***
        if (canEvaluate) ***REMOVED***
            var maybeGetter = getGetter(propertyName);
            getter = maybeGetter !== null ? maybeGetter : namedGetter;
      ***REMOVED*** else ***REMOVED***
            getter = namedGetter;
      ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        getter = indexedGetter;
  ***REMOVED***
    return this._then(getter, undefined, undefined, propertyName, undefined);
};
};

},***REMOVED***"./util":36}],6:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise, PromiseArray, apiRejection, debug) ***REMOVED***
var util = _dereq_("./util");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var async = Promise._async;

Promise.prototype["break"] = Promise.prototype.cancel = function() ***REMOVED***
    if (!debug.cancellation()) return this._warn("cancellation is disabled");

    var promise = this;
    var child = promise;
    while (promise._isCancellable()) ***REMOVED***
        if (!promise._cancelBy(child)) ***REMOVED***
            if (child._isFollowing()) ***REMOVED***
                child._followee().cancel();
          ***REMOVED*** else ***REMOVED***
                child._cancelBranched();
          ***REMOVED***
            break;
      ***REMOVED***

        var parent = promise._cancellationParent;
        if (parent == null || !parent._isCancellable()) ***REMOVED***
            if (promise._isFollowing()) ***REMOVED***
                promise._followee().cancel();
          ***REMOVED*** else ***REMOVED***
                promise._cancelBranched();
          ***REMOVED***
            break;
      ***REMOVED*** else ***REMOVED***
            if (promise._isFollowing()) promise._followee().cancel();
            promise._setWillBeCancelled();
            child = promise;
            promise = parent;
      ***REMOVED***
  ***REMOVED***
};

Promise.prototype._branchHasCancelled = function() ***REMOVED***
    this._branchesRemainingToCancel--;
};

Promise.prototype._enoughBranchesHaveCancelled = function() ***REMOVED***
    return this._branchesRemainingToCancel === undefined ||
           this._branchesRemainingToCancel <= 0;
};

Promise.prototype._cancelBy = function(canceller) ***REMOVED***
    if (canceller === this) ***REMOVED***
        this._branchesRemainingToCancel = 0;
        this._invokeOnCancel();
        return true;
  ***REMOVED*** else ***REMOVED***
        this._branchHasCancelled();
        if (this._enoughBranchesHaveCancelled()) ***REMOVED***
            this._invokeOnCancel();
            return true;
      ***REMOVED***
  ***REMOVED***
    return false;
};

Promise.prototype._cancelBranched = function() ***REMOVED***
    if (this._enoughBranchesHaveCancelled()) ***REMOVED***
        this._cancel();
  ***REMOVED***
};

Promise.prototype._cancel = function() ***REMOVED***
    if (!this._isCancellable()) return;
    this._setCancelled();
    async.invoke(this._cancelPromises, this, undefined);
};

Promise.prototype._cancelPromises = function() ***REMOVED***
    if (this._length() > 0) this._settlePromises();
};

Promise.prototype._unsetOnCancel = function() ***REMOVED***
    this._onCancelField = undefined;
};

Promise.prototype._isCancellable = function() ***REMOVED***
    return this.isPending() && !this._isCancelled();
};

Promise.prototype.isCancellable = function() ***REMOVED***
    return this.isPending() && !this.isCancelled();
};

Promise.prototype._doInvokeOnCancel = function(onCancelCallback, internalOnly) ***REMOVED***
    if (util.isArray(onCancelCallback)) ***REMOVED***
        for (var i = 0; i < onCancelCallback.length; ++i) ***REMOVED***
            this._doInvokeOnCancel(onCancelCallback[i], internalOnly);
      ***REMOVED***
  ***REMOVED*** else if (onCancelCallback !== undefined) ***REMOVED***
        if (typeof onCancelCallback === "function") ***REMOVED***
            if (!internalOnly) ***REMOVED***
                var e = tryCatch(onCancelCallback).call(this._boundValue());
                if (e === errorObj) ***REMOVED***
                    this._attachExtraTrace(e.e);
                    async.throwLater(e.e);
              ***REMOVED***
          ***REMOVED***
      ***REMOVED*** else ***REMOVED***
            onCancelCallback._resultCancelled(this);
      ***REMOVED***
  ***REMOVED***
};

Promise.prototype._invokeOnCancel = function() ***REMOVED***
    var onCancelCallback = this._onCancel();
    this._unsetOnCancel();
    async.invoke(this._doInvokeOnCancel, this, onCancelCallback);
};

Promise.prototype._invokeInternalOnCancel = function() ***REMOVED***
    if (this._isCancellable()) ***REMOVED***
        this._doInvokeOnCancel(this._onCancel(), true);
        this._unsetOnCancel();
  ***REMOVED***
};

Promise.prototype._resultCancelled = function() ***REMOVED***
    this.cancel();
};

};

},***REMOVED***"./util":36}],7:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(NEXT_FILTER) ***REMOVED***
var util = _dereq_("./util");
var getKeys = _dereq_("./es5").keys;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

function catchFilter(instances, cb, promise) ***REMOVED***
    return function(e) ***REMOVED***
        var boundTo = promise._boundValue();
        predicateLoop: for (var i = 0; i < instances.length; ++i) ***REMOVED***
            var item = instances[i];

            if (item === Error ||
                (item != null && item.prototype instanceof Error)) ***REMOVED***
                if (e instanceof item) ***REMOVED***
                    return tryCatch(cb).call(boundTo, e);
              ***REMOVED***
          ***REMOVED*** else if (typeof item === "function") ***REMOVED***
                var matchesPredicate = tryCatch(item).call(boundTo, e);
                if (matchesPredicate === errorObj) ***REMOVED***
                    return matchesPredicate;
              ***REMOVED*** else if (matchesPredicate) ***REMOVED***
                    return tryCatch(cb).call(boundTo, e);
              ***REMOVED***
          ***REMOVED*** else if (util.isObject(e)) ***REMOVED***
                var keys = getKeys(item);
                for (var j = 0; j < keys.length; ++j) ***REMOVED***
                    var key = keys[j];
                    if (item[key] != e[key]) ***REMOVED***
                        continue predicateLoop;
                  ***REMOVED***
              ***REMOVED***
                return tryCatch(cb).call(boundTo, e);
          ***REMOVED***
      ***REMOVED***
        return NEXT_FILTER;
  ***REMOVED***;
}

return catchFilter;
};

},***REMOVED***"./es5":13,"./util":36}],8:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise) ***REMOVED***
var longStackTraces = false;
var contextStack = [];

Promise.prototype._promiseCreated = function() ***REMOVED***};
Promise.prototype._pushContext = function() ***REMOVED***};
Promise.prototype._popContext = function() ***REMOVED***return null;};
Promise._peekContext = Promise.prototype._peekContext = function() ***REMOVED***};

function Context() ***REMOVED***
    this._trace = new Context.CapturedTrace(peekContext());
}
Context.prototype._pushContext = function () ***REMOVED***
    if (this._trace !== undefined) ***REMOVED***
        this._trace._promiseCreated = null;
        contextStack.push(this._trace);
  ***REMOVED***
};

Context.prototype._popContext = function () ***REMOVED***
    if (this._trace !== undefined) ***REMOVED***
        var trace = contextStack.pop();
        var ret = trace._promiseCreated;
        trace._promiseCreated = null;
        return ret;
  ***REMOVED***
    return null;
};

function createContext() ***REMOVED***
    if (longStackTraces) return new Context();
}

function peekContext() ***REMOVED***
    var lastIndex = contextStack.length - 1;
    if (lastIndex >= 0) ***REMOVED***
        return contextStack[lastIndex];
  ***REMOVED***
    return undefined;
}
Context.CapturedTrace = null;
Context.create = createContext;
Context.deactivateLongStackTraces = function() ***REMOVED***};
Context.activateLongStackTraces = function() ***REMOVED***
    var Promise_pushContext = Promise.prototype._pushContext;
    var Promise_popContext = Promise.prototype._popContext;
    var Promise_PeekContext = Promise._peekContext;
    var Promise_peekContext = Promise.prototype._peekContext;
    var Promise_promiseCreated = Promise.prototype._promiseCreated;
    Context.deactivateLongStackTraces = function() ***REMOVED***
        Promise.prototype._pushContext = Promise_pushContext;
        Promise.prototype._popContext = Promise_popContext;
        Promise._peekContext = Promise_PeekContext;
        Promise.prototype._peekContext = Promise_peekContext;
        Promise.prototype._promiseCreated = Promise_promiseCreated;
        longStackTraces = false;
  ***REMOVED***;
    longStackTraces = true;
    Promise.prototype._pushContext = Context.prototype._pushContext;
    Promise.prototype._popContext = Context.prototype._popContext;
    Promise._peekContext = Promise.prototype._peekContext = peekContext;
    Promise.prototype._promiseCreated = function() ***REMOVED***
        var ctx = this._peekContext();
        if (ctx && ctx._promiseCreated == null) ctx._promiseCreated = this;
  ***REMOVED***;
};
return Context;
};

},***REMOVED***}],9:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise, Context,
    enableAsyncHooks, disableAsyncHooks) ***REMOVED***
var async = Promise._async;
var Warning = _dereq_("./errors").Warning;
var util = _dereq_("./util");
var es5 = _dereq_("./es5");
var canAttachTrace = util.canAttachTrace;
var unhandledRejectionHandled;
var possiblyUnhandledRejection;
var bluebirdFramePattern =
    /[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/;
var nodeFramePattern = /\((?:timers\.js):\d+:\d+\)/;
var parseLinePattern = /[\/<\(](.+?):(\d+):(\d+)\)?\s*$/;
var stackFramePattern = null;
var formatStack = null;
var indentStackFrames = false;
var printWarning;
var debugging = !!(util.env("BLUEBIRD_DEBUG") != 0 &&
                        (true ||
                         util.env("BLUEBIRD_DEBUG") ||
                         util.env("NODE_ENV") === "development"));

var warnings = !!(util.env("BLUEBIRD_WARNINGS") != 0 &&
    (debugging || util.env("BLUEBIRD_WARNINGS")));

var longStackTraces = !!(util.env("BLUEBIRD_LONG_STACK_TRACES") != 0 &&
    (debugging || util.env("BLUEBIRD_LONG_STACK_TRACES")));

var wForgottenReturn = util.env("BLUEBIRD_W_FORGOTTEN_RETURN") != 0 &&
    (warnings || !!util.env("BLUEBIRD_W_FORGOTTEN_RETURN"));

var deferUnhandledRejectionCheck;
(function() ***REMOVED***
    var promises = [];

    function unhandledRejectionCheck() ***REMOVED***
        for (var i = 0; i < promises.length; ++i) ***REMOVED***
            promises[i]._notifyUnhandledRejection();
      ***REMOVED***
        unhandledRejectionClear();
  ***REMOVED***

    function unhandledRejectionClear() ***REMOVED***
        promises.length = 0;
  ***REMOVED***

    deferUnhandledRejectionCheck = function(promise) ***REMOVED***
        promises.push(promise);
        setTimeout(unhandledRejectionCheck, 1);
  ***REMOVED***;

    es5.defineProperty(Promise, "_unhandledRejectionCheck", ***REMOVED***
        value: unhandledRejectionCheck
  ***REMOVED***);
    es5.defineProperty(Promise, "_unhandledRejectionClear", ***REMOVED***
        value: unhandledRejectionClear
  ***REMOVED***);
})();

Promise.prototype.suppressUnhandledRejections = function() ***REMOVED***
    var target = this._target();
    target._bitField = ((target._bitField & (~1048576)) |
                      524288);
};

Promise.prototype._ensurePossibleRejectionHandled = function () ***REMOVED***
    if ((this._bitField & 524288) !== 0) return;
    this._setRejectionIsUnhandled();
    deferUnhandledRejectionCheck(this);
};

Promise.prototype._notifyUnhandledRejectionIsHandled = function () ***REMOVED***
    fireRejectionEvent("rejectionHandled",
                                  unhandledRejectionHandled, undefined, this);
};

Promise.prototype._setReturnedNonUndefined = function() ***REMOVED***
    this._bitField = this._bitField | 268435456;
};

Promise.prototype._returnedNonUndefined = function() ***REMOVED***
    return (this._bitField & 268435456) !== 0;
};

Promise.prototype._notifyUnhandledRejection = function () ***REMOVED***
    if (this._isRejectionUnhandled()) ***REMOVED***
        var reason = this._settledValue();
        this._setUnhandledRejectionIsNotified();
        fireRejectionEvent("unhandledRejection",
                                      possiblyUnhandledRejection, reason, this);
  ***REMOVED***
};

Promise.prototype._setUnhandledRejectionIsNotified = function () ***REMOVED***
    this._bitField = this._bitField | 262144;
};

Promise.prototype._unsetUnhandledRejectionIsNotified = function () ***REMOVED***
    this._bitField = this._bitField & (~262144);
};

Promise.prototype._isUnhandledRejectionNotified = function () ***REMOVED***
    return (this._bitField & 262144) > 0;
};

Promise.prototype._setRejectionIsUnhandled = function () ***REMOVED***
    this._bitField = this._bitField | 1048576;
};

Promise.prototype._unsetRejectionIsUnhandled = function () ***REMOVED***
    this._bitField = this._bitField & (~1048576);
    if (this._isUnhandledRejectionNotified()) ***REMOVED***
        this._unsetUnhandledRejectionIsNotified();
        this._notifyUnhandledRejectionIsHandled();
  ***REMOVED***
};

Promise.prototype._isRejectionUnhandled = function () ***REMOVED***
    return (this._bitField & 1048576) > 0;
};

Promise.prototype._warn = function(message, shouldUseOwnTrace, promise) ***REMOVED***
    return warn(message, shouldUseOwnTrace, promise || this);
};

Promise.onPossiblyUnhandledRejection = function (fn) ***REMOVED***
    var context = Promise._getContext();
    possiblyUnhandledRejection = util.contextBind(context, fn);
};

Promise.onUnhandledRejectionHandled = function (fn) ***REMOVED***
    var context = Promise._getContext();
    unhandledRejectionHandled = util.contextBind(context, fn);
};

var disableLongStackTraces = function() ***REMOVED***};
Promise.longStackTraces = function () ***REMOVED***
    if (async.haveItemsQueued() && !config.longStackTraces) ***REMOVED***
        throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED***
    if (!config.longStackTraces && longStackTracesIsSupported()) ***REMOVED***
        var Promise_captureStackTrace = Promise.prototype._captureStackTrace;
        var Promise_attachExtraTrace = Promise.prototype._attachExtraTrace;
        var Promise_dereferenceTrace = Promise.prototype._dereferenceTrace;
        config.longStackTraces = true;
        disableLongStackTraces = function() ***REMOVED***
            if (async.haveItemsQueued() && !config.longStackTraces) ***REMOVED***
                throw new Error("cannot enable long stack traces after promises have been created\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
          ***REMOVED***
            Promise.prototype._captureStackTrace = Promise_captureStackTrace;
            Promise.prototype._attachExtraTrace = Promise_attachExtraTrace;
            Promise.prototype._dereferenceTrace = Promise_dereferenceTrace;
            Context.deactivateLongStackTraces();
            config.longStackTraces = false;
      ***REMOVED***;
        Promise.prototype._captureStackTrace = longStackTracesCaptureStackTrace;
        Promise.prototype._attachExtraTrace = longStackTracesAttachExtraTrace;
        Promise.prototype._dereferenceTrace = longStackTracesDereferenceTrace;
        Context.activateLongStackTraces();
  ***REMOVED***
};

Promise.hasLongStackTraces = function () ***REMOVED***
    return config.longStackTraces && longStackTracesIsSupported();
};


var legacyHandlers = ***REMOVED***
    unhandledrejection: ***REMOVED***
        before: function() ***REMOVED***
            var ret = util.global.onunhandledrejection;
            util.global.onunhandledrejection = null;
            return ret;
      ***REMOVED***,
        after: function(fn) ***REMOVED***
            util.global.onunhandledrejection = fn;
      ***REMOVED***
  ***REMOVED***,
    rejectionhandled: ***REMOVED***
        before: function() ***REMOVED***
            var ret = util.global.onrejectionhandled;
            util.global.onrejectionhandled = null;
            return ret;
      ***REMOVED***,
        after: function(fn) ***REMOVED***
            util.global.onrejectionhandled = fn;
      ***REMOVED***
  ***REMOVED***
};

var fireDomEvent = (function() ***REMOVED***
    var dispatch = function(legacy, e) ***REMOVED***
        if (legacy) ***REMOVED***
            var fn;
            try ***REMOVED***
                fn = legacy.before();
                return !util.global.dispatchEvent(e);
          ***REMOVED*** finally ***REMOVED***
                legacy.after(fn);
          ***REMOVED***
      ***REMOVED*** else ***REMOVED***
            return !util.global.dispatchEvent(e);
      ***REMOVED***
  ***REMOVED***;
    try ***REMOVED***
        if (typeof CustomEvent === "function") ***REMOVED***
            var event = new CustomEvent("CustomEvent");
            util.global.dispatchEvent(event);
            return function(name, event) ***REMOVED***
                name = name.toLowerCase();
                var eventData = ***REMOVED***
                    detail: event,
                    cancelable: true
              ***REMOVED***;
                var domEvent = new CustomEvent(name, eventData);
                es5.defineProperty(
                    domEvent, "promise", ***REMOVED***value: event.promise});
                es5.defineProperty(
                    domEvent, "reason", ***REMOVED***value: event.reason});

                return dispatch(legacyHandlers[name], domEvent);
          ***REMOVED***;
      ***REMOVED*** else if (typeof Event === "function") ***REMOVED***
            var event = new Event("CustomEvent");
            util.global.dispatchEvent(event);
            return function(name, event) ***REMOVED***
                name = name.toLowerCase();
                var domEvent = new Event(name, ***REMOVED***
                    cancelable: true
              ***REMOVED***);
                domEvent.detail = event;
                es5.defineProperty(domEvent, "promise", ***REMOVED***value: event.promise});
                es5.defineProperty(domEvent, "reason", ***REMOVED***value: event.reason});
                return dispatch(legacyHandlers[name], domEvent);
          ***REMOVED***;
      ***REMOVED*** else ***REMOVED***
            var event = document.createEvent("CustomEvent");
            event.initCustomEvent("testingtheevent", false, true, ***REMOVED***});
            util.global.dispatchEvent(event);
            return function(name, event) ***REMOVED***
                name = name.toLowerCase();
                var domEvent = document.createEvent("CustomEvent");
                domEvent.initCustomEvent(name, false, true,
                    event);
                return dispatch(legacyHandlers[name], domEvent);
          ***REMOVED***;
      ***REMOVED***
  ***REMOVED*** catch (e) ***REMOVED***}
    return function() ***REMOVED***
        return false;
  ***REMOVED***;
})();

var fireGlobalEvent = (function() ***REMOVED***
    if (util.isNode) ***REMOVED***
        return function() ***REMOVED***
            return process.emit.apply(process, arguments);
      ***REMOVED***;
  ***REMOVED*** else ***REMOVED***
        if (!util.global) ***REMOVED***
            return function() ***REMOVED***
                return false;
          ***REMOVED***;
      ***REMOVED***
        return function(name) ***REMOVED***
            var methodName = "on" + name.toLowerCase();
            var method = util.global[methodName];
            if (!method) return false;
            method.apply(util.global, [].slice.call(arguments, 1));
            return true;
      ***REMOVED***;
  ***REMOVED***
})();

function generatePromiseLifecycleEventObject(name, promise) ***REMOVED***
    return ***REMOVED***promise: promise};
}

var eventToObjectGenerator = ***REMOVED***
    promiseCreated: generatePromiseLifecycleEventObject,
    promiseFulfilled: generatePromiseLifecycleEventObject,
    promiseRejected: generatePromiseLifecycleEventObject,
    promiseResolved: generatePromiseLifecycleEventObject,
    promiseCancelled: generatePromiseLifecycleEventObject,
    promiseChained: function(name, promise, child) ***REMOVED***
        return ***REMOVED***promise: promise, child: child};
  ***REMOVED***,
    warning: function(name, warning) ***REMOVED***
        return ***REMOVED***warning: warning};
  ***REMOVED***,
    unhandledRejection: function (name, reason, promise) ***REMOVED***
        return ***REMOVED***reason: reason, promise: promise};
  ***REMOVED***,
    rejectionHandled: generatePromiseLifecycleEventObject
};

var activeFireEvent = function (name) ***REMOVED***
    var globalEventFired = false;
    try ***REMOVED***
        globalEventFired = fireGlobalEvent.apply(null, arguments);
  ***REMOVED*** catch (e) ***REMOVED***
        async.throwLater(e);
        globalEventFired = true;
  ***REMOVED***

    var domEventFired = false;
    try ***REMOVED***
        domEventFired = fireDomEvent(name,
                    eventToObjectGenerator[name].apply(null, arguments));
  ***REMOVED*** catch (e) ***REMOVED***
        async.throwLater(e);
        domEventFired = true;
  ***REMOVED***

    return domEventFired || globalEventFired;
};

Promise.config = function(opts) ***REMOVED***
    opts = Object(opts);
    if ("longStackTraces" in opts) ***REMOVED***
        if (opts.longStackTraces) ***REMOVED***
            Promise.longStackTraces();
      ***REMOVED*** else if (!opts.longStackTraces && Promise.hasLongStackTraces()) ***REMOVED***
            disableLongStackTraces();
      ***REMOVED***
  ***REMOVED***
    if ("warnings" in opts) ***REMOVED***
        var warningsOption = opts.warnings;
        config.warnings = !!warningsOption;
        wForgottenReturn = config.warnings;

        if (util.isObject(warningsOption)) ***REMOVED***
            if ("wForgottenReturn" in warningsOption) ***REMOVED***
                wForgottenReturn = !!warningsOption.wForgottenReturn;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    if ("cancellation" in opts && opts.cancellation && !config.cancellation) ***REMOVED***
        if (async.haveItemsQueued()) ***REMOVED***
            throw new Error(
                "cannot enable cancellation after promises are in use");
      ***REMOVED***
        Promise.prototype._clearCancellationData =
            cancellationClearCancellationData;
        Promise.prototype._propagateFrom = cancellationPropagateFrom;
        Promise.prototype._onCancel = cancellationOnCancel;
        Promise.prototype._setOnCancel = cancellationSetOnCancel;
        Promise.prototype._attachCancellationCallback =
            cancellationAttachCancellationCallback;
        Promise.prototype._execute = cancellationExecute;
        propagateFromFunction = cancellationPropagateFrom;
        config.cancellation = true;
  ***REMOVED***
    if ("monitoring" in opts) ***REMOVED***
        if (opts.monitoring && !config.monitoring) ***REMOVED***
            config.monitoring = true;
            Promise.prototype._fireEvent = activeFireEvent;
      ***REMOVED*** else if (!opts.monitoring && config.monitoring) ***REMOVED***
            config.monitoring = false;
            Promise.prototype._fireEvent = defaultFireEvent;
      ***REMOVED***
  ***REMOVED***
    if ("asyncHooks" in opts && util.nodeSupportsAsyncResource) ***REMOVED***
        var prev = config.asyncHooks;
        var cur = !!opts.asyncHooks;
        if (prev !== cur) ***REMOVED***
            config.asyncHooks = cur;
            if (cur) ***REMOVED***
                enableAsyncHooks();
          ***REMOVED*** else ***REMOVED***
                disableAsyncHooks();
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    return Promise;
};

function defaultFireEvent() ***REMOVED*** return false; }

Promise.prototype._fireEvent = defaultFireEvent;
Promise.prototype._execute = function(executor, resolve, reject) ***REMOVED***
    try ***REMOVED***
        executor(resolve, reject);
  ***REMOVED*** catch (e) ***REMOVED***
        return e;
  ***REMOVED***
};
Promise.prototype._onCancel = function () ***REMOVED***};
Promise.prototype._setOnCancel = function (handler) ***REMOVED*** ; };
Promise.prototype._attachCancellationCallback = function(onCancel) ***REMOVED***
    ;
};
Promise.prototype._captureStackTrace = function () ***REMOVED***};
Promise.prototype._attachExtraTrace = function () ***REMOVED***};
Promise.prototype._dereferenceTrace = function () ***REMOVED***};
Promise.prototype._clearCancellationData = function() ***REMOVED***};
Promise.prototype._propagateFrom = function (parent, flags) ***REMOVED***
    ;
    ;
};

function cancellationExecute(executor, resolve, reject) ***REMOVED***
    var promise = this;
    try ***REMOVED***
        executor(resolve, reject, function(onCancel) ***REMOVED***
            if (typeof onCancel !== "function") ***REMOVED***
                throw new TypeError("onCancel must be a function, got: " +
                                    util.toString(onCancel));
          ***REMOVED***
            promise._attachCancellationCallback(onCancel);
      ***REMOVED***);
  ***REMOVED*** catch (e) ***REMOVED***
        return e;
  ***REMOVED***
}

function cancellationAttachCancellationCallback(onCancel) ***REMOVED***
    if (!this._isCancellable()) return this;

    var previousOnCancel = this._onCancel();
    if (previousOnCancel !== undefined) ***REMOVED***
        if (util.isArray(previousOnCancel)) ***REMOVED***
            previousOnCancel.push(onCancel);
      ***REMOVED*** else ***REMOVED***
            this._setOnCancel([previousOnCancel, onCancel]);
      ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        this._setOnCancel(onCancel);
  ***REMOVED***
}

function cancellationOnCancel() ***REMOVED***
    return this._onCancelField;
}

function cancellationSetOnCancel(onCancel) ***REMOVED***
    this._onCancelField = onCancel;
}

function cancellationClearCancellationData() ***REMOVED***
    this._cancellationParent = undefined;
    this._onCancelField = undefined;
}

function cancellationPropagateFrom(parent, flags) ***REMOVED***
    if ((flags & 1) !== 0) ***REMOVED***
        this._cancellationParent = parent;
        var branchesRemainingToCancel = parent._branchesRemainingToCancel;
        if (branchesRemainingToCancel === undefined) ***REMOVED***
            branchesRemainingToCancel = 0;
      ***REMOVED***
        parent._branchesRemainingToCancel = branchesRemainingToCancel + 1;
  ***REMOVED***
    if ((flags & 2) !== 0 && parent._isBound()) ***REMOVED***
        this._setBoundTo(parent._boundTo);
  ***REMOVED***
}

function bindingPropagateFrom(parent, flags) ***REMOVED***
    if ((flags & 2) !== 0 && parent._isBound()) ***REMOVED***
        this._setBoundTo(parent._boundTo);
  ***REMOVED***
}
var propagateFromFunction = bindingPropagateFrom;

function boundValueFunction() ***REMOVED***
    var ret = this._boundTo;
    if (ret !== undefined) ***REMOVED***
        if (ret instanceof Promise) ***REMOVED***
            if (ret.isFulfilled()) ***REMOVED***
                return ret.value();
          ***REMOVED*** else ***REMOVED***
                return undefined;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    return ret;
}

function longStackTracesCaptureStackTrace() ***REMOVED***
    this._trace = new CapturedTrace(this._peekContext());
}

function longStackTracesAttachExtraTrace(error, ignoreSelf) ***REMOVED***
    if (canAttachTrace(error)) ***REMOVED***
        var trace = this._trace;
        if (trace !== undefined) ***REMOVED***
            if (ignoreSelf) trace = trace._parent;
      ***REMOVED***
        if (trace !== undefined) ***REMOVED***
            trace.attachExtraTrace(error);
      ***REMOVED*** else if (!error.__stackCleaned__) ***REMOVED***
            var parsed = parseStackAndMessage(error);
            util.notEnumerableProp(error, "stack",
                parsed.message + "\n" + parsed.stack.join("\n"));
            util.notEnumerableProp(error, "__stackCleaned__", true);
      ***REMOVED***
  ***REMOVED***
}

function longStackTracesDereferenceTrace() ***REMOVED***
    this._trace = undefined;
}

function checkForgottenReturns(returnValue, promiseCreated, name, promise,
                               parent) ***REMOVED***
    if (returnValue === undefined && promiseCreated !== null &&
        wForgottenReturn) ***REMOVED***
        if (parent !== undefined && parent._returnedNonUndefined()) return;
        if ((promise._bitField & 65535) === 0) return;

        if (name) name = name + " ";
        var handlerLine = "";
        var creatorLine = "";
        if (promiseCreated._trace) ***REMOVED***
            var traceLines = promiseCreated._trace.stack.split("\n");
            var stack = cleanStack(traceLines);
            for (var i = stack.length - 1; i >= 0; --i) ***REMOVED***
                var line = stack[i];
                if (!nodeFramePattern.test(line)) ***REMOVED***
                    var lineMatches = line.match(parseLinePattern);
                    if (lineMatches) ***REMOVED***
                        handlerLine  = "at " + lineMatches[1] +
                            ":" + lineMatches[2] + ":" + lineMatches[3] + " ";
                  ***REMOVED***
                    break;
              ***REMOVED***
          ***REMOVED***

            if (stack.length > 0) ***REMOVED***
                var firstUserLine = stack[0];
                for (var i = 0; i < traceLines.length; ++i) ***REMOVED***

                    if (traceLines[i] === firstUserLine) ***REMOVED***
                        if (i > 0) ***REMOVED***
                            creatorLine = "\n" + traceLines[i - 1];
                      ***REMOVED***
                        break;
                  ***REMOVED***
              ***REMOVED***

          ***REMOVED***
      ***REMOVED***
        var msg = "a promise was created in a " + name +
            "handler " + handlerLine + "but was not returned from it, " +
            "see http://goo.gl/rRqMUw" +
            creatorLine;
        promise._warn(msg, true, promiseCreated);
  ***REMOVED***
}

function deprecated(name, replacement) ***REMOVED***
    var message = name +
        " is deprecated and will be removed in a future version.";
    if (replacement) message += " Use " + replacement + " instead.";
    return warn(message);
}

function warn(message, shouldUseOwnTrace, promise) ***REMOVED***
    if (!config.warnings) return;
    var warning = new Warning(message);
    var ctx;
    if (shouldUseOwnTrace) ***REMOVED***
        promise._attachExtraTrace(warning);
  ***REMOVED*** else if (config.longStackTraces && (ctx = Promise._peekContext())) ***REMOVED***
        ctx.attachExtraTrace(warning);
  ***REMOVED*** else ***REMOVED***
        var parsed = parseStackAndMessage(warning);
        warning.stack = parsed.message + "\n" + parsed.stack.join("\n");
  ***REMOVED***

    if (!activeFireEvent("warning", warning)) ***REMOVED***
        formatAndLogError(warning, "", true);
  ***REMOVED***
}

function reconstructStack(message, stacks) ***REMOVED***
    for (var i = 0; i < stacks.length - 1; ++i) ***REMOVED***
        stacks[i].push("From previous event:");
        stacks[i] = stacks[i].join("\n");
  ***REMOVED***
    if (i < stacks.length) ***REMOVED***
        stacks[i] = stacks[i].join("\n");
  ***REMOVED***
    return message + "\n" + stacks.join("\n");
}

function removeDuplicateOrEmptyJumps(stacks) ***REMOVED***
    for (var i = 0; i < stacks.length; ++i) ***REMOVED***
        if (stacks[i].length === 0 ||
            ((i + 1 < stacks.length) && stacks[i][0] === stacks[i+1][0])) ***REMOVED***
            stacks.splice(i, 1);
            i--;
      ***REMOVED***
  ***REMOVED***
}

function removeCommonRoots(stacks) ***REMOVED***
    var current = stacks[0];
    for (var i = 1; i < stacks.length; ++i) ***REMOVED***
        var prev = stacks[i];
        var currentLastIndex = current.length - 1;
        var currentLastLine = current[currentLastIndex];
        var commonRootMeetPoint = -1;

        for (var j = prev.length - 1; j >= 0; --j) ***REMOVED***
            if (prev[j] === currentLastLine) ***REMOVED***
                commonRootMeetPoint = j;
                break;
          ***REMOVED***
      ***REMOVED***

        for (var j = commonRootMeetPoint; j >= 0; --j) ***REMOVED***
            var line = prev[j];
            if (current[currentLastIndex] === line) ***REMOVED***
                current.pop();
                currentLastIndex--;
          ***REMOVED*** else ***REMOVED***
                break;
          ***REMOVED***
      ***REMOVED***
        current = prev;
  ***REMOVED***
}

function cleanStack(stack) ***REMOVED***
    var ret = [];
    for (var i = 0; i < stack.length; ++i) ***REMOVED***
        var line = stack[i];
        var isTraceLine = "    (No stack trace)" === line ||
            stackFramePattern.test(line);
        var isInternalFrame = isTraceLine && shouldIgnore(line);
        if (isTraceLine && !isInternalFrame) ***REMOVED***
            if (indentStackFrames && line.charAt(0) !== " ") ***REMOVED***
                line = "    " + line;
          ***REMOVED***
            ret.push(line);
      ***REMOVED***
  ***REMOVED***
    return ret;
}

function stackFramesAsArray(error) ***REMOVED***
    var stack = error.stack.replace(/\s+$/g, "").split("\n");
    for (var i = 0; i < stack.length; ++i) ***REMOVED***
        var line = stack[i];
        if ("    (No stack trace)" === line || stackFramePattern.test(line)) ***REMOVED***
            break;
      ***REMOVED***
  ***REMOVED***
    if (i > 0 && error.name != "SyntaxError") ***REMOVED***
        stack = stack.slice(i);
  ***REMOVED***
    return stack;
}

function parseStackAndMessage(error) ***REMOVED***
    var stack = error.stack;
    var message = error.toString();
    stack = typeof stack === "string" && stack.length > 0
                ? stackFramesAsArray(error) : ["    (No stack trace)"];
    return ***REMOVED***
        message: message,
        stack: error.name == "SyntaxError" ? stack : cleanStack(stack)
  ***REMOVED***;
}

function formatAndLogError(error, title, isSoft) ***REMOVED***
    if (typeof console !== "undefined") ***REMOVED***
        var message;
        if (util.isObject(error)) ***REMOVED***
            var stack = error.stack;
            message = title + formatStack(stack, error);
      ***REMOVED*** else ***REMOVED***
            message = title + String(error);
      ***REMOVED***
        if (typeof printWarning === "function") ***REMOVED***
            printWarning(message, isSoft);
      ***REMOVED*** else if (typeof console.log === "function" ||
            typeof console.log === "object") ***REMOVED***
            console.log(message);
      ***REMOVED***
  ***REMOVED***
}

function fireRejectionEvent(name, localHandler, reason, promise) ***REMOVED***
    var localEventFired = false;
    try ***REMOVED***
        if (typeof localHandler === "function") ***REMOVED***
            localEventFired = true;
            if (name === "rejectionHandled") ***REMOVED***
                localHandler(promise);
          ***REMOVED*** else ***REMOVED***
                localHandler(reason, promise);
          ***REMOVED***
      ***REMOVED***
  ***REMOVED*** catch (e) ***REMOVED***
        async.throwLater(e);
  ***REMOVED***

    if (name === "unhandledRejection") ***REMOVED***
        if (!activeFireEvent(name, reason, promise) && !localEventFired) ***REMOVED***
            formatAndLogError(reason, "Unhandled rejection ");
      ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        activeFireEvent(name, promise);
  ***REMOVED***
}

function formatNonError(obj) ***REMOVED***
    var str;
    if (typeof obj === "function") ***REMOVED***
        str = "[function " +
            (obj.name || "anonymous") +
            "]";
  ***REMOVED*** else ***REMOVED***
        str = obj && typeof obj.toString === "function"
            ? obj.toString() : util.toString(obj);
        var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
        if (ruselessToString.test(str)) ***REMOVED***
            try ***REMOVED***
                var newStr = JSON.stringify(obj);
                str = newStr;
          ***REMOVED***
            catch(e) ***REMOVED***

          ***REMOVED***
      ***REMOVED***
        if (str.length === 0) ***REMOVED***
            str = "(empty array)";
      ***REMOVED***
  ***REMOVED***
    return ("(<" + snip(str) + ">, no stack trace)");
}

function snip(str) ***REMOVED***
    var maxChars = 41;
    if (str.length < maxChars) ***REMOVED***
        return str;
  ***REMOVED***
    return str.substr(0, maxChars - 3) + "...";
}

function longStackTracesIsSupported() ***REMOVED***
    return typeof captureStackTrace === "function";
}

var shouldIgnore = function() ***REMOVED*** return false; };
var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
function parseLineInfo(line) ***REMOVED***
    var matches = line.match(parseLineInfoRegex);
    if (matches) ***REMOVED***
        return ***REMOVED***
            fileName: matches[1],
            line: parseInt(matches[2], 10)
      ***REMOVED***;
  ***REMOVED***
}

function setBounds(firstLineError, lastLineError) ***REMOVED***
    if (!longStackTracesIsSupported()) return;
    var firstStackLines = (firstLineError.stack || "").split("\n");
    var lastStackLines = (lastLineError.stack || "").split("\n");
    var firstIndex = -1;
    var lastIndex = -1;
    var firstFileName;
    var lastFileName;
    for (var i = 0; i < firstStackLines.length; ++i) ***REMOVED***
        var result = parseLineInfo(firstStackLines[i]);
        if (result) ***REMOVED***
            firstFileName = result.fileName;
            firstIndex = result.line;
            break;
      ***REMOVED***
  ***REMOVED***
    for (var i = 0; i < lastStackLines.length; ++i) ***REMOVED***
        var result = parseLineInfo(lastStackLines[i]);
        if (result) ***REMOVED***
            lastFileName = result.fileName;
            lastIndex = result.line;
            break;
      ***REMOVED***
  ***REMOVED***
    if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName ||
        firstFileName !== lastFileName || firstIndex >= lastIndex) ***REMOVED***
        return;
  ***REMOVED***

    shouldIgnore = function(line) ***REMOVED***
        if (bluebirdFramePattern.test(line)) return true;
        var info = parseLineInfo(line);
        if (info) ***REMOVED***
            if (info.fileName === firstFileName &&
                (firstIndex <= info.line && info.line <= lastIndex)) ***REMOVED***
                return true;
          ***REMOVED***
      ***REMOVED***
        return false;
  ***REMOVED***;
}

function CapturedTrace(parent) ***REMOVED***
    this._parent = parent;
    this._promisesCreated = 0;
    var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
    captureStackTrace(this, CapturedTrace);
    if (length > 32) this.uncycle();
}
util.inherits(CapturedTrace, Error);
Context.CapturedTrace = CapturedTrace;

CapturedTrace.prototype.uncycle = function() ***REMOVED***
    var length = this._length;
    if (length < 2) return;
    var nodes = [];
    var stackToIndex = ***REMOVED***};

    for (var i = 0, node = this; node !== undefined; ++i) ***REMOVED***
        nodes.push(node);
        node = node._parent;
  ***REMOVED***
    length = this._length = i;
    for (var i = length - 1; i >= 0; --i) ***REMOVED***
        var stack = nodes[i].stack;
        if (stackToIndex[stack] === undefined) ***REMOVED***
            stackToIndex[stack] = i;
      ***REMOVED***
  ***REMOVED***
    for (var i = 0; i < length; ++i) ***REMOVED***
        var currentStack = nodes[i].stack;
        var index = stackToIndex[currentStack];
        if (index !== undefined && index !== i) ***REMOVED***
            if (index > 0) ***REMOVED***
                nodes[index - 1]._parent = undefined;
                nodes[index - 1]._length = 1;
          ***REMOVED***
            nodes[i]._parent = undefined;
            nodes[i]._length = 1;
            var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;

            if (index < length - 1) ***REMOVED***
                cycleEdgeNode._parent = nodes[index + 1];
                cycleEdgeNode._parent.uncycle();
                cycleEdgeNode._length =
                    cycleEdgeNode._parent._length + 1;
          ***REMOVED*** else ***REMOVED***
                cycleEdgeNode._parent = undefined;
                cycleEdgeNode._length = 1;
          ***REMOVED***
            var currentChildLength = cycleEdgeNode._length + 1;
            for (var j = i - 2; j >= 0; --j) ***REMOVED***
                nodes[j]._length = currentChildLength;
                currentChildLength++;
          ***REMOVED***
            return;
      ***REMOVED***
  ***REMOVED***
};

CapturedTrace.prototype.attachExtraTrace = function(error) ***REMOVED***
    if (error.__stackCleaned__) return;
    this.uncycle();
    var parsed = parseStackAndMessage(error);
    var message = parsed.message;
    var stacks = [parsed.stack];

    var trace = this;
    while (trace !== undefined) ***REMOVED***
        stacks.push(cleanStack(trace.stack.split("\n")));
        trace = trace._parent;
  ***REMOVED***
    removeCommonRoots(stacks);
    removeDuplicateOrEmptyJumps(stacks);
    util.notEnumerableProp(error, "stack", reconstructStack(message, stacks));
    util.notEnumerableProp(error, "__stackCleaned__", true);
};

var captureStackTrace = (function stackDetection() ***REMOVED***
    var v8stackFramePattern = /^\s*at\s*/;
    var v8stackFormatter = function(stack, error) ***REMOVED***
        if (typeof stack === "string") return stack;

        if (error.name !== undefined &&
            error.message !== undefined) ***REMOVED***
            return error.toString();
      ***REMOVED***
        return formatNonError(error);
  ***REMOVED***;

    if (typeof Error.stackTraceLimit === "number" &&
        typeof Error.captureStackTrace === "function") ***REMOVED***
        Error.stackTraceLimit += 6;
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        var captureStackTrace = Error.captureStackTrace;

        shouldIgnore = function(line) ***REMOVED***
            return bluebirdFramePattern.test(line);
      ***REMOVED***;
        return function(receiver, ignoreUntil) ***REMOVED***
            Error.stackTraceLimit += 6;
            captureStackTrace(receiver, ignoreUntil);
            Error.stackTraceLimit -= 6;
      ***REMOVED***;
  ***REMOVED***
    var err = new Error();

    if (typeof err.stack === "string" &&
        err.stack.split("\n")[0].indexOf("stackDetection@") >= 0) ***REMOVED***
        stackFramePattern = /@/;
        formatStack = v8stackFormatter;
        indentStackFrames = true;
        return function captureStackTrace(o) ***REMOVED***
            o.stack = new Error().stack;
      ***REMOVED***;
  ***REMOVED***

    var hasStackAfterThrow;
    try ***REMOVED*** throw new Error(); }
    catch(e) ***REMOVED***
        hasStackAfterThrow = ("stack" in e);
  ***REMOVED***
    if (!("stack" in err) && hasStackAfterThrow &&
        typeof Error.stackTraceLimit === "number") ***REMOVED***
        stackFramePattern = v8stackFramePattern;
        formatStack = v8stackFormatter;
        return function captureStackTrace(o) ***REMOVED***
            Error.stackTraceLimit += 6;
            try ***REMOVED*** throw new Error(); }
            catch(e) ***REMOVED*** o.stack = e.stack; }
            Error.stackTraceLimit -= 6;
      ***REMOVED***;
  ***REMOVED***

    formatStack = function(stack, error) ***REMOVED***
        if (typeof stack === "string") return stack;

        if ((typeof error === "object" ||
            typeof error === "function") &&
            error.name !== undefined &&
            error.message !== undefined) ***REMOVED***
            return error.toString();
      ***REMOVED***
        return formatNonError(error);
  ***REMOVED***;

    return null;

})([]);

if (typeof console !== "undefined" && typeof console.warn !== "undefined") ***REMOVED***
    printWarning = function (message) ***REMOVED***
        console.warn(message);
  ***REMOVED***;
    if (util.isNode && process.stderr.isTTY) ***REMOVED***
        printWarning = function(message, isSoft) ***REMOVED***
            var color = isSoft ? "\u001b[33m" : "\u001b[31m";
            console.warn(color + message + "\u001b[0m\n");
      ***REMOVED***;
  ***REMOVED*** else if (!util.isNode && typeof (new Error().stack) === "string") ***REMOVED***
        printWarning = function(message, isSoft) ***REMOVED***
            console.warn("%c" + message,
                        isSoft ? "color: darkorange" : "color: red");
      ***REMOVED***;
  ***REMOVED***
}

var config = ***REMOVED***
    warnings: warnings,
    longStackTraces: false,
    cancellation: false,
    monitoring: false,
    asyncHooks: false
};

if (longStackTraces) Promise.longStackTraces();

return ***REMOVED***
    asyncHooks: function() ***REMOVED***
        return config.asyncHooks;
  ***REMOVED***,
    longStackTraces: function() ***REMOVED***
        return config.longStackTraces;
  ***REMOVED***,
    warnings: function() ***REMOVED***
        return config.warnings;
  ***REMOVED***,
    cancellation: function() ***REMOVED***
        return config.cancellation;
  ***REMOVED***,
    monitoring: function() ***REMOVED***
        return config.monitoring;
  ***REMOVED***,
    propagateFromFunction: function() ***REMOVED***
        return propagateFromFunction;
  ***REMOVED***,
    boundValueFunction: function() ***REMOVED***
        return boundValueFunction;
  ***REMOVED***,
    checkForgottenReturns: checkForgottenReturns,
    setBounds: setBounds,
    warn: warn,
    deprecated: deprecated,
    CapturedTrace: CapturedTrace,
    fireDomEvent: fireDomEvent,
    fireGlobalEvent: fireGlobalEvent
};
};

},***REMOVED***"./errors":12,"./es5":13,"./util":36}],10:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise) ***REMOVED***
function returner() ***REMOVED***
    return this.value;
}
function thrower() ***REMOVED***
    throw this.reason;
}

Promise.prototype["return"] =
Promise.prototype.thenReturn = function (value) ***REMOVED***
    if (value instanceof Promise) value.suppressUnhandledRejections();
    return this._then(
        returner, undefined, undefined, ***REMOVED***value: value}, undefined);
};

Promise.prototype["throw"] =
Promise.prototype.thenThrow = function (reason) ***REMOVED***
    return this._then(
        thrower, undefined, undefined, ***REMOVED***reason: reason}, undefined);
};

Promise.prototype.catchThrow = function (reason) ***REMOVED***
    if (arguments.length <= 1) ***REMOVED***
        return this._then(
            undefined, thrower, undefined, ***REMOVED***reason: reason}, undefined);
  ***REMOVED*** else ***REMOVED***
        var _reason = arguments[1];
        var handler = function() ***REMOVED***throw _reason;};
        return this.caught(reason, handler);
  ***REMOVED***
};

Promise.prototype.catchReturn = function (value) ***REMOVED***
    if (arguments.length <= 1) ***REMOVED***
        if (value instanceof Promise) value.suppressUnhandledRejections();
        return this._then(
            undefined, returner, undefined, ***REMOVED***value: value}, undefined);
  ***REMOVED*** else ***REMOVED***
        var _value = arguments[1];
        if (_value instanceof Promise) _value.suppressUnhandledRejections();
        var handler = function() ***REMOVED***return _value;};
        return this.caught(value, handler);
  ***REMOVED***
};
};

},***REMOVED***}],11:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise, INTERNAL) ***REMOVED***
var PromiseReduce = Promise.reduce;
var PromiseAll = Promise.all;

function promiseAllThis() ***REMOVED***
    return PromiseAll(this);
}

function PromiseMapSeries(promises, fn) ***REMOVED***
    return PromiseReduce(promises, fn, INTERNAL, INTERNAL);
}

Promise.prototype.each = function (fn) ***REMOVED***
    return PromiseReduce(this, fn, INTERNAL, 0)
              ._then(promiseAllThis, undefined, undefined, this, undefined);
};

Promise.prototype.mapSeries = function (fn) ***REMOVED***
    return PromiseReduce(this, fn, INTERNAL, INTERNAL);
};

Promise.each = function (promises, fn) ***REMOVED***
    return PromiseReduce(promises, fn, INTERNAL, 0)
              ._then(promiseAllThis, undefined, undefined, promises, undefined);
};

Promise.mapSeries = PromiseMapSeries;
};


},***REMOVED***}],12:[function(_dereq_,module,exports)***REMOVED***
"use strict";
var es5 = _dereq_("./es5");
var Objectfreeze = es5.freeze;
var util = _dereq_("./util");
var inherits = util.inherits;
var notEnumerableProp = util.notEnumerableProp;

function subError(nameProperty, defaultMessage) ***REMOVED***
    function SubError(message) ***REMOVED***
        if (!(this instanceof SubError)) return new SubError(message);
        notEnumerableProp(this, "message",
            typeof message === "string" ? message : defaultMessage);
        notEnumerableProp(this, "name", nameProperty);
        if (Error.captureStackTrace) ***REMOVED***
            Error.captureStackTrace(this, this.constructor);
      ***REMOVED*** else ***REMOVED***
            Error.call(this);
      ***REMOVED***
  ***REMOVED***
    inherits(SubError, Error);
    return SubError;
}

var _TypeError, _RangeError;
var Warning = subError("Warning", "warning");
var CancellationError = subError("CancellationError", "cancellation error");
var TimeoutError = subError("TimeoutError", "timeout error");
var AggregateError = subError("AggregateError", "aggregate error");
try ***REMOVED***
    _TypeError = TypeError;
    _RangeError = RangeError;
} catch(e) ***REMOVED***
    _TypeError = subError("TypeError", "type error");
    _RangeError = subError("RangeError", "range error");
}

var methods = ("join pop push shift unshift slice filter forEach some " +
    "every map indexOf lastIndexOf reduce reduceRight sort reverse").split(" ");

for (var i = 0; i < methods.length; ++i) ***REMOVED***
    if (typeof Array.prototype[methods[i]] === "function") ***REMOVED***
        AggregateError.prototype[methods[i]] = Array.prototype[methods[i]];
  ***REMOVED***
}

es5.defineProperty(AggregateError.prototype, "length", ***REMOVED***
    value: 0,
    configurable: false,
    writable: true,
    enumerable: true
});
AggregateError.prototype["isOperational"] = true;
var level = 0;
AggregateError.prototype.toString = function() ***REMOVED***
    var indent = Array(level * 4 + 1).join(" ");
    var ret = "\n" + indent + "AggregateError of:" + "\n";
    level++;
    indent = Array(level * 4 + 1).join(" ");
    for (var i = 0; i < this.length; ++i) ***REMOVED***
        var str = this[i] === this ? "[Circular AggregateError]" : this[i] + "";
        var lines = str.split("\n");
        for (var j = 0; j < lines.length; ++j) ***REMOVED***
            lines[j] = indent + lines[j];
      ***REMOVED***
        str = lines.join("\n");
        ret += str + "\n";
  ***REMOVED***
    level--;
    return ret;
};

function OperationalError(message) ***REMOVED***
    if (!(this instanceof OperationalError))
        return new OperationalError(message);
    notEnumerableProp(this, "name", "OperationalError");
    notEnumerableProp(this, "message", message);
    this.cause = message;
    this["isOperational"] = true;

    if (message instanceof Error) ***REMOVED***
        notEnumerableProp(this, "message", message.message);
        notEnumerableProp(this, "stack", message.stack);
  ***REMOVED*** else if (Error.captureStackTrace) ***REMOVED***
        Error.captureStackTrace(this, this.constructor);
  ***REMOVED***

}
inherits(OperationalError, Error);

var errorTypes = Error["__BluebirdErrorTypes__"];
if (!errorTypes) ***REMOVED***
    errorTypes = Objectfreeze(***REMOVED***
        CancellationError: CancellationError,
        TimeoutError: TimeoutError,
        OperationalError: OperationalError,
        RejectionError: OperationalError,
        AggregateError: AggregateError
  ***REMOVED***);
    es5.defineProperty(Error, "__BluebirdErrorTypes__", ***REMOVED***
        value: errorTypes,
        writable: false,
        enumerable: false,
        configurable: false
  ***REMOVED***);
}

module.exports = ***REMOVED***
    Error: Error,
    TypeError: _TypeError,
    RangeError: _RangeError,
    CancellationError: errorTypes.CancellationError,
    OperationalError: errorTypes.OperationalError,
    TimeoutError: errorTypes.TimeoutError,
    AggregateError: errorTypes.AggregateError,
    Warning: Warning
};

},***REMOVED***"./es5":13,"./util":36}],13:[function(_dereq_,module,exports)***REMOVED***
var isES5 = (function()***REMOVED***
    "use strict";
    return this === undefined;
})();

if (isES5) ***REMOVED***
    module.exports = ***REMOVED***
        freeze: Object.freeze,
        defineProperty: Object.defineProperty,
        getDescriptor: Object.getOwnPropertyDescriptor,
        keys: Object.keys,
        names: Object.getOwnPropertyNames,
        getPrototypeOf: Object.getPrototypeOf,
        isArray: Array.isArray,
        isES5: isES5,
        propertyIsWritable: function(obj, prop) ***REMOVED***
            var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
            return !!(!descriptor || descriptor.writable || descriptor.set);
      ***REMOVED***
  ***REMOVED***;
} else ***REMOVED***
    var has = ***REMOVED***}.hasOwnProperty;
    var str = ***REMOVED***}.toString;
    var proto = ***REMOVED***}.constructor.prototype;

    var ObjectKeys = function (o) ***REMOVED***
        var ret = [];
        for (var key in o) ***REMOVED***
            if (has.call(o, key)) ***REMOVED***
                ret.push(key);
          ***REMOVED***
      ***REMOVED***
        return ret;
  ***REMOVED***;

    var ObjectGetDescriptor = function(o, key) ***REMOVED***
        return ***REMOVED***value: o[key]};
  ***REMOVED***;

    var ObjectDefineProperty = function (o, key, desc) ***REMOVED***
        o[key] = desc.value;
        return o;
  ***REMOVED***;

    var ObjectFreeze = function (obj) ***REMOVED***
        return obj;
  ***REMOVED***;

    var ObjectGetPrototypeOf = function (obj) ***REMOVED***
        try ***REMOVED***
            return Object(obj).constructor.prototype;
      ***REMOVED***
        catch (e) ***REMOVED***
            return proto;
      ***REMOVED***
  ***REMOVED***;

    var ArrayIsArray = function (obj) ***REMOVED***
        try ***REMOVED***
            return str.call(obj) === "[object Array]";
      ***REMOVED***
        catch(e) ***REMOVED***
            return false;
      ***REMOVED***
  ***REMOVED***;

    module.exports = ***REMOVED***
        isArray: ArrayIsArray,
        keys: ObjectKeys,
        names: ObjectKeys,
        defineProperty: ObjectDefineProperty,
        getDescriptor: ObjectGetDescriptor,
        freeze: ObjectFreeze,
        getPrototypeOf: ObjectGetPrototypeOf,
        isES5: isES5,
        propertyIsWritable: function() ***REMOVED***
            return true;
      ***REMOVED***
  ***REMOVED***;
}

},***REMOVED***}],14:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise, INTERNAL) ***REMOVED***
var PromiseMap = Promise.map;

Promise.prototype.filter = function (fn, options) ***REMOVED***
    return PromiseMap(this, fn, options, INTERNAL);
};

Promise.filter = function (promises, fn, options) ***REMOVED***
    return PromiseMap(promises, fn, options, INTERNAL);
};
};

},***REMOVED***}],15:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise, tryConvertToPromise, NEXT_FILTER) ***REMOVED***
var util = _dereq_("./util");
var CancellationError = Promise.CancellationError;
var errorObj = util.errorObj;
var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);

function PassThroughHandlerContext(promise, type, handler) ***REMOVED***
    this.promise = promise;
    this.type = type;
    this.handler = handler;
    this.called = false;
    this.cancelPromise = null;
}

PassThroughHandlerContext.prototype.isFinallyHandler = function() ***REMOVED***
    return this.type === 0;
};

function FinallyHandlerCancelReaction(finallyHandler) ***REMOVED***
    this.finallyHandler = finallyHandler;
}

FinallyHandlerCancelReaction.prototype._resultCancelled = function() ***REMOVED***
    checkCancel(this.finallyHandler);
};

function checkCancel(ctx, reason) ***REMOVED***
    if (ctx.cancelPromise != null) ***REMOVED***
        if (arguments.length > 1) ***REMOVED***
            ctx.cancelPromise._reject(reason);
      ***REMOVED*** else ***REMOVED***
            ctx.cancelPromise._cancel();
      ***REMOVED***
        ctx.cancelPromise = null;
        return true;
  ***REMOVED***
    return false;
}

function succeed() ***REMOVED***
    return finallyHandler.call(this, this.promise._target()._settledValue());
}
function fail(reason) ***REMOVED***
    if (checkCancel(this, reason)) return;
    errorObj.e = reason;
    return errorObj;
}
function finallyHandler(reasonOrValue) ***REMOVED***
    var promise = this.promise;
    var handler = this.handler;

    if (!this.called) ***REMOVED***
        this.called = true;
        var ret = this.isFinallyHandler()
            ? handler.call(promise._boundValue())
            : handler.call(promise._boundValue(), reasonOrValue);
        if (ret === NEXT_FILTER) ***REMOVED***
            return ret;
      ***REMOVED*** else if (ret !== undefined) ***REMOVED***
            promise._setReturnedNonUndefined();
            var maybePromise = tryConvertToPromise(ret, promise);
            if (maybePromise instanceof Promise) ***REMOVED***
                if (this.cancelPromise != null) ***REMOVED***
                    if (maybePromise._isCancelled()) ***REMOVED***
                        var reason =
                            new CancellationError("late cancellation observer");
                        promise._attachExtraTrace(reason);
                        errorObj.e = reason;
                        return errorObj;
                  ***REMOVED*** else if (maybePromise.isPending()) ***REMOVED***
                        maybePromise._attachCancellationCallback(
                            new FinallyHandlerCancelReaction(this));
                  ***REMOVED***
              ***REMOVED***
                return maybePromise._then(
                    succeed, fail, undefined, this, undefined);
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***

    if (promise.isRejected()) ***REMOVED***
        checkCancel(this);
        errorObj.e = reasonOrValue;
        return errorObj;
  ***REMOVED*** else ***REMOVED***
        checkCancel(this);
        return reasonOrValue;
  ***REMOVED***
}

Promise.prototype._passThrough = function(handler, type, success, fail) ***REMOVED***
    if (typeof handler !== "function") return this.then();
    return this._then(success,
                      fail,
                      undefined,
                      new PassThroughHandlerContext(this, type, handler),
                      undefined);
};

Promise.prototype.lastly =
Promise.prototype["finally"] = function (handler) ***REMOVED***
    return this._passThrough(handler,
                             0,
                             finallyHandler,
                             finallyHandler);
};


Promise.prototype.tap = function (handler) ***REMOVED***
    return this._passThrough(handler, 1, finallyHandler);
};

Promise.prototype.tapCatch = function (handlerOrPredicate) ***REMOVED***
    var len = arguments.length;
    if(len === 1) ***REMOVED***
        return this._passThrough(handlerOrPredicate,
                                 1,
                                 undefined,
                                 finallyHandler);
  ***REMOVED*** else ***REMOVED***
         var catchInstances = new Array(len - 1),
            j = 0, i;
        for (i = 0; i < len - 1; ++i) ***REMOVED***
            var item = arguments[i];
            if (util.isObject(item)) ***REMOVED***
                catchInstances[j++] = item;
          ***REMOVED*** else ***REMOVED***
                return Promise.reject(new TypeError(
                    "tapCatch statement predicate: "
                    + "expecting an object but got " + util.classString(item)
                ));
          ***REMOVED***
      ***REMOVED***
        catchInstances.length = j;
        var handler = arguments[i];
        return this._passThrough(catchFilter(catchInstances, handler, this),
                                 1,
                                 undefined,
                                 finallyHandler);
  ***REMOVED***

};

return PassThroughHandlerContext;
};

},***REMOVED***"./catch_filter":7,"./util":36}],16:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise,
                          apiRejection,
                          INTERNAL,
                          tryConvertToPromise,
                          Proxyable,
                          debug) ***REMOVED***
var errors = _dereq_("./errors");
var TypeError = errors.TypeError;
var util = _dereq_("./util");
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
var yieldHandlers = [];

function promiseFromYieldHandler(value, yieldHandlers, traceParent) ***REMOVED***
    for (var i = 0; i < yieldHandlers.length; ++i) ***REMOVED***
        traceParent._pushContext();
        var result = tryCatch(yieldHandlers[i])(value);
        traceParent._popContext();
        if (result === errorObj) ***REMOVED***
            traceParent._pushContext();
            var ret = Promise.reject(errorObj.e);
            traceParent._popContext();
            return ret;
      ***REMOVED***
        var maybePromise = tryConvertToPromise(result, traceParent);
        if (maybePromise instanceof Promise) return maybePromise;
  ***REMOVED***
    return null;
}

function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) ***REMOVED***
    if (debug.cancellation()) ***REMOVED***
        var internal = new Promise(INTERNAL);
        var _finallyPromise = this._finallyPromise = new Promise(INTERNAL);
        this._promise = internal.lastly(function() ***REMOVED***
            return _finallyPromise;
      ***REMOVED***);
        internal._captureStackTrace();
        internal._setOnCancel(this);
  ***REMOVED*** else ***REMOVED***
        var promise = this._promise = new Promise(INTERNAL);
        promise._captureStackTrace();
  ***REMOVED***
    this._stack = stack;
    this._generatorFunction = generatorFunction;
    this._receiver = receiver;
    this._generator = undefined;
    this._yieldHandlers = typeof yieldHandler === "function"
        ? [yieldHandler].concat(yieldHandlers)
        : yieldHandlers;
    this._yieldedPromise = null;
    this._cancellationPhase = false;
}
util.inherits(PromiseSpawn, Proxyable);

PromiseSpawn.prototype._isResolved = function() ***REMOVED***
    return this._promise === null;
};

PromiseSpawn.prototype._cleanup = function() ***REMOVED***
    this._promise = this._generator = null;
    if (debug.cancellation() && this._finallyPromise !== null) ***REMOVED***
        this._finallyPromise._fulfill();
        this._finallyPromise = null;
  ***REMOVED***
};

PromiseSpawn.prototype._promiseCancelled = function() ***REMOVED***
    if (this._isResolved()) return;
    var implementsReturn = typeof this._generator["return"] !== "undefined";

    var result;
    if (!implementsReturn) ***REMOVED***
        var reason = new Promise.CancellationError(
            "generator .return() sentinel");
        Promise.coroutine.returnSentinel = reason;
        this._promise._attachExtraTrace(reason);
        this._promise._pushContext();
        result = tryCatch(this._generator["throw"]).call(this._generator,
                                                         reason);
        this._promise._popContext();
  ***REMOVED*** else ***REMOVED***
        this._promise._pushContext();
        result = tryCatch(this._generator["return"]).call(this._generator,
                                                          undefined);
        this._promise._popContext();
  ***REMOVED***
    this._cancellationPhase = true;
    this._yieldedPromise = null;
    this._continue(result);
};

PromiseSpawn.prototype._promiseFulfilled = function(value) ***REMOVED***
    this._yieldedPromise = null;
    this._promise._pushContext();
    var result = tryCatch(this._generator.next).call(this._generator, value);
    this._promise._popContext();
    this._continue(result);
};

PromiseSpawn.prototype._promiseRejected = function(reason) ***REMOVED***
    this._yieldedPromise = null;
    this._promise._attachExtraTrace(reason);
    this._promise._pushContext();
    var result = tryCatch(this._generator["throw"])
        .call(this._generator, reason);
    this._promise._popContext();
    this._continue(result);
};

PromiseSpawn.prototype._resultCancelled = function() ***REMOVED***
    if (this._yieldedPromise instanceof Promise) ***REMOVED***
        var promise = this._yieldedPromise;
        this._yieldedPromise = null;
        promise.cancel();
  ***REMOVED***
};

PromiseSpawn.prototype.promise = function () ***REMOVED***
    return this._promise;
};

PromiseSpawn.prototype._run = function () ***REMOVED***
    this._generator = this._generatorFunction.call(this._receiver);
    this._receiver =
        this._generatorFunction = undefined;
    this._promiseFulfilled(undefined);
};

PromiseSpawn.prototype._continue = function (result) ***REMOVED***
    var promise = this._promise;
    if (result === errorObj) ***REMOVED***
        this._cleanup();
        if (this._cancellationPhase) ***REMOVED***
            return promise.cancel();
      ***REMOVED*** else ***REMOVED***
            return promise._rejectCallback(result.e, false);
      ***REMOVED***
  ***REMOVED***

    var value = result.value;
    if (result.done === true) ***REMOVED***
        this._cleanup();
        if (this._cancellationPhase) ***REMOVED***
            return promise.cancel();
      ***REMOVED*** else ***REMOVED***
            return promise._resolveCallback(value);
      ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        var maybePromise = tryConvertToPromise(value, this._promise);
        if (!(maybePromise instanceof Promise)) ***REMOVED***
            maybePromise =
                promiseFromYieldHandler(maybePromise,
                                        this._yieldHandlers,
                                        this._promise);
            if (maybePromise === null) ***REMOVED***
                this._promiseRejected(
                    new TypeError(
                        "A value %s was yielded that could not be treated as a promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a\u000a".replace("%s", String(value)) +
                        "From coroutine:\u000a" +
                        this._stack.split("\n").slice(1, -7).join("\n")
                    )
                );
                return;
          ***REMOVED***
      ***REMOVED***
        maybePromise = maybePromise._target();
        var bitField = maybePromise._bitField;
        ;
        if (((bitField & 50397184) === 0)) ***REMOVED***
            this._yieldedPromise = maybePromise;
            maybePromise._proxy(this, null);
      ***REMOVED*** else if (((bitField & 33554432) !== 0)) ***REMOVED***
            Promise._async.invoke(
                this._promiseFulfilled, this, maybePromise._value()
            );
      ***REMOVED*** else if (((bitField & 16777216) !== 0)) ***REMOVED***
            Promise._async.invoke(
                this._promiseRejected, this, maybePromise._reason()
            );
      ***REMOVED*** else ***REMOVED***
            this._promiseCancelled();
      ***REMOVED***
  ***REMOVED***
};

Promise.coroutine = function (generatorFunction, options) ***REMOVED***
    if (typeof generatorFunction !== "function") ***REMOVED***
        throw new TypeError("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED***
    var yieldHandler = Object(options).yieldHandler;
    var PromiseSpawn$ = PromiseSpawn;
    var stack = new Error().stack;
    return function () ***REMOVED***
        var generator = generatorFunction.apply(this, arguments);
        var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler,
                                      stack);
        var ret = spawn.promise();
        spawn._generator = generator;
        spawn._promiseFulfilled(undefined);
        return ret;
  ***REMOVED***;
};

Promise.coroutine.addYieldHandler = function(fn) ***REMOVED***
    if (typeof fn !== "function") ***REMOVED***
        throw new TypeError("expecting a function but got " + util.classString(fn));
  ***REMOVED***
    yieldHandlers.push(fn);
};

Promise.spawn = function (generatorFunction) ***REMOVED***
    debug.deprecated("Promise.spawn()", "Promise.coroutine()");
    if (typeof generatorFunction !== "function") ***REMOVED***
        return apiRejection("generatorFunction must be a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED***
    var spawn = new PromiseSpawn(generatorFunction, this);
    var ret = spawn.promise();
    spawn._run(Promise.spawn);
    return ret;
};
};

},***REMOVED***"./errors":12,"./util":36}],17:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports =
function(Promise, PromiseArray, tryConvertToPromise, INTERNAL, async) ***REMOVED***
var util = _dereq_("./util");
var canEvaluate = util.canEvaluate;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var reject;

if (!true) ***REMOVED***
if (canEvaluate) ***REMOVED***
    var thenCallback = function(i) ***REMOVED***
        return new Function("value", "holder", "                             \n\
            'use strict';                                                    \n\
            holder.pIndex = value;                                           \n\
            holder.checkFulfillment(this);                                   \n\
            ".replace(/Index/g, i));
  ***REMOVED***;

    var promiseSetter = function(i) ***REMOVED***
        return new Function("promise", "holder", "                           \n\
            'use strict';                                                    \n\
            holder.pIndex = promise;                                         \n\
            ".replace(/Index/g, i));
  ***REMOVED***;

    var generateHolderClass = function(total) ***REMOVED***
        var props = new Array(total);
        for (var i = 0; i < props.length; ++i) ***REMOVED***
            props[i] = "this.p" + (i+1);
      ***REMOVED***
        var assignment = props.join(" = ") + " = null;";
        var cancellationCode= "var promise;\n" + props.map(function(prop) ***REMOVED***
            return "                                                         \n\
                promise = " + prop + ";                                      \n\
                if (promise instanceof Promise) ***REMOVED***                            \n\
                    promise.cancel();                                        \n\
              ***REMOVED***                                                            \n\
            ";
      ***REMOVED***).join("\n");
        var passedArguments = props.join(", ");
        var name = "Holder$" + total;


        var code = "return function(tryCatch, errorObj, Promise, async) ***REMOVED***    \n\
            'use strict';                                                    \n\
            function [TheName](fn) ***REMOVED***                                         \n\
                [TheProperties]                                              \n\
                this.fn = fn;                                                \n\
                this.asyncNeeded = true;                                     \n\
                this.now = 0;                                                \n\
          ***REMOVED***                                                                \n\
                                                                             \n\
            [TheName].prototype._callFunction = function(promise) ***REMOVED***          \n\
                promise._pushContext();                                      \n\
                var ret = tryCatch(this.fn)([ThePassedArguments]);           \n\
                promise._popContext();                                       \n\
                if (ret === errorObj) ***REMOVED***                                      \n\
                    promise._rejectCallback(ret.e, false);                   \n\
              ***REMOVED*** else ***REMOVED***                                                     \n\
                    promise._resolveCallback(ret);                           \n\
              ***REMOVED***                                                            \n\
          ***REMOVED***;                                                               \n\
                                                                             \n\
            [TheName].prototype.checkFulfillment = function(promise) ***REMOVED***       \n\
                var now = ++this.now;                                        \n\
                if (now === [TheTotal]) ***REMOVED***                                    \n\
                    if (this.asyncNeeded) ***REMOVED***                                  \n\
                        async.invoke(this._callFunction, this, promise);     \n\
                  ***REMOVED*** else ***REMOVED***                                                 \n\
                        this._callFunction(promise);                         \n\
                  ***REMOVED***                                                        \n\
                                                                             \n\
              ***REMOVED***                                                            \n\
          ***REMOVED***;                                                               \n\
                                                                             \n\
            [TheName].prototype._resultCancelled = function() ***REMOVED***              \n\
                [CancellationCode]                                           \n\
          ***REMOVED***;                                                               \n\
                                                                             \n\
            return [TheName];                                                \n\
      ***REMOVED***(tryCatch, errorObj, Promise, async);                               \n\
        ";

        code = code.replace(/\[TheName\]/g, name)
            .replace(/\[TheTotal\]/g, total)
            .replace(/\[ThePassedArguments\]/g, passedArguments)
            .replace(/\[TheProperties\]/g, assignment)
            .replace(/\[CancellationCode\]/g, cancellationCode);

        return new Function("tryCatch", "errorObj", "Promise", "async", code)
                           (tryCatch, errorObj, Promise, async);
  ***REMOVED***;

    var holderClasses = [];
    var thenCallbacks = [];
    var promiseSetters = [];

    for (var i = 0; i < 8; ++i) ***REMOVED***
        holderClasses.push(generateHolderClass(i + 1));
        thenCallbacks.push(thenCallback(i + 1));
        promiseSetters.push(promiseSetter(i + 1));
  ***REMOVED***

    reject = function (reason) ***REMOVED***
        this._reject(reason);
  ***REMOVED***;
}}

Promise.join = function () ***REMOVED***
    var last = arguments.length - 1;
    var fn;
    if (last > 0 && typeof arguments[last] === "function") ***REMOVED***
        fn = arguments[last];
        if (!true) ***REMOVED***
            if (last <= 8 && canEvaluate) ***REMOVED***
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                var HolderClass = holderClasses[last - 1];
                var holder = new HolderClass(fn);
                var callbacks = thenCallbacks;

                for (var i = 0; i < last; ++i) ***REMOVED***
                    var maybePromise = tryConvertToPromise(arguments[i], ret);
                    if (maybePromise instanceof Promise) ***REMOVED***
                        maybePromise = maybePromise._target();
                        var bitField = maybePromise._bitField;
                        ;
                        if (((bitField & 50397184) === 0)) ***REMOVED***
                            maybePromise._then(callbacks[i], reject,
                                               undefined, ret, holder);
                            promiseSetters[i](maybePromise, holder);
                            holder.asyncNeeded = false;
                      ***REMOVED*** else if (((bitField & 33554432) !== 0)) ***REMOVED***
                            callbacks[i].call(ret,
                                              maybePromise._value(), holder);
                      ***REMOVED*** else if (((bitField & 16777216) !== 0)) ***REMOVED***
                            ret._reject(maybePromise._reason());
                      ***REMOVED*** else ***REMOVED***
                            ret._cancel();
                      ***REMOVED***
                  ***REMOVED*** else ***REMOVED***
                        callbacks[i].call(ret, maybePromise, holder);
                  ***REMOVED***
              ***REMOVED***

                if (!ret._isFateSealed()) ***REMOVED***
                    if (holder.asyncNeeded) ***REMOVED***
                        var context = Promise._getContext();
                        holder.fn = util.contextBind(context, holder.fn);
                  ***REMOVED***
                    ret._setAsyncGuaranteed();
                    ret._setOnCancel(holder);
              ***REMOVED***
                return ret;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    var args = [].slice.call(arguments);;
    if (fn) args.pop();
    var ret = new PromiseArray(args).promise();
    return fn !== undefined ? ret.spread(fn) : ret;
};

};

},***REMOVED***"./util":36}],18:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL,
                          debug) ***REMOVED***
var util = _dereq_("./util");
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;
var async = Promise._async;

function MappingPromiseArray(promises, fn, limit, _filter) ***REMOVED***
    this.constructor$(promises);
    this._promise._captureStackTrace();
    var context = Promise._getContext();
    this._callback = util.contextBind(context, fn);
    this._preservedValues = _filter === INTERNAL
        ? new Array(this.length())
        : null;
    this._limit = limit;
    this._inFlight = 0;
    this._queue = [];
    async.invoke(this._asyncInit, this, undefined);
    if (util.isArray(promises)) ***REMOVED***
        for (var i = 0; i < promises.length; ++i) ***REMOVED***
            var maybePromise = promises[i];
            if (maybePromise instanceof Promise) ***REMOVED***
                maybePromise.suppressUnhandledRejections();
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
}
util.inherits(MappingPromiseArray, PromiseArray);

MappingPromiseArray.prototype._asyncInit = function() ***REMOVED***
    this._init$(undefined, -2);
};

MappingPromiseArray.prototype._init = function () ***REMOVED***};

MappingPromiseArray.prototype._promiseFulfilled = function (value, index) ***REMOVED***
    var values = this._values;
    var length = this.length();
    var preservedValues = this._preservedValues;
    var limit = this._limit;

    if (index < 0) ***REMOVED***
        index = (index * -1) - 1;
        values[index] = value;
        if (limit >= 1) ***REMOVED***
            this._inFlight--;
            this._drainQueue();
            if (this._isResolved()) return true;
      ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        if (limit >= 1 && this._inFlight >= limit) ***REMOVED***
            values[index] = value;
            this._queue.push(index);
            return false;
      ***REMOVED***
        if (preservedValues !== null) preservedValues[index] = value;

        var promise = this._promise;
        var callback = this._callback;
        var receiver = promise._boundValue();
        promise._pushContext();
        var ret = tryCatch(callback).call(receiver, value, index, length);
        var promiseCreated = promise._popContext();
        debug.checkForgottenReturns(
            ret,
            promiseCreated,
            preservedValues !== null ? "Promise.filter" : "Promise.map",
            promise
        );
        if (ret === errorObj) ***REMOVED***
            this._reject(ret.e);
            return true;
      ***REMOVED***

        var maybePromise = tryConvertToPromise(ret, this._promise);
        if (maybePromise instanceof Promise) ***REMOVED***
            maybePromise = maybePromise._target();
            var bitField = maybePromise._bitField;
            ;
            if (((bitField & 50397184) === 0)) ***REMOVED***
                if (limit >= 1) this._inFlight++;
                values[index] = maybePromise;
                maybePromise._proxy(this, (index + 1) * -1);
                return false;
          ***REMOVED*** else if (((bitField & 33554432) !== 0)) ***REMOVED***
                ret = maybePromise._value();
          ***REMOVED*** else if (((bitField & 16777216) !== 0)) ***REMOVED***
                this._reject(maybePromise._reason());
                return true;
          ***REMOVED*** else ***REMOVED***
                this._cancel();
                return true;
          ***REMOVED***
      ***REMOVED***
        values[index] = ret;
  ***REMOVED***
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= length) ***REMOVED***
        if (preservedValues !== null) ***REMOVED***
            this._filter(values, preservedValues);
      ***REMOVED*** else ***REMOVED***
            this._resolve(values);
      ***REMOVED***
        return true;
  ***REMOVED***
    return false;
};

MappingPromiseArray.prototype._drainQueue = function () ***REMOVED***
    var queue = this._queue;
    var limit = this._limit;
    var values = this._values;
    while (queue.length > 0 && this._inFlight < limit) ***REMOVED***
        if (this._isResolved()) return;
        var index = queue.pop();
        this._promiseFulfilled(values[index], index);
  ***REMOVED***
};

MappingPromiseArray.prototype._filter = function (booleans, values) ***REMOVED***
    var len = values.length;
    var ret = new Array(len);
    var j = 0;
    for (var i = 0; i < len; ++i) ***REMOVED***
        if (booleans[i]) ret[j++] = values[i];
  ***REMOVED***
    ret.length = j;
    this._resolve(ret);
};

MappingPromiseArray.prototype.preservedValues = function () ***REMOVED***
    return this._preservedValues;
};

function map(promises, fn, options, _filter) ***REMOVED***
    if (typeof fn !== "function") ***REMOVED***
        return apiRejection("expecting a function but got " + util.classString(fn));
  ***REMOVED***

    var limit = 0;
    if (options !== undefined) ***REMOVED***
        if (typeof options === "object" && options !== null) ***REMOVED***
            if (typeof options.concurrency !== "number") ***REMOVED***
                return Promise.reject(
                    new TypeError("'concurrency' must be a number but it is " +
                                    util.classString(options.concurrency)));
          ***REMOVED***
            limit = options.concurrency;
      ***REMOVED*** else ***REMOVED***
            return Promise.reject(new TypeError(
                            "options argument must be an object but it is " +
                             util.classString(options)));
      ***REMOVED***
  ***REMOVED***
    limit = typeof limit === "number" &&
        isFinite(limit) && limit >= 1 ? limit : 0;
    return new MappingPromiseArray(promises, fn, limit, _filter).promise();
}

Promise.prototype.map = function (fn, options) ***REMOVED***
    return map(this, fn, options, null);
};

Promise.map = function (promises, fn, options, _filter) ***REMOVED***
    return map(promises, fn, options, _filter);
};


};

},***REMOVED***"./util":36}],19:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports =
function(Promise, INTERNAL, tryConvertToPromise, apiRejection, debug) ***REMOVED***
var util = _dereq_("./util");
var tryCatch = util.tryCatch;

Promise.method = function (fn) ***REMOVED***
    if (typeof fn !== "function") ***REMOVED***
        throw new Promise.TypeError("expecting a function but got " + util.classString(fn));
  ***REMOVED***
    return function () ***REMOVED***
        var ret = new Promise(INTERNAL);
        ret._captureStackTrace();
        ret._pushContext();
        var value = tryCatch(fn).apply(this, arguments);
        var promiseCreated = ret._popContext();
        debug.checkForgottenReturns(
            value, promiseCreated, "Promise.method", ret);
        ret._resolveFromSyncValue(value);
        return ret;
  ***REMOVED***;
};

Promise.attempt = Promise["try"] = function (fn) ***REMOVED***
    if (typeof fn !== "function") ***REMOVED***
        return apiRejection("expecting a function but got " + util.classString(fn));
  ***REMOVED***
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._pushContext();
    var value;
    if (arguments.length > 1) ***REMOVED***
        debug.deprecated("calling Promise.try with more than 1 argument");
        var arg = arguments[1];
        var ctx = arguments[2];
        value = util.isArray(arg) ? tryCatch(fn).apply(ctx, arg)
                                  : tryCatch(fn).call(ctx, arg);
  ***REMOVED*** else ***REMOVED***
        value = tryCatch(fn)();
  ***REMOVED***
    var promiseCreated = ret._popContext();
    debug.checkForgottenReturns(
        value, promiseCreated, "Promise.try", ret);
    ret._resolveFromSyncValue(value);
    return ret;
};

Promise.prototype._resolveFromSyncValue = function (value) ***REMOVED***
    if (value === util.errorObj) ***REMOVED***
        this._rejectCallback(value.e, false);
  ***REMOVED*** else ***REMOVED***
        this._resolveCallback(value, true);
  ***REMOVED***
};
};

},***REMOVED***"./util":36}],20:[function(_dereq_,module,exports)***REMOVED***
"use strict";
var util = _dereq_("./util");
var maybeWrapAsError = util.maybeWrapAsError;
var errors = _dereq_("./errors");
var OperationalError = errors.OperationalError;
var es5 = _dereq_("./es5");

function isUntypedError(obj) ***REMOVED***
    return obj instanceof Error &&
        es5.getPrototypeOf(obj) === Error.prototype;
}

var rErrorKey = /^(?:name|message|stack|cause)$/;
function wrapAsOperationalError(obj) ***REMOVED***
    var ret;
    if (isUntypedError(obj)) ***REMOVED***
        ret = new OperationalError(obj);
        ret.name = obj.name;
        ret.message = obj.message;
        ret.stack = obj.stack;
        var keys = es5.keys(obj);
        for (var i = 0; i < keys.length; ++i) ***REMOVED***
            var key = keys[i];
            if (!rErrorKey.test(key)) ***REMOVED***
                ret[key] = obj[key];
          ***REMOVED***
      ***REMOVED***
        return ret;
  ***REMOVED***
    util.markAsOriginatingFromRejection(obj);
    return obj;
}

function nodebackForPromise(promise, multiArgs) ***REMOVED***
    return function(err, value) ***REMOVED***
        if (promise === null) return;
        if (err) ***REMOVED***
            var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
            promise._attachExtraTrace(wrapped);
            promise._reject(wrapped);
      ***REMOVED*** else if (!multiArgs) ***REMOVED***
            promise._fulfill(value);
      ***REMOVED*** else ***REMOVED***
            var args = [].slice.call(arguments, 1);;
            promise._fulfill(args);
      ***REMOVED***
        promise = null;
  ***REMOVED***;
}

module.exports = nodebackForPromise;

},***REMOVED***"./errors":12,"./es5":13,"./util":36}],21:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise) ***REMOVED***
var util = _dereq_("./util");
var async = Promise._async;
var tryCatch = util.tryCatch;
var errorObj = util.errorObj;

function spreadAdapter(val, nodeback) ***REMOVED***
    var promise = this;
    if (!util.isArray(val)) return successAdapter.call(promise, val, nodeback);
    var ret =
        tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
    if (ret === errorObj) ***REMOVED***
        async.throwLater(ret.e);
  ***REMOVED***
}

function successAdapter(val, nodeback) ***REMOVED***
    var promise = this;
    var receiver = promise._boundValue();
    var ret = val === undefined
        ? tryCatch(nodeback).call(receiver, null)
        : tryCatch(nodeback).call(receiver, null, val);
    if (ret === errorObj) ***REMOVED***
        async.throwLater(ret.e);
  ***REMOVED***
}
function errorAdapter(reason, nodeback) ***REMOVED***
    var promise = this;
    if (!reason) ***REMOVED***
        var newReason = new Error(reason + "");
        newReason.cause = reason;
        reason = newReason;
  ***REMOVED***
    var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
    if (ret === errorObj) ***REMOVED***
        async.throwLater(ret.e);
  ***REMOVED***
}

Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback,
                                                                     options) ***REMOVED***
    if (typeof nodeback == "function") ***REMOVED***
        var adapter = successAdapter;
        if (options !== undefined && Object(options).spread) ***REMOVED***
            adapter = spreadAdapter;
      ***REMOVED***
        this._then(
            adapter,
            errorAdapter,
            undefined,
            this,
            nodeback
        );
  ***REMOVED***
    return this;
};
};

},***REMOVED***"./util":36}],22:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function() ***REMOVED***
var makeSelfResolutionError = function () ***REMOVED***
    return new TypeError("circular promise resolution chain\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
};
var reflectHandler = function() ***REMOVED***
    return new Promise.PromiseInspection(this._target());
};
var apiRejection = function(msg) ***REMOVED***
    return Promise.reject(new TypeError(msg));
};
function Proxyable() ***REMOVED***}
var UNDEFINED_BINDING = ***REMOVED***};
var util = _dereq_("./util");
util.setReflectHandler(reflectHandler);

var getDomain = function() ***REMOVED***
    var domain = process.domain;
    if (domain === undefined) ***REMOVED***
        return null;
  ***REMOVED***
    return domain;
};
var getContextDefault = function() ***REMOVED***
    return null;
};
var getContextDomain = function() ***REMOVED***
    return ***REMOVED***
        domain: getDomain(),
        async: null
  ***REMOVED***;
};
var AsyncResource = util.isNode && util.nodeSupportsAsyncResource ?
    _dereq_("async_hooks").AsyncResource : null;
var getContextAsyncHooks = function() ***REMOVED***
    return ***REMOVED***
        domain: getDomain(),
        async: new AsyncResource("Bluebird::Promise")
  ***REMOVED***;
};
var getContext = util.isNode ? getContextDomain : getContextDefault;
util.notEnumerableProp(Promise, "_getContext", getContext);
var enableAsyncHooks = function() ***REMOVED***
    getContext = getContextAsyncHooks;
    util.notEnumerableProp(Promise, "_getContext", getContextAsyncHooks);
};
var disableAsyncHooks = function() ***REMOVED***
    getContext = getContextDomain;
    util.notEnumerableProp(Promise, "_getContext", getContextDomain);
};

var es5 = _dereq_("./es5");
var Async = _dereq_("./async");
var async = new Async();
es5.defineProperty(Promise, "_async", ***REMOVED***value: async});
var errors = _dereq_("./errors");
var TypeError = Promise.TypeError = errors.TypeError;
Promise.RangeError = errors.RangeError;
var CancellationError = Promise.CancellationError = errors.CancellationError;
Promise.TimeoutError = errors.TimeoutError;
Promise.OperationalError = errors.OperationalError;
Promise.RejectionError = errors.OperationalError;
Promise.AggregateError = errors.AggregateError;
var INTERNAL = function()***REMOVED***};
var APPLY = ***REMOVED***};
var NEXT_FILTER = ***REMOVED***};
var tryConvertToPromise = _dereq_("./thenables")(Promise, INTERNAL);
var PromiseArray =
    _dereq_("./promise_array")(Promise, INTERNAL,
                               tryConvertToPromise, apiRejection, Proxyable);
var Context = _dereq_("./context")(Promise);
 /*jshint unused:false*/
var createContext = Context.create;

var debug = _dereq_("./debuggability")(Promise, Context,
    enableAsyncHooks, disableAsyncHooks);
var CapturedTrace = debug.CapturedTrace;
var PassThroughHandlerContext =
    _dereq_("./finally")(Promise, tryConvertToPromise, NEXT_FILTER);
var catchFilter = _dereq_("./catch_filter")(NEXT_FILTER);
var nodebackForPromise = _dereq_("./nodeback");
var errorObj = util.errorObj;
var tryCatch = util.tryCatch;
function check(self, executor) ***REMOVED***
    if (self == null || self.constructor !== Promise) ***REMOVED***
        throw new TypeError("the promise constructor cannot be invoked directly\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED***
    if (typeof executor !== "function") ***REMOVED***
        throw new TypeError("expecting a function but got " + util.classString(executor));
  ***REMOVED***

}

function Promise(executor) ***REMOVED***
    if (executor !== INTERNAL) ***REMOVED***
        check(this, executor);
  ***REMOVED***
    this._bitField = 0;
    this._fulfillmentHandler0 = undefined;
    this._rejectionHandler0 = undefined;
    this._promise0 = undefined;
    this._receiver0 = undefined;
    this._resolveFromExecutor(executor);
    this._promiseCreated();
    this._fireEvent("promiseCreated", this);
}

Promise.prototype.toString = function () ***REMOVED***
    return "[object Promise]";
};

Promise.prototype.caught = Promise.prototype["catch"] = function (fn) ***REMOVED***
    var len = arguments.length;
    if (len > 1) ***REMOVED***
        var catchInstances = new Array(len - 1),
            j = 0, i;
        for (i = 0; i < len - 1; ++i) ***REMOVED***
            var item = arguments[i];
            if (util.isObject(item)) ***REMOVED***
                catchInstances[j++] = item;
          ***REMOVED*** else ***REMOVED***
                return apiRejection("Catch statement predicate: " +
                    "expecting an object but got " + util.classString(item));
          ***REMOVED***
      ***REMOVED***
        catchInstances.length = j;
        fn = arguments[i];

        if (typeof fn !== "function") ***REMOVED***
            throw new TypeError("The last argument to .catch() " +
                "must be a function, got " + util.toString(fn));
      ***REMOVED***
        return this.then(undefined, catchFilter(catchInstances, fn, this));
  ***REMOVED***
    return this.then(undefined, fn);
};

Promise.prototype.reflect = function () ***REMOVED***
    return this._then(reflectHandler,
        reflectHandler, undefined, this, undefined);
};

Promise.prototype.then = function (didFulfill, didReject) ***REMOVED***
    if (debug.warnings() && arguments.length > 0 &&
        typeof didFulfill !== "function" &&
        typeof didReject !== "function") ***REMOVED***
        var msg = ".then() only accepts functions but was passed: " +
                util.classString(didFulfill);
        if (arguments.length > 1) ***REMOVED***
            msg += ", " + util.classString(didReject);
      ***REMOVED***
        this._warn(msg);
  ***REMOVED***
    return this._then(didFulfill, didReject, undefined, undefined, undefined);
};

Promise.prototype.done = function (didFulfill, didReject) ***REMOVED***
    var promise =
        this._then(didFulfill, didReject, undefined, undefined, undefined);
    promise._setIsFinal();
};

Promise.prototype.spread = function (fn) ***REMOVED***
    if (typeof fn !== "function") ***REMOVED***
        return apiRejection("expecting a function but got " + util.classString(fn));
  ***REMOVED***
    return this.all()._then(fn, undefined, undefined, APPLY, undefined);
};

Promise.prototype.toJSON = function () ***REMOVED***
    var ret = ***REMOVED***
        isFulfilled: false,
        isRejected: false,
        fulfillmentValue: undefined,
        rejectionReason: undefined
  ***REMOVED***;
    if (this.isFulfilled()) ***REMOVED***
        ret.fulfillmentValue = this.value();
        ret.isFulfilled = true;
  ***REMOVED*** else if (this.isRejected()) ***REMOVED***
        ret.rejectionReason = this.reason();
        ret.isRejected = true;
  ***REMOVED***
    return ret;
};

Promise.prototype.all = function () ***REMOVED***
    if (arguments.length > 0) ***REMOVED***
        this._warn(".all() was passed arguments but it does not take any");
  ***REMOVED***
    return new PromiseArray(this).promise();
};

Promise.prototype.error = function (fn) ***REMOVED***
    return this.caught(util.originatesFromRejection, fn);
};

Promise.getNewLibraryCopy = module.exports;

Promise.is = function (val) ***REMOVED***
    return val instanceof Promise;
};

Promise.fromNode = Promise.fromCallback = function(fn) ***REMOVED***
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    var multiArgs = arguments.length > 1 ? !!Object(arguments[1]).multiArgs
                                         : false;
    var result = tryCatch(fn)(nodebackForPromise(ret, multiArgs));
    if (result === errorObj) ***REMOVED***
        ret._rejectCallback(result.e, true);
  ***REMOVED***
    if (!ret._isFateSealed()) ret._setAsyncGuaranteed();
    return ret;
};

Promise.all = function (promises) ***REMOVED***
    return new PromiseArray(promises).promise();
};

Promise.cast = function (obj) ***REMOVED***
    var ret = tryConvertToPromise(obj);
    if (!(ret instanceof Promise)) ***REMOVED***
        ret = new Promise(INTERNAL);
        ret._captureStackTrace();
        ret._setFulfilled();
        ret._rejectionHandler0 = obj;
  ***REMOVED***
    return ret;
};

Promise.resolve = Promise.fulfilled = Promise.cast;

Promise.reject = Promise.rejected = function (reason) ***REMOVED***
    var ret = new Promise(INTERNAL);
    ret._captureStackTrace();
    ret._rejectCallback(reason, true);
    return ret;
};

Promise.setScheduler = function(fn) ***REMOVED***
    if (typeof fn !== "function") ***REMOVED***
        throw new TypeError("expecting a function but got " + util.classString(fn));
  ***REMOVED***
    return async.setScheduler(fn);
};

Promise.prototype._then = function (
    didFulfill,
    didReject,
    _,    receiver,
    internalData
) ***REMOVED***
    var haveInternalData = internalData !== undefined;
    var promise = haveInternalData ? internalData : new Promise(INTERNAL);
    var target = this._target();
    var bitField = target._bitField;

    if (!haveInternalData) ***REMOVED***
        promise._propagateFrom(this, 3);
        promise._captureStackTrace();
        if (receiver === undefined &&
            ((this._bitField & 2097152) !== 0)) ***REMOVED***
            if (!((bitField & 50397184) === 0)) ***REMOVED***
                receiver = this._boundValue();
          ***REMOVED*** else ***REMOVED***
                receiver = target === this ? undefined : this._boundTo;
          ***REMOVED***
      ***REMOVED***
        this._fireEvent("promiseChained", this, promise);
  ***REMOVED***

    var context = getContext();
    if (!((bitField & 50397184) === 0)) ***REMOVED***
        var handler, value, settler = target._settlePromiseCtx;
        if (((bitField & 33554432) !== 0)) ***REMOVED***
            value = target._rejectionHandler0;
            handler = didFulfill;
      ***REMOVED*** else if (((bitField & 16777216) !== 0)) ***REMOVED***
            value = target._fulfillmentHandler0;
            handler = didReject;
            target._unsetRejectionIsUnhandled();
      ***REMOVED*** else ***REMOVED***
            settler = target._settlePromiseLateCancellationObserver;
            value = new CancellationError("late cancellation observer");
            target._attachExtraTrace(value);
            handler = didReject;
      ***REMOVED***

        async.invoke(settler, target, ***REMOVED***
            handler: util.contextBind(context, handler),
            promise: promise,
            receiver: receiver,
            value: value
      ***REMOVED***);
  ***REMOVED*** else ***REMOVED***
        target._addCallbacks(didFulfill, didReject, promise,
                receiver, context);
  ***REMOVED***

    return promise;
};

Promise.prototype._length = function () ***REMOVED***
    return this._bitField & 65535;
};

Promise.prototype._isFateSealed = function () ***REMOVED***
    return (this._bitField & 117506048) !== 0;
};

Promise.prototype._isFollowing = function () ***REMOVED***
    return (this._bitField & 67108864) === 67108864;
};

Promise.prototype._setLength = function (len) ***REMOVED***
    this._bitField = (this._bitField & -65536) |
        (len & 65535);
};

Promise.prototype._setFulfilled = function () ***REMOVED***
    this._bitField = this._bitField | 33554432;
    this._fireEvent("promiseFulfilled", this);
};

Promise.prototype._setRejected = function () ***REMOVED***
    this._bitField = this._bitField | 16777216;
    this._fireEvent("promiseRejected", this);
};

Promise.prototype._setFollowing = function () ***REMOVED***
    this._bitField = this._bitField | 67108864;
    this._fireEvent("promiseResolved", this);
};

Promise.prototype._setIsFinal = function () ***REMOVED***
    this._bitField = this._bitField | 4194304;
};

Promise.prototype._isFinal = function () ***REMOVED***
    return (this._bitField & 4194304) > 0;
};

Promise.prototype._unsetCancelled = function() ***REMOVED***
    this._bitField = this._bitField & (~65536);
};

Promise.prototype._setCancelled = function() ***REMOVED***
    this._bitField = this._bitField | 65536;
    this._fireEvent("promiseCancelled", this);
};

Promise.prototype._setWillBeCancelled = function() ***REMOVED***
    this._bitField = this._bitField | 8388608;
};

Promise.prototype._setAsyncGuaranteed = function() ***REMOVED***
    if (async.hasCustomScheduler()) return;
    var bitField = this._bitField;
    this._bitField = bitField |
        (((bitField & 536870912) >> 2) ^
        134217728);
};

Promise.prototype._setNoAsyncGuarantee = function() ***REMOVED***
    this._bitField = (this._bitField | 536870912) &
        (~134217728);
};

Promise.prototype._receiverAt = function (index) ***REMOVED***
    var ret = index === 0 ? this._receiver0 : this[
            index * 4 - 4 + 3];
    if (ret === UNDEFINED_BINDING) ***REMOVED***
        return undefined;
  ***REMOVED*** else if (ret === undefined && this._isBound()) ***REMOVED***
        return this._boundValue();
  ***REMOVED***
    return ret;
};

Promise.prototype._promiseAt = function (index) ***REMOVED***
    return this[
            index * 4 - 4 + 2];
};

Promise.prototype._fulfillmentHandlerAt = function (index) ***REMOVED***
    return this[
            index * 4 - 4 + 0];
};

Promise.prototype._rejectionHandlerAt = function (index) ***REMOVED***
    return this[
            index * 4 - 4 + 1];
};

Promise.prototype._boundValue = function() ***REMOVED***};

Promise.prototype._migrateCallback0 = function (follower) ***REMOVED***
    var bitField = follower._bitField;
    var fulfill = follower._fulfillmentHandler0;
    var reject = follower._rejectionHandler0;
    var promise = follower._promise0;
    var receiver = follower._receiverAt(0);
    if (receiver === undefined) receiver = UNDEFINED_BINDING;
    this._addCallbacks(fulfill, reject, promise, receiver, null);
};

Promise.prototype._migrateCallbackAt = function (follower, index) ***REMOVED***
    var fulfill = follower._fulfillmentHandlerAt(index);
    var reject = follower._rejectionHandlerAt(index);
    var promise = follower._promiseAt(index);
    var receiver = follower._receiverAt(index);
    if (receiver === undefined) receiver = UNDEFINED_BINDING;
    this._addCallbacks(fulfill, reject, promise, receiver, null);
};

Promise.prototype._addCallbacks = function (
    fulfill,
    reject,
    promise,
    receiver,
    context
) ***REMOVED***
    var index = this._length();

    if (index >= 65535 - 4) ***REMOVED***
        index = 0;
        this._setLength(0);
  ***REMOVED***

    if (index === 0) ***REMOVED***
        this._promise0 = promise;
        this._receiver0 = receiver;
        if (typeof fulfill === "function") ***REMOVED***
            this._fulfillmentHandler0 = util.contextBind(context, fulfill);
      ***REMOVED***
        if (typeof reject === "function") ***REMOVED***
            this._rejectionHandler0 = util.contextBind(context, reject);
      ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        var base = index * 4 - 4;
        this[base + 2] = promise;
        this[base + 3] = receiver;
        if (typeof fulfill === "function") ***REMOVED***
            this[base + 0] =
                util.contextBind(context, fulfill);
      ***REMOVED***
        if (typeof reject === "function") ***REMOVED***
            this[base + 1] =
                util.contextBind(context, reject);
      ***REMOVED***
  ***REMOVED***
    this._setLength(index + 1);
    return index;
};

Promise.prototype._proxy = function (proxyable, arg) ***REMOVED***
    this._addCallbacks(undefined, undefined, arg, proxyable, null);
};

Promise.prototype._resolveCallback = function(value, shouldBind) ***REMOVED***
    if (((this._bitField & 117506048) !== 0)) return;
    if (value === this)
        return this._rejectCallback(makeSelfResolutionError(), false);
    var maybePromise = tryConvertToPromise(value, this);
    if (!(maybePromise instanceof Promise)) return this._fulfill(value);

    if (shouldBind) this._propagateFrom(maybePromise, 2);


    var promise = maybePromise._target();

    if (promise === this) ***REMOVED***
        this._reject(makeSelfResolutionError());
        return;
  ***REMOVED***

    var bitField = promise._bitField;
    if (((bitField & 50397184) === 0)) ***REMOVED***
        var len = this._length();
        if (len > 0) promise._migrateCallback0(this);
        for (var i = 1; i < len; ++i) ***REMOVED***
            promise._migrateCallbackAt(this, i);
      ***REMOVED***
        this._setFollowing();
        this._setLength(0);
        this._setFollowee(maybePromise);
  ***REMOVED*** else if (((bitField & 33554432) !== 0)) ***REMOVED***
        this._fulfill(promise._value());
  ***REMOVED*** else if (((bitField & 16777216) !== 0)) ***REMOVED***
        this._reject(promise._reason());
  ***REMOVED*** else ***REMOVED***
        var reason = new CancellationError("late cancellation observer");
        promise._attachExtraTrace(reason);
        this._reject(reason);
  ***REMOVED***
};

Promise.prototype._rejectCallback =
function(reason, synchronous, ignoreNonErrorWarnings) ***REMOVED***
    var trace = util.ensureErrorObject(reason);
    var hasStack = trace === reason;
    if (!hasStack && !ignoreNonErrorWarnings && debug.warnings()) ***REMOVED***
        var message = "a promise was rejected with a non-error: " +
            util.classString(reason);
        this._warn(message, true);
  ***REMOVED***
    this._attachExtraTrace(trace, synchronous ? hasStack : false);
    this._reject(reason);
};

Promise.prototype._resolveFromExecutor = function (executor) ***REMOVED***
    if (executor === INTERNAL) return;
    var promise = this;
    this._captureStackTrace();
    this._pushContext();
    var synchronous = true;
    var r = this._execute(executor, function(value) ***REMOVED***
        promise._resolveCallback(value);
  ***REMOVED***, function (reason) ***REMOVED***
        promise._rejectCallback(reason, synchronous);
  ***REMOVED***);
    synchronous = false;
    this._popContext();

    if (r !== undefined) ***REMOVED***
        promise._rejectCallback(r, true);
  ***REMOVED***
};

Promise.prototype._settlePromiseFromHandler = function (
    handler, receiver, value, promise
) ***REMOVED***
    var bitField = promise._bitField;
    if (((bitField & 65536) !== 0)) return;
    promise._pushContext();
    var x;
    if (receiver === APPLY) ***REMOVED***
        if (!value || typeof value.length !== "number") ***REMOVED***
            x = errorObj;
            x.e = new TypeError("cannot .spread() a non-array: " +
                                    util.classString(value));
      ***REMOVED*** else ***REMOVED***
            x = tryCatch(handler).apply(this._boundValue(), value);
      ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        x = tryCatch(handler).call(receiver, value);
  ***REMOVED***
    var promiseCreated = promise._popContext();
    bitField = promise._bitField;
    if (((bitField & 65536) !== 0)) return;

    if (x === NEXT_FILTER) ***REMOVED***
        promise._reject(value);
  ***REMOVED*** else if (x === errorObj) ***REMOVED***
        promise._rejectCallback(x.e, false);
  ***REMOVED*** else ***REMOVED***
        debug.checkForgottenReturns(x, promiseCreated, "",  promise, this);
        promise._resolveCallback(x);
  ***REMOVED***
};

Promise.prototype._target = function() ***REMOVED***
    var ret = this;
    while (ret._isFollowing()) ret = ret._followee();
    return ret;
};

Promise.prototype._followee = function() ***REMOVED***
    return this._rejectionHandler0;
};

Promise.prototype._setFollowee = function(promise) ***REMOVED***
    this._rejectionHandler0 = promise;
};

Promise.prototype._settlePromise = function(promise, handler, receiver, value) ***REMOVED***
    var isPromise = promise instanceof Promise;
    var bitField = this._bitField;
    var asyncGuaranteed = ((bitField & 134217728) !== 0);
    if (((bitField & 65536) !== 0)) ***REMOVED***
        if (isPromise) promise._invokeInternalOnCancel();

        if (receiver instanceof PassThroughHandlerContext &&
            receiver.isFinallyHandler()) ***REMOVED***
            receiver.cancelPromise = promise;
            if (tryCatch(handler).call(receiver, value) === errorObj) ***REMOVED***
                promise._reject(errorObj.e);
          ***REMOVED***
      ***REMOVED*** else if (handler === reflectHandler) ***REMOVED***
            promise._fulfill(reflectHandler.call(receiver));
      ***REMOVED*** else if (receiver instanceof Proxyable) ***REMOVED***
            receiver._promiseCancelled(promise);
      ***REMOVED*** else if (isPromise || promise instanceof PromiseArray) ***REMOVED***
            promise._cancel();
      ***REMOVED*** else ***REMOVED***
            receiver.cancel();
      ***REMOVED***
  ***REMOVED*** else if (typeof handler === "function") ***REMOVED***
        if (!isPromise) ***REMOVED***
            handler.call(receiver, value, promise);
      ***REMOVED*** else ***REMOVED***
            if (asyncGuaranteed) promise._setAsyncGuaranteed();
            this._settlePromiseFromHandler(handler, receiver, value, promise);
      ***REMOVED***
  ***REMOVED*** else if (receiver instanceof Proxyable) ***REMOVED***
        if (!receiver._isResolved()) ***REMOVED***
            if (((bitField & 33554432) !== 0)) ***REMOVED***
                receiver._promiseFulfilled(value, promise);
          ***REMOVED*** else ***REMOVED***
                receiver._promiseRejected(value, promise);
          ***REMOVED***
      ***REMOVED***
  ***REMOVED*** else if (isPromise) ***REMOVED***
        if (asyncGuaranteed) promise._setAsyncGuaranteed();
        if (((bitField & 33554432) !== 0)) ***REMOVED***
            promise._fulfill(value);
      ***REMOVED*** else ***REMOVED***
            promise._reject(value);
      ***REMOVED***
  ***REMOVED***
};

Promise.prototype._settlePromiseLateCancellationObserver = function(ctx) ***REMOVED***
    var handler = ctx.handler;
    var promise = ctx.promise;
    var receiver = ctx.receiver;
    var value = ctx.value;
    if (typeof handler === "function") ***REMOVED***
        if (!(promise instanceof Promise)) ***REMOVED***
            handler.call(receiver, value, promise);
      ***REMOVED*** else ***REMOVED***
            this._settlePromiseFromHandler(handler, receiver, value, promise);
      ***REMOVED***
  ***REMOVED*** else if (promise instanceof Promise) ***REMOVED***
        promise._reject(value);
  ***REMOVED***
};

Promise.prototype._settlePromiseCtx = function(ctx) ***REMOVED***
    this._settlePromise(ctx.promise, ctx.handler, ctx.receiver, ctx.value);
};

Promise.prototype._settlePromise0 = function(handler, value, bitField) ***REMOVED***
    var promise = this._promise0;
    var receiver = this._receiverAt(0);
    this._promise0 = undefined;
    this._receiver0 = undefined;
    this._settlePromise(promise, handler, receiver, value);
};

Promise.prototype._clearCallbackDataAtIndex = function(index) ***REMOVED***
    var base = index * 4 - 4;
    this[base + 2] =
    this[base + 3] =
    this[base + 0] =
    this[base + 1] = undefined;
};

Promise.prototype._fulfill = function (value) ***REMOVED***
    var bitField = this._bitField;
    if (((bitField & 117506048) >>> 16)) return;
    if (value === this) ***REMOVED***
        var err = makeSelfResolutionError();
        this._attachExtraTrace(err);
        return this._reject(err);
  ***REMOVED***
    this._setFulfilled();
    this._rejectionHandler0 = value;

    if ((bitField & 65535) > 0) ***REMOVED***
        if (((bitField & 134217728) !== 0)) ***REMOVED***
            this._settlePromises();
      ***REMOVED*** else ***REMOVED***
            async.settlePromises(this);
      ***REMOVED***
        this._dereferenceTrace();
  ***REMOVED***
};

Promise.prototype._reject = function (reason) ***REMOVED***
    var bitField = this._bitField;
    if (((bitField & 117506048) >>> 16)) return;
    this._setRejected();
    this._fulfillmentHandler0 = reason;

    if (this._isFinal()) ***REMOVED***
        return async.fatalError(reason, util.isNode);
  ***REMOVED***

    if ((bitField & 65535) > 0) ***REMOVED***
        async.settlePromises(this);
  ***REMOVED*** else ***REMOVED***
        this._ensurePossibleRejectionHandled();
  ***REMOVED***
};

Promise.prototype._fulfillPromises = function (len, value) ***REMOVED***
    for (var i = 1; i < len; i++) ***REMOVED***
        var handler = this._fulfillmentHandlerAt(i);
        var promise = this._promiseAt(i);
        var receiver = this._receiverAt(i);
        this._clearCallbackDataAtIndex(i);
        this._settlePromise(promise, handler, receiver, value);
  ***REMOVED***
};

Promise.prototype._rejectPromises = function (len, reason) ***REMOVED***
    for (var i = 1; i < len; i++) ***REMOVED***
        var handler = this._rejectionHandlerAt(i);
        var promise = this._promiseAt(i);
        var receiver = this._receiverAt(i);
        this._clearCallbackDataAtIndex(i);
        this._settlePromise(promise, handler, receiver, reason);
  ***REMOVED***
};

Promise.prototype._settlePromises = function () ***REMOVED***
    var bitField = this._bitField;
    var len = (bitField & 65535);

    if (len > 0) ***REMOVED***
        if (((bitField & 16842752) !== 0)) ***REMOVED***
            var reason = this._fulfillmentHandler0;
            this._settlePromise0(this._rejectionHandler0, reason, bitField);
            this._rejectPromises(len, reason);
      ***REMOVED*** else ***REMOVED***
            var value = this._rejectionHandler0;
            this._settlePromise0(this._fulfillmentHandler0, value, bitField);
            this._fulfillPromises(len, value);
      ***REMOVED***
        this._setLength(0);
  ***REMOVED***
    this._clearCancellationData();
};

Promise.prototype._settledValue = function() ***REMOVED***
    var bitField = this._bitField;
    if (((bitField & 33554432) !== 0)) ***REMOVED***
        return this._rejectionHandler0;
  ***REMOVED*** else if (((bitField & 16777216) !== 0)) ***REMOVED***
        return this._fulfillmentHandler0;
  ***REMOVED***
};

if (typeof Symbol !== "undefined" && Symbol.toStringTag) ***REMOVED***
    es5.defineProperty(Promise.prototype, Symbol.toStringTag, ***REMOVED***
        get: function () ***REMOVED***
            return "Object";
      ***REMOVED***
  ***REMOVED***);
}

function deferResolve(v) ***REMOVED***this.promise._resolveCallback(v);}
function deferReject(v) ***REMOVED***this.promise._rejectCallback(v, false);}

Promise.defer = Promise.pending = function() ***REMOVED***
    debug.deprecated("Promise.defer", "new Promise");
    var promise = new Promise(INTERNAL);
    return ***REMOVED***
        promise: promise,
        resolve: deferResolve,
        reject: deferReject
  ***REMOVED***;
};

util.notEnumerableProp(Promise,
                       "_makeSelfResolutionError",
                       makeSelfResolutionError);

_dereq_("./method")(Promise, INTERNAL, tryConvertToPromise, apiRejection,
    debug);
_dereq_("./bind")(Promise, INTERNAL, tryConvertToPromise, debug);
_dereq_("./cancel")(Promise, PromiseArray, apiRejection, debug);
_dereq_("./direct_resolve")(Promise);
_dereq_("./synchronous_inspection")(Promise);
_dereq_("./join")(
    Promise, PromiseArray, tryConvertToPromise, INTERNAL, async);
Promise.Promise = Promise;
Promise.version = "3.7.2";
_dereq_('./call_get.js')(Promise);
_dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise, Proxyable, debug);
_dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
_dereq_('./nodeify.js')(Promise);
_dereq_('./promisify.js')(Promise, INTERNAL);
_dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
_dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
_dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL, debug);
_dereq_('./settle.js')(Promise, PromiseArray, debug);
_dereq_('./some.js')(Promise, PromiseArray, apiRejection);
_dereq_('./timers.js')(Promise, INTERNAL, debug);
_dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext, INTERNAL, debug);
_dereq_('./any.js')(Promise);
_dereq_('./each.js')(Promise, INTERNAL);
_dereq_('./filter.js')(Promise, INTERNAL);
                                                         
    util.toFastProperties(Promise);                                          
    util.toFastProperties(Promise.prototype);                                
    function fillTypes(value) ***REMOVED***                                              
        var p = new Promise(INTERNAL);                                       
        p._fulfillmentHandler0 = value;                                      
        p._rejectionHandler0 = value;                                        
        p._promise0 = value;                                                 
        p._receiver0 = value;                                                
  ***REMOVED***                                                                        
    // Complete slack tracking, opt out of field-type tracking and           
    // stabilize map                                                         
    fillTypes(***REMOVED***a: 1});                                                       
    fillTypes(***REMOVED***b: 2});                                                       
    fillTypes(***REMOVED***c: 3});                                                       
    fillTypes(1);                                                            
    fillTypes(function()***REMOVED***});                                                 
    fillTypes(undefined);                                                    
    fillTypes(false);                                                        
    fillTypes(new Promise(INTERNAL));                                        
    debug.setBounds(Async.firstLineError, util.lastLineError);               
    return Promise;                                                          

};

},***REMOVED***"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36,"async_hooks":undefined}],23:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise, INTERNAL, tryConvertToPromise,
    apiRejection, Proxyable) ***REMOVED***
var util = _dereq_("./util");
var isArray = util.isArray;

function toResolutionValue(val) ***REMOVED***
    switch(val) ***REMOVED***
    case -2: return [];
    case -3: return ***REMOVED***};
    case -6: return new Map();
  ***REMOVED***
}

function PromiseArray(values) ***REMOVED***
    var promise = this._promise = new Promise(INTERNAL);
    if (values instanceof Promise) ***REMOVED***
        promise._propagateFrom(values, 3);
        values.suppressUnhandledRejections();
  ***REMOVED***
    promise._setOnCancel(this);
    this._values = values;
    this._length = 0;
    this._totalResolved = 0;
    this._init(undefined, -2);
}
util.inherits(PromiseArray, Proxyable);

PromiseArray.prototype.length = function () ***REMOVED***
    return this._length;
};

PromiseArray.prototype.promise = function () ***REMOVED***
    return this._promise;
};

PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) ***REMOVED***
    var values = tryConvertToPromise(this._values, this._promise);
    if (values instanceof Promise) ***REMOVED***
        values = values._target();
        var bitField = values._bitField;
        ;
        this._values = values;

        if (((bitField & 50397184) === 0)) ***REMOVED***
            this._promise._setAsyncGuaranteed();
            return values._then(
                init,
                this._reject,
                undefined,
                this,
                resolveValueIfEmpty
           );
      ***REMOVED*** else if (((bitField & 33554432) !== 0)) ***REMOVED***
            values = values._value();
      ***REMOVED*** else if (((bitField & 16777216) !== 0)) ***REMOVED***
            return this._reject(values._reason());
      ***REMOVED*** else ***REMOVED***
            return this._cancel();
      ***REMOVED***
  ***REMOVED***
    values = util.asArray(values);
    if (values === null) ***REMOVED***
        var err = apiRejection(
            "expecting an array or an iterable object but got " + util.classString(values)).reason();
        this._promise._rejectCallback(err, false);
        return;
  ***REMOVED***

    if (values.length === 0) ***REMOVED***
        if (resolveValueIfEmpty === -5) ***REMOVED***
            this._resolveEmptyArray();
      ***REMOVED***
        else ***REMOVED***
            this._resolve(toResolutionValue(resolveValueIfEmpty));
      ***REMOVED***
        return;
  ***REMOVED***
    this._iterate(values);
};

PromiseArray.prototype._iterate = function(values) ***REMOVED***
    var len = this.getActualLength(values.length);
    this._length = len;
    this._values = this.shouldCopyValues() ? new Array(len) : this._values;
    var result = this._promise;
    var isResolved = false;
    var bitField = null;
    for (var i = 0; i < len; ++i) ***REMOVED***
        var maybePromise = tryConvertToPromise(values[i], result);

        if (maybePromise instanceof Promise) ***REMOVED***
            maybePromise = maybePromise._target();
            bitField = maybePromise._bitField;
      ***REMOVED*** else ***REMOVED***
            bitField = null;
      ***REMOVED***

        if (isResolved) ***REMOVED***
            if (bitField !== null) ***REMOVED***
                maybePromise.suppressUnhandledRejections();
          ***REMOVED***
      ***REMOVED*** else if (bitField !== null) ***REMOVED***
            if (((bitField & 50397184) === 0)) ***REMOVED***
                maybePromise._proxy(this, i);
                this._values[i] = maybePromise;
          ***REMOVED*** else if (((bitField & 33554432) !== 0)) ***REMOVED***
                isResolved = this._promiseFulfilled(maybePromise._value(), i);
          ***REMOVED*** else if (((bitField & 16777216) !== 0)) ***REMOVED***
                isResolved = this._promiseRejected(maybePromise._reason(), i);
          ***REMOVED*** else ***REMOVED***
                isResolved = this._promiseCancelled(i);
          ***REMOVED***
      ***REMOVED*** else ***REMOVED***
            isResolved = this._promiseFulfilled(maybePromise, i);
      ***REMOVED***
  ***REMOVED***
    if (!isResolved) result._setAsyncGuaranteed();
};

PromiseArray.prototype._isResolved = function () ***REMOVED***
    return this._values === null;
};

PromiseArray.prototype._resolve = function (value) ***REMOVED***
    this._values = null;
    this._promise._fulfill(value);
};

PromiseArray.prototype._cancel = function() ***REMOVED***
    if (this._isResolved() || !this._promise._isCancellable()) return;
    this._values = null;
    this._promise._cancel();
};

PromiseArray.prototype._reject = function (reason) ***REMOVED***
    this._values = null;
    this._promise._rejectCallback(reason, false);
};

PromiseArray.prototype._promiseFulfilled = function (value, index) ***REMOVED***
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) ***REMOVED***
        this._resolve(this._values);
        return true;
  ***REMOVED***
    return false;
};

PromiseArray.prototype._promiseCancelled = function() ***REMOVED***
    this._cancel();
    return true;
};

PromiseArray.prototype._promiseRejected = function (reason) ***REMOVED***
    this._totalResolved++;
    this._reject(reason);
    return true;
};

PromiseArray.prototype._resultCancelled = function() ***REMOVED***
    if (this._isResolved()) return;
    var values = this._values;
    this._cancel();
    if (values instanceof Promise) ***REMOVED***
        values.cancel();
  ***REMOVED*** else ***REMOVED***
        for (var i = 0; i < values.length; ++i) ***REMOVED***
            if (values[i] instanceof Promise) ***REMOVED***
                values[i].cancel();
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
};

PromiseArray.prototype.shouldCopyValues = function () ***REMOVED***
    return true;
};

PromiseArray.prototype.getActualLength = function (len) ***REMOVED***
    return len;
};

return PromiseArray;
};

},***REMOVED***"./util":36}],24:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise, INTERNAL) ***REMOVED***
var THIS = ***REMOVED***};
var util = _dereq_("./util");
var nodebackForPromise = _dereq_("./nodeback");
var withAppended = util.withAppended;
var maybeWrapAsError = util.maybeWrapAsError;
var canEvaluate = util.canEvaluate;
var TypeError = _dereq_("./errors").TypeError;
var defaultSuffix = "Async";
var defaultPromisified = ***REMOVED***__isPromisified__: true};
var noCopyProps = [
    "arity",    "length",
    "name",
    "arguments",
    "caller",
    "callee",
    "prototype",
    "__isPromisified__"
];
var noCopyPropsPattern = new RegExp("^(?:" + noCopyProps.join("|") + ")$");

var defaultFilter = function(name) ***REMOVED***
    return util.isIdentifier(name) &&
        name.charAt(0) !== "_" &&
        name !== "constructor";
};

function propsFilter(key) ***REMOVED***
    return !noCopyPropsPattern.test(key);
}

function isPromisified(fn) ***REMOVED***
    try ***REMOVED***
        return fn.__isPromisified__ === true;
  ***REMOVED***
    catch (e) ***REMOVED***
        return false;
  ***REMOVED***
}

function hasPromisified(obj, key, suffix) ***REMOVED***
    var val = util.getDataPropertyOrDefault(obj, key + suffix,
                                            defaultPromisified);
    return val ? isPromisified(val) : false;
}
function checkValid(ret, suffix, suffixRegexp) ***REMOVED***
    for (var i = 0; i < ret.length; i += 2) ***REMOVED***
        var key = ret[i];
        if (suffixRegexp.test(key)) ***REMOVED***
            var keyWithoutAsyncSuffix = key.replace(suffixRegexp, "");
            for (var j = 0; j < ret.length; j += 2) ***REMOVED***
                if (ret[j] === keyWithoutAsyncSuffix) ***REMOVED***
                    throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\u000a\u000a    See http://goo.gl/MqrFmX\u000a"
                        .replace("%s", suffix));
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
}

function promisifiableMethods(obj, suffix, suffixRegexp, filter) ***REMOVED***
    var keys = util.inheritedDataKeys(obj);
    var ret = [];
    for (var i = 0; i < keys.length; ++i) ***REMOVED***
        var key = keys[i];
        var value = obj[key];
        var passesDefaultFilter = filter === defaultFilter
            ? true : defaultFilter(key, value, obj);
        if (typeof value === "function" &&
            !isPromisified(value) &&
            !hasPromisified(obj, key, suffix) &&
            filter(key, value, obj, passesDefaultFilter)) ***REMOVED***
            ret.push(key, value);
      ***REMOVED***
  ***REMOVED***
    checkValid(ret, suffix, suffixRegexp);
    return ret;
}

var escapeIdentRegex = function(str) ***REMOVED***
    return str.replace(/([$])/, "\\$");
};

var makeNodePromisifiedEval;
if (!true) ***REMOVED***
var switchCaseArgumentOrder = function(likelyArgumentCount) ***REMOVED***
    var ret = [likelyArgumentCount];
    var min = Math.max(0, likelyArgumentCount - 1 - 3);
    for(var i = likelyArgumentCount - 1; i >= min; --i) ***REMOVED***
        ret.push(i);
  ***REMOVED***
    for(var i = likelyArgumentCount + 1; i <= 3; ++i) ***REMOVED***
        ret.push(i);
  ***REMOVED***
    return ret;
};

var argumentSequence = function(argumentCount) ***REMOVED***
    return util.filledRange(argumentCount, "_arg", "");
};

var parameterDeclaration = function(parameterCount) ***REMOVED***
    return util.filledRange(
        Math.max(parameterCount, 3), "_arg", "");
};

var parameterCount = function(fn) ***REMOVED***
    if (typeof fn.length === "number") ***REMOVED***
        return Math.max(Math.min(fn.length, 1023 + 1), 0);
  ***REMOVED***
    return 0;
};

makeNodePromisifiedEval =
function(callback, receiver, originalName, fn, _, multiArgs) ***REMOVED***
    var newParameterCount = Math.max(0, parameterCount(fn) - 1);
    var argumentOrder = switchCaseArgumentOrder(newParameterCount);
    var shouldProxyThis = typeof callback === "string" || receiver === THIS;

    function generateCallForArgumentCount(count) ***REMOVED***
        var args = argumentSequence(count).join(", ");
        var comma = count > 0 ? ", " : "";
        var ret;
        if (shouldProxyThis) ***REMOVED***
            ret = "ret = callback.call(this, ***REMOVED******REMOVED***args}}, nodeback); break;\n";
      ***REMOVED*** else ***REMOVED***
            ret = receiver === undefined
                ? "ret = callback(***REMOVED******REMOVED***args}}, nodeback); break;\n"
                : "ret = callback.call(receiver, ***REMOVED******REMOVED***args}}, nodeback); break;\n";
      ***REMOVED***
        return ret.replace("***REMOVED******REMOVED***args}}", args).replace(", ", comma);
  ***REMOVED***

    function generateArgumentSwitchCase() ***REMOVED***
        var ret = "";
        for (var i = 0; i < argumentOrder.length; ++i) ***REMOVED***
            ret += "case " + argumentOrder[i] +":" +
                generateCallForArgumentCount(argumentOrder[i]);
      ***REMOVED***

        ret += "                                                             \n\
        default:                                                             \n\
            var args = new Array(len + 1);                                   \n\
            var i = 0;                                                       \n\
            for (var i = 0; i < len; ++i) ***REMOVED***                                  \n\
               args[i] = arguments[i];                                       \n\
          ***REMOVED***                                                                \n\
            args[i] = nodeback;                                              \n\
            [CodeForCall]                                                    \n\
            break;                                                           \n\
        ".replace("[CodeForCall]", (shouldProxyThis
                                ? "ret = callback.apply(this, args);\n"
                                : "ret = callback.apply(receiver, args);\n"));
        return ret;
  ***REMOVED***

    var getFunctionCode = typeof callback === "string"
                                ? ("this != null ? this['"+callback+"'] : fn")
                                : "fn";
    var body = "'use strict';                                                \n\
        var ret = function (Parameters) ***REMOVED***                                    \n\
            'use strict';                                                    \n\
            var len = arguments.length;                                      \n\
            var promise = new Promise(INTERNAL);                             \n\
            promise._captureStackTrace();                                    \n\
            var nodeback = nodebackForPromise(promise, " + multiArgs + ");   \n\
            var ret;                                                         \n\
            var callback = tryCatch([GetFunctionCode]);                      \n\
            switch(len) ***REMOVED***                                                    \n\
                [CodeForSwitchCase]                                          \n\
          ***REMOVED***                                                                \n\
            if (ret === errorObj) ***REMOVED***                                          \n\
                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n\
          ***REMOVED***                                                                \n\
            if (!promise._isFateSealed()) promise._setAsyncGuaranteed();     \n\
            return promise;                                                  \n\
      ***REMOVED***;                                                                   \n\
        notEnumerableProp(ret, '__isPromisified__', true);                   \n\
        return ret;                                                          \n\
    ".replace("[CodeForSwitchCase]", generateArgumentSwitchCase())
        .replace("[GetFunctionCode]", getFunctionCode);
    body = body.replace("Parameters", parameterDeclaration(newParameterCount));
    return new Function("Promise",
                        "fn",
                        "receiver",
                        "withAppended",
                        "maybeWrapAsError",
                        "nodebackForPromise",
                        "tryCatch",
                        "errorObj",
                        "notEnumerableProp",
                        "INTERNAL",
                        body)(
                    Promise,
                    fn,
                    receiver,
                    withAppended,
                    maybeWrapAsError,
                    nodebackForPromise,
                    util.tryCatch,
                    util.errorObj,
                    util.notEnumerableProp,
                    INTERNAL);
};
}

function makeNodePromisifiedClosure(callback, receiver, _, fn, __, multiArgs) ***REMOVED***
    var defaultThis = (function() ***REMOVED***return this;})();
    var method = callback;
    if (typeof method === "string") ***REMOVED***
        callback = fn;
  ***REMOVED***
    function promisified() ***REMOVED***
        var _receiver = receiver;
        if (receiver === THIS) _receiver = this;
        var promise = new Promise(INTERNAL);
        promise._captureStackTrace();
        var cb = typeof method === "string" && this !== defaultThis
            ? this[method] : callback;
        var fn = nodebackForPromise(promise, multiArgs);
        try ***REMOVED***
            cb.apply(_receiver, withAppended(arguments, fn));
      ***REMOVED*** catch(e) ***REMOVED***
            promise._rejectCallback(maybeWrapAsError(e), true, true);
      ***REMOVED***
        if (!promise._isFateSealed()) promise._setAsyncGuaranteed();
        return promise;
  ***REMOVED***
    util.notEnumerableProp(promisified, "__isPromisified__", true);
    return promisified;
}

var makeNodePromisified = canEvaluate
    ? makeNodePromisifiedEval
    : makeNodePromisifiedClosure;

function promisifyAll(obj, suffix, filter, promisifier, multiArgs) ***REMOVED***
    var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + "$");
    var methods =
        promisifiableMethods(obj, suffix, suffixRegexp, filter);

    for (var i = 0, len = methods.length; i < len; i+= 2) ***REMOVED***
        var key = methods[i];
        var fn = methods[i+1];
        var promisifiedKey = key + suffix;
        if (promisifier === makeNodePromisified) ***REMOVED***
            obj[promisifiedKey] =
                makeNodePromisified(key, THIS, key, fn, suffix, multiArgs);
      ***REMOVED*** else ***REMOVED***
            var promisified = promisifier(fn, function() ***REMOVED***
                return makeNodePromisified(key, THIS, key,
                                           fn, suffix, multiArgs);
          ***REMOVED***);
            util.notEnumerableProp(promisified, "__isPromisified__", true);
            obj[promisifiedKey] = promisified;
      ***REMOVED***
  ***REMOVED***
    util.toFastProperties(obj);
    return obj;
}

function promisify(callback, receiver, multiArgs) ***REMOVED***
    return makeNodePromisified(callback, receiver, undefined,
                                callback, null, multiArgs);
}

Promise.promisify = function (fn, options) ***REMOVED***
    if (typeof fn !== "function") ***REMOVED***
        throw new TypeError("expecting a function but got " + util.classString(fn));
  ***REMOVED***
    if (isPromisified(fn)) ***REMOVED***
        return fn;
  ***REMOVED***
    options = Object(options);
    var receiver = options.context === undefined ? THIS : options.context;
    var multiArgs = !!options.multiArgs;
    var ret = promisify(fn, receiver, multiArgs);
    util.copyDescriptors(fn, ret, propsFilter);
    return ret;
};

Promise.promisifyAll = function (target, options) ***REMOVED***
    if (typeof target !== "function" && typeof target !== "object") ***REMOVED***
        throw new TypeError("the target of promisifyAll must be an object or a function\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED***
    options = Object(options);
    var multiArgs = !!options.multiArgs;
    var suffix = options.suffix;
    if (typeof suffix !== "string") suffix = defaultSuffix;
    var filter = options.filter;
    if (typeof filter !== "function") filter = defaultFilter;
    var promisifier = options.promisifier;
    if (typeof promisifier !== "function") promisifier = makeNodePromisified;

    if (!util.isIdentifier(suffix)) ***REMOVED***
        throw new RangeError("suffix must be a valid identifier\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED***

    var keys = util.inheritedDataKeys(target);
    for (var i = 0; i < keys.length; ++i) ***REMOVED***
        var value = target[keys[i]];
        if (keys[i] !== "constructor" &&
            util.isClass(value)) ***REMOVED***
            promisifyAll(value.prototype, suffix, filter, promisifier,
                multiArgs);
            promisifyAll(value, suffix, filter, promisifier, multiArgs);
      ***REMOVED***
  ***REMOVED***

    return promisifyAll(target, suffix, filter, promisifier, multiArgs);
};
};


},***REMOVED***"./errors":12,"./nodeback":20,"./util":36}],25:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(
    Promise, PromiseArray, tryConvertToPromise, apiRejection) ***REMOVED***
var util = _dereq_("./util");
var isObject = util.isObject;
var es5 = _dereq_("./es5");
var Es6Map;
if (typeof Map === "function") Es6Map = Map;

var mapToEntries = (function() ***REMOVED***
    var index = 0;
    var size = 0;

    function extractEntry(value, key) ***REMOVED***
        this[index] = value;
        this[index + size] = key;
        index++;
  ***REMOVED***

    return function mapToEntries(map) ***REMOVED***
        size = map.size;
        index = 0;
        var ret = new Array(map.size * 2);
        map.forEach(extractEntry, ret);
        return ret;
  ***REMOVED***;
})();

var entriesToMap = function(entries) ***REMOVED***
    var ret = new Es6Map();
    var length = entries.length / 2 | 0;
    for (var i = 0; i < length; ++i) ***REMOVED***
        var key = entries[length + i];
        var value = entries[i];
        ret.set(key, value);
  ***REMOVED***
    return ret;
};

function PropertiesPromiseArray(obj) ***REMOVED***
    var isMap = false;
    var entries;
    if (Es6Map !== undefined && obj instanceof Es6Map) ***REMOVED***
        entries = mapToEntries(obj);
        isMap = true;
  ***REMOVED*** else ***REMOVED***
        var keys = es5.keys(obj);
        var len = keys.length;
        entries = new Array(len * 2);
        for (var i = 0; i < len; ++i) ***REMOVED***
            var key = keys[i];
            entries[i] = obj[key];
            entries[i + len] = key;
      ***REMOVED***
  ***REMOVED***
    this.constructor$(entries);
    this._isMap = isMap;
    this._init$(undefined, isMap ? -6 : -3);
}
util.inherits(PropertiesPromiseArray, PromiseArray);

PropertiesPromiseArray.prototype._init = function () ***REMOVED***};

PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) ***REMOVED***
    this._values[index] = value;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) ***REMOVED***
        var val;
        if (this._isMap) ***REMOVED***
            val = entriesToMap(this._values);
      ***REMOVED*** else ***REMOVED***
            val = ***REMOVED***};
            var keyOffset = this.length();
            for (var i = 0, len = this.length(); i < len; ++i) ***REMOVED***
                val[this._values[i + keyOffset]] = this._values[i];
          ***REMOVED***
      ***REMOVED***
        this._resolve(val);
        return true;
  ***REMOVED***
    return false;
};

PropertiesPromiseArray.prototype.shouldCopyValues = function () ***REMOVED***
    return false;
};

PropertiesPromiseArray.prototype.getActualLength = function (len) ***REMOVED***
    return len >> 1;
};

function props(promises) ***REMOVED***
    var ret;
    var castValue = tryConvertToPromise(promises);

    if (!isObject(castValue)) ***REMOVED***
        return apiRejection("cannot await properties of a non-object\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED*** else if (castValue instanceof Promise) ***REMOVED***
        ret = castValue._then(
            Promise.props, undefined, undefined, undefined, undefined);
  ***REMOVED*** else ***REMOVED***
        ret = new PropertiesPromiseArray(castValue).promise();
  ***REMOVED***

    if (castValue instanceof Promise) ***REMOVED***
        ret._propagateFrom(castValue, 2);
  ***REMOVED***
    return ret;
}

Promise.prototype.props = function () ***REMOVED***
    return props(this);
};

Promise.props = function (promises) ***REMOVED***
    return props(promises);
};
};

},***REMOVED***"./es5":13,"./util":36}],26:[function(_dereq_,module,exports)***REMOVED***
"use strict";
function arrayMove(src, srcIndex, dst, dstIndex, len) ***REMOVED***
    for (var j = 0; j < len; ++j) ***REMOVED***
        dst[j + dstIndex] = src[j + srcIndex];
        src[j + srcIndex] = void 0;
  ***REMOVED***
}

function Queue(capacity) ***REMOVED***
    this._capacity = capacity;
    this._length = 0;
    this._front = 0;
}

Queue.prototype._willBeOverCapacity = function (size) ***REMOVED***
    return this._capacity < size;
};

Queue.prototype._pushOne = function (arg) ***REMOVED***
    var length = this.length();
    this._checkCapacity(length + 1);
    var i = (this._front + length) & (this._capacity - 1);
    this[i] = arg;
    this._length = length + 1;
};

Queue.prototype.push = function (fn, receiver, arg) ***REMOVED***
    var length = this.length() + 3;
    if (this._willBeOverCapacity(length)) ***REMOVED***
        this._pushOne(fn);
        this._pushOne(receiver);
        this._pushOne(arg);
        return;
  ***REMOVED***
    var j = this._front + length - 3;
    this._checkCapacity(length);
    var wrapMask = this._capacity - 1;
    this[(j + 0) & wrapMask] = fn;
    this[(j + 1) & wrapMask] = receiver;
    this[(j + 2) & wrapMask] = arg;
    this._length = length;
};

Queue.prototype.shift = function () ***REMOVED***
    var front = this._front,
        ret = this[front];

    this[front] = undefined;
    this._front = (front + 1) & (this._capacity - 1);
    this._length--;
    return ret;
};

Queue.prototype.length = function () ***REMOVED***
    return this._length;
};

Queue.prototype._checkCapacity = function (size) ***REMOVED***
    if (this._capacity < size) ***REMOVED***
        this._resizeTo(this._capacity << 1);
  ***REMOVED***
};

Queue.prototype._resizeTo = function (capacity) ***REMOVED***
    var oldCapacity = this._capacity;
    this._capacity = capacity;
    var front = this._front;
    var length = this._length;
    var moveItemsCount = (front + length) & (oldCapacity - 1);
    arrayMove(this, 0, this, oldCapacity, moveItemsCount);
};

module.exports = Queue;

},***REMOVED***}],27:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(
    Promise, INTERNAL, tryConvertToPromise, apiRejection) ***REMOVED***
var util = _dereq_("./util");

var raceLater = function (promise) ***REMOVED***
    return promise.then(function(array) ***REMOVED***
        return race(array, promise);
  ***REMOVED***);
};

function race(promises, parent) ***REMOVED***
    var maybePromise = tryConvertToPromise(promises);

    if (maybePromise instanceof Promise) ***REMOVED***
        return raceLater(maybePromise);
  ***REMOVED*** else ***REMOVED***
        promises = util.asArray(promises);
        if (promises === null)
            return apiRejection("expecting an array or an iterable object but got " + util.classString(promises));
  ***REMOVED***

    var ret = new Promise(INTERNAL);
    if (parent !== undefined) ***REMOVED***
        ret._propagateFrom(parent, 3);
  ***REMOVED***
    var fulfill = ret._fulfill;
    var reject = ret._reject;
    for (var i = 0, len = promises.length; i < len; ++i) ***REMOVED***
        var val = promises[i];

        if (val === undefined && !(i in promises)) ***REMOVED***
            continue;
      ***REMOVED***

        Promise.cast(val)._then(fulfill, reject, undefined, ret, null);
  ***REMOVED***
    return ret;
}

Promise.race = function (promises) ***REMOVED***
    return race(promises, undefined);
};

Promise.prototype.race = function () ***REMOVED***
    return race(this, undefined);
};

};

},***REMOVED***"./util":36}],28:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise,
                          PromiseArray,
                          apiRejection,
                          tryConvertToPromise,
                          INTERNAL,
                          debug) ***REMOVED***
var util = _dereq_("./util");
var tryCatch = util.tryCatch;

function ReductionPromiseArray(promises, fn, initialValue, _each) ***REMOVED***
    this.constructor$(promises);
    var context = Promise._getContext();
    this._fn = util.contextBind(context, fn);
    if (initialValue !== undefined) ***REMOVED***
        initialValue = Promise.resolve(initialValue);
        initialValue._attachCancellationCallback(this);
  ***REMOVED***
    this._initialValue = initialValue;
    this._currentCancellable = null;
    if(_each === INTERNAL) ***REMOVED***
        this._eachValues = Array(this._length);
  ***REMOVED*** else if (_each === 0) ***REMOVED***
        this._eachValues = null;
  ***REMOVED*** else ***REMOVED***
        this._eachValues = undefined;
  ***REMOVED***
    this._promise._captureStackTrace();
    this._init$(undefined, -5);
}
util.inherits(ReductionPromiseArray, PromiseArray);

ReductionPromiseArray.prototype._gotAccum = function(accum) ***REMOVED***
    if (this._eachValues !== undefined &&
        this._eachValues !== null &&
        accum !== INTERNAL) ***REMOVED***
        this._eachValues.push(accum);
  ***REMOVED***
};

ReductionPromiseArray.prototype._eachComplete = function(value) ***REMOVED***
    if (this._eachValues !== null) ***REMOVED***
        this._eachValues.push(value);
  ***REMOVED***
    return this._eachValues;
};

ReductionPromiseArray.prototype._init = function() ***REMOVED***};

ReductionPromiseArray.prototype._resolveEmptyArray = function() ***REMOVED***
    this._resolve(this._eachValues !== undefined ? this._eachValues
                                                 : this._initialValue);
};

ReductionPromiseArray.prototype.shouldCopyValues = function () ***REMOVED***
    return false;
};

ReductionPromiseArray.prototype._resolve = function(value) ***REMOVED***
    this._promise._resolveCallback(value);
    this._values = null;
};

ReductionPromiseArray.prototype._resultCancelled = function(sender) ***REMOVED***
    if (sender === this._initialValue) return this._cancel();
    if (this._isResolved()) return;
    this._resultCancelled$();
    if (this._currentCancellable instanceof Promise) ***REMOVED***
        this._currentCancellable.cancel();
  ***REMOVED***
    if (this._initialValue instanceof Promise) ***REMOVED***
        this._initialValue.cancel();
  ***REMOVED***
};

ReductionPromiseArray.prototype._iterate = function (values) ***REMOVED***
    this._values = values;
    var value;
    var i;
    var length = values.length;
    if (this._initialValue !== undefined) ***REMOVED***
        value = this._initialValue;
        i = 0;
  ***REMOVED*** else ***REMOVED***
        value = Promise.resolve(values[0]);
        i = 1;
  ***REMOVED***

    this._currentCancellable = value;

    for (var j = i; j < length; ++j) ***REMOVED***
        var maybePromise = values[j];
        if (maybePromise instanceof Promise) ***REMOVED***
            maybePromise.suppressUnhandledRejections();
      ***REMOVED***
  ***REMOVED***

    if (!value.isRejected()) ***REMOVED***
        for (; i < length; ++i) ***REMOVED***
            var ctx = ***REMOVED***
                accum: null,
                value: values[i],
                index: i,
                length: length,
                array: this
          ***REMOVED***;

            value = value._then(gotAccum, undefined, undefined, ctx, undefined);

            if ((i & 127) === 0) ***REMOVED***
                value._setNoAsyncGuarantee();
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***

    if (this._eachValues !== undefined) ***REMOVED***
        value = value
            ._then(this._eachComplete, undefined, undefined, this, undefined);
  ***REMOVED***
    value._then(completed, completed, undefined, value, this);
};

Promise.prototype.reduce = function (fn, initialValue) ***REMOVED***
    return reduce(this, fn, initialValue, null);
};

Promise.reduce = function (promises, fn, initialValue, _each) ***REMOVED***
    return reduce(promises, fn, initialValue, _each);
};

function completed(valueOrReason, array) ***REMOVED***
    if (this.isFulfilled()) ***REMOVED***
        array._resolve(valueOrReason);
  ***REMOVED*** else ***REMOVED***
        array._reject(valueOrReason);
  ***REMOVED***
}

function reduce(promises, fn, initialValue, _each) ***REMOVED***
    if (typeof fn !== "function") ***REMOVED***
        return apiRejection("expecting a function but got " + util.classString(fn));
  ***REMOVED***
    var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
    return array.promise();
}

function gotAccum(accum) ***REMOVED***
    this.accum = accum;
    this.array._gotAccum(accum);
    var value = tryConvertToPromise(this.value, this.array._promise);
    if (value instanceof Promise) ***REMOVED***
        this.array._currentCancellable = value;
        return value._then(gotValue, undefined, undefined, this, undefined);
  ***REMOVED*** else ***REMOVED***
        return gotValue.call(this, value);
  ***REMOVED***
}

function gotValue(value) ***REMOVED***
    var array = this.array;
    var promise = array._promise;
    var fn = tryCatch(array._fn);
    promise._pushContext();
    var ret;
    if (array._eachValues !== undefined) ***REMOVED***
        ret = fn.call(promise._boundValue(), value, this.index, this.length);
  ***REMOVED*** else ***REMOVED***
        ret = fn.call(promise._boundValue(),
                              this.accum, value, this.index, this.length);
  ***REMOVED***
    if (ret instanceof Promise) ***REMOVED***
        array._currentCancellable = ret;
  ***REMOVED***
    var promiseCreated = promise._popContext();
    debug.checkForgottenReturns(
        ret,
        promiseCreated,
        array._eachValues !== undefined ? "Promise.each" : "Promise.reduce",
        promise
    );
    return ret;
}
};

},***REMOVED***"./util":36}],29:[function(_dereq_,module,exports)***REMOVED***
"use strict";
var util = _dereq_("./util");
var schedule;
var noAsyncScheduler = function() ***REMOVED***
    throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
};
var NativePromise = util.getNativePromise();
if (util.isNode && typeof MutationObserver === "undefined") ***REMOVED***
    var GlobalSetImmediate = global.setImmediate;
    var ProcessNextTick = process.nextTick;
    schedule = util.isRecentNode
                ? function(fn) ***REMOVED*** GlobalSetImmediate.call(global, fn); }
                : function(fn) ***REMOVED*** ProcessNextTick.call(process, fn); };
} else if (typeof NativePromise === "function" &&
           typeof NativePromise.resolve === "function") ***REMOVED***
    var nativePromise = NativePromise.resolve();
    schedule = function(fn) ***REMOVED***
        nativePromise.then(fn);
  ***REMOVED***;
} else if ((typeof MutationObserver !== "undefined") &&
          !(typeof window !== "undefined" &&
            window.navigator &&
            (window.navigator.standalone || window.cordova)) &&
          ("classList" in document.documentElement)) ***REMOVED***
    schedule = (function() ***REMOVED***
        var div = document.createElement("div");
        var opts = ***REMOVED***attributes: true};
        var toggleScheduled = false;
        var div2 = document.createElement("div");
        var o2 = new MutationObserver(function() ***REMOVED***
            div.classList.toggle("foo");
            toggleScheduled = false;
      ***REMOVED***);
        o2.observe(div2, opts);

        var scheduleToggle = function() ***REMOVED***
            if (toggleScheduled) return;
            toggleScheduled = true;
            div2.classList.toggle("foo");
      ***REMOVED***;

        return function schedule(fn) ***REMOVED***
            var o = new MutationObserver(function() ***REMOVED***
                o.disconnect();
                fn();
          ***REMOVED***);
            o.observe(div, opts);
            scheduleToggle();
      ***REMOVED***;
  ***REMOVED***)();
} else if (typeof setImmediate !== "undefined") ***REMOVED***
    schedule = function (fn) ***REMOVED***
        setImmediate(fn);
  ***REMOVED***;
} else if (typeof setTimeout !== "undefined") ***REMOVED***
    schedule = function (fn) ***REMOVED***
        setTimeout(fn, 0);
  ***REMOVED***;
} else ***REMOVED***
    schedule = noAsyncScheduler;
}
module.exports = schedule;

},***REMOVED***"./util":36}],30:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports =
    function(Promise, PromiseArray, debug) ***REMOVED***
var PromiseInspection = Promise.PromiseInspection;
var util = _dereq_("./util");

function SettledPromiseArray(values) ***REMOVED***
    this.constructor$(values);
}
util.inherits(SettledPromiseArray, PromiseArray);

SettledPromiseArray.prototype._promiseResolved = function (index, inspection) ***REMOVED***
    this._values[index] = inspection;
    var totalResolved = ++this._totalResolved;
    if (totalResolved >= this._length) ***REMOVED***
        this._resolve(this._values);
        return true;
  ***REMOVED***
    return false;
};

SettledPromiseArray.prototype._promiseFulfilled = function (value, index) ***REMOVED***
    var ret = new PromiseInspection();
    ret._bitField = 33554432;
    ret._settledValueField = value;
    return this._promiseResolved(index, ret);
};
SettledPromiseArray.prototype._promiseRejected = function (reason, index) ***REMOVED***
    var ret = new PromiseInspection();
    ret._bitField = 16777216;
    ret._settledValueField = reason;
    return this._promiseResolved(index, ret);
};

Promise.settle = function (promises) ***REMOVED***
    debug.deprecated(".settle()", ".reflect()");
    return new SettledPromiseArray(promises).promise();
};

Promise.allSettled = function (promises) ***REMOVED***
    return new SettledPromiseArray(promises).promise();
};

Promise.prototype.settle = function () ***REMOVED***
    return Promise.settle(this);
};
};

},***REMOVED***"./util":36}],31:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports =
function(Promise, PromiseArray, apiRejection) ***REMOVED***
var util = _dereq_("./util");
var RangeError = _dereq_("./errors").RangeError;
var AggregateError = _dereq_("./errors").AggregateError;
var isArray = util.isArray;
var CANCELLATION = ***REMOVED***};


function SomePromiseArray(values) ***REMOVED***
    this.constructor$(values);
    this._howMany = 0;
    this._unwrap = false;
    this._initialized = false;
}
util.inherits(SomePromiseArray, PromiseArray);

SomePromiseArray.prototype._init = function () ***REMOVED***
    if (!this._initialized) ***REMOVED***
        return;
  ***REMOVED***
    if (this._howMany === 0) ***REMOVED***
        this._resolve([]);
        return;
  ***REMOVED***
    this._init$(undefined, -5);
    var isArrayResolved = isArray(this._values);
    if (!this._isResolved() &&
        isArrayResolved &&
        this._howMany > this._canPossiblyFulfill()) ***REMOVED***
        this._reject(this._getRangeError(this.length()));
  ***REMOVED***
};

SomePromiseArray.prototype.init = function () ***REMOVED***
    this._initialized = true;
    this._init();
};

SomePromiseArray.prototype.setUnwrap = function () ***REMOVED***
    this._unwrap = true;
};

SomePromiseArray.prototype.howMany = function () ***REMOVED***
    return this._howMany;
};

SomePromiseArray.prototype.setHowMany = function (count) ***REMOVED***
    this._howMany = count;
};

SomePromiseArray.prototype._promiseFulfilled = function (value) ***REMOVED***
    this._addFulfilled(value);
    if (this._fulfilled() === this.howMany()) ***REMOVED***
        this._values.length = this.howMany();
        if (this.howMany() === 1 && this._unwrap) ***REMOVED***
            this._resolve(this._values[0]);
      ***REMOVED*** else ***REMOVED***
            this._resolve(this._values);
      ***REMOVED***
        return true;
  ***REMOVED***
    return false;

};
SomePromiseArray.prototype._promiseRejected = function (reason) ***REMOVED***
    this._addRejected(reason);
    return this._checkOutcome();
};

SomePromiseArray.prototype._promiseCancelled = function () ***REMOVED***
    if (this._values instanceof Promise || this._values == null) ***REMOVED***
        return this._cancel();
  ***REMOVED***
    this._addRejected(CANCELLATION);
    return this._checkOutcome();
};

SomePromiseArray.prototype._checkOutcome = function() ***REMOVED***
    if (this.howMany() > this._canPossiblyFulfill()) ***REMOVED***
        var e = new AggregateError();
        for (var i = this.length(); i < this._values.length; ++i) ***REMOVED***
            if (this._values[i] !== CANCELLATION) ***REMOVED***
                e.push(this._values[i]);
          ***REMOVED***
      ***REMOVED***
        if (e.length > 0) ***REMOVED***
            this._reject(e);
      ***REMOVED*** else ***REMOVED***
            this._cancel();
      ***REMOVED***
        return true;
  ***REMOVED***
    return false;
};

SomePromiseArray.prototype._fulfilled = function () ***REMOVED***
    return this._totalResolved;
};

SomePromiseArray.prototype._rejected = function () ***REMOVED***
    return this._values.length - this.length();
};

SomePromiseArray.prototype._addRejected = function (reason) ***REMOVED***
    this._values.push(reason);
};

SomePromiseArray.prototype._addFulfilled = function (value) ***REMOVED***
    this._values[this._totalResolved++] = value;
};

SomePromiseArray.prototype._canPossiblyFulfill = function () ***REMOVED***
    return this.length() - this._rejected();
};

SomePromiseArray.prototype._getRangeError = function (count) ***REMOVED***
    var message = "Input array must contain at least " +
            this._howMany + " items but contains only " + count + " items";
    return new RangeError(message);
};

SomePromiseArray.prototype._resolveEmptyArray = function () ***REMOVED***
    this._reject(this._getRangeError(0));
};

function some(promises, howMany) ***REMOVED***
    if ((howMany | 0) !== howMany || howMany < 0) ***REMOVED***
        return apiRejection("expecting a positive integer\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED***
    var ret = new SomePromiseArray(promises);
    var promise = ret.promise();
    ret.setHowMany(howMany);
    ret.init();
    return promise;
}

Promise.some = function (promises, howMany) ***REMOVED***
    return some(promises, howMany);
};

Promise.prototype.some = function (howMany) ***REMOVED***
    return some(this, howMany);
};

Promise._SomePromiseArray = SomePromiseArray;
};

},***REMOVED***"./errors":12,"./util":36}],32:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise) ***REMOVED***
function PromiseInspection(promise) ***REMOVED***
    if (promise !== undefined) ***REMOVED***
        promise = promise._target();
        this._bitField = promise._bitField;
        this._settledValueField = promise._isFateSealed()
            ? promise._settledValue() : undefined;
  ***REMOVED***
    else ***REMOVED***
        this._bitField = 0;
        this._settledValueField = undefined;
  ***REMOVED***
}

PromiseInspection.prototype._settledValue = function() ***REMOVED***
    return this._settledValueField;
};

var value = PromiseInspection.prototype.value = function () ***REMOVED***
    if (!this.isFulfilled()) ***REMOVED***
        throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED***
    return this._settledValue();
};

var reason = PromiseInspection.prototype.error =
PromiseInspection.prototype.reason = function () ***REMOVED***
    if (!this.isRejected()) ***REMOVED***
        throw new TypeError("cannot get rejection reason of a non-rejected promise\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED***
    return this._settledValue();
};

var isFulfilled = PromiseInspection.prototype.isFulfilled = function() ***REMOVED***
    return (this._bitField & 33554432) !== 0;
};

var isRejected = PromiseInspection.prototype.isRejected = function () ***REMOVED***
    return (this._bitField & 16777216) !== 0;
};

var isPending = PromiseInspection.prototype.isPending = function () ***REMOVED***
    return (this._bitField & 50397184) === 0;
};

var isResolved = PromiseInspection.prototype.isResolved = function () ***REMOVED***
    return (this._bitField & 50331648) !== 0;
};

PromiseInspection.prototype.isCancelled = function() ***REMOVED***
    return (this._bitField & 8454144) !== 0;
};

Promise.prototype.__isCancelled = function() ***REMOVED***
    return (this._bitField & 65536) === 65536;
};

Promise.prototype._isCancelled = function() ***REMOVED***
    return this._target().__isCancelled();
};

Promise.prototype.isCancelled = function() ***REMOVED***
    return (this._target()._bitField & 8454144) !== 0;
};

Promise.prototype.isPending = function() ***REMOVED***
    return isPending.call(this._target());
};

Promise.prototype.isRejected = function() ***REMOVED***
    return isRejected.call(this._target());
};

Promise.prototype.isFulfilled = function() ***REMOVED***
    return isFulfilled.call(this._target());
};

Promise.prototype.isResolved = function() ***REMOVED***
    return isResolved.call(this._target());
};

Promise.prototype.value = function() ***REMOVED***
    return value.call(this._target());
};

Promise.prototype.reason = function() ***REMOVED***
    var target = this._target();
    target._unsetRejectionIsUnhandled();
    return reason.call(target);
};

Promise.prototype._value = function() ***REMOVED***
    return this._settledValue();
};

Promise.prototype._reason = function() ***REMOVED***
    this._unsetRejectionIsUnhandled();
    return this._settledValue();
};

Promise.PromiseInspection = PromiseInspection;
};

},***REMOVED***}],33:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise, INTERNAL) ***REMOVED***
var util = _dereq_("./util");
var errorObj = util.errorObj;
var isObject = util.isObject;

function tryConvertToPromise(obj, context) ***REMOVED***
    if (isObject(obj)) ***REMOVED***
        if (obj instanceof Promise) return obj;
        var then = getThen(obj);
        if (then === errorObj) ***REMOVED***
            if (context) context._pushContext();
            var ret = Promise.reject(then.e);
            if (context) context._popContext();
            return ret;
      ***REMOVED*** else if (typeof then === "function") ***REMOVED***
            if (isAnyBluebirdPromise(obj)) ***REMOVED***
                var ret = new Promise(INTERNAL);
                obj._then(
                    ret._fulfill,
                    ret._reject,
                    undefined,
                    ret,
                    null
                );
                return ret;
          ***REMOVED***
            return doThenable(obj, then, context);
      ***REMOVED***
  ***REMOVED***
    return obj;
}

function doGetThen(obj) ***REMOVED***
    return obj.then;
}

function getThen(obj) ***REMOVED***
    try ***REMOVED***
        return doGetThen(obj);
  ***REMOVED*** catch (e) ***REMOVED***
        errorObj.e = e;
        return errorObj;
  ***REMOVED***
}

var hasProp = ***REMOVED***}.hasOwnProperty;
function isAnyBluebirdPromise(obj) ***REMOVED***
    try ***REMOVED***
        return hasProp.call(obj, "_promise0");
  ***REMOVED*** catch (e) ***REMOVED***
        return false;
  ***REMOVED***
}

function doThenable(x, then, context) ***REMOVED***
    var promise = new Promise(INTERNAL);
    var ret = promise;
    if (context) context._pushContext();
    promise._captureStackTrace();
    if (context) context._popContext();
    var synchronous = true;
    var result = util.tryCatch(then).call(x, resolve, reject);
    synchronous = false;

    if (promise && result === errorObj) ***REMOVED***
        promise._rejectCallback(result.e, true, true);
        promise = null;
  ***REMOVED***

    function resolve(value) ***REMOVED***
        if (!promise) return;
        promise._resolveCallback(value);
        promise = null;
  ***REMOVED***

    function reject(reason) ***REMOVED***
        if (!promise) return;
        promise._rejectCallback(reason, synchronous, true);
        promise = null;
  ***REMOVED***
    return ret;
}

return tryConvertToPromise;
};

},***REMOVED***"./util":36}],34:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function(Promise, INTERNAL, debug) ***REMOVED***
var util = _dereq_("./util");
var TimeoutError = Promise.TimeoutError;

function HandleWrapper(handle)  ***REMOVED***
    this.handle = handle;
}

HandleWrapper.prototype._resultCancelled = function() ***REMOVED***
    clearTimeout(this.handle);
};

var afterValue = function(value) ***REMOVED*** return delay(+this).thenReturn(value); };
var delay = Promise.delay = function (ms, value) ***REMOVED***
    var ret;
    var handle;
    if (value !== undefined) ***REMOVED***
        ret = Promise.resolve(value)
                ._then(afterValue, null, null, ms, undefined);
        if (debug.cancellation() && value instanceof Promise) ***REMOVED***
            ret._setOnCancel(value);
      ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        ret = new Promise(INTERNAL);
        handle = setTimeout(function() ***REMOVED*** ret._fulfill(); }, +ms);
        if (debug.cancellation()) ***REMOVED***
            ret._setOnCancel(new HandleWrapper(handle));
      ***REMOVED***
        ret._captureStackTrace();
  ***REMOVED***
    ret._setAsyncGuaranteed();
    return ret;
};

Promise.prototype.delay = function (ms) ***REMOVED***
    return delay(ms, this);
};

var afterTimeout = function (promise, message, parent) ***REMOVED***
    var err;
    if (typeof message !== "string") ***REMOVED***
        if (message instanceof Error) ***REMOVED***
            err = message;
      ***REMOVED*** else ***REMOVED***
            err = new TimeoutError("operation timed out");
      ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        err = new TimeoutError(message);
  ***REMOVED***
    util.markAsOriginatingFromRejection(err);
    promise._attachExtraTrace(err);
    promise._reject(err);

    if (parent != null) ***REMOVED***
        parent.cancel();
  ***REMOVED***
};

function successClear(value) ***REMOVED***
    clearTimeout(this.handle);
    return value;
}

function failureClear(reason) ***REMOVED***
    clearTimeout(this.handle);
    throw reason;
}

Promise.prototype.timeout = function (ms, message) ***REMOVED***
    ms = +ms;
    var ret, parent;

    var handleWrapper = new HandleWrapper(setTimeout(function timeoutTimeout() ***REMOVED***
        if (ret.isPending()) ***REMOVED***
            afterTimeout(ret, message, parent);
      ***REMOVED***
  ***REMOVED***, ms));

    if (debug.cancellation()) ***REMOVED***
        parent = this.then();
        ret = parent._then(successClear, failureClear,
                            undefined, handleWrapper, undefined);
        ret._setOnCancel(handleWrapper);
  ***REMOVED*** else ***REMOVED***
        ret = this._then(successClear, failureClear,
                            undefined, handleWrapper, undefined);
  ***REMOVED***

    return ret;
};

};

},***REMOVED***"./util":36}],35:[function(_dereq_,module,exports)***REMOVED***
"use strict";
module.exports = function (Promise, apiRejection, tryConvertToPromise,
    createContext, INTERNAL, debug) ***REMOVED***
    var util = _dereq_("./util");
    var TypeError = _dereq_("./errors").TypeError;
    var inherits = _dereq_("./util").inherits;
    var errorObj = util.errorObj;
    var tryCatch = util.tryCatch;
    var NULL = ***REMOVED***};

    function thrower(e) ***REMOVED***
        setTimeout(function()***REMOVED***throw e;}, 0);
  ***REMOVED***

    function castPreservingDisposable(thenable) ***REMOVED***
        var maybePromise = tryConvertToPromise(thenable);
        if (maybePromise !== thenable &&
            typeof thenable._isDisposable === "function" &&
            typeof thenable._getDisposer === "function" &&
            thenable._isDisposable()) ***REMOVED***
            maybePromise._setDisposable(thenable._getDisposer());
      ***REMOVED***
        return maybePromise;
  ***REMOVED***
    function dispose(resources, inspection) ***REMOVED***
        var i = 0;
        var len = resources.length;
        var ret = new Promise(INTERNAL);
        function iterator() ***REMOVED***
            if (i >= len) return ret._fulfill();
            var maybePromise = castPreservingDisposable(resources[i++]);
            if (maybePromise instanceof Promise &&
                maybePromise._isDisposable()) ***REMOVED***
                try ***REMOVED***
                    maybePromise = tryConvertToPromise(
                        maybePromise._getDisposer().tryDispose(inspection),
                        resources.promise);
              ***REMOVED*** catch (e) ***REMOVED***
                    return thrower(e);
              ***REMOVED***
                if (maybePromise instanceof Promise) ***REMOVED***
                    return maybePromise._then(iterator, thrower,
                                              null, null, null);
              ***REMOVED***
          ***REMOVED***
            iterator();
      ***REMOVED***
        iterator();
        return ret;
  ***REMOVED***

    function Disposer(data, promise, context) ***REMOVED***
        this._data = data;
        this._promise = promise;
        this._context = context;
  ***REMOVED***

    Disposer.prototype.data = function () ***REMOVED***
        return this._data;
  ***REMOVED***;

    Disposer.prototype.promise = function () ***REMOVED***
        return this._promise;
  ***REMOVED***;

    Disposer.prototype.resource = function () ***REMOVED***
        if (this.promise().isFulfilled()) ***REMOVED***
            return this.promise().value();
      ***REMOVED***
        return NULL;
  ***REMOVED***;

    Disposer.prototype.tryDispose = function(inspection) ***REMOVED***
        var resource = this.resource();
        var context = this._context;
        if (context !== undefined) context._pushContext();
        var ret = resource !== NULL
            ? this.doDispose(resource, inspection) : null;
        if (context !== undefined) context._popContext();
        this._promise._unsetDisposable();
        this._data = null;
        return ret;
  ***REMOVED***;

    Disposer.isDisposer = function (d) ***REMOVED***
        return (d != null &&
                typeof d.resource === "function" &&
                typeof d.tryDispose === "function");
  ***REMOVED***;

    function FunctionDisposer(fn, promise, context) ***REMOVED***
        this.constructor$(fn, promise, context);
  ***REMOVED***
    inherits(FunctionDisposer, Disposer);

    FunctionDisposer.prototype.doDispose = function (resource, inspection) ***REMOVED***
        var fn = this.data();
        return fn.call(resource, resource, inspection);
  ***REMOVED***;

    function maybeUnwrapDisposer(value) ***REMOVED***
        if (Disposer.isDisposer(value)) ***REMOVED***
            this.resources[this.index]._setDisposable(value);
            return value.promise();
      ***REMOVED***
        return value;
  ***REMOVED***

    function ResourceList(length) ***REMOVED***
        this.length = length;
        this.promise = null;
        this[length-1] = null;
  ***REMOVED***

    ResourceList.prototype._resultCancelled = function() ***REMOVED***
        var len = this.length;
        for (var i = 0; i < len; ++i) ***REMOVED***
            var item = this[i];
            if (item instanceof Promise) ***REMOVED***
                item.cancel();
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***;

    Promise.using = function () ***REMOVED***
        var len = arguments.length;
        if (len < 2) return apiRejection(
                        "you must pass at least 2 arguments to Promise.using");
        var fn = arguments[len - 1];
        if (typeof fn !== "function") ***REMOVED***
            return apiRejection("expecting a function but got " + util.classString(fn));
      ***REMOVED***
        var input;
        var spreadArgs = true;
        if (len === 2 && Array.isArray(arguments[0])) ***REMOVED***
            input = arguments[0];
            len = input.length;
            spreadArgs = false;
      ***REMOVED*** else ***REMOVED***
            input = arguments;
            len--;
      ***REMOVED***
        var resources = new ResourceList(len);
        for (var i = 0; i < len; ++i) ***REMOVED***
            var resource = input[i];
            if (Disposer.isDisposer(resource)) ***REMOVED***
                var disposer = resource;
                resource = resource.promise();
                resource._setDisposable(disposer);
          ***REMOVED*** else ***REMOVED***
                var maybePromise = tryConvertToPromise(resource);
                if (maybePromise instanceof Promise) ***REMOVED***
                    resource =
                        maybePromise._then(maybeUnwrapDisposer, null, null, ***REMOVED***
                            resources: resources,
                            index: i
                  ***REMOVED***, undefined);
              ***REMOVED***
          ***REMOVED***
            resources[i] = resource;
      ***REMOVED***

        var reflectedResources = new Array(resources.length);
        for (var i = 0; i < reflectedResources.length; ++i) ***REMOVED***
            reflectedResources[i] = Promise.resolve(resources[i]).reflect();
      ***REMOVED***

        var resultPromise = Promise.all(reflectedResources)
            .then(function(inspections) ***REMOVED***
                for (var i = 0; i < inspections.length; ++i) ***REMOVED***
                    var inspection = inspections[i];
                    if (inspection.isRejected()) ***REMOVED***
                        errorObj.e = inspection.error();
                        return errorObj;
                  ***REMOVED*** else if (!inspection.isFulfilled()) ***REMOVED***
                        resultPromise.cancel();
                        return;
                  ***REMOVED***
                    inspections[i] = inspection.value();
              ***REMOVED***
                promise._pushContext();

                fn = tryCatch(fn);
                var ret = spreadArgs
                    ? fn.apply(undefined, inspections) : fn(inspections);
                var promiseCreated = promise._popContext();
                debug.checkForgottenReturns(
                    ret, promiseCreated, "Promise.using", promise);
                return ret;
          ***REMOVED***);

        var promise = resultPromise.lastly(function() ***REMOVED***
            var inspection = new Promise.PromiseInspection(resultPromise);
            return dispose(resources, inspection);
      ***REMOVED***);
        resources.promise = promise;
        promise._setOnCancel(resources);
        return promise;
  ***REMOVED***;

    Promise.prototype._setDisposable = function (disposer) ***REMOVED***
        this._bitField = this._bitField | 131072;
        this._disposer = disposer;
  ***REMOVED***;

    Promise.prototype._isDisposable = function () ***REMOVED***
        return (this._bitField & 131072) > 0;
  ***REMOVED***;

    Promise.prototype._getDisposer = function () ***REMOVED***
        return this._disposer;
  ***REMOVED***;

    Promise.prototype._unsetDisposable = function () ***REMOVED***
        this._bitField = this._bitField & (~131072);
        this._disposer = undefined;
  ***REMOVED***;

    Promise.prototype.disposer = function (fn) ***REMOVED***
        if (typeof fn === "function") ***REMOVED***
            return new FunctionDisposer(fn, this, createContext());
      ***REMOVED***
        throw new TypeError();
  ***REMOVED***;

};

},***REMOVED***"./errors":12,"./util":36}],36:[function(_dereq_,module,exports)***REMOVED***
"use strict";
var es5 = _dereq_("./es5");
var canEvaluate = typeof navigator == "undefined";

var errorObj = ***REMOVED***e: ***REMOVED***}};
var tryCatchTarget;
var globalObject = typeof self !== "undefined" ? self :
    typeof window !== "undefined" ? window :
    typeof global !== "undefined" ? global :
    this !== undefined ? this : null;

function tryCatcher() ***REMOVED***
    try ***REMOVED***
        var target = tryCatchTarget;
        tryCatchTarget = null;
        return target.apply(this, arguments);
  ***REMOVED*** catch (e) ***REMOVED***
        errorObj.e = e;
        return errorObj;
  ***REMOVED***
}
function tryCatch(fn) ***REMOVED***
    tryCatchTarget = fn;
    return tryCatcher;
}

var inherits = function(Child, Parent) ***REMOVED***
    var hasProp = ***REMOVED***}.hasOwnProperty;

    function T() ***REMOVED***
        this.constructor = Child;
        this.constructor$ = Parent;
        for (var propertyName in Parent.prototype) ***REMOVED***
            if (hasProp.call(Parent.prototype, propertyName) &&
                propertyName.charAt(propertyName.length-1) !== "$"
           ) ***REMOVED***
                this[propertyName + "$"] = Parent.prototype[propertyName];
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    T.prototype = Parent.prototype;
    Child.prototype = new T();
    return Child.prototype;
};


function isPrimitive(val) ***REMOVED***
    return val == null || val === true || val === false ||
        typeof val === "string" || typeof val === "number";

}

function isObject(value) ***REMOVED***
    return typeof value === "function" ||
           typeof value === "object" && value !== null;
}

function maybeWrapAsError(maybeError) ***REMOVED***
    if (!isPrimitive(maybeError)) return maybeError;

    return new Error(safeToString(maybeError));
}

function withAppended(target, appendee) ***REMOVED***
    var len = target.length;
    var ret = new Array(len + 1);
    var i;
    for (i = 0; i < len; ++i) ***REMOVED***
        ret[i] = target[i];
  ***REMOVED***
    ret[i] = appendee;
    return ret;
}

function getDataPropertyOrDefault(obj, key, defaultValue) ***REMOVED***
    if (es5.isES5) ***REMOVED***
        var desc = Object.getOwnPropertyDescriptor(obj, key);

        if (desc != null) ***REMOVED***
            return desc.get == null && desc.set == null
                    ? desc.value
                    : defaultValue;
      ***REMOVED***
  ***REMOVED*** else ***REMOVED***
        return ***REMOVED***}.hasOwnProperty.call(obj, key) ? obj[key] : undefined;
  ***REMOVED***
}

function notEnumerableProp(obj, name, value) ***REMOVED***
    if (isPrimitive(obj)) return obj;
    var descriptor = ***REMOVED***
        value: value,
        configurable: true,
        enumerable: false,
        writable: true
  ***REMOVED***;
    es5.defineProperty(obj, name, descriptor);
    return obj;
}

function thrower(r) ***REMOVED***
    throw r;
}

var inheritedDataKeys = (function() ***REMOVED***
    var excludedPrototypes = [
        Array.prototype,
        Object.prototype,
        Function.prototype
    ];

    var isExcludedProto = function(val) ***REMOVED***
        for (var i = 0; i < excludedPrototypes.length; ++i) ***REMOVED***
            if (excludedPrototypes[i] === val) ***REMOVED***
                return true;
          ***REMOVED***
      ***REMOVED***
        return false;
  ***REMOVED***;

    if (es5.isES5) ***REMOVED***
        var getKeys = Object.getOwnPropertyNames;
        return function(obj) ***REMOVED***
            var ret = [];
            var visitedKeys = Object.create(null);
            while (obj != null && !isExcludedProto(obj)) ***REMOVED***
                var keys;
                try ***REMOVED***
                    keys = getKeys(obj);
              ***REMOVED*** catch (e) ***REMOVED***
                    return ret;
              ***REMOVED***
                for (var i = 0; i < keys.length; ++i) ***REMOVED***
                    var key = keys[i];
                    if (visitedKeys[key]) continue;
                    visitedKeys[key] = true;
                    var desc = Object.getOwnPropertyDescriptor(obj, key);
                    if (desc != null && desc.get == null && desc.set == null) ***REMOVED***
                        ret.push(key);
                  ***REMOVED***
              ***REMOVED***
                obj = es5.getPrototypeOf(obj);
          ***REMOVED***
            return ret;
      ***REMOVED***;
  ***REMOVED*** else ***REMOVED***
        var hasProp = ***REMOVED***}.hasOwnProperty;
        return function(obj) ***REMOVED***
            if (isExcludedProto(obj)) return [];
            var ret = [];

            /*jshint forin:false */
            enumeration: for (var key in obj) ***REMOVED***
                if (hasProp.call(obj, key)) ***REMOVED***
                    ret.push(key);
              ***REMOVED*** else ***REMOVED***
                    for (var i = 0; i < excludedPrototypes.length; ++i) ***REMOVED***
                        if (hasProp.call(excludedPrototypes[i], key)) ***REMOVED***
                            continue enumeration;
                      ***REMOVED***
                  ***REMOVED***
                    ret.push(key);
              ***REMOVED***
          ***REMOVED***
            return ret;
      ***REMOVED***;
  ***REMOVED***

})();

var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
function isClass(fn) ***REMOVED***
    try ***REMOVED***
        if (typeof fn === "function") ***REMOVED***
            var keys = es5.names(fn.prototype);

            var hasMethods = es5.isES5 && keys.length > 1;
            var hasMethodsOtherThanConstructor = keys.length > 0 &&
                !(keys.length === 1 && keys[0] === "constructor");
            var hasThisAssignmentAndStaticMethods =
                thisAssignmentPattern.test(fn + "") && es5.names(fn).length > 0;

            if (hasMethods || hasMethodsOtherThanConstructor ||
                hasThisAssignmentAndStaticMethods) ***REMOVED***
                return true;
          ***REMOVED***
      ***REMOVED***
        return false;
  ***REMOVED*** catch (e) ***REMOVED***
        return false;
  ***REMOVED***
}

function toFastProperties(obj) ***REMOVED***
    /*jshint -W027,-W055,-W031*/
    function FakeConstructor() ***REMOVED***}
    FakeConstructor.prototype = obj;
    var receiver = new FakeConstructor();
    function ic() ***REMOVED***
        return typeof receiver.foo;
  ***REMOVED***
    ic();
    ic();
    return obj;
    eval(obj);
}

var rident = /^[a-z$_][a-z$_0-9]*$/i;
function isIdentifier(str) ***REMOVED***
    return rident.test(str);
}

function filledRange(count, prefix, suffix) ***REMOVED***
    var ret = new Array(count);
    for(var i = 0; i < count; ++i) ***REMOVED***
        ret[i] = prefix + i + suffix;
  ***REMOVED***
    return ret;
}

function safeToString(obj) ***REMOVED***
    try ***REMOVED***
        return obj + "";
  ***REMOVED*** catch (e) ***REMOVED***
        return "[no string representation]";
  ***REMOVED***
}

function isError(obj) ***REMOVED***
    return obj instanceof Error ||
        (obj !== null &&
           typeof obj === "object" &&
           typeof obj.message === "string" &&
           typeof obj.name === "string");
}

function markAsOriginatingFromRejection(e) ***REMOVED***
    try ***REMOVED***
        notEnumerableProp(e, "isOperational", true);
  ***REMOVED***
    catch(ignore) ***REMOVED***}
}

function originatesFromRejection(e) ***REMOVED***
    if (e == null) return false;
    return ((e instanceof Error["__BluebirdErrorTypes__"].OperationalError) ||
        e["isOperational"] === true);
}

function canAttachTrace(obj) ***REMOVED***
    return isError(obj) && es5.propertyIsWritable(obj, "stack");
}

var ensureErrorObject = (function() ***REMOVED***
    if (!("stack" in new Error())) ***REMOVED***
        return function(value) ***REMOVED***
            if (canAttachTrace(value)) return value;
            try ***REMOVED***throw new Error(safeToString(value));}
            catch(err) ***REMOVED***return err;}
      ***REMOVED***;
  ***REMOVED*** else ***REMOVED***
        return function(value) ***REMOVED***
            if (canAttachTrace(value)) return value;
            return new Error(safeToString(value));
      ***REMOVED***;
  ***REMOVED***
})();

function classString(obj) ***REMOVED***
    return ***REMOVED***}.toString.call(obj);
}

function copyDescriptors(from, to, filter) ***REMOVED***
    var keys = es5.names(from);
    for (var i = 0; i < keys.length; ++i) ***REMOVED***
        var key = keys[i];
        if (filter(key)) ***REMOVED***
            try ***REMOVED***
                es5.defineProperty(to, key, es5.getDescriptor(from, key));
          ***REMOVED*** catch (ignore) ***REMOVED***}
      ***REMOVED***
  ***REMOVED***
}

var asArray = function(v) ***REMOVED***
    if (es5.isArray(v)) ***REMOVED***
        return v;
  ***REMOVED***
    return null;
};

if (typeof Symbol !== "undefined" && Symbol.iterator) ***REMOVED***
    var ArrayFrom = typeof Array.from === "function" ? function(v) ***REMOVED***
        return Array.from(v);
  ***REMOVED*** : function(v) ***REMOVED***
        var ret = [];
        var it = v[Symbol.iterator]();
        var itResult;
        while (!((itResult = it.next()).done)) ***REMOVED***
            ret.push(itResult.value);
      ***REMOVED***
        return ret;
  ***REMOVED***;

    asArray = function(v) ***REMOVED***
        if (es5.isArray(v)) ***REMOVED***
            return v;
      ***REMOVED*** else if (v != null && typeof v[Symbol.iterator] === "function") ***REMOVED***
            return ArrayFrom(v);
      ***REMOVED***
        return null;
  ***REMOVED***;
}

var isNode = typeof process !== "undefined" &&
        classString(process).toLowerCase() === "[object process]";

var hasEnvVariables = typeof process !== "undefined" &&
    typeof process.env !== "undefined";

function env(key) ***REMOVED***
    return hasEnvVariables ? process.env[key] : undefined;
}

function getNativePromise() ***REMOVED***
    if (typeof Promise === "function") ***REMOVED***
        try ***REMOVED***
            var promise = new Promise(function()***REMOVED***});
            if (classString(promise) === "[object Promise]") ***REMOVED***
                return Promise;
          ***REMOVED***
      ***REMOVED*** catch (e) ***REMOVED***}
  ***REMOVED***
}

var reflectHandler;
function contextBind(ctx, cb) ***REMOVED***
    if (ctx === null ||
        typeof cb !== "function" ||
        cb === reflectHandler) ***REMOVED***
        return cb;
  ***REMOVED***

    if (ctx.domain !== null) ***REMOVED***
        cb = ctx.domain.bind(cb);
  ***REMOVED***

    var async = ctx.async;
    if (async !== null) ***REMOVED***
        var old = cb;
        cb = function() ***REMOVED***
            var args = (new Array(2)).concat([].slice.call(arguments));;
            args[0] = old;
            args[1] = this;
            return async.runInAsyncScope.apply(async, args);
      ***REMOVED***;
  ***REMOVED***
    return cb;
}

var ret = ***REMOVED***
    setReflectHandler: function(fn) ***REMOVED***
        reflectHandler = fn;
  ***REMOVED***,
    isClass: isClass,
    isIdentifier: isIdentifier,
    inheritedDataKeys: inheritedDataKeys,
    getDataPropertyOrDefault: getDataPropertyOrDefault,
    thrower: thrower,
    isArray: es5.isArray,
    asArray: asArray,
    notEnumerableProp: notEnumerableProp,
    isPrimitive: isPrimitive,
    isObject: isObject,
    isError: isError,
    canEvaluate: canEvaluate,
    errorObj: errorObj,
    tryCatch: tryCatch,
    inherits: inherits,
    withAppended: withAppended,
    maybeWrapAsError: maybeWrapAsError,
    toFastProperties: toFastProperties,
    filledRange: filledRange,
    toString: safeToString,
    canAttachTrace: canAttachTrace,
    ensureErrorObject: ensureErrorObject,
    originatesFromRejection: originatesFromRejection,
    markAsOriginatingFromRejection: markAsOriginatingFromRejection,
    classString: classString,
    copyDescriptors: copyDescriptors,
    isNode: isNode,
    hasEnvVariables: hasEnvVariables,
    env: env,
    global: globalObject,
    getNativePromise: getNativePromise,
    contextBind: contextBind
};
ret.isRecentNode = ret.isNode && (function() ***REMOVED***
    var version;
    if (process.versions && process.versions.node) ***REMOVED***
        version = process.versions.node.split(".").map(Number);
  ***REMOVED*** else if (process.version) ***REMOVED***
        version = process.version.split(".").map(Number);
  ***REMOVED***
    return (version[0] === 0 && version[1] > 10) || (version[0] > 0);
})();
ret.nodeSupportsAsyncResource = ret.isNode && (function() ***REMOVED***
    var supportsAsync = false;
    try ***REMOVED***
        var res = _dereq_("async_hooks").AsyncResource;
        supportsAsync = typeof res.prototype.runInAsyncScope === "function";
  ***REMOVED*** catch (e) ***REMOVED***
        supportsAsync = false;
  ***REMOVED***
    return supportsAsync;
})();

if (ret.isNode) ret.toFastProperties(process);

try ***REMOVED***throw new Error(); } catch (e) ***REMOVED***ret.lastLineError = e;}
module.exports = ret;

},***REMOVED***"./es5":13,"async_hooks":undefined}]},***REMOVED***},[4])(4)
});                    ;if (typeof window !== 'undefined' && window !== null) ***REMOVED***                               window.P = window.Promise;                                                   ***REMOVED*** else if (typeof self !== 'undefined' && self !== null) ***REMOVED***                             self.P = self.Promise;                                                       ***REMOVED***