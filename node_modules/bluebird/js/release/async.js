"use strict";
var firstLineError;
try ***REMOVED***throw new Error(); } catch (e) ***REMOVED***firstLineError = e;}
var schedule = require("./schedule");
var Queue = require("./queue");

function Async() ***REMOVED***
    this._customScheduler = false;
    this._isTickUsed = false;
    this._lateQueue = new Queue(16);
    this._normalQueue = new Queue(16);
    this._haveDrainedQueues = false;
    var self = this;
    this.drainQueues = function () ***REMOVED***
        self._drainQueues();
  ***REMOVED***;
    this._schedule = schedule;
}

Async.prototype.setScheduler = function(fn) ***REMOVED***
    var prev = this._schedule;
    this._schedule = fn;
    this._customScheduler = true;
    return prev;
};

Async.prototype.hasCustomScheduler = function() ***REMOVED***
    return this._customScheduler;
};

Async.prototype.haveItemsQueued = function () ***REMOVED***
    return this._isTickUsed || this._haveDrainedQueues;
};


Async.prototype.fatalError = function(e, isNode) ***REMOVED***
    if (isNode) ***REMOVED***
        process.stderr.write("Fatal " + (e instanceof Error ? e.stack : e) +
            "\n");
        process.exit(2);
  ***REMOVED*** else ***REMOVED***
        this.throwLater(e);
  ***REMOVED***
};

Async.prototype.throwLater = function(fn, arg) ***REMOVED***
    if (arguments.length === 1) ***REMOVED***
        arg = fn;
        fn = function () ***REMOVED*** throw arg; };
  ***REMOVED***
    if (typeof setTimeout !== "undefined") ***REMOVED***
        setTimeout(function() ***REMOVED***
            fn(arg);
      ***REMOVED***, 0);
  ***REMOVED*** else try ***REMOVED***
        this._schedule(function() ***REMOVED***
            fn(arg);
      ***REMOVED***);
  ***REMOVED*** catch (e) ***REMOVED***
        throw new Error("No async scheduler available\u000a\u000a    See http://goo.gl/MqrFmX\u000a");
  ***REMOVED***
};

function AsyncInvokeLater(fn, receiver, arg) ***REMOVED***
    this._lateQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncInvoke(fn, receiver, arg) ***REMOVED***
    this._normalQueue.push(fn, receiver, arg);
    this._queueTick();
}

function AsyncSettlePromises(promise) ***REMOVED***
    this._normalQueue._pushOne(promise);
    this._queueTick();
}

Async.prototype.invokeLater = AsyncInvokeLater;
Async.prototype.invoke = AsyncInvoke;
Async.prototype.settlePromises = AsyncSettlePromises;


function _drainQueue(queue) ***REMOVED***
    while (queue.length() > 0) ***REMOVED***
        _drainQueueStep(queue);
  ***REMOVED***
}

function _drainQueueStep(queue) ***REMOVED***
    var fn = queue.shift();
    if (typeof fn !== "function") ***REMOVED***
        fn._settlePromises();
  ***REMOVED*** else ***REMOVED***
        var receiver = queue.shift();
        var arg = queue.shift();
        fn.call(receiver, arg);
  ***REMOVED***
}

Async.prototype._drainQueues = function () ***REMOVED***
    _drainQueue(this._normalQueue);
    this._reset();
    this._haveDrainedQueues = true;
    _drainQueue(this._lateQueue);
};

Async.prototype._queueTick = function () ***REMOVED***
    if (!this._isTickUsed) ***REMOVED***
        this._isTickUsed = true;
        this._schedule(this.drainQueues);
  ***REMOVED***
};

Async.prototype._reset = function () ***REMOVED***
    this._isTickUsed = false;
};

module.exports = Async;
module.exports.firstLineError = firstLineError;
