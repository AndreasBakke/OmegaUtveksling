"use strict";
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.DefaultTransporter = void 0;
const gaxios_1 = require("gaxios");
const options_1 = require("./options");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const pkg = require('../../package.json');
const PRODUCT_NAME = 'google-api-nodejs-client';
class DefaultTransporter ***REMOVED***
    /**
     * Configures request options before making a request.
     * @param opts GaxiosOptions options.
     * @return Configured options.
     */
    configure(opts = ***REMOVED***}) ***REMOVED***
        opts.headers = opts.headers || ***REMOVED***};
        if (typeof window === 'undefined') ***REMOVED***
            // set transporter user agent if not in browser
            const uaValue = opts.headers['User-Agent'];
            if (!uaValue) ***REMOVED***
                opts.headers['User-Agent'] = DefaultTransporter.USER_AGENT;
          ***REMOVED***
            else if (!uaValue.includes(`$***REMOVED***PRODUCT_NAME}/`)) ***REMOVED***
                opts.headers['User-Agent'] = `$***REMOVED***uaValue} $***REMOVED***DefaultTransporter.USER_AGENT}`;
          ***REMOVED***
            // track google-auth-library-nodejs version:
            const authVersion = `auth/$***REMOVED***pkg.version}`;
            if (opts.headers['x-goog-api-client'] &&
                !opts.headers['x-goog-api-client'].includes(authVersion)) ***REMOVED***
                opts.headers['x-goog-api-client'] = `$***REMOVED***opts.headers['x-goog-api-client']} $***REMOVED***authVersion}`;
          ***REMOVED***
            else if (!opts.headers['x-goog-api-client']) ***REMOVED***
                const nodeVersion = process.version.replace(/^v/, '');
                opts.headers['x-goog-api-client'] = `gl-node/$***REMOVED***nodeVersion} $***REMOVED***authVersion}`;
          ***REMOVED***
      ***REMOVED***
        return opts;
  ***REMOVED***
    request(opts, callback) ***REMOVED***
        // ensure the user isn't passing in request-style options
        opts = this.configure(opts);
        try ***REMOVED***
            (0, options_1.validate)(opts);
      ***REMOVED***
        catch (e) ***REMOVED***
            if (callback) ***REMOVED***
                return callback(e);
          ***REMOVED***
            else ***REMOVED***
                throw e;
          ***REMOVED***
      ***REMOVED***
        if (callback) ***REMOVED***
            (0, gaxios_1.request)(opts).then(r => ***REMOVED***
                callback(null, r);
          ***REMOVED***, e => ***REMOVED***
                callback(this.processError(e));
          ***REMOVED***);
      ***REMOVED***
        else ***REMOVED***
            return (0, gaxios_1.request)(opts).catch(e => ***REMOVED***
                throw this.processError(e);
          ***REMOVED***);
      ***REMOVED***
  ***REMOVED***
    /**
     * Changes the error to include details from the body.
     */
    processError(e) ***REMOVED***
        const res = e.response;
        const err = e;
        const body = res ? res.data : null;
        if (res && body && body.error && res.status !== 200) ***REMOVED***
            if (typeof body.error === 'string') ***REMOVED***
                err.message = body.error;
                err.code = res.status.toString();
          ***REMOVED***
            else if (Array.isArray(body.error.errors)) ***REMOVED***
                err.message = body.error.errors
                    .map((err2) => err2.message)
                    .join('\n');
                err.code = body.error.code;
                err.errors = body.error.errors;
          ***REMOVED***
            else ***REMOVED***
                err.message = body.error.message;
                err.code = body.error.code || res.status;
          ***REMOVED***
      ***REMOVED***
        else if (res && res.status >= 400) ***REMOVED***
            // Consider all 4xx and 5xx responses errors.
            err.message = body;
            err.code = res.status.toString();
      ***REMOVED***
        return err;
  ***REMOVED***
}
exports.DefaultTransporter = DefaultTransporter;
/**
 * Default user agent.
 */
DefaultTransporter.USER_AGENT = `$***REMOVED***PRODUCT_NAME}/$***REMOVED***pkg.version}`;
//# sourceMappingURL=transporters.js.map