"use strict";
// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.getEnv = exports.clear = exports.GCPEnv = void 0;
const gcpMetadata = require("gcp-metadata");
var GCPEnv;
(function (GCPEnv) ***REMOVED***
    GCPEnv["APP_ENGINE"] = "APP_ENGINE";
    GCPEnv["KUBERNETES_ENGINE"] = "KUBERNETES_ENGINE";
    GCPEnv["CLOUD_FUNCTIONS"] = "CLOUD_FUNCTIONS";
    GCPEnv["COMPUTE_ENGINE"] = "COMPUTE_ENGINE";
    GCPEnv["CLOUD_RUN"] = "CLOUD_RUN";
    GCPEnv["NONE"] = "NONE";
})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = ***REMOVED***}));
let envPromise;
function clear() ***REMOVED***
    envPromise = undefined;
}
exports.clear = clear;
async function getEnv() ***REMOVED***
    if (envPromise) ***REMOVED***
        return envPromise;
  ***REMOVED***
    envPromise = getEnvMemoized();
    return envPromise;
}
exports.getEnv = getEnv;
async function getEnvMemoized() ***REMOVED***
    let env = GCPEnv.NONE;
    if (isAppEngine()) ***REMOVED***
        env = GCPEnv.APP_ENGINE;
  ***REMOVED***
    else if (isCloudFunction()) ***REMOVED***
        env = GCPEnv.CLOUD_FUNCTIONS;
  ***REMOVED***
    else if (await isComputeEngine()) ***REMOVED***
        if (await isKubernetesEngine()) ***REMOVED***
            env = GCPEnv.KUBERNETES_ENGINE;
      ***REMOVED***
        else if (isCloudRun()) ***REMOVED***
            env = GCPEnv.CLOUD_RUN;
      ***REMOVED***
        else ***REMOVED***
            env = GCPEnv.COMPUTE_ENGINE;
      ***REMOVED***
  ***REMOVED***
    else ***REMOVED***
        env = GCPEnv.NONE;
  ***REMOVED***
    return env;
}
function isAppEngine() ***REMOVED***
    return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);
}
function isCloudFunction() ***REMOVED***
    return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);
}
/**
 * This check only verifies that the environment is running knative.
 * This must be run *after* checking for Kubernetes, otherwise it will
 * return a false positive.
 */
function isCloudRun() ***REMOVED***
    return !!process.env.K_CONFIGURATION;
}
async function isKubernetesEngine() ***REMOVED***
    try ***REMOVED***
        await gcpMetadata.instance('attributes/cluster-name');
        return true;
  ***REMOVED***
    catch (e) ***REMOVED***
        return false;
  ***REMOVED***
}
async function isComputeEngine() ***REMOVED***
    return gcpMetadata.isAvailable();
}
//# sourceMappingURL=envDetect.js.map