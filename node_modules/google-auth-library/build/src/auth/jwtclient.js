"use strict";
// Copyright 2013 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.JWT = void 0;
const gtoken_1 = require("gtoken");
const jwtaccess_1 = require("./jwtaccess");
const oauth2client_1 = require("./oauth2client");
class JWT extends oauth2client_1.OAuth2Client ***REMOVED***
    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) ***REMOVED***
        const opts = optionsOrEmail && typeof optionsOrEmail === 'object'
            ? optionsOrEmail
            : ***REMOVED*** email: optionsOrEmail, keyFile, key, keyId, scopes, subject };
        super(***REMOVED***
            eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,
            forceRefreshOnFailure: opts.forceRefreshOnFailure,
      ***REMOVED***);
        this.email = opts.email;
        this.keyFile = opts.keyFile;
        this.key = opts.key;
        this.keyId = opts.keyId;
        this.scopes = opts.scopes;
        this.subject = opts.subject;
        this.additionalClaims = opts.additionalClaims;
        this.credentials = ***REMOVED*** refresh_token: 'jwt-placeholder', expiry_date: 1 };
  ***REMOVED***
    /**
     * Creates a copy of the credential with the specified scopes.
     * @param scopes List of requested scopes or a single scope.
     * @return The cloned instance.
     */
    createScoped(scopes) ***REMOVED***
        return new JWT(***REMOVED***
            email: this.email,
            keyFile: this.keyFile,
            key: this.key,
            keyId: this.keyId,
            scopes,
            subject: this.subject,
            additionalClaims: this.additionalClaims,
      ***REMOVED***);
  ***REMOVED***
    /**
     * Obtains the metadata to be sent with the request.
     *
     * @param url the URI being authorized.
     */
    async getRequestMetadataAsync(url) ***REMOVED***
        url = this.defaultServicePath ? `https://$***REMOVED***this.defaultServicePath}/` : url;
        const useSelfSignedJWT = (!this.hasUserScopes() && url) ||
            (this.useJWTAccessWithScope && this.hasAnyScopes());
        if (!this.apiKey && useSelfSignedJWT) ***REMOVED***
            if (this.additionalClaims &&
                this.additionalClaims.target_audience) ***REMOVED***
                const ***REMOVED*** tokens } = await this.refreshToken();
                return ***REMOVED***
                    headers: this.addSharedMetadataHeaders(***REMOVED***
                        Authorization: `Bearer $***REMOVED***tokens.id_token}`,
                  ***REMOVED***),
              ***REMOVED***;
          ***REMOVED***
            else ***REMOVED***
                // no scopes have been set, but a uri has been provided. Use JWTAccess
                // credentials.
                if (!this.access) ***REMOVED***
                    this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId, this.eagerRefreshThresholdMillis);
              ***REMOVED***
                let scopes;
                if (this.hasUserScopes()) ***REMOVED***
                    scopes = this.scopes;
              ***REMOVED***
                else if (!url) ***REMOVED***
                    scopes = this.defaultScopes;
              ***REMOVED***
                const headers = await this.access.getRequestHeaders(url !== null && url !== void 0 ? url : undefined, this.additionalClaims, 
                // Scopes take precedent over audience for signing,
                // so we only provide them if useJWTAccessWithScope is on
                this.useJWTAccessWithScope ? scopes : undefined);
                return ***REMOVED*** headers: this.addSharedMetadataHeaders(headers) };
          ***REMOVED***
      ***REMOVED***
        else if (this.hasAnyScopes() || this.apiKey) ***REMOVED***
            return super.getRequestMetadataAsync(url);
      ***REMOVED***
        else ***REMOVED***
            // If no audience, apiKey, or scopes are provided, we should not attempt
            // to populate any headers:
            return ***REMOVED*** headers: ***REMOVED***} };
      ***REMOVED***
  ***REMOVED***
    /**
     * Fetches an ID token.
     * @param targetAudience the audience for the fetched ID token.
     */
    async fetchIdToken(targetAudience) ***REMOVED***
        // Create a new gToken for fetching an ID token
        const gtoken = new gtoken_1.GoogleToken(***REMOVED***
            iss: this.email,
            sub: this.subject,
            scope: this.scopes || this.defaultScopes,
            keyFile: this.keyFile,
            key: this.key,
            additionalClaims: ***REMOVED*** target_audience: targetAudience },
            transporter: this.transporter,
      ***REMOVED***);
        await gtoken.getToken(***REMOVED***
            forceRefresh: true,
      ***REMOVED***);
        if (!gtoken.idToken) ***REMOVED***
            throw new Error('Unknown error: Failed to fetch ID token');
      ***REMOVED***
        return gtoken.idToken;
  ***REMOVED***
    /**
     * Determine if there are currently scopes available.
     */
    hasUserScopes() ***REMOVED***
        if (!this.scopes) ***REMOVED***
            return false;
      ***REMOVED***
        return this.scopes.length > 0;
  ***REMOVED***
    /**
     * Are there any default or user scopes defined.
     */
    hasAnyScopes() ***REMOVED***
        if (this.scopes && this.scopes.length > 0)
            return true;
        if (this.defaultScopes && this.defaultScopes.length > 0)
            return true;
        return false;
  ***REMOVED***
    authorize(callback) ***REMOVED***
        if (callback) ***REMOVED***
            this.authorizeAsync().then(r => callback(null, r), callback);
      ***REMOVED***
        else ***REMOVED***
            return this.authorizeAsync();
      ***REMOVED***
  ***REMOVED***
    async authorizeAsync() ***REMOVED***
        const result = await this.refreshToken();
        if (!result) ***REMOVED***
            throw new Error('No result returned');
      ***REMOVED***
        this.credentials = result.tokens;
        this.credentials.refresh_token = 'jwt-placeholder';
        this.key = this.gtoken.key;
        this.email = this.gtoken.iss;
        return result.tokens;
  ***REMOVED***
    /**
     * Refreshes the access token.
     * @param refreshToken ignored
     * @private
     */
    async refreshTokenNoCache(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    refreshToken) ***REMOVED***
        const gtoken = this.createGToken();
        const token = await gtoken.getToken(***REMOVED***
            forceRefresh: this.isTokenExpiring(),
      ***REMOVED***);
        const tokens = ***REMOVED***
            access_token: token.access_token,
            token_type: 'Bearer',
            expiry_date: gtoken.expiresAt,
            id_token: gtoken.idToken,
      ***REMOVED***;
        this.emit('tokens', tokens);
        return ***REMOVED*** res: null, tokens };
  ***REMOVED***
    /**
     * Create a gToken if it doesn't already exist.
     */
    createGToken() ***REMOVED***
        if (!this.gtoken) ***REMOVED***
            this.gtoken = new gtoken_1.GoogleToken(***REMOVED***
                iss: this.email,
                sub: this.subject,
                scope: this.scopes || this.defaultScopes,
                keyFile: this.keyFile,
                key: this.key,
                additionalClaims: this.additionalClaims,
                transporter: this.transporter,
          ***REMOVED***);
      ***REMOVED***
        return this.gtoken;
  ***REMOVED***
    /**
     * Create a JWT credentials instance using the given input options.
     * @param json The input object.
     */
    fromJSON(json) ***REMOVED***
        if (!json) ***REMOVED***
            throw new Error('Must pass in a JSON object containing the service account auth settings.');
      ***REMOVED***
        if (!json.client_email) ***REMOVED***
            throw new Error('The incoming JSON object does not contain a client_email field');
      ***REMOVED***
        if (!json.private_key) ***REMOVED***
            throw new Error('The incoming JSON object does not contain a private_key field');
      ***REMOVED***
        // Extract the relevant information from the json key file.
        this.email = json.client_email;
        this.key = json.private_key;
        this.keyId = json.private_key_id;
        this.projectId = json.project_id;
        this.quotaProjectId = json.quota_project_id;
  ***REMOVED***
    fromStream(inputStream, callback) ***REMOVED***
        if (callback) ***REMOVED***
            this.fromStreamAsync(inputStream).then(() => callback(), callback);
      ***REMOVED***
        else ***REMOVED***
            return this.fromStreamAsync(inputStream);
      ***REMOVED***
  ***REMOVED***
    fromStreamAsync(inputStream) ***REMOVED***
        return new Promise((resolve, reject) => ***REMOVED***
            if (!inputStream) ***REMOVED***
                throw new Error('Must pass in a stream containing the service account auth settings.');
          ***REMOVED***
            let s = '';
            inputStream
                .setEncoding('utf8')
                .on('error', reject)
                .on('data', chunk => (s += chunk))
                .on('end', () => ***REMOVED***
                try ***REMOVED***
                    const data = JSON.parse(s);
                    this.fromJSON(data);
                    resolve();
              ***REMOVED***
                catch (e) ***REMOVED***
                    reject(e);
              ***REMOVED***
          ***REMOVED***);
      ***REMOVED***);
  ***REMOVED***
    /**
     * Creates a JWT credentials instance using an API Key for authentication.
     * @param apiKey The API Key in string form.
     */
    fromAPIKey(apiKey) ***REMOVED***
        if (typeof apiKey !== 'string') ***REMOVED***
            throw new Error('Must provide an API Key string.');
      ***REMOVED***
        this.apiKey = apiKey;
  ***REMOVED***
    /**
     * Using the key or keyFile on the JWT client, obtain an object that contains
     * the key and the client email.
     */
    async getCredentials() ***REMOVED***
        if (this.key) ***REMOVED***
            return ***REMOVED*** private_key: this.key, client_email: this.email };
      ***REMOVED***
        else if (this.keyFile) ***REMOVED***
            const gtoken = this.createGToken();
            const creds = await gtoken.getCredentials(this.keyFile);
            return ***REMOVED*** private_key: creds.privateKey, client_email: creds.clientEmail };
      ***REMOVED***
        throw new Error('A key or a keyFile must be provided to getCredentials.');
  ***REMOVED***
}
exports.JWT = JWT;
//# sourceMappingURL=jwtclient.js.map