"use strict";
// Copyright 2015 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.UserRefreshClient = void 0;
const oauth2client_1 = require("./oauth2client");
class UserRefreshClient extends oauth2client_1.OAuth2Client ***REMOVED***
    constructor(optionsOrClientId, clientSecret, refreshToken, eagerRefreshThresholdMillis, forceRefreshOnFailure) ***REMOVED***
        const opts = optionsOrClientId && typeof optionsOrClientId === 'object'
            ? optionsOrClientId
            : ***REMOVED***
                clientId: optionsOrClientId,
                clientSecret,
                refreshToken,
                eagerRefreshThresholdMillis,
                forceRefreshOnFailure,
          ***REMOVED***;
        super(***REMOVED***
            clientId: opts.clientId,
            clientSecret: opts.clientSecret,
            eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis,
            forceRefreshOnFailure: opts.forceRefreshOnFailure,
      ***REMOVED***);
        this._refreshToken = opts.refreshToken;
        this.credentials.refresh_token = opts.refreshToken;
  ***REMOVED***
    /**
     * Refreshes the access token.
     * @param refreshToken An ignored refreshToken..
     * @param callback Optional callback.
     */
    async refreshTokenNoCache(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    refreshToken) ***REMOVED***
        return super.refreshTokenNoCache(this._refreshToken);
  ***REMOVED***
    /**
     * Create a UserRefreshClient credentials instance using the given input
     * options.
     * @param json The input object.
     */
    fromJSON(json) ***REMOVED***
        if (!json) ***REMOVED***
            throw new Error('Must pass in a JSON object containing the user refresh token');
      ***REMOVED***
        if (json.type !== 'authorized_user') ***REMOVED***
            throw new Error('The incoming JSON object does not have the "authorized_user" type');
      ***REMOVED***
        if (!json.client_id) ***REMOVED***
            throw new Error('The incoming JSON object does not contain a client_id field');
      ***REMOVED***
        if (!json.client_secret) ***REMOVED***
            throw new Error('The incoming JSON object does not contain a client_secret field');
      ***REMOVED***
        if (!json.refresh_token) ***REMOVED***
            throw new Error('The incoming JSON object does not contain a refresh_token field');
      ***REMOVED***
        this._clientId = json.client_id;
        this._clientSecret = json.client_secret;
        this._refreshToken = json.refresh_token;
        this.credentials.refresh_token = json.refresh_token;
        this.quotaProjectId = json.quota_project_id;
  ***REMOVED***
    fromStream(inputStream, callback) ***REMOVED***
        if (callback) ***REMOVED***
            this.fromStreamAsync(inputStream).then(() => callback(), callback);
      ***REMOVED***
        else ***REMOVED***
            return this.fromStreamAsync(inputStream);
      ***REMOVED***
  ***REMOVED***
    async fromStreamAsync(inputStream) ***REMOVED***
        return new Promise((resolve, reject) => ***REMOVED***
            if (!inputStream) ***REMOVED***
                return reject(new Error('Must pass in a stream containing the user refresh token.'));
          ***REMOVED***
            let s = '';
            inputStream
                .setEncoding('utf8')
                .on('error', reject)
                .on('data', chunk => (s += chunk))
                .on('end', () => ***REMOVED***
                try ***REMOVED***
                    const data = JSON.parse(s);
                    this.fromJSON(data);
                    return resolve();
              ***REMOVED***
                catch (err) ***REMOVED***
                    return reject(err);
              ***REMOVED***
          ***REMOVED***);
      ***REMOVED***);
  ***REMOVED***
}
exports.UserRefreshClient = UserRefreshClient;
//# sourceMappingURL=refreshclient.js.map