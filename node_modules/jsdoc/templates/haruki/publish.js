/* eslint-disable indent, no-nested-ternary, space-infix-ops */
/**
    @overview Builds a tree-like JSON string from the doclet data.
    @version 0.0.3
    @example
        ./jsdoc scratch/jsdoc_test.js -t templates/haruki -d console -q format=xml
*/
const xml = require('js2xmlparser');

const hasOwnProp = Object.prototype.hasOwnProperty;

function graft(parentNode, childNodes, parentLongname) ***REMOVED***
    childNodes
    .filter((***REMOVED***memberof}) => memberof === parentLongname)
    .forEach(element => ***REMOVED***
        let i;
        let len;
        let thisClass;
        let thisEvent;
        let thisFunction;
        let thisMixin;
        let thisNamespace;

        if (element.kind === 'namespace') ***REMOVED***
            if (!parentNode.namespaces) ***REMOVED***
                parentNode.namespaces = [];
          ***REMOVED***

            thisNamespace = ***REMOVED***
                'name': element.name,
                'description': element.description || '',
                'access': element.access || '',
                'virtual': Boolean(element.virtual)
          ***REMOVED***;

            parentNode.namespaces.push(thisNamespace);

            graft(thisNamespace, childNodes, element.longname);
      ***REMOVED***
        else if (element.kind === 'mixin') ***REMOVED***
            if (!parentNode.mixins) ***REMOVED***
                parentNode.mixins = [];
          ***REMOVED***

            thisMixin = ***REMOVED***
                'name': element.name,
                'description': element.description || '',
                'access': element.access || '',
                'virtual': Boolean(element.virtual)
          ***REMOVED***;

            parentNode.mixins.push(thisMixin);

            graft(thisMixin, childNodes, element.longname);
      ***REMOVED***
        else if (element.kind === 'function') ***REMOVED***
            if (!parentNode.functions) ***REMOVED***
                parentNode.functions = [];
          ***REMOVED***

            thisFunction = ***REMOVED***
                'name': element.name,
                'access': element.access || '',
                'virtual': Boolean(element.virtual),
                'description': element.description || '',
                'parameters': [],
                'examples': []
          ***REMOVED***;

            parentNode.functions.push(thisFunction);

            if (element.returns) ***REMOVED***
                thisFunction.returns = ***REMOVED***
                    'type': element.returns[0].type? (element.returns[0].type.names.length === 1? element.returns[0].type.names[0] : element.returns[0].type.names) : '',
                    'description': element.returns[0].description || ''
              ***REMOVED***;
          ***REMOVED***

            if (element.examples) ***REMOVED***
                for (i = 0, len = element.examples.length; i < len; i++) ***REMOVED***
                    thisFunction.examples.push(element.examples[i]);
              ***REMOVED***
          ***REMOVED***

            if (element.params) ***REMOVED***
                for (i = 0, len = element.params.length; i < len; i++) ***REMOVED***
                    thisFunction.parameters.push(***REMOVED***
                        'name': element.params[i].name,
                        'type': element.params[i].type? (element.params[i].type.names.length === 1? element.params[i].type.names[0] : element.params[i].type.names) : '',
                        'description': element.params[i].description || '',
                        'default': hasOwnProp.call(element.params[i], 'defaultvalue') ? element.params[i].defaultvalue : '',
                        'optional': typeof element.params[i].optional === 'boolean'? element.params[i].optional : '',
                        'nullable': typeof element.params[i].nullable === 'boolean'? element.params[i].nullable : ''
                  ***REMOVED***);
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***
        else if (element.kind === 'member') ***REMOVED***
            if (!parentNode.properties) ***REMOVED***
                parentNode.properties = [];
          ***REMOVED***
            parentNode.properties.push(***REMOVED***
                'name': element.name,
                'access': element.access || '',
                'virtual': Boolean(element.virtual),
                'description': element.description || '',
                'type': element.type? (element.type.length === 1? element.type[0] : element.type) : ''
          ***REMOVED***);
      ***REMOVED***

        else if (element.kind === 'event') ***REMOVED***
            if (!parentNode.events) ***REMOVED***
                parentNode.events = [];
          ***REMOVED***

            thisEvent = ***REMOVED***
                'name': element.name,
                'access': element.access || '',
                'virtual': Boolean(element.virtual),
                'description': element.description || '',
                'parameters': [],
                'examples': []
          ***REMOVED***;

            parentNode.events.push(thisEvent);

            if (element.returns) ***REMOVED***
                thisEvent.returns = ***REMOVED***
                    'type': element.returns.type ? (element.returns.type.names.length === 1 ? element.returns.type.names[0] : element.returns.type.names) : '',
                    'description': element.returns.description || ''
              ***REMOVED***;
          ***REMOVED***

            if (element.examples) ***REMOVED***
                for (i = 0, len = element.examples.length; i < len; i++) ***REMOVED***
                    thisEvent.examples.push(element.examples[i]);
              ***REMOVED***
          ***REMOVED***

            if (element.params) ***REMOVED***
                for (i = 0, len = element.params.length; i < len; i++) ***REMOVED***
                    thisEvent.parameters.push(***REMOVED***
                        'name': element.params[i].name,
                        'type': element.params[i].type? (element.params[i].type.names.length === 1? element.params[i].type.names[0] : element.params[i].type.names) : '',
                        'description': element.params[i].description || '',
                        'default': hasOwnProp.call(element.params[i], 'defaultvalue') ? element.params[i].defaultvalue : '',
                        'optional': typeof element.params[i].optional === 'boolean'? element.params[i].optional : '',
                        'nullable': typeof element.params[i].nullable === 'boolean'? element.params[i].nullable : ''
                  ***REMOVED***);
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***
        else if (element.kind === 'class') ***REMOVED***
            if (!parentNode.classes) ***REMOVED***
                parentNode.classes = [];
          ***REMOVED***

            thisClass = ***REMOVED***
                'name': element.name,
                'description': element.classdesc || '',
                'extends': element.augments || [],
                'access': element.access || '',
                'virtual': Boolean(element.virtual),
                'fires': element.fires || '',
                'constructor': ***REMOVED***
                    'name': element.name,
                    'description': element.description || '',
                    'parameters': [
                    ],
                    'examples': []
              ***REMOVED***
          ***REMOVED***;

            parentNode.classes.push(thisClass);

            if (element.examples) ***REMOVED***
                for (i = 0, len = element.examples.length; i < len; i++) ***REMOVED***
                    thisClass.constructor.examples.push(element.examples[i]);
              ***REMOVED***
          ***REMOVED***

            if (element.params) ***REMOVED***
                for (i = 0, len = element.params.length; i < len; i++) ***REMOVED***
                    thisClass.constructor.parameters.push(***REMOVED***
                        'name': element.params[i].name,
                        'type': element.params[i].type? (element.params[i].type.names.length === 1? element.params[i].type.names[0] : element.params[i].type.names) : '',
                        'description': element.params[i].description || '',
                        'default': hasOwnProp.call(element.params[i], 'defaultvalue') ? element.params[i].defaultvalue : '',
                        'optional': typeof element.params[i].optional === 'boolean'? element.params[i].optional : '',
                        'nullable': typeof element.params[i].nullable === 'boolean'? element.params[i].nullable : ''
                  ***REMOVED***);
              ***REMOVED***
          ***REMOVED***

            graft(thisClass, childNodes, element.longname);
     ***REMOVED***
  ***REMOVED***);
}

/**
    @param ***REMOVED***TAFFY} data
    @param ***REMOVED***object} opts
 */
exports.publish = (data, ***REMOVED***destination, query}) => ***REMOVED***
    let docs;
    const root = ***REMOVED***};

    data(***REMOVED***undocumented: true}).remove();
    docs = data().get(); // <-- an array of Doclet objects

    graft(root, docs);

    if (destination === 'console') ***REMOVED***
        if (query && query.format === 'xml') ***REMOVED***
            console.log( xml.parse('jsdoc', root) );
      ***REMOVED***
        else ***REMOVED***
            console.log( require('jsdoc/util/dumper').dump(root) );
      ***REMOVED***
  ***REMOVED***
    else ***REMOVED***
        console.log('This template only supports output to the console. Use the option "-d console" when you run JSDoc.');
  ***REMOVED***
};
