const doop = require('jsdoc/util/doop');
const env = require('jsdoc/env');
const fs = require('jsdoc/fs');
const helper = require('jsdoc/util/templateHelper');
const logger = require('jsdoc/util/logger');
const path = require('jsdoc/path');
const taffy = require('taffydb').taffy;
const template = require('jsdoc/template');
const util = require('util');

const htmlsafe = helper.htmlsafe;
const linkto = helper.linkto;
const resolveAuthorLinks = helper.resolveAuthorLinks;
const hasOwnProp = Object.prototype.hasOwnProperty;

let data;
let view;

let outdir = path.normalize(env.opts.destination);

function find(spec) ***REMOVED***
    return helper.find(data, spec);
}

function tutoriallink(tutorial) ***REMOVED***
    return helper.toTutorial(tutorial, null, ***REMOVED***
        tag: 'em',
        classname: 'disabled',
        prefix: 'Tutorial: '
  ***REMOVED***);
}

function getAncestorLinks(doclet) ***REMOVED***
    return helper.getAncestorLinks(data, doclet);
}

function hashToLink(doclet, hash) ***REMOVED***
    let url;

    if ( !/^(#.+)/.test(hash) ) ***REMOVED***
        return hash;
  ***REMOVED***

    url = helper.createLink(doclet);
    url = url.replace(/(#.+|$)/, hash);

    return `<a href="$***REMOVED***url}">$***REMOVED***hash}</a>`;
}

function needsSignature(***REMOVED***kind, type, meta}) ***REMOVED***
    let needsSig = false;

    // function and class definitions always get a signature
    if (kind === 'function' || kind === 'class') ***REMOVED***
        needsSig = true;
  ***REMOVED***
    // typedefs that contain functions get a signature, too
    else if (kind === 'typedef' && type && type.names &&
        type.names.length) ***REMOVED***
        for (let i = 0, l = type.names.length; i < l; i++) ***REMOVED***
            if (type.names[i].toLowerCase() === 'function') ***REMOVED***
                needsSig = true;
                break;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***
    // and namespaces that are functions get a signature (but finding them is a
    // bit messy)
    else if (kind === 'namespace' && meta && meta.code &&
        meta.code.type && meta.code.type.match(/[Ff]unction/)) ***REMOVED***
        needsSig = true;
  ***REMOVED***

    return needsSig;
}

function getSignatureAttributes(***REMOVED***optional, nullable}) ***REMOVED***
    const attributes = [];

    if (optional) ***REMOVED***
        attributes.push('opt');
  ***REMOVED***

    if (nullable === true) ***REMOVED***
        attributes.push('nullable');
  ***REMOVED***
    else if (nullable === false) ***REMOVED***
        attributes.push('non-null');
  ***REMOVED***

    return attributes;
}

function updateItemName(item) ***REMOVED***
    const attributes = getSignatureAttributes(item);
    let itemName = item.name || '';

    if (item.variable) ***REMOVED***
        itemName = `&hellip;$***REMOVED***itemName}`;
  ***REMOVED***

    if (attributes && attributes.length) ***REMOVED***
        itemName = util.format( '%s<span class="signature-attributes">%s</span>', itemName,
            attributes.join(', ') );
  ***REMOVED***

    return itemName;
}

function addParamAttributes(params) ***REMOVED***
    return params.filter((***REMOVED***name}) => name && !name.includes('.')).map(updateItemName);
}

function buildItemTypeStrings(item) ***REMOVED***
    const types = [];

    if (item && item.type && item.type.names) ***REMOVED***
        item.type.names.forEach(name => ***REMOVED***
            types.push( linkto(name, htmlsafe(name)) );
      ***REMOVED***);
  ***REMOVED***

    return types;
}

function buildAttribsString(attribs) ***REMOVED***
    let attribsString = '';

    if (attribs && attribs.length) ***REMOVED***
        attribsString = htmlsafe( util.format('(%s) ', attribs.join(', ')) );
  ***REMOVED***

    return attribsString;
}

function addNonParamAttributes(items) ***REMOVED***
    let types = [];

    items.forEach(item => ***REMOVED***
        types = types.concat( buildItemTypeStrings(item) );
  ***REMOVED***);

    return types;
}

function addSignatureParams(f) ***REMOVED***
    const params = f.params ? addParamAttributes(f.params) : [];

    f.signature = util.format( '%s(%s)', (f.signature || ''), params.join(', ') );
}

function addSignatureReturns(f) ***REMOVED***
    const attribs = [];
    let attribsString = '';
    let returnTypes = [];
    let returnTypesString = '';
    const source = f.yields || f.returns;

    // jam all the return-type attributes into an array. this could create odd results (for example,
    // if there are both nullable and non-nullable return types), but let's assume that most people
    // who use multiple @return tags aren't using Closure Compiler type annotations, and vice-versa.
    if (source) ***REMOVED***
        source.forEach(item => ***REMOVED***
            helper.getAttribs(item).forEach(attrib => ***REMOVED***
                if (!attribs.includes(attrib)) ***REMOVED***
                    attribs.push(attrib);
              ***REMOVED***
          ***REMOVED***);
      ***REMOVED***);

        attribsString = buildAttribsString(attribs);
  ***REMOVED***

    if (source) ***REMOVED***
        returnTypes = addNonParamAttributes(source);
  ***REMOVED***
    if (returnTypes.length) ***REMOVED***
        returnTypesString = util.format( ' &rarr; %s***REMOVED***%s}', attribsString, returnTypes.join('|') );
  ***REMOVED***

    f.signature = `<span class="signature">$***REMOVED***f.signature || ''}</span><span class="type-signature">$***REMOVED***returnTypesString}</span>`;
}

function addSignatureTypes(f) ***REMOVED***
    const types = f.type ? buildItemTypeStrings(f) : [];

    f.signature = `$***REMOVED***f.signature || ''}<span class="type-signature">$***REMOVED***types.length ? ` :$***REMOVED***types.join('|')}` : ''}</span>`;
}

function addAttribs(f) ***REMOVED***
    const attribs = helper.getAttribs(f);
    const attribsString = buildAttribsString(attribs);

    f.attribs = util.format('<span class="type-signature">%s</span>', attribsString);
}

function shortenPaths(files, commonPrefix) ***REMOVED***
    Object.keys(files).forEach(file => ***REMOVED***
        files[file].shortened = files[file].resolved.replace(commonPrefix, '')
            // always use forward slashes
            .replace(/\\/g, '/');
  ***REMOVED***);

    return files;
}

function getPathFromDoclet(***REMOVED***meta}) ***REMOVED***
    if (!meta) ***REMOVED***
        return null;
  ***REMOVED***

    return meta.path && meta.path !== 'null' ?
        path.join(meta.path, meta.filename) :
        meta.filename;
}

function generate(title, docs, filename, resolveLinks) ***REMOVED***
    let docData;
    let html;
    let outpath;

    resolveLinks = resolveLinks !== false;

    docData = ***REMOVED***
        env: env,
        title: title,
        docs: docs
  ***REMOVED***;

    outpath = path.join(outdir, filename);
    html = view.render('container.tmpl', docData);

    if (resolveLinks) ***REMOVED***
        html = helper.resolveLinks(html); // turn ***REMOVED***@link foo} into <a href="foodoc.html">foo</a>
  ***REMOVED***

    fs.writeFileSync(outpath, html, 'utf8');
}

function generateSourceFiles(sourceFiles, encoding = 'utf8') ***REMOVED***
    Object.keys(sourceFiles).forEach(file => ***REMOVED***
        let source;
        // links are keyed to the shortened path in each doclet's `meta.shortpath` property
        const sourceOutfile = helper.getUniqueFilename(sourceFiles[file].shortened);

        helper.registerLink(sourceFiles[file].shortened, sourceOutfile);

        try ***REMOVED***
            source = ***REMOVED***
                kind: 'source',
                code: helper.htmlsafe( fs.readFileSync(sourceFiles[file].resolved, encoding) )
          ***REMOVED***;
      ***REMOVED***
        catch (e) ***REMOVED***
            logger.error('Error while generating source file %s: %s', file, e.message);
      ***REMOVED***

        generate(`Source: $***REMOVED***sourceFiles[file].shortened}`, [source], sourceOutfile,
            false);
  ***REMOVED***);
}

/**
 * Look for classes or functions with the same name as modules (which indicates that the module
 * exports only that class or function), then attach the classes or functions to the `module`
 * property of the appropriate module doclets. The name of each class or function is also updated
 * for display purposes. This function mutates the original arrays.
 *
 * @private
 * @param ***REMOVED***Array.<module:jsdoc/doclet.Doclet>} doclets - The array of classes and functions to
 * check.
 * @param ***REMOVED***Array.<module:jsdoc/doclet.Doclet>} modules - The array of module doclets to search.
 */
function attachModuleSymbols(doclets, modules) ***REMOVED***
    const symbols = ***REMOVED***};

    // build a lookup table
    doclets.forEach(symbol => ***REMOVED***
        symbols[symbol.longname] = symbols[symbol.longname] || [];
        symbols[symbol.longname].push(symbol);
  ***REMOVED***);

    modules.forEach(module => ***REMOVED***
        if (symbols[module.longname]) ***REMOVED***
            module.modules = symbols[module.longname]
                // Only show symbols that have a description. Make an exception for classes, because
                // we want to show the constructor-signature heading no matter what.
                .filter((***REMOVED***description, kind}) => description || kind === 'class')
                .map(symbol => ***REMOVED***
                    symbol = doop(symbol);

                    if (symbol.kind === 'class' || symbol.kind === 'function') ***REMOVED***
                        symbol.name = `$***REMOVED***symbol.name.replace('module:', '(require("')}"))`;
                  ***REMOVED***

                    return symbol;
              ***REMOVED***);
      ***REMOVED***
  ***REMOVED***);
}

function buildMemberNav(items, itemHeading, itemsSeen, linktoFn) ***REMOVED***
    let nav = '';

    if (items.length) ***REMOVED***
        let itemsNav = '';

        items.forEach(item => ***REMOVED***
            let displayName;

            if ( !hasOwnProp.call(item, 'longname') ) ***REMOVED***
                itemsNav += `<li>$***REMOVED***linktoFn('', item.name)}</li>`;
          ***REMOVED***
            else if ( !hasOwnProp.call(itemsSeen, item.longname) ) ***REMOVED***
                if (env.conf.templates.default.useLongnameInNav) ***REMOVED***
                    displayName = item.longname;
              ***REMOVED*** else ***REMOVED***
                    displayName = item.name;
              ***REMOVED***
                itemsNav += `<li>$***REMOVED***linktoFn(item.longname, displayName.replace(/\b(module|event):/g, ''))}</li>`;

                itemsSeen[item.longname] = true;
          ***REMOVED***
      ***REMOVED***);

        if (itemsNav !== '') ***REMOVED***
            nav += `<h3>$***REMOVED***itemHeading}</h3><ul>$***REMOVED***itemsNav}</ul>`;
      ***REMOVED***
  ***REMOVED***

    return nav;
}

function linktoTutorial(longName, name) ***REMOVED***
    return tutoriallink(name);
}

function linktoExternal(longName, name) ***REMOVED***
    return linkto(longName, name.replace(/(^"|"$)/g, ''));
}

/**
 * Create the navigation sidebar.
 * @param ***REMOVED***object} members The members that will be used to create the sidebar.
 * @param ***REMOVED***array<object>} members.classes
 * @param ***REMOVED***array<object>} members.externals
 * @param ***REMOVED***array<object>} members.globals
 * @param ***REMOVED***array<object>} members.mixins
 * @param ***REMOVED***array<object>} members.modules
 * @param ***REMOVED***array<object>} members.namespaces
 * @param ***REMOVED***array<object>} members.tutorials
 * @param ***REMOVED***array<object>} members.events
 * @param ***REMOVED***array<object>} members.interfaces
 * @return ***REMOVED***string} The HTML for the navigation sidebar.
 */
function buildNav(members) ***REMOVED***
    let globalNav;
    let nav = '<h2><a href="index.html">Home</a></h2>';
    const seen = ***REMOVED***};
    const seenTutorials = ***REMOVED***};

    nav += buildMemberNav(members.modules, 'Modules', ***REMOVED***}, linkto);
    nav += buildMemberNav(members.externals, 'Externals', seen, linktoExternal);
    nav += buildMemberNav(members.namespaces, 'Namespaces', seen, linkto);
    nav += buildMemberNav(members.classes, 'Classes', seen, linkto);
    nav += buildMemberNav(members.interfaces, 'Interfaces', seen, linkto);
    nav += buildMemberNav(members.events, 'Events', seen, linkto);
    nav += buildMemberNav(members.mixins, 'Mixins', seen, linkto);
    nav += buildMemberNav(members.tutorials, 'Tutorials', seenTutorials, linktoTutorial);

    if (members.globals.length) ***REMOVED***
        globalNav = '';

        members.globals.forEach((***REMOVED***kind, longname, name}) => ***REMOVED***
            if ( kind !== 'typedef' && !hasOwnProp.call(seen, longname) ) ***REMOVED***
                globalNav += `<li>$***REMOVED***linkto(longname, name)}</li>`;
          ***REMOVED***
            seen[longname] = true;
      ***REMOVED***);

        if (!globalNav) ***REMOVED***
            // turn the heading into a link so you can actually get to the global page
            nav += `<h3>$***REMOVED***linkto('global', 'Global')}</h3>`;
      ***REMOVED***
        else ***REMOVED***
            nav += `<h3>Global</h3><ul>$***REMOVED***globalNav}</ul>`;
      ***REMOVED***
  ***REMOVED***

    return nav;
}

/**
    @param ***REMOVED***TAFFY} taffyData See <http://taffydb.com/>.
    @param ***REMOVED***object} opts
    @param ***REMOVED***Tutorial} tutorials
 */
exports.publish = (taffyData, opts, tutorials) => ***REMOVED***
    let classes;
    let conf;
    let externals;
    let files;
    let fromDir;
    let globalUrl;
    let indexUrl;
    let interfaces;
    let members;
    let mixins;
    let modules;
    let namespaces;
    let outputSourceFiles;
    let packageInfo;
    let packages;
    const sourceFilePaths = [];
    let sourceFiles = ***REMOVED***};
    let staticFileFilter;
    let staticFilePaths;
    let staticFiles;
    let staticFileScanner;
    let templatePath;

    data = taffyData;

    conf = env.conf.templates || ***REMOVED***};
    conf.default = conf.default || ***REMOVED***};

    templatePath = path.normalize(opts.template);
    view = new template.Template( path.join(templatePath, 'tmpl') );

    // claim some special filenames in advance, so the All-Powerful Overseer of Filename Uniqueness
    // doesn't try to hand them out later
    indexUrl = helper.getUniqueFilename('index');
    // don't call registerLink() on this one! 'index' is also a valid longname

    globalUrl = helper.getUniqueFilename('global');
    helper.registerLink('global', globalUrl);

    // set up templating
    view.layout = conf.default.layoutFile ?
        path.getResourcePath(path.dirname(conf.default.layoutFile),
            path.basename(conf.default.layoutFile) ) :
        'layout.tmpl';

    // set up tutorials for helper
    helper.setTutorials(tutorials);

    data = helper.prune(data);
    data.sort('longname, version, since');
    helper.addEventListeners(data);

    data().each(doclet => ***REMOVED***
        let sourcePath;

        doclet.attribs = '';

        if (doclet.examples) ***REMOVED***
            doclet.examples = doclet.examples.map(example => ***REMOVED***
                let caption;
                let code;

                if (example.match(/^\s*<caption>([\s\S]+?)<\/caption>(\s*[\n\r])([\s\S]+)$/i)) ***REMOVED***
                    caption = RegExp.$1;
                    code = RegExp.$3;
              ***REMOVED***

                return ***REMOVED***
                    caption: caption || '',
                    code: code || example
              ***REMOVED***;
          ***REMOVED***);
      ***REMOVED***
        if (doclet.see) ***REMOVED***
            doclet.see.forEach((seeItem, i) => ***REMOVED***
                doclet.see[i] = hashToLink(doclet, seeItem);
          ***REMOVED***);
      ***REMOVED***

        // build a list of source files
        if (doclet.meta) ***REMOVED***
            sourcePath = getPathFromDoclet(doclet);
            sourceFiles[sourcePath] = ***REMOVED***
                resolved: sourcePath,
                shortened: null
          ***REMOVED***;
            if (!sourceFilePaths.includes(sourcePath)) ***REMOVED***
                sourceFilePaths.push(sourcePath);
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***);

    // update outdir if necessary, then create outdir
    packageInfo = ( find(***REMOVED***kind: 'package'}) || [] )[0];
    if (packageInfo && packageInfo.name) ***REMOVED***
        outdir = path.join( outdir, packageInfo.name, (packageInfo.version || '') );
  ***REMOVED***
    fs.mkPath(outdir);

    // copy the template's static files to outdir
    fromDir = path.join(templatePath, 'static');
    staticFiles = fs.ls(fromDir, 3);

    staticFiles.forEach(fileName => ***REMOVED***
        const toDir = fs.toDir( fileName.replace(fromDir, outdir) );

        fs.mkPath(toDir);
        fs.copyFileSync(fileName, toDir);
  ***REMOVED***);

    // copy user-specified static files to outdir
    if (conf.default.staticFiles) ***REMOVED***
        // The canonical property name is `include`. We accept `paths` for backwards compatibility
        // with a bug in JSDoc 3.2.x.
        staticFilePaths = conf.default.staticFiles.include ||
            conf.default.staticFiles.paths ||
            [];
        staticFileFilter = new (require('jsdoc/src/filter').Filter)(conf.default.staticFiles);
        staticFileScanner = new (require('jsdoc/src/scanner').Scanner)();

        staticFilePaths.forEach(filePath => ***REMOVED***
            let extraStaticFiles;

            filePath = path.resolve(env.pwd, filePath);
            extraStaticFiles = staticFileScanner.scan([filePath], 10, staticFileFilter);

            extraStaticFiles.forEach(fileName => ***REMOVED***
                const sourcePath = fs.toDir(filePath);
                const toDir = fs.toDir( fileName.replace(sourcePath, outdir) );

                fs.mkPath(toDir);
                fs.copyFileSync(fileName, toDir);
          ***REMOVED***);
      ***REMOVED***);
  ***REMOVED***

    if (sourceFilePaths.length) ***REMOVED***
        sourceFiles = shortenPaths( sourceFiles, path.commonPrefix(sourceFilePaths) );
  ***REMOVED***
    data().each(doclet => ***REMOVED***
        let docletPath;
        const url = helper.createLink(doclet);

        helper.registerLink(doclet.longname, url);

        // add a shortened version of the full path
        if (doclet.meta) ***REMOVED***
            docletPath = getPathFromDoclet(doclet);
            docletPath = sourceFiles[docletPath].shortened;
            if (docletPath) ***REMOVED***
                doclet.meta.shortpath = docletPath;
          ***REMOVED***
      ***REMOVED***
  ***REMOVED***);

    data().each(doclet => ***REMOVED***
        const url = helper.longnameToUrl[doclet.longname];

        if (url.includes('#')) ***REMOVED***
            doclet.id = helper.longnameToUrl[doclet.longname].split(/#/).pop();
      ***REMOVED***
        else ***REMOVED***
            doclet.id = doclet.name;
      ***REMOVED***

        if ( needsSignature(doclet) ) ***REMOVED***
            addSignatureParams(doclet);
            addSignatureReturns(doclet);
            addAttribs(doclet);
      ***REMOVED***
  ***REMOVED***);

    // do this after the urls have all been generated
    data().each(doclet => ***REMOVED***
        doclet.ancestors = getAncestorLinks(doclet);

        if (doclet.kind === 'member') ***REMOVED***
            addSignatureTypes(doclet);
            addAttribs(doclet);
      ***REMOVED***

        if (doclet.kind === 'constant') ***REMOVED***
            addSignatureTypes(doclet);
            addAttribs(doclet);
            doclet.kind = 'member';
      ***REMOVED***
  ***REMOVED***);

    members = helper.getMembers(data);
    members.tutorials = tutorials.children;

    // output pretty-printed source files by default
    outputSourceFiles = conf.default && conf.default.outputSourceFiles !== false;

    // add template helpers
    view.find = find;
    view.linkto = linkto;
    view.resolveAuthorLinks = resolveAuthorLinks;
    view.tutoriallink = tutoriallink;
    view.htmlsafe = htmlsafe;
    view.outputSourceFiles = outputSourceFiles;

    // once for all
    view.nav = buildNav(members);
    attachModuleSymbols( find(***REMOVED*** longname: ***REMOVED***left: 'module:'} }), members.modules );

    // generate the pretty-printed source files first so other pages can link to them
    if (outputSourceFiles) ***REMOVED***
        generateSourceFiles(sourceFiles, opts.encoding);
  ***REMOVED***

    if (members.globals.length) ***REMOVED*** generate('Global', [***REMOVED***kind: 'globalobj'}], globalUrl); }

    // index page displays information from package.json and lists files
    files = find(***REMOVED***kind: 'file'});
    packages = find(***REMOVED***kind: 'package'});

    generate('Home',
        packages.concat(
            [***REMOVED***
                kind: 'mainpage',
                readme: opts.readme,
                longname: (opts.mainpagetitle) ? opts.mainpagetitle : 'Main Page'
          ***REMOVED***]
        ).concat(files), indexUrl);

    // set up the lists that we'll use to generate pages
    classes = taffy(members.classes);
    modules = taffy(members.modules);
    namespaces = taffy(members.namespaces);
    mixins = taffy(members.mixins);
    externals = taffy(members.externals);
    interfaces = taffy(members.interfaces);

    Object.keys(helper.longnameToUrl).forEach(longname => ***REMOVED***
        const myClasses = helper.find(classes, ***REMOVED***longname: longname});
        const myExternals = helper.find(externals, ***REMOVED***longname: longname});
        const myInterfaces = helper.find(interfaces, ***REMOVED***longname: longname});
        const myMixins = helper.find(mixins, ***REMOVED***longname: longname});
        const myModules = helper.find(modules, ***REMOVED***longname: longname});
        const myNamespaces = helper.find(namespaces, ***REMOVED***longname: longname});

        if (myModules.length) ***REMOVED***
            generate(`Module: $***REMOVED***myModules[0].name}`, myModules, helper.longnameToUrl[longname]);
      ***REMOVED***

        if (myClasses.length) ***REMOVED***
            generate(`Class: $***REMOVED***myClasses[0].name}`, myClasses, helper.longnameToUrl[longname]);
      ***REMOVED***

        if (myNamespaces.length) ***REMOVED***
            generate(`Namespace: $***REMOVED***myNamespaces[0].name}`, myNamespaces, helper.longnameToUrl[longname]);
      ***REMOVED***

        if (myMixins.length) ***REMOVED***
            generate(`Mixin: $***REMOVED***myMixins[0].name}`, myMixins, helper.longnameToUrl[longname]);
      ***REMOVED***

        if (myExternals.length) ***REMOVED***
            generate(`External: $***REMOVED***myExternals[0].name}`, myExternals, helper.longnameToUrl[longname]);
      ***REMOVED***

        if (myInterfaces.length) ***REMOVED***
            generate(`Interface: $***REMOVED***myInterfaces[0].name}`, myInterfaces, helper.longnameToUrl[longname]);
      ***REMOVED***
  ***REMOVED***);

    // TODO: move the tutorial functions to templateHelper.js
    function generateTutorial(title, tutorial, filename) ***REMOVED***
        const tutorialData = ***REMOVED***
            title: title,
            header: tutorial.title,
            content: tutorial.parse(),
            children: tutorial.children
      ***REMOVED***;
        const tutorialPath = path.join(outdir, filename);
        let html = view.render('tutorial.tmpl', tutorialData);

        // yes, you can use ***REMOVED***@link} in tutorials too!
        html = helper.resolveLinks(html); // turn ***REMOVED***@link foo} into <a href="foodoc.html">foo</a>

        fs.writeFileSync(tutorialPath, html, 'utf8');
  ***REMOVED***

    // tutorials can have only one parent so there is no risk for loops
    function saveChildren(***REMOVED***children}) ***REMOVED***
        children.forEach(child => ***REMOVED***
            generateTutorial(`Tutorial: $***REMOVED***child.title}`, child, helper.tutorialToUrl(child.name));
            saveChildren(child);
      ***REMOVED***);
  ***REMOVED***

    saveChildren(tutorials);
};
