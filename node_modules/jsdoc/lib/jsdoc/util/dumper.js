/**
 * Recursively print out all names and values in a data structure.
 * @module jsdoc/util/dumper
 */
const util = require('util');

const OBJECT_WALKER_KEY = 'hasBeenSeenByWalkerDumper';
const SET_DEFINED = (typeof Set !== 'undefined');

class ObjectWalker ***REMOVED***
    constructor() ***REMOVED***
        this.seenItems = SET_DEFINED ? new Set() : [];
  ***REMOVED***

    seen(object) ***REMOVED***
        let result;

        if (SET_DEFINED) ***REMOVED***
            result = this.seenItems.has(object);
      ***REMOVED***
        else ***REMOVED***
            result = object[OBJECT_WALKER_KEY];
      ***REMOVED***

        return result;
  ***REMOVED***

    markAsSeen(object) ***REMOVED***
        if (SET_DEFINED) ***REMOVED***
            this.seenItems.add(object);
      ***REMOVED***
        else ***REMOVED***
            object[OBJECT_WALKER_KEY] = true;
            this.seenItems.push(object);
      ***REMOVED***
  ***REMOVED***

    removeSeenFlag(obj) ***REMOVED***
        if (SET_DEFINED) ***REMOVED***
            this.seenItems.delete(obj);
      ***REMOVED***
        else ***REMOVED***
            delete obj[OBJECT_WALKER_KEY];
      ***REMOVED***
  ***REMOVED***

    /* eslint-disable class-methods-use-this */
    // some objects are unwalkable, like Java native objects
    isUnwalkable(o) ***REMOVED***
        return o && typeof o === 'object' && typeof o.constructor === 'undefined';
  ***REMOVED***

    isFunction(o) ***REMOVED***
        return (o && typeof o === 'function') || o instanceof Function;
  ***REMOVED***

    isObject(o) ***REMOVED***
        return (o && o instanceof Object) ||
            (o && typeof o.constructor !== 'undefined' && o.constructor.name === 'Object');
  ***REMOVED***
    /* eslint-enable class-methods-use-this */

    checkCircularRefs(o, func) ***REMOVED***
        if ( this.seen(o) ) ***REMOVED***
            return '<CircularRef>';
      ***REMOVED***
        else ***REMOVED***
            this.markAsSeen(o);

            return func(o);
      ***REMOVED***
  ***REMOVED***

    walk(o) ***REMOVED***
        let result;

        const self = this;

        if ( this.isUnwalkable(o) ) ***REMOVED***
            result = '<Object>';
      ***REMOVED***
        else if ( o === undefined ) ***REMOVED***
            result = null;
      ***REMOVED***
        else if ( Array.isArray(o) ) ***REMOVED***
            result = this.checkCircularRefs(o, arr => ***REMOVED***
                const newArray = [];

                arr.forEach(item => ***REMOVED***
                    newArray.push( self.walk(item) );
              ***REMOVED***);

                self.removeSeenFlag(arr);

                return newArray;
          ***REMOVED***);
      ***REMOVED***
        else if ( util.isRegExp(o) ) ***REMOVED***
            result = `<RegExp $***REMOVED***o}>`;
      ***REMOVED***
        else if ( util.isDate(o) ) ***REMOVED***
            result = `<Date $***REMOVED***o.toUTCString()}>`;
      ***REMOVED***
        else if ( util.isError(o) ) ***REMOVED***
            result = ***REMOVED*** message: o.message };
      ***REMOVED***
        else if ( this.isFunction(o) ) ***REMOVED***
            result = `<Function$***REMOVED***o.name ? ` $***REMOVED***o.name}` : ''}>`;
      ***REMOVED***
        else if ( this.isObject(o) && o !== null ) ***REMOVED***
            result = this.checkCircularRefs(o, obj => ***REMOVED***
                const newObj = ***REMOVED***};

                Object.keys(obj).forEach(key => ***REMOVED***
                    if (!SET_DEFINED && key === OBJECT_WALKER_KEY) ***REMOVED*** return; }
                    newObj[key] = self.walk(obj[key]);
              ***REMOVED***);

                self.removeSeenFlag(obj);

                return newObj;
          ***REMOVED***);
      ***REMOVED***
        // should be safe to JSON.stringify() everything else
        else ***REMOVED***
            result = o;
      ***REMOVED***

        return result;
  ***REMOVED***
}

/**
 * @param ***REMOVED****} object
 */
exports.dump = function(...args) ***REMOVED***
    const result = [];
    let walker;

    for (let arg of args) ***REMOVED***
        walker = new ObjectWalker();
        result.push( JSON.stringify(walker.walk(arg), null, 4) );
  ***REMOVED***

    return result.join('\n');
};
