/**
 * Deep clone a simple object. Ignores non-enumerable properties.
 * @private
 */
const setDefined = typeof Set !== 'undefined';

function addItem(set, item) ***REMOVED***
    if (setDefined) ***REMOVED***
        set.add(item);
  ***REMOVED***
    else if (!set.includes(item)) ***REMOVED***
        set.push(item);
  ***REMOVED***
}

function hasItem(set, item) ***REMOVED***
    if (setDefined) ***REMOVED***
        return set.has(item);
  ***REMOVED***
    else ***REMOVED***
        return set.includes(item);
  ***REMOVED***
}

// TODO: can we remove the circular-ref checking? pretty sure it's not needed anymore...
// if we still need this for some reason, we should share code with jsdoc/util/dumper
function doop(o, seen) ***REMOVED***
    let clone;
    let descriptor;
    let props;
    let i;
    let l;

    if (!seen) ***REMOVED***
        seen = setDefined ? new Set() : [];
  ***REMOVED***

    if (o instanceof Object && o.constructor !== Function) ***REMOVED***
        if ( hasItem(seen, o) ) ***REMOVED***
            clone = '<CircularRef>';
      ***REMOVED***
        else ***REMOVED***
            addItem(seen, o);

            if ( Array.isArray(o) ) ***REMOVED***
                clone = [];
                for (i = 0, l = o.length; i < l; i++) ***REMOVED***
                    clone[i] = (o[i] instanceof Object) ? doop(o[i], seen) : o[i];
              ***REMOVED***
          ***REMOVED***
            else ***REMOVED***
                clone = Object.create( Object.getPrototypeOf(o) );
                props = Object.keys(o);
                for (i = 0, l = props.length; i < l; i++) ***REMOVED***
                    descriptor = Object.getOwnPropertyDescriptor(o, props[i]);
                    if (descriptor.value) ***REMOVED***
                        descriptor.value = doop(descriptor.value, seen);
                  ***REMOVED***

                    Object.defineProperty(clone, props[i], descriptor);
              ***REMOVED***
          ***REMOVED***
      ***REMOVED***

        return clone;
  ***REMOVED***

    return o;
}

// Wrapper to avoid exposing the 'seen' parameter outside of this module.
function doopWrapper(o) ***REMOVED***
    return doop(o);
}

// for backwards compatibility
doopWrapper.doop = doopWrapper;

module.exports = doopWrapper;
