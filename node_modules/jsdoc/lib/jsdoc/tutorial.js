/**
 * @module jsdoc/tutorial
 */
const markdown = require('jsdoc/util/markdown');

const hasOwnProp = Object.prototype.hasOwnProperty;

/**
 * Removes child tutorial from the parent. Does *not* unset child.parent though.
 *
 * @param ***REMOVED***Tutorial} parent - parent tutorial.
 * @param ***REMOVED***Tutorial} child - Old child.
 * @private
 */
function removeChild(***REMOVED***children}, child) ***REMOVED***
    const index = children.indexOf(child);

    if (index !== -1) ***REMOVED***
        children.splice(index, 1);
  ***REMOVED***
}

/**
 * Adds a child to the parent tutorial. Does *not* set child.parent though.
 *
 * @param ***REMOVED***Tutorial} parent - parent tutorial.
 * @param ***REMOVED***Tutorial} child - New child.
 * @private
 */
function addChild(***REMOVED***children}, child) ***REMOVED***
    children.push(child);
}

/**
 * Represents a single JSDoc tutorial.
 */
class Tutorial ***REMOVED***
    /**
     * @param ***REMOVED***string} name - Tutorial name.
     * @param ***REMOVED***string} content - Text content.
     * @param ***REMOVED***number} type - Source formating.

     */
    constructor(name, content, type) ***REMOVED***
        this.title = this.name = this.longname = name;
        this.content = content;
        this.type = type;

        // default values
        this.parent = null;
        this.children = [];
  ***REMOVED***

    /**
     * Moves children from current parent to different one.
     *
     * @param ***REMOVED***?Tutorial} parent - New parent. If null, the tutorial has no parent.
     */
    setParent(parent) ***REMOVED***
        // removes node from old parent
        if (this.parent) ***REMOVED***
            removeChild(this.parent, this);
      ***REMOVED***

        this.parent = parent;
        if (parent) ***REMOVED***
            addChild(parent, this);
      ***REMOVED***
  ***REMOVED***

    /* eslint-disable class-methods-use-this */
    /**
     * Removes children from current node.
     *
     * @param ***REMOVED***Tutorial} child - Old child.
     */
    removeChild(child) ***REMOVED***
        child.setParent(null);
  ***REMOVED***
    /* eslint-enable class-methods-use-this */

    /**
     * Adds new children to current node.
     *
     * @param ***REMOVED***Tutorial} child - New child.
     */
    addChild(child) ***REMOVED***
        child.setParent(this);
  ***REMOVED***

    /**
     * Prepares source.
     *
     * @return ***REMOVED***string} HTML source.
     */
    parse() ***REMOVED***
        switch (this.type) ***REMOVED***
            // nothing to do
            case exports.TYPES.HTML:
                return this.content;

            // markdown
            case exports.TYPES.MARKDOWN:
                return markdown.getParser()(this.content);

            // uhm... should we react somehow?
            // if not then this case can be merged with TYPES.HTML
            default:
                return this.content;
      ***REMOVED***
  ***REMOVED***
}
exports.Tutorial = Tutorial;

/**
 * Represents the root tutorial.
 * @extends ***REMOVED***module:jsdoc/tutorial.Tutorial}
 */
class RootTutorial extends Tutorial ***REMOVED***
    constructor() ***REMOVED***
        super('', '', null);

        this._tutorials = ***REMOVED***};
  ***REMOVED***

    /**
     * Retrieve a tutorial by name.
     * @param ***REMOVED***string} name - Tutorial name.
     * @return ***REMOVED***module:jsdoc/tutorial.Tutorial} Tutorial instance.
     */
    getByName(name) ***REMOVED***
        return hasOwnProp.call(this._tutorials, name) && this._tutorials[name];
  ***REMOVED***

    /**
     * Add a child tutorial to the root.
     * @param ***REMOVED***module:jsdoc/tutorial.Tutorial} child - Child tutorial.
     */
    _addTutorial(child) ***REMOVED***
        this._tutorials[child.name] = child;
  ***REMOVED***
}
exports.RootTutorial = RootTutorial;

/**
 * Tutorial source types.
 *
 * @enum ***REMOVED***number}
 */
exports.TYPES = ***REMOVED***
    HTML: 1,
    MARKDOWN: 2
};
