/**
 * @module jsdoc/src/filter
 */
const env = require('jsdoc/env');
const path = require('jsdoc/path');

function makeRegExp(config) ***REMOVED***
    let regExp = null;

    if (config) ***REMOVED***
        regExp = (typeof config === 'string') ? new RegExp(config) : config;
  ***REMOVED***

    return regExp;
}

/**
 * @alias module:jsdoc/src/filter.Filter
 */
class Filter ***REMOVED***
    /**
     * @param ***REMOVED***Object} opts
     * @param ***REMOVED***string[]} opts.exclude - Specific files to exclude.
     * @param ***REMOVED***(string|RegExp)} opts.includePattern
     * @param ***REMOVED***(string|RegExp)} opts.excludePattern
     */
    constructor(***REMOVED***exclude, includePattern, excludePattern}) ***REMOVED***
        this.exclude = exclude && Array.isArray(exclude) ?
            exclude.map($ => path.resolve(env.pwd, $)) :
            null;
        this.includePattern = makeRegExp(includePattern);
        this.excludePattern = makeRegExp(excludePattern);
  ***REMOVED***

    /**
     * @param ***REMOVED***string} filepath - The filepath to check.
     * @returns ***REMOVED***boolean} Should the given file be included?
     */
    isIncluded(filepath) ***REMOVED***
        let included = true;

        filepath = path.resolve(env.pwd, filepath);

        if ( this.includePattern && !this.includePattern.test(filepath) ) ***REMOVED***
            included = false;
      ***REMOVED***

        if ( this.excludePattern && this.excludePattern.test(filepath) ) ***REMOVED***
            included = false;
      ***REMOVED***

        if (this.exclude) ***REMOVED***
            this.exclude.forEach(exclude => ***REMOVED***
                if ( filepath.indexOf(exclude) === 0 ) ***REMOVED***
                    included = false;
              ***REMOVED***
          ***REMOVED***);
      ***REMOVED***

        return included;
  ***REMOVED***
}
exports.Filter = Filter;
