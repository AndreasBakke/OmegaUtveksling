/** @module jsdoc/tag/dictionary */
const definitions = require('jsdoc/tag/dictionary/definitions');

const hasOwnProp = Object.prototype.hasOwnProperty;

let dictionary;

/** @private */
class TagDefinition ***REMOVED***
    constructor(dict, title, etc) ***REMOVED***
        const self = this;

        etc = etc || ***REMOVED***};

        this.title = dict.normalise(title);

        Object.defineProperty(this, '_dictionary', ***REMOVED***
            value: dict
      ***REMOVED***);

        Object.keys(etc).forEach(p => ***REMOVED***
            self[p] = etc[p];
      ***REMOVED***);
  ***REMOVED***

    /** @private */
    synonym(synonymName) ***REMOVED***
        this._dictionary.defineSynonym(this.title, synonymName);

        return this;
  ***REMOVED***
}

/**
 * @alias module:jsdoc/tag/dictionary.Dictionary
 */
class Dictionary ***REMOVED***
    constructor() ***REMOVED***
        this._tags = ***REMOVED***};
        this._tagSynonyms = ***REMOVED***};
        // The longnames for `Package` objects include a `package` namespace. There's no `package` tag,
        // though, so we declare the namespace here.
        this._namespaces = ['package'];
  ***REMOVED***

    _defineNamespace(title) ***REMOVED***
        title = this.normalise(title || '');

        if (title && !this._namespaces.includes(title)) ***REMOVED***
            this._namespaces.push(title);
      ***REMOVED***

        return this;
  ***REMOVED***

    defineTag(title, opts) ***REMOVED***
        const tagDef = new TagDefinition(this, title, opts);

        this._tags[tagDef.title] = tagDef;

        if (opts && opts.isNamespace) ***REMOVED***
            this._defineNamespace(tagDef.title);
      ***REMOVED***

        return this._tags[tagDef.title];
  ***REMOVED***

    defineSynonym(title, synonym) ***REMOVED***
        this._tagSynonyms[synonym.toLowerCase()] = this.normalise(title);
  ***REMOVED***

    getNamespaces() ***REMOVED***
        return this._namespaces.slice(0);
  ***REMOVED***

    lookUp(title) ***REMOVED***
        title = this.normalise(title);

        if ( hasOwnProp.call(this._tags, title) ) ***REMOVED***
            return this._tags[title];
      ***REMOVED***

        return false;
  ***REMOVED***

    isNamespace(kind) ***REMOVED***
        if (kind) ***REMOVED***
            kind = this.normalise(kind);
            if (this._namespaces.includes(kind)) ***REMOVED***
                return true;
          ***REMOVED***
      ***REMOVED***

        return false;
  ***REMOVED***

    normalise(title) ***REMOVED***
        const canonicalName = title.toLowerCase();

        if ( hasOwnProp.call(this._tagSynonyms, canonicalName) ) ***REMOVED***
            return this._tagSynonyms[canonicalName];
      ***REMOVED***

        return canonicalName;
  ***REMOVED***

    normalize(title) ***REMOVED***
        return this.normalise(title);
  ***REMOVED***
}

// initialize the default dictionary
dictionary = new Dictionary();
definitions.defineTags(dictionary);

// make the constructor available for unit-testing purposes
dictionary.Dictionary = Dictionary;

/** @type ***REMOVED***module:jsdoc/tag/dictionary.Dictionary} */
module.exports = dictionary;
