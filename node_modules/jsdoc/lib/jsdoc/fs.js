/**
 * Extended version of the standard `fs` module.
 * @module jsdoc/fs
 */
const fs = require('fs');
const path = require('path');
const mkdirp = require('mkdirp');

const ls = exports.ls = (dir, recurse, _allFiles, _path) => ***REMOVED***
    let file;
    let files;
    let isFile;

    // first pass
    if (_path === undefined) ***REMOVED***
        _allFiles = [];
        _path = [dir];
  ***REMOVED***

    if (!_path.length) ***REMOVED***
        return _allFiles;
  ***REMOVED***

    if (recurse === undefined) ***REMOVED***
        recurse = 1;
  ***REMOVED***

    try ***REMOVED***
        isFile = fs.statSync(dir).isFile();
  ***REMOVED***
    catch (e) ***REMOVED***
        isFile = false;
  ***REMOVED***
    if (isFile) ***REMOVED***
        files = [dir];
  ***REMOVED***
    else ***REMOVED***
        files = fs.readdirSync(dir);
  ***REMOVED***

    for (let i = 0, l = files.length; i < l; i++) ***REMOVED***
        file = String(files[i]);

        // skip dot files
        if (file.match(/^\.[^./\\]/)) ***REMOVED***
            continue;
      ***REMOVED***

        if ( fs.statSync(path.join(_path.join('/'), file)).isDirectory() ) ***REMOVED***
            // it's a directory
            _path.push(file);

            if (_path.length - 1 < recurse) ***REMOVED***
                ls(_path.join('/'), recurse, _allFiles, _path);
          ***REMOVED***
            _path.pop();
      ***REMOVED***
        else ***REMOVED***
            // it's a file
            _allFiles.push( path.normalize(path.join(_path.join('/'), file)) );
      ***REMOVED***
  ***REMOVED***

    return _allFiles;
};

exports.toDir = _path => ***REMOVED***
    let isDirectory;

    _path = path.normalize(_path);

    try ***REMOVED***
        isDirectory = fs.statSync(_path).isDirectory();
  ***REMOVED***
    catch (e) ***REMOVED***
        isDirectory = false;
  ***REMOVED***

    if (isDirectory) ***REMOVED***
        return _path;
  ***REMOVED*** else ***REMOVED***
        return path.dirname(_path);
  ***REMOVED***
};

exports.mkPath = _path => ***REMOVED***
    if ( Array.isArray(_path) ) ***REMOVED***
        _path = _path.join('');
  ***REMOVED***

    mkdirp.sync(_path);
};

exports.copyFileSync = (inFile, outDir = '', fileName) => ***REMOVED***
    fileName = fileName || path.basename(inFile);

    fs.copyFileSync(inFile, path.join(outDir, fileName));
};

const alwaysOverride = ***REMOVED***
    'copyFileSync': true
};

Object.keys(fs).forEach(member => ***REMOVED***
    if (!alwaysOverride[member]) ***REMOVED***
        exports[member] = fs[member];
  ***REMOVED***
});

