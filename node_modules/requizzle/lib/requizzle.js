/*
    Copyright 2014 Google LLC
    Copyright 2012-2013 Johannes Ewald

    Use of this source code is governed by the MIT License, available in this package's LICENSE file
    or at http://opensource.org/licenses/MIT.
 */
/** @module lib/requizzle */

const loader = require('./loader');
const Module = require('module');

const NATIVE_MODULE_PREFIX = 'node:';

/**
 * Function that returns text to swizzle into the module.
 *
 * @typedef module:lib/requizzle~wrapperFunction
 * @type ***REMOVED***function}
 * @param ***REMOVED***string} targetPath - The path to the target module.
 * @param ***REMOVED***string} parentModulePath - The path to the module that is requiring the target module.
 * @return ***REMOVED***string} The text to insert before or after the module's source code.
 */

/**
 * Options for the wrappers that will be swizzled into the target module.
 *
 * @typedef module:lib/requizzle~options
 * @type ***REMOVED***Object}
 * @property ***REMOVED***Object=} options.extras - Functions that generate text to swizzle into the target
 * module.
 * @property ***REMOVED***module:lib/requizzle~wrapperFunction} options.extras.after - Function that returns
 * text to insert after the module's source code.
 * @property ***REMOVED***module:lib/requizzle~wrapperFunction} options.extras.before - Function that returns
 * text to insert before the module's source code.
 * @property ***REMOVED***(Array.<string>|string)} options.requirePaths - Additional paths to search when
 * resolving module paths in the target module.
 */

function isNativeModule(targetPath, parentModule) ***REMOVED***
  let lookupPaths;
  let isNative = false;

  if (targetPath.startsWith(NATIVE_MODULE_PREFIX)) ***REMOVED***
    isNative = true;
***REMOVED*** else ***REMOVED***
    lookupPaths = Module._resolveLookupPaths(targetPath, parentModule, true);
    /* istanbul ignore next */
    isNative =
      lookupPaths === null ||
      (lookupPaths.length === 2 && lookupPaths[1].length === 0 && lookupPaths[0] === targetPath);
***REMOVED***

  return isNative;
}

/**
 * Create a `Requizzle` instance. If you provide options, Requizzle will default to those options
 * when you call ***REMOVED***@link Requizzle#requizzle}.
 *
 * @class
 * @param ***REMOVED***!module:lib/requizzle~options} options - Options for the wrappers that will be swizzled
 * into the target module.
 * @param ***REMOVED***Object=} cache - For internal use.
 */
class Requizzle ***REMOVED***
  constructor(options, cache) ***REMOVED***
    this._options = options;
    this._cache = cache || ***REMOVED***
      module: ***REMOVED***},
      source: ***REMOVED***},
  ***REMOVED***;
***REMOVED***

  /**
   * Load the module, swizzling in the requested changes.
   *
   * @param ***REMOVED***!string} targetPath - The path to the module that will be loaded.
   * @return ***REMOVED***Module} The swizzled module.
   */
  requizzle(targetPath) ***REMOVED***
    const options = this._options;
    const parentModule = options.parent;
    let targetModule;
    let wrapper;

    // Don't interfere with native modules
    if (isNativeModule(targetPath, parentModule)) ***REMOVED***
      return require(targetPath);
  ***REMOVED***

    // Resolve the filename relative to the parent module
    targetPath = Module._resolveFilename(targetPath, parentModule);

    wrapper = loader.createWrapper(targetPath, parentModule, this._cache, this._options);
    targetModule = loader.load(targetPath, parentModule, wrapper, this._cache, this._options);

    return targetModule.exports;
***REMOVED***
}

module.exports = Requizzle;
