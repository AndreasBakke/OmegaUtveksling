/*
    Copyright 2014 Google LLC

    Use of this source code is governed by the MIT License, available in this package's LICENSE file
    or at http://opensource.org/licenses/MIT.
 */
const path = require('path');

function resolvePaths(***REMOVED*** filepath }, paths) ***REMOVED***
  if (!paths) ***REMOVED***
    return [];
***REMOVED***

  return paths.slice(0).map((p) => path.resolve(filepath, p));
}

function requirePaths(parentModule, opts) ***REMOVED***
  const result = ***REMOVED***
    before: [],
    after: [],
***REMOVED***;

  if (!parentModule) ***REMOVED***
    return result;
***REMOVED***

  if (Array.isArray(opts)) ***REMOVED***
    result.before = resolvePaths(parentModule, opts);
***REMOVED*** else ***REMOVED***
    result.before = resolvePaths(parentModule, opts.before);
    result.after = resolvePaths(parentModule, opts.after);
***REMOVED***

  return result;
}

exports.before = function before(targetPath, parentModule, opts) ***REMOVED***
  const resolvedPaths = requirePaths(parentModule, opts);

  return (
    `module.paths = $***REMOVED***JSON.stringify(resolvedPaths.before)}.concat(module.paths)` +
    `.concat($***REMOVED***JSON.stringify(resolvedPaths.after)}); `
  );
};

exports.after = function after() ***REMOVED***
  return '';
};
