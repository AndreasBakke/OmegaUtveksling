'use strict'

var dns = require('dns')

var defaults = require('./defaults')

var parse = require('pg-connection-string').parse // parses a connection string

var val = function (key, config, envVar) ***REMOVED***
  if (envVar === undefined) ***REMOVED***
    envVar = process.env['PG' + key.toUpperCase()]
***REMOVED*** else if (envVar === false) ***REMOVED***
    // do nothing ... use false
***REMOVED*** else ***REMOVED***
    envVar = process.env[envVar]
***REMOVED***

  return config[key] || envVar || defaults[key]
}

var readSSLConfigFromEnvironment = function () ***REMOVED***
  switch (process.env.PGSSLMODE) ***REMOVED***
    case 'disable':
      return false
    case 'prefer':
    case 'require':
    case 'verify-ca':
    case 'verify-full':
      return true
    case 'no-verify':
      return ***REMOVED*** rejectUnauthorized: false }
***REMOVED***
  return defaults.ssl
}

// Convert arg to a string, surround in single quotes, and escape single quotes and backslashes
var quoteParamValue = function (value) ***REMOVED***
  return "'" + ('' + value).replace(/\\/g, '\\\\').replace(/'/g, "\\'") + "'"
}

var add = function (params, config, paramName) ***REMOVED***
  var value = config[paramName]
  if (value !== undefined && value !== null) ***REMOVED***
    params.push(paramName + '=' + quoteParamValue(value))
***REMOVED***
}

class ConnectionParameters ***REMOVED***
  constructor(config) ***REMOVED***
    // if a string is passed, it is a raw connection string so we parse it into a config
    config = typeof config === 'string' ? parse(config) : config || ***REMOVED***}

    // if the config has a connectionString defined, parse IT into the config we use
    // this will override other default values with what is stored in connectionString
    if (config.connectionString) ***REMOVED***
      config = Object.assign(***REMOVED***}, config, parse(config.connectionString))
  ***REMOVED***

    this.user = val('user', config)
    this.database = val('database', config)

    if (this.database === undefined) ***REMOVED***
      this.database = this.user
  ***REMOVED***

    this.port = parseInt(val('port', config), 10)
    this.host = val('host', config)

    // "hiding" the password so it doesn't show up in stack traces
    // or if the client is console.logged
    Object.defineProperty(this, 'password', ***REMOVED***
      configurable: true,
      enumerable: false,
      writable: true,
      value: val('password', config),
  ***REMOVED***)

    this.binary = val('binary', config)
    this.options = val('options', config)

    this.ssl = typeof config.ssl === 'undefined' ? readSSLConfigFromEnvironment() : config.ssl

    if (typeof this.ssl === 'string') ***REMOVED***
      if (this.ssl === 'true') ***REMOVED***
        this.ssl = true
    ***REMOVED***
  ***REMOVED***
    // support passing in ssl=no-verify via connection string
    if (this.ssl === 'no-verify') ***REMOVED***
      this.ssl = ***REMOVED*** rejectUnauthorized: false }
  ***REMOVED***
    if (this.ssl && this.ssl.key) ***REMOVED***
      Object.defineProperty(this.ssl, 'key', ***REMOVED***
        enumerable: false,
    ***REMOVED***)
  ***REMOVED***

    this.client_encoding = val('client_encoding', config)
    this.replication = val('replication', config)
    // a domain socket begins with '/'
    this.isDomainSocket = !(this.host || '').indexOf('/')

    this.application_name = val('application_name', config, 'PGAPPNAME')
    this.fallback_application_name = val('fallback_application_name', config, false)
    this.statement_timeout = val('statement_timeout', config, false)
    this.lock_timeout = val('lock_timeout', config, false)
    this.idle_in_transaction_session_timeout = val('idle_in_transaction_session_timeout', config, false)
    this.query_timeout = val('query_timeout', config, false)

    if (config.connectionTimeoutMillis === undefined) ***REMOVED***
      this.connect_timeout = process.env.PGCONNECT_TIMEOUT || 0
  ***REMOVED*** else ***REMOVED***
      this.connect_timeout = Math.floor(config.connectionTimeoutMillis / 1000)
  ***REMOVED***

    if (config.keepAlive === false) ***REMOVED***
      this.keepalives = 0
  ***REMOVED*** else if (config.keepAlive === true) ***REMOVED***
      this.keepalives = 1
  ***REMOVED***

    if (typeof config.keepAliveInitialDelayMillis === 'number') ***REMOVED***
      this.keepalives_idle = Math.floor(config.keepAliveInitialDelayMillis / 1000)
  ***REMOVED***
***REMOVED***

  getLibpqConnectionString(cb) ***REMOVED***
    var params = []
    add(params, this, 'user')
    add(params, this, 'password')
    add(params, this, 'port')
    add(params, this, 'application_name')
    add(params, this, 'fallback_application_name')
    add(params, this, 'connect_timeout')
    add(params, this, 'options')

    var ssl = typeof this.ssl === 'object' ? this.ssl : this.ssl ? ***REMOVED*** sslmode: this.ssl } : ***REMOVED***}
    add(params, ssl, 'sslmode')
    add(params, ssl, 'sslca')
    add(params, ssl, 'sslkey')
    add(params, ssl, 'sslcert')
    add(params, ssl, 'sslrootcert')

    if (this.database) ***REMOVED***
      params.push('dbname=' + quoteParamValue(this.database))
  ***REMOVED***
    if (this.replication) ***REMOVED***
      params.push('replication=' + quoteParamValue(this.replication))
  ***REMOVED***
    if (this.host) ***REMOVED***
      params.push('host=' + quoteParamValue(this.host))
  ***REMOVED***
    if (this.isDomainSocket) ***REMOVED***
      return cb(null, params.join(' '))
  ***REMOVED***
    if (this.client_encoding) ***REMOVED***
      params.push('client_encoding=' + quoteParamValue(this.client_encoding))
  ***REMOVED***
    dns.lookup(this.host, function (err, address) ***REMOVED***
      if (err) return cb(err, null)
      params.push('hostaddr=' + quoteParamValue(address))
      return cb(null, params.join(' '))
  ***REMOVED***)
***REMOVED***
}

module.exports = ConnectionParameters
