var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param ***REMOVED***string} key The key of the value to set.
 * @param ***REMOVED****} value The value to set.
 * @returns ***REMOVED***Object} Returns the stack cache instance.
 */
function stackSet(key, value) ***REMOVED***
  var data = this.__data__;
  if (data instanceof ListCache) ***REMOVED***
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) ***REMOVED***
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
  ***REMOVED***
    data = this.__data__ = new MapCache(pairs);
***REMOVED***
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;
