var arrayMap = require('./_arrayMap'),
    baseGet = require('./_baseGet'),
    baseIteratee = require('./_baseIteratee'),
    baseMap = require('./_baseMap'),
    baseSortBy = require('./_baseSortBy'),
    baseUnary = require('./_baseUnary'),
    compareMultiple = require('./_compareMultiple'),
    identity = require('./identity'),
    isArray = require('./isArray');

/**
 * The base implementation of `_.orderBy` without param guards.
 *
 * @private
 * @param ***REMOVED***Array|Object} collection The collection to iterate over.
 * @param ***REMOVED***Function[]|Object[]|string[]} iteratees The iteratees to sort by.
 * @param ***REMOVED***string[]} orders The sort orders of `iteratees`.
 * @returns ***REMOVED***Array} Returns the new sorted array.
 */
function baseOrderBy(collection, iteratees, orders) ***REMOVED***
  if (iteratees.length) ***REMOVED***
    iteratees = arrayMap(iteratees, function(iteratee) ***REMOVED***
      if (isArray(iteratee)) ***REMOVED***
        return function(value) ***REMOVED***
          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
      ***REMOVED***
    ***REMOVED***
      return iteratee;
  ***REMOVED***);
***REMOVED*** else ***REMOVED***
    iteratees = [identity];
***REMOVED***

  var index = -1;
  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));

  var result = baseMap(collection, function(value, key, collection) ***REMOVED***
    var criteria = arrayMap(iteratees, function(iteratee) ***REMOVED***
      return iteratee(value);
  ***REMOVED***);
    return ***REMOVED*** 'criteria': criteria, 'index': ++index, 'value': value };
***REMOVED***);

  return baseSortBy(result, function(object, other) ***REMOVED***
    return compareMultiple(object, other, orders);
***REMOVED***);
}

module.exports = baseOrderBy;
