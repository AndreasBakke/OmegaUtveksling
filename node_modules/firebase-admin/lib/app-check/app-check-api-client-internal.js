/*! firebase-admin v11.5.0 */
"use strict";
/*!
 * @license
 * Copyright 2021 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.FirebaseAppCheckError = exports.APP_CHECK_ERROR_CODE_MAPPING = exports.AppCheckApiClient = void 0;
const api_request_1 = require("../utils/api-request");
const error_1 = require("../utils/error");
const utils = require("../utils/index");
const validator = require("../utils/validator");
// App Check backend constants
const FIREBASE_APP_CHECK_V1_API_URL_FORMAT = 'https://firebaseappcheck.googleapis.com/v1/projects/***REMOVED***projectId}/apps/***REMOVED***appId}:exchangeCustomToken';
const FIREBASE_APP_CHECK_CONFIG_HEADERS = ***REMOVED***
    'X-Firebase-Client': `fire-admin-node/$***REMOVED***utils.getSdkVersion()}`
};
/**
 * Class that facilitates sending requests to the Firebase App Check backend API.
 *
 * @internal
 */
class AppCheckApiClient ***REMOVED***
    constructor(app) ***REMOVED***
        this.app = app;
        if (!validator.isNonNullObject(app) || !('options' in app)) ***REMOVED***
            throw new FirebaseAppCheckError('invalid-argument', 'First argument passed to admin.appCheck() must be a valid Firebase app instance.');
      ***REMOVED***
        this.httpClient = new api_request_1.AuthorizedHttpClient(app);
  ***REMOVED***
    /**
     * Exchange a signed custom token to App Check token
     *
     * @param customToken - The custom token to be exchanged.
     * @param appId - The mobile App ID.
     * @returns A promise that fulfills with a `AppCheckToken`.
     */
    exchangeToken(customToken, appId) ***REMOVED***
        if (!validator.isNonEmptyString(appId)) ***REMOVED***
            throw new FirebaseAppCheckError('invalid-argument', '`appId` must be a non-empty string.');
      ***REMOVED***
        if (!validator.isNonEmptyString(customToken)) ***REMOVED***
            throw new FirebaseAppCheckError('invalid-argument', '`customToken` must be a non-empty string.');
      ***REMOVED***
        return this.getUrl(appId)
            .then((url) => ***REMOVED***
            const request = ***REMOVED***
                method: 'POST',
                url,
                headers: FIREBASE_APP_CHECK_CONFIG_HEADERS,
                data: ***REMOVED*** customToken }
          ***REMOVED***;
            return this.httpClient.send(request);
      ***REMOVED***)
            .then((resp) => ***REMOVED***
            return this.toAppCheckToken(resp);
      ***REMOVED***)
            .catch((err) => ***REMOVED***
            throw this.toFirebaseError(err);
      ***REMOVED***);
  ***REMOVED***
    getUrl(appId) ***REMOVED***
        return this.getProjectId()
            .then((projectId) => ***REMOVED***
            const urlParams = ***REMOVED***
                projectId,
                appId,
          ***REMOVED***;
            const baseUrl = utils.formatString(FIREBASE_APP_CHECK_V1_API_URL_FORMAT, urlParams);
            return utils.formatString(baseUrl);
      ***REMOVED***);
  ***REMOVED***
    getProjectId() ***REMOVED***
        if (this.projectId) ***REMOVED***
            return Promise.resolve(this.projectId);
      ***REMOVED***
        return utils.findProjectId(this.app)
            .then((projectId) => ***REMOVED***
            if (!validator.isNonEmptyString(projectId)) ***REMOVED***
                throw new FirebaseAppCheckError('unknown-error', 'Failed to determine project ID. Initialize the '
                    + 'SDK with service account credentials or set project ID as an app option. '
                    + 'Alternatively, set the GOOGLE_CLOUD_PROJECT environment variable.');
          ***REMOVED***
            this.projectId = projectId;
            return projectId;
      ***REMOVED***);
  ***REMOVED***
    toFirebaseError(err) ***REMOVED***
        if (err instanceof error_1.PrefixedFirebaseError) ***REMOVED***
            return err;
      ***REMOVED***
        const response = err.response;
        if (!response.isJson()) ***REMOVED***
            return new FirebaseAppCheckError('unknown-error', `Unexpected response with status: $***REMOVED***response.status} and body: $***REMOVED***response.text}`);
      ***REMOVED***
        const error = response.data.error || ***REMOVED***};
        let code = 'unknown-error';
        if (error.status && error.status in exports.APP_CHECK_ERROR_CODE_MAPPING) ***REMOVED***
            code = exports.APP_CHECK_ERROR_CODE_MAPPING[error.status];
      ***REMOVED***
        const message = error.message || `Unknown server error: $***REMOVED***response.text}`;
        return new FirebaseAppCheckError(code, message);
  ***REMOVED***
    /**
     * Creates an AppCheckToken from the API response.
     *
     * @param resp - API response object.
     * @returns An AppCheckToken instance.
     */
    toAppCheckToken(resp) ***REMOVED***
        const token = resp.data.token;
        // `ttl` is a string with the suffix "s" preceded by the number of seconds,
        // with nanoseconds expressed as fractional seconds.
        const ttlMillis = this.stringToMilliseconds(resp.data.ttl);
        return ***REMOVED***
            token,
            ttlMillis
      ***REMOVED***;
  ***REMOVED***
    /**
     * Converts a duration string with the suffix `s` to milliseconds.
     *
     * @param duration - The duration as a string with the suffix "s" preceded by the
     * number of seconds, with fractional seconds. For example, 3 seconds with 0 nanoseconds
     * is expressed as "3s", while 3 seconds and 1 nanosecond is expressed as "3.000000001s",
     * and 3 seconds and 1 microsecond is expressed as "3.000001s".
     *
     * @returns The duration in milliseconds.
     */
    stringToMilliseconds(duration) ***REMOVED***
        if (!validator.isNonEmptyString(duration) || !duration.endsWith('s')) ***REMOVED***
            throw new FirebaseAppCheckError('invalid-argument', '`ttl` must be a valid duration string with the suffix `s`.');
      ***REMOVED***
        const seconds = duration.slice(0, -1);
        return Math.floor(Number(seconds) * 1000);
  ***REMOVED***
}
exports.AppCheckApiClient = AppCheckApiClient;
exports.APP_CHECK_ERROR_CODE_MAPPING = ***REMOVED***
    ABORTED: 'aborted',
    INVALID_ARGUMENT: 'invalid-argument',
    INVALID_CREDENTIAL: 'invalid-credential',
    INTERNAL: 'internal-error',
    PERMISSION_DENIED: 'permission-denied',
    UNAUTHENTICATED: 'unauthenticated',
    NOT_FOUND: 'not-found',
    UNKNOWN: 'unknown-error',
};
/**
 * Firebase App Check error code structure. This extends PrefixedFirebaseError.
 *
 * @param code - The error code.
 * @param message - The error message.
 * @constructor
 */
class FirebaseAppCheckError extends error_1.PrefixedFirebaseError ***REMOVED***
    constructor(code, message) ***REMOVED***
        super('app-check', code, message);
        /* tslint:disable:max-line-length */
        // Set the prototype explicitly. See the following link for more details:
        // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work
        /* tslint:enable:max-line-length */
        this.__proto__ = FirebaseAppCheckError.prototype;
  ***REMOVED***
}
exports.FirebaseAppCheckError = FirebaseAppCheckError;
