/*! firebase-admin v11.5.0 */
"use strict";
/*!
 * @license
 * Copyright 2022 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.toCloudEventProtoFormat = exports.FirebaseEventarcError = void 0;
const error_1 = require("../utils/error");
const uuid_1 = require("uuid");
const validator = require("../utils/validator");
// List of CloudEvent properties that are handled "by hand" and should be skipped by
// automatic attribute copy.
const TOP_LEVEL_CE_ATTRS = ['id', 'type', 'specversion', 'source', 'data', 'time', 'datacontenttype', 'subject'];
/**
 * Firebase Eventarc error code structure. This extends PrefixedFirebaseError.
 *
 * @param code - The error code.
 * @param message - The error message.
 * @constructor
 */
class FirebaseEventarcError extends error_1.PrefixedFirebaseError ***REMOVED***
    constructor(code, message) ***REMOVED***
        super('eventarc', code, message);
  ***REMOVED***
}
exports.FirebaseEventarcError = FirebaseEventarcError;
function toCloudEventProtoFormat(ce) ***REMOVED***
    const source = ce.source ?? process.env.EVENTARC_CLOUD_EVENT_SOURCE;
    if (typeof source === 'undefined' || !validator.isNonEmptyString(source)) ***REMOVED***
        throw new FirebaseEventarcError('invalid-argument', "CloudEvent 'source' is required.");
  ***REMOVED***
    if (!validator.isNonEmptyString(ce.type)) ***REMOVED***
        throw new FirebaseEventarcError('invalid-argument', "CloudEvent 'type' is required.");
  ***REMOVED***
    const out = ***REMOVED***
        '@type': 'type.googleapis.com/io.cloudevents.v1.CloudEvent',
        'id': ce.id ?? (0, uuid_1.v4)(),
        'type': ce.type,
        'specVersion': ce.specversion ?? '1.0',
        'source': source
  ***REMOVED***;
    if (typeof ce.time !== 'undefined') ***REMOVED***
        if (!validator.isISODateString(ce.time)) ***REMOVED***
            throw new FirebaseEventarcError('invalid-argument', "CloudEvent 'tyme' must be in ISO date format.");
      ***REMOVED***
        setAttribute(out, 'time', ***REMOVED***
            'ceTimestamp': ce.time
      ***REMOVED***);
  ***REMOVED***
    else ***REMOVED***
        setAttribute(out, 'time', ***REMOVED***
            'ceTimestamp': new Date().toISOString()
      ***REMOVED***);
  ***REMOVED***
    if (typeof ce.datacontenttype !== 'undefined') ***REMOVED***
        if (!validator.isNonEmptyString(ce.datacontenttype)) ***REMOVED***
            throw new FirebaseEventarcError('invalid-argument', "CloudEvent 'datacontenttype' if specified must be non-empty string.");
      ***REMOVED***
        setAttribute(out, 'datacontenttype', ***REMOVED***
            'ceString': ce.datacontenttype
      ***REMOVED***);
  ***REMOVED***
    if (ce.subject) ***REMOVED***
        if (!validator.isNonEmptyString(ce.subject)) ***REMOVED***
            throw new FirebaseEventarcError('invalid-argument', "CloudEvent 'subject' if specified must be non-empty string.");
      ***REMOVED***
        setAttribute(out, 'subject', ***REMOVED***
            'ceString': ce.subject
      ***REMOVED***);
  ***REMOVED***
    if (typeof ce.data === 'undefined') ***REMOVED***
        throw new FirebaseEventarcError('invalid-argument', "CloudEvent 'data' is required.");
  ***REMOVED***
    if (validator.isObject(ce.data)) ***REMOVED***
        out['textData'] = JSON.stringify(ce.data);
        if (!ce.datacontenttype) ***REMOVED***
            setAttribute(out, 'datacontenttype', ***REMOVED***
                'ceString': 'application/json'
          ***REMOVED***);
      ***REMOVED***
  ***REMOVED***
    else if (validator.isNonEmptyString(ce.data)) ***REMOVED***
        out['textData'] = ce.data;
        if (!ce.datacontenttype) ***REMOVED***
            setAttribute(out, 'datacontenttype', ***REMOVED***
                'ceString': 'text/plain'
          ***REMOVED***);
      ***REMOVED***
  ***REMOVED***
    else ***REMOVED***
        throw new FirebaseEventarcError('invalid-argument', `CloudEvent 'data' must be string or an object (which are converted to JSON), got '$***REMOVED***typeof ce.data}'.`);
  ***REMOVED***
    for (const attr in ce) ***REMOVED***
        if (TOP_LEVEL_CE_ATTRS.includes(attr)) ***REMOVED***
            continue;
      ***REMOVED***
        if (!validator.isNonEmptyString(ce[attr])) ***REMOVED***
            throw new FirebaseEventarcError('invalid-argument', `CloudEvent extension attributes ('$***REMOVED***attr}') must be string.`);
      ***REMOVED***
        setAttribute(out, attr, ***REMOVED***
            'ceString': ce[attr]
      ***REMOVED***);
  ***REMOVED***
    return out;
}
exports.toCloudEventProtoFormat = toCloudEventProtoFormat;
function setAttribute(event, attr, value) ***REMOVED***
    if (!Object.prototype.hasOwnProperty.call(event, 'attributes')) ***REMOVED***
        event.attributes = ***REMOVED***};
  ***REMOVED***
    event['attributes'][attr] = value;
}
