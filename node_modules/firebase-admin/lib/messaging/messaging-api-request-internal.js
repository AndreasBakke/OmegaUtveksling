/*! firebase-admin v11.5.0 */
"use strict";
/*!
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.FirebaseMessagingRequestHandler = void 0;
const api_request_1 = require("../utils/api-request");
const messaging_errors_internal_1 = require("./messaging-errors-internal");
const batch_request_internal_1 = require("./batch-request-internal");
const index_1 = require("../utils/index");
// FCM backend constants
const FIREBASE_MESSAGING_TIMEOUT = 15000;
const FIREBASE_MESSAGING_BATCH_URL = 'https://fcm.googleapis.com/batch';
const FIREBASE_MESSAGING_HTTP_METHOD = 'POST';
const FIREBASE_MESSAGING_HEADERS = ***REMOVED***
    'X-Firebase-Client': `fire-admin-node/$***REMOVED***(0, index_1.getSdkVersion)()}`,
};
const LEGACY_FIREBASE_MESSAGING_HEADERS = ***REMOVED***
    'X-Firebase-Client': `fire-admin-node/$***REMOVED***(0, index_1.getSdkVersion)()}`,
    'access_token_auth': 'true',
};
/**
 * Class that provides a mechanism to send requests to the Firebase Cloud Messaging backend.
 */
class FirebaseMessagingRequestHandler ***REMOVED***
    /**
     * @param app - The app used to fetch access tokens to sign API requests.
     * @constructor
     */
    constructor(app) ***REMOVED***
        this.httpClient = new api_request_1.AuthorizedHttpClient(app);
        this.batchClient = new batch_request_internal_1.BatchRequestClient(this.httpClient, FIREBASE_MESSAGING_BATCH_URL, FIREBASE_MESSAGING_HEADERS);
  ***REMOVED***
    /**
     * Invokes the request handler with the provided request data.
     *
     * @param host - The host to which to send the request.
     * @param path - The path to which to send the request.
     * @param requestData - The request data.
     * @returns A promise that resolves with the response.
     */
    invokeRequestHandler(host, path, requestData) ***REMOVED***
        const request = ***REMOVED***
            method: FIREBASE_MESSAGING_HTTP_METHOD,
            url: `https://$***REMOVED***host}$***REMOVED***path}`,
            data: requestData,
            headers: LEGACY_FIREBASE_MESSAGING_HEADERS,
            timeout: FIREBASE_MESSAGING_TIMEOUT,
      ***REMOVED***;
        return this.httpClient.send(request).then((response) => ***REMOVED***
            // Send non-JSON responses to the catch() below where they will be treated as errors.
            if (!response.isJson()) ***REMOVED***
                throw new api_request_1.HttpError(response);
          ***REMOVED***
            // Check for backend errors in the response.
            const errorCode = (0, messaging_errors_internal_1.getErrorCode)(response.data);
            if (errorCode) ***REMOVED***
                throw new api_request_1.HttpError(response);
          ***REMOVED***
            // Return entire response.
            return response.data;
      ***REMOVED***)
            .catch((err) => ***REMOVED***
            if (err instanceof api_request_1.HttpError) ***REMOVED***
                throw (0, messaging_errors_internal_1.createFirebaseError)(err);
          ***REMOVED***
            // Re-throw the error if it already has the proper format.
            throw err;
      ***REMOVED***);
  ***REMOVED***
    /**
     * Sends the given array of sub requests as a single batch to FCM, and parses the result into
     * a BatchResponse object.
     *
     * @param requests - An array of sub requests to send.
     * @returns A promise that resolves when the send operation is complete.
     */
    sendBatchRequest(requests) ***REMOVED***
        return this.batchClient.send(requests)
            .then((responses) => ***REMOVED***
            return responses.map((part) => ***REMOVED***
                return this.buildSendResponse(part);
          ***REMOVED***);
      ***REMOVED***).then((responses) => ***REMOVED***
            const successCount = responses.filter((resp) => resp.success).length;
            return ***REMOVED***
                responses,
                successCount,
                failureCount: responses.length - successCount,
          ***REMOVED***;
      ***REMOVED***).catch((err) => ***REMOVED***
            if (err instanceof api_request_1.HttpError) ***REMOVED***
                throw (0, messaging_errors_internal_1.createFirebaseError)(err);
          ***REMOVED***
            // Re-throw the error if it already has the proper format.
            throw err;
      ***REMOVED***);
  ***REMOVED***
    buildSendResponse(response) ***REMOVED***
        const result = ***REMOVED***
            success: response.status === 200,
      ***REMOVED***;
        if (result.success) ***REMOVED***
            result.messageId = response.data.name;
      ***REMOVED***
        else ***REMOVED***
            result.error = (0, messaging_errors_internal_1.createFirebaseError)(new api_request_1.HttpError(response));
      ***REMOVED***
        return result;
  ***REMOVED***
}
exports.FirebaseMessagingRequestHandler = FirebaseMessagingRequestHandler;
