/*! firebase-admin v11.5.0 */
"use strict";
/*!
 * Copyright 2020 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.validateMessage = exports.BLACKLISTED_OPTIONS_KEYS = exports.BLACKLISTED_DATA_PAYLOAD_KEYS = void 0;
const index_1 = require("../utils/index");
const error_1 = require("../utils/error");
const validator = require("../utils/validator");
// Keys which are not allowed in the messaging data payload object.
exports.BLACKLISTED_DATA_PAYLOAD_KEYS = ['from'];
// Keys which are not allowed in the messaging options object.
exports.BLACKLISTED_OPTIONS_KEYS = [
    'condition', 'data', 'notification', 'registrationIds', 'registration_ids', 'to',
];
/**
 * Checks if the given Message object is valid. Recursively validates all the child objects
 * included in the message (android, apns, data etc.). If successful, transforms the message
 * in place by renaming the keys to what's expected by the remote FCM service.
 *
 * @param ***REMOVED***Message} Message An object to be validated.
 */
function validateMessage(message) ***REMOVED***
    if (!validator.isNonNullObject(message)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Message must be a non-null object');
  ***REMOVED***
    const anyMessage = message;
    if (anyMessage.topic) ***REMOVED***
        // If the topic name is prefixed, remove it.
        if (anyMessage.topic.startsWith('/topics/')) ***REMOVED***
            anyMessage.topic = anyMessage.topic.replace(/^\/topics\//, '');
      ***REMOVED***
        // Checks for illegal characters and empty string.
        if (!/^[a-zA-Z0-9-_.~%]+$/.test(anyMessage.topic)) ***REMOVED***
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Malformed topic name');
      ***REMOVED***
  ***REMOVED***
    const targets = [anyMessage.token, anyMessage.topic, anyMessage.condition];
    if (targets.filter((v) => validator.isNonEmptyString(v)).length !== 1) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Exactly one of topic, token or condition is required');
  ***REMOVED***
    validateStringMap(message.data, 'data');
    validateAndroidConfig(message.android);
    validateWebpushConfig(message.webpush);
    validateApnsConfig(message.apns);
    validateFcmOptions(message.fcmOptions);
    validateNotification(message.notification);
}
exports.validateMessage = validateMessage;
/**
 * Checks if the given object only contains strings as child values.
 *
 * @param ***REMOVED***object} map An object to be validated.
 * @param ***REMOVED***string} label A label to be included in the errors thrown.
 */
function validateStringMap(map, label) ***REMOVED***
    if (typeof map === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(map)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `$***REMOVED***label} must be a non-null object`);
  ***REMOVED***
    Object.keys(map).forEach((key) => ***REMOVED***
        if (!validator.isString(map[key])) ***REMOVED***
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `$***REMOVED***label} must only contain string values`);
      ***REMOVED***
  ***REMOVED***);
}
/**
 * Checks if the given WebpushConfig object is valid. The object must have valid headers and data.
 *
 * @param ***REMOVED***WebpushConfig} config An object to be validated.
 */
function validateWebpushConfig(config) ***REMOVED***
    if (typeof config === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(config)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'webpush must be a non-null object');
  ***REMOVED***
    validateStringMap(config.headers, 'webpush.headers');
    validateStringMap(config.data, 'webpush.data');
}
/**
 * Checks if the given ApnsConfig object is valid. The object must have valid headers and a
 * payload.
 *
 * @param ***REMOVED***ApnsConfig} config An object to be validated.
 */
function validateApnsConfig(config) ***REMOVED***
    if (typeof config === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(config)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns must be a non-null object');
  ***REMOVED***
    validateStringMap(config.headers, 'apns.headers');
    validateApnsPayload(config.payload);
    validateApnsFcmOptions(config.fcmOptions);
}
/**
 * Checks if the given ApnsFcmOptions object is valid.
 *
 * @param ***REMOVED***ApnsFcmOptions} fcmOptions An object to be validated.
 */
function validateApnsFcmOptions(fcmOptions) ***REMOVED***
    if (typeof fcmOptions === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(fcmOptions)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');
  ***REMOVED***
    if (typeof fcmOptions.imageUrl !== 'undefined' &&
        !validator.isURL(fcmOptions.imageUrl)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'imageUrl must be a valid URL string');
  ***REMOVED***
    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');
  ***REMOVED***
    const propertyMappings = ***REMOVED***
        imageUrl: 'image',
  ***REMOVED***;
    Object.keys(propertyMappings).forEach((key) => ***REMOVED***
        if (key in fcmOptions && propertyMappings[key] in fcmOptions) ***REMOVED***
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for $***REMOVED***key} in ApnsFcmOptions`);
      ***REMOVED***
  ***REMOVED***);
    (0, index_1.renameProperties)(fcmOptions, propertyMappings);
}
/**
 * Checks if the given FcmOptions object is valid.
 *
 * @param ***REMOVED***FcmOptions} fcmOptions An object to be validated.
 */
function validateFcmOptions(fcmOptions) ***REMOVED***
    if (typeof fcmOptions === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(fcmOptions)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');
  ***REMOVED***
    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');
  ***REMOVED***
}
/**
 * Checks if the given Notification object is valid.
 *
 * @param ***REMOVED***Notification} notification An object to be validated.
 */
function validateNotification(notification) ***REMOVED***
    if (typeof notification === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(notification)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification must be a non-null object');
  ***REMOVED***
    if (typeof notification.imageUrl !== 'undefined' && !validator.isURL(notification.imageUrl)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification.imageUrl must be a valid URL string');
  ***REMOVED***
    const propertyMappings = ***REMOVED***
        imageUrl: 'image',
  ***REMOVED***;
    Object.keys(propertyMappings).forEach((key) => ***REMOVED***
        if (key in notification && propertyMappings[key] in notification) ***REMOVED***
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for $***REMOVED***key} in Notification`);
      ***REMOVED***
  ***REMOVED***);
    (0, index_1.renameProperties)(notification, propertyMappings);
}
/**
 * Checks if the given ApnsPayload object is valid. The object must have a valid aps value.
 *
 * @param ***REMOVED***ApnsPayload} payload An object to be validated.
 */
function validateApnsPayload(payload) ***REMOVED***
    if (typeof payload === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(payload)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload must be a non-null object');
  ***REMOVED***
    validateAps(payload.aps);
}
/**
 * Checks if the given Aps object is valid. The object must have a valid alert. If the validation
 * is successful, transforms the input object by renaming the keys to valid APNS payload keys.
 *
 * @param ***REMOVED***Aps} aps An object to be validated.
 */
function validateAps(aps) ***REMOVED***
    if (typeof aps === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(aps)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps must be a non-null object');
  ***REMOVED***
    validateApsAlert(aps.alert);
    validateApsSound(aps.sound);
    const propertyMappings = ***REMOVED***
        contentAvailable: 'content-available',
        mutableContent: 'mutable-content',
        threadId: 'thread-id',
  ***REMOVED***;
    Object.keys(propertyMappings).forEach((key) => ***REMOVED***
        if (key in aps && propertyMappings[key] in aps) ***REMOVED***
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for $***REMOVED***key} in Aps`);
      ***REMOVED***
  ***REMOVED***);
    (0, index_1.renameProperties)(aps, propertyMappings);
    const contentAvailable = aps['content-available'];
    if (typeof contentAvailable !== 'undefined' && contentAvailable !== 1) ***REMOVED***
        if (contentAvailable === true) ***REMOVED***
            aps['content-available'] = 1;
      ***REMOVED***
        else ***REMOVED***
            delete aps['content-available'];
      ***REMOVED***
  ***REMOVED***
    const mutableContent = aps['mutable-content'];
    if (typeof mutableContent !== 'undefined' && mutableContent !== 1) ***REMOVED***
        if (mutableContent === true) ***REMOVED***
            aps['mutable-content'] = 1;
      ***REMOVED***
        else ***REMOVED***
            delete aps['mutable-content'];
      ***REMOVED***
  ***REMOVED***
}
function validateApsSound(sound) ***REMOVED***
    if (typeof sound === 'undefined' || validator.isNonEmptyString(sound)) ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(sound)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound must be a non-empty string or a non-null object');
  ***REMOVED***
    if (!validator.isNonEmptyString(sound.name)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.name must be a non-empty string');
  ***REMOVED***
    const volume = sound.volume;
    if (typeof volume !== 'undefined') ***REMOVED***
        if (!validator.isNumber(volume)) ***REMOVED***
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be a number');
      ***REMOVED***
        if (volume < 0 || volume > 1) ***REMOVED***
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be in the interval [0, 1]');
      ***REMOVED***
  ***REMOVED***
    const soundObject = sound;
    const key = 'critical';
    const critical = soundObject[key];
    if (typeof critical !== 'undefined' && critical !== 1) ***REMOVED***
        if (critical === true) ***REMOVED***
            soundObject[key] = 1;
      ***REMOVED***
        else ***REMOVED***
            delete soundObject[key];
      ***REMOVED***
  ***REMOVED***
}
/**
 * Checks if the given alert object is valid. Alert could be a string or a complex object.
 * If specified as an object, it must have valid localization parameters. If successful, transforms
 * the input object by renaming the keys to valid APNS payload keys.
 *
 * @param ***REMOVED***string | ApsAlert} alert An alert string or an object to be validated.
 */
function validateApsAlert(alert) ***REMOVED***
    if (typeof alert === 'undefined' || validator.isString(alert)) ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(alert)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert must be a string or a non-null object');
  ***REMOVED***
    const apsAlert = alert;
    if (validator.isNonEmptyArray(apsAlert.locArgs) &&
        !validator.isNonEmptyString(apsAlert.locKey)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.locKey is required when specifying locArgs');
  ***REMOVED***
    if (validator.isNonEmptyArray(apsAlert.titleLocArgs) &&
        !validator.isNonEmptyString(apsAlert.titleLocKey)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.titleLocKey is required when specifying titleLocArgs');
  ***REMOVED***
    if (validator.isNonEmptyArray(apsAlert.subtitleLocArgs) &&
        !validator.isNonEmptyString(apsAlert.subtitleLocKey)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.subtitleLocKey is required when specifying subtitleLocArgs');
  ***REMOVED***
    const propertyMappings = ***REMOVED***
        locKey: 'loc-key',
        locArgs: 'loc-args',
        titleLocKey: 'title-loc-key',
        titleLocArgs: 'title-loc-args',
        subtitleLocKey: 'subtitle-loc-key',
        subtitleLocArgs: 'subtitle-loc-args',
        actionLocKey: 'action-loc-key',
        launchImage: 'launch-image',
  ***REMOVED***;
    (0, index_1.renameProperties)(apsAlert, propertyMappings);
}
/**
 * Checks if the given AndroidConfig object is valid. The object must have valid ttl, data,
 * and notification fields. If successful, transforms the input object by renaming keys to valid
 * Android keys. Also transforms the ttl value to the format expected by FCM service.
 *
 * @param config - An object to be validated.
 */
function validateAndroidConfig(config) ***REMOVED***
    if (typeof config === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(config)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android must be a non-null object');
  ***REMOVED***
    if (typeof config.ttl !== 'undefined') ***REMOVED***
        if (!validator.isNumber(config.ttl) || config.ttl < 0) ***REMOVED***
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'TTL must be a non-negative duration in milliseconds');
      ***REMOVED***
        const duration = (0, index_1.transformMillisecondsToSecondsString)(config.ttl);
        config.ttl = duration;
  ***REMOVED***
    validateStringMap(config.data, 'android.data');
    validateAndroidNotification(config.notification);
    validateAndroidFcmOptions(config.fcmOptions);
    const propertyMappings = ***REMOVED***
        collapseKey: 'collapse_key',
        restrictedPackageName: 'restricted_package_name',
  ***REMOVED***;
    (0, index_1.renameProperties)(config, propertyMappings);
}
/**
 * Checks if the given AndroidNotification object is valid. The object must have valid color and
 * localization parameters. If successful, transforms the input object by renaming keys to valid
 * Android keys.
 *
 * @param ***REMOVED***AndroidNotification} notification An object to be validated.
 */
function validateAndroidNotification(notification) ***REMOVED***
    if (typeof notification === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(notification)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification must be a non-null object');
  ***REMOVED***
    if (typeof notification.color !== 'undefined' && !/^#[0-9a-fA-F]***REMOVED***6}$/.test(notification.color)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.color must be in the form #RRGGBB');
  ***REMOVED***
    if (validator.isNonEmptyArray(notification.bodyLocArgs) &&
        !validator.isNonEmptyString(notification.bodyLocKey)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.bodyLocKey is required when specifying bodyLocArgs');
  ***REMOVED***
    if (validator.isNonEmptyArray(notification.titleLocArgs) &&
        !validator.isNonEmptyString(notification.titleLocKey)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.titleLocKey is required when specifying titleLocArgs');
  ***REMOVED***
    if (typeof notification.imageUrl !== 'undefined' &&
        !validator.isURL(notification.imageUrl)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.imageUrl must be a valid URL string');
  ***REMOVED***
    if (typeof notification.eventTimestamp !== 'undefined') ***REMOVED***
        if (!(notification.eventTimestamp instanceof Date)) ***REMOVED***
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.eventTimestamp must be a valid `Date` object');
      ***REMOVED***
        // Convert timestamp to RFC3339 UTC "Zulu" format, example "2014-10-02T15:01:23.045123456Z"
        const zuluTimestamp = notification.eventTimestamp.toISOString();
        notification.eventTimestamp = zuluTimestamp;
  ***REMOVED***
    if (typeof notification.vibrateTimingsMillis !== 'undefined') ***REMOVED***
        if (!validator.isNonEmptyArray(notification.vibrateTimingsMillis)) ***REMOVED***
            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be a non-empty array of numbers');
      ***REMOVED***
        const vibrateTimings = [];
        notification.vibrateTimingsMillis.forEach((value) => ***REMOVED***
            if (!validator.isNumber(value) || value < 0) ***REMOVED***
                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be non-negative durations in milliseconds');
          ***REMOVED***
            const duration = (0, index_1.transformMillisecondsToSecondsString)(value);
            vibrateTimings.push(duration);
      ***REMOVED***);
        notification.vibrateTimingsMillis = vibrateTimings;
  ***REMOVED***
    if (typeof notification.priority !== 'undefined') ***REMOVED***
        const priority = 'PRIORITY_' + notification.priority.toUpperCase();
        notification.priority = priority;
  ***REMOVED***
    if (typeof notification.visibility !== 'undefined') ***REMOVED***
        const visibility = notification.visibility.toUpperCase();
        notification.visibility = visibility;
  ***REMOVED***
    validateLightSettings(notification.lightSettings);
    const propertyMappings = ***REMOVED***
        clickAction: 'click_action',
        bodyLocKey: 'body_loc_key',
        bodyLocArgs: 'body_loc_args',
        titleLocKey: 'title_loc_key',
        titleLocArgs: 'title_loc_args',
        channelId: 'channel_id',
        imageUrl: 'image',
        eventTimestamp: 'event_time',
        localOnly: 'local_only',
        priority: 'notification_priority',
        vibrateTimingsMillis: 'vibrate_timings',
        defaultVibrateTimings: 'default_vibrate_timings',
        defaultSound: 'default_sound',
        lightSettings: 'light_settings',
        defaultLightSettings: 'default_light_settings',
        notificationCount: 'notification_count',
  ***REMOVED***;
    (0, index_1.renameProperties)(notification, propertyMappings);
}
/**
 * Checks if the given LightSettings object is valid. The object must have valid color and
 * light on/off duration parameters. If successful, transforms the input object by renaming
 * keys to valid Android keys.
 *
 * @param ***REMOVED***LightSettings} lightSettings An object to be validated.
 */
function validateLightSettings(lightSettings) ***REMOVED***
    if (typeof lightSettings === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(lightSettings)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings must be a non-null object');
  ***REMOVED***
    if (!validator.isNumber(lightSettings.lightOnDurationMillis) || lightSettings.lightOnDurationMillis < 0) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOnDurationMillis must be a non-negative duration in milliseconds');
  ***REMOVED***
    const durationOn = (0, index_1.transformMillisecondsToSecondsString)(lightSettings.lightOnDurationMillis);
    lightSettings.lightOnDurationMillis = durationOn;
    if (!validator.isNumber(lightSettings.lightOffDurationMillis) || lightSettings.lightOffDurationMillis < 0) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOffDurationMillis must be a non-negative duration in milliseconds');
  ***REMOVED***
    const durationOff = (0, index_1.transformMillisecondsToSecondsString)(lightSettings.lightOffDurationMillis);
    lightSettings.lightOffDurationMillis = durationOff;
    if (!validator.isString(lightSettings.color) ||
        (!/^#[0-9a-fA-F]***REMOVED***6}$/.test(lightSettings.color) && !/^#[0-9a-fA-F]***REMOVED***8}$/.test(lightSettings.color))) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.color must be in the form #RRGGBB or #RRGGBBAA format');
  ***REMOVED***
    const colorString = lightSettings.color.length === 7 ? lightSettings.color + 'FF' : lightSettings.color;
    const rgb = /^#?([0-9a-fA-F]***REMOVED***2})([0-9a-fA-F]***REMOVED***2})([0-9a-fA-F]***REMOVED***2})([0-9a-fA-F]***REMOVED***2})$/i.exec(colorString);
    if (!rgb || rgb.length < 4) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INTERNAL_ERROR, 'regex to extract rgba values from ' + colorString + ' failed.');
  ***REMOVED***
    const color = ***REMOVED***
        red: parseInt(rgb[1], 16) / 255.0,
        green: parseInt(rgb[2], 16) / 255.0,
        blue: parseInt(rgb[3], 16) / 255.0,
        alpha: parseInt(rgb[4], 16) / 255.0,
  ***REMOVED***;
    lightSettings.color = color;
    const propertyMappings = ***REMOVED***
        lightOnDurationMillis: 'light_on_duration',
        lightOffDurationMillis: 'light_off_duration',
  ***REMOVED***;
    (0, index_1.renameProperties)(lightSettings, propertyMappings);
}
/**
 * Checks if the given AndroidFcmOptions object is valid.
 *
 * @param ***REMOVED***AndroidFcmOptions} fcmOptions An object to be validated.
 */
function validateAndroidFcmOptions(fcmOptions) ***REMOVED***
    if (typeof fcmOptions === 'undefined') ***REMOVED***
        return;
  ***REMOVED***
    else if (!validator.isNonNullObject(fcmOptions)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');
  ***REMOVED***
    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) ***REMOVED***
        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');
  ***REMOVED***
}
