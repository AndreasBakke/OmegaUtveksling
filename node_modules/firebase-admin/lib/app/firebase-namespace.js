/*! firebase-admin v11.5.0 */
"use strict";
/*!
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.defaultNamespace = exports.FirebaseNamespace = exports.FirebaseNamespaceInternals = void 0;
const lifecycle_1 = require("./lifecycle");
const credential_factory_1 = require("./credential-factory");
const index_1 = require("../utils/index");
/**
 * Internals of a FirebaseNamespace instance.
 */
class FirebaseNamespaceInternals ***REMOVED***
    constructor(appStore) ***REMOVED***
        this.appStore = appStore;
  ***REMOVED***
    /**
     * Initializes the App instance.
     *
     * @param options - Optional options for the App instance. If none present will try to initialize
     *   from the FIREBASE_CONFIG environment variable. If the environment variable contains a string
     *   that starts with '***REMOVED***' it will be parsed as JSON, otherwise it will be assumed to be pointing
     *   to a file.
     * @param appName - Optional name of the FirebaseApp instance.
     *
     * @returns A new App instance.
     */
    initializeApp(options, appName) ***REMOVED***
        const app = this.appStore.initializeApp(options, appName);
        return extendApp(app);
  ***REMOVED***
    /**
     * Returns the App instance with the provided name (or the default App instance
     * if no name is provided).
     *
     * @param appName - Optional name of the FirebaseApp instance to return.
     * @returns The App instance which has the provided name.
     */
    app(appName) ***REMOVED***
        const app = this.appStore.getApp(appName);
        return extendApp(app);
  ***REMOVED***
    /*
     * Returns an array of all the non-deleted App instances.
     */
    get apps() ***REMOVED***
        return this.appStore.getApps().map((app) => extendApp(app));
  ***REMOVED***
}
exports.FirebaseNamespaceInternals = FirebaseNamespaceInternals;
const firebaseCredential = ***REMOVED***
    cert: credential_factory_1.cert, refreshToken: credential_factory_1.refreshToken, applicationDefault: credential_factory_1.applicationDefault
};
/**
 * Global Firebase context object.
 */
class FirebaseNamespace ***REMOVED***
    /* tslint:enable */
    constructor(appStore) ***REMOVED***
        // Hack to prevent Babel from modifying the object returned as the default admin namespace.
        /* tslint:disable:variable-name */
        this.__esModule = true;
        /* tslint:enable:variable-name */
        this.credential = firebaseCredential;
        this.SDK_VERSION = (0, index_1.getSdkVersion)();
        /* tslint:disable */
        // TODO(jwenger): Database is the only consumer of firebase.Promise. We should update it to use
        // use the native Promise and then remove this.
        this.Promise = Promise;
        this.INTERNAL = new FirebaseNamespaceInternals(appStore ?? new lifecycle_1.AppStore());
  ***REMOVED***
    /**
     * Gets the `Auth` service namespace. The returned namespace can be used to get the
     * `Auth` service for the default app or an explicitly specified app.
     */
    get auth() ***REMOVED***
        const fn = (app) => ***REMOVED***
            return this.ensureApp(app).auth();
      ***REMOVED***;
        const auth = require('../auth/auth').Auth;
        return Object.assign(fn, ***REMOVED*** Auth: auth });
  ***REMOVED***
    /**
     * Gets the `Database` service namespace. The returned namespace can be used to get the
     * `Database` service for the default app or an explicitly specified app.
     */
    get database() ***REMOVED***
        const fn = (app) => ***REMOVED***
            return this.ensureApp(app).database();
      ***REMOVED***;
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        return Object.assign(fn, require('@firebase/database-compat/standalone'));
  ***REMOVED***
    /**
     * Gets the `Messaging` service namespace. The returned namespace can be used to get the
     * `Messaging` service for the default app or an explicitly specified app.
     */
    get messaging() ***REMOVED***
        const fn = (app) => ***REMOVED***
            return this.ensureApp(app).messaging();
      ***REMOVED***;
        const messaging = require('../messaging/messaging').Messaging;
        return Object.assign(fn, ***REMOVED*** Messaging: messaging });
  ***REMOVED***
    /**
     * Gets the `Storage` service namespace. The returned namespace can be used to get the
     * `Storage` service for the default app or an explicitly specified app.
     */
    get storage() ***REMOVED***
        const fn = (app) => ***REMOVED***
            return this.ensureApp(app).storage();
      ***REMOVED***;
        const storage = require('../storage/storage').Storage;
        return Object.assign(fn, ***REMOVED*** Storage: storage });
  ***REMOVED***
    /**
     * Gets the `Firestore` service namespace. The returned namespace can be used to get the
     * `Firestore` service for the default app or an explicitly specified app.
     */
    get firestore() ***REMOVED***
        let fn = (app) => ***REMOVED***
            return this.ensureApp(app).firestore();
      ***REMOVED***;
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        const firestore = require('@google-cloud/firestore');
        fn = Object.assign(fn, firestore.Firestore);
        // `v1beta1` and `v1` are lazy-loaded in the Firestore SDK. We use the same trick here
        // to avoid triggering this lazy-loading upon initialization.
        Object.defineProperty(fn, 'v1beta1', ***REMOVED***
            get: () => ***REMOVED***
                return firestore.v1beta1;
          ***REMOVED***,
      ***REMOVED***);
        Object.defineProperty(fn, 'v1', ***REMOVED***
            get: () => ***REMOVED***
                return firestore.v1;
          ***REMOVED***,
      ***REMOVED***);
        return fn;
  ***REMOVED***
    /**
     * Gets the `MachineLearning` service namespace. The returned namespace can be
     * used to get the `MachineLearning` service for the default app or an
     * explicityly specified app.
     */
    get machineLearning() ***REMOVED***
        const fn = (app) => ***REMOVED***
            return this.ensureApp(app).machineLearning();
      ***REMOVED***;
        const machineLearning = require('../machine-learning/machine-learning').MachineLearning;
        return Object.assign(fn, ***REMOVED*** MachineLearning: machineLearning });
  ***REMOVED***
    /**
     * Gets the `Installations` service namespace. The returned namespace can be used to get the
     * `Installations` service for the default app or an explicitly specified app.
     */
    get installations() ***REMOVED***
        const fn = (app) => ***REMOVED***
            return this.ensureApp(app).installations();
      ***REMOVED***;
        const installations = require('../installations/installations').Installations;
        return Object.assign(fn, ***REMOVED*** Installations: installations });
  ***REMOVED***
    /**
     * Gets the `InstanceId` service namespace. The returned namespace can be used to get the
     * `Instance` service for the default app or an explicitly specified app.
     */
    get instanceId() ***REMOVED***
        const fn = (app) => ***REMOVED***
            return this.ensureApp(app).instanceId();
      ***REMOVED***;
        const instanceId = require('../instance-id/instance-id').InstanceId;
        return Object.assign(fn, ***REMOVED*** InstanceId: instanceId });
  ***REMOVED***
    /**
     * Gets the `ProjectManagement` service namespace. The returned namespace can be used to get the
     * `ProjectManagement` service for the default app or an explicitly specified app.
     */
    get projectManagement() ***REMOVED***
        const fn = (app) => ***REMOVED***
            return this.ensureApp(app).projectManagement();
      ***REMOVED***;
        const projectManagement = require('../project-management/project-management').ProjectManagement;
        return Object.assign(fn, ***REMOVED*** ProjectManagement: projectManagement });
  ***REMOVED***
    /**
     * Gets the `SecurityRules` service namespace. The returned namespace can be used to get the
     * `SecurityRules` service for the default app or an explicitly specified app.
     */
    get securityRules() ***REMOVED***
        const fn = (app) => ***REMOVED***
            return this.ensureApp(app).securityRules();
      ***REMOVED***;
        const securityRules = require('../security-rules/security-rules').SecurityRules;
        return Object.assign(fn, ***REMOVED*** SecurityRules: securityRules });
  ***REMOVED***
    /**
     * Gets the `RemoteConfig` service namespace. The returned namespace can be used to get the
     * `RemoteConfig` service for the default app or an explicitly specified app.
     */
    get remoteConfig() ***REMOVED***
        const fn = (app) => ***REMOVED***
            return this.ensureApp(app).remoteConfig();
      ***REMOVED***;
        const remoteConfig = require('../remote-config/remote-config').RemoteConfig;
        return Object.assign(fn, ***REMOVED*** RemoteConfig: remoteConfig });
  ***REMOVED***
    /**
     * Gets the `AppCheck` service namespace. The returned namespace can be used to get the
     * `AppCheck` service for the default app or an explicitly specified app.
     */
    get appCheck() ***REMOVED***
        const fn = (app) => ***REMOVED***
            return this.ensureApp(app).appCheck();
      ***REMOVED***;
        const appCheck = require('../app-check/app-check').AppCheck;
        return Object.assign(fn, ***REMOVED*** AppCheck: appCheck });
  ***REMOVED***
    // TODO: Change the return types to app.App in the following methods.
    /**
     * Initializes the FirebaseApp instance.
     *
     * @param options - Optional options for the FirebaseApp instance.
     *   If none present will try to initialize from the FIREBASE_CONFIG environment variable.
     *   If the environment variable contains a string that starts with '***REMOVED***' it will be parsed as JSON,
     *   otherwise it will be assumed to be pointing to a file.
     * @param appName - Optional name of the FirebaseApp instance.
     *
     * @returns A new FirebaseApp instance.
     */
    initializeApp(options, appName) ***REMOVED***
        return this.INTERNAL.initializeApp(options, appName);
  ***REMOVED***
    /**
     * Returns the FirebaseApp instance with the provided name (or the default FirebaseApp instance
     * if no name is provided).
     *
     * @param appName - Optional name of the FirebaseApp instance to return.
     * @returns The FirebaseApp instance which has the provided name.
     */
    app(appName) ***REMOVED***
        return this.INTERNAL.app(appName);
  ***REMOVED***
    /*
     * Returns an array of all the non-deleted FirebaseApp instances.
     */
    get apps() ***REMOVED***
        return this.INTERNAL.apps;
  ***REMOVED***
    ensureApp(app) ***REMOVED***
        if (typeof app === 'undefined') ***REMOVED***
            app = this.app();
      ***REMOVED***
        return app;
  ***REMOVED***
}
exports.FirebaseNamespace = FirebaseNamespace;
/**
 * In order to maintain backward compatibility, we instantiate a default namespace instance in
 * this module, and delegate all app lifecycle operations to it. In a future implementation where
 * the old admin namespace is no longer supported, we should remove this.
 *
 * @internal
 */
exports.defaultNamespace = new FirebaseNamespace(lifecycle_1.defaultAppStore);
function extendApp(app) ***REMOVED***
    const result = app;
    if (result.__extended) ***REMOVED***
        return result;
  ***REMOVED***
    result.auth = () => ***REMOVED***
        const fn = require('../auth/index').getAuth;
        return fn(app);
  ***REMOVED***;
    result.appCheck = () => ***REMOVED***
        const fn = require('../app-check/index').getAppCheck;
        return fn(app);
  ***REMOVED***;
    result.database = (url) => ***REMOVED***
        const fn = require('../database/index').getDatabaseWithUrl;
        return fn(url, app);
  ***REMOVED***;
    result.messaging = () => ***REMOVED***
        const fn = require('../messaging/index').getMessaging;
        return fn(app);
  ***REMOVED***;
    result.storage = () => ***REMOVED***
        const fn = require('../storage/index').getStorage;
        return fn(app);
  ***REMOVED***;
    result.firestore = () => ***REMOVED***
        const fn = require('../firestore/index').getFirestore;
        return fn(app);
  ***REMOVED***;
    result.instanceId = () => ***REMOVED***
        const fn = require('../instance-id/index').getInstanceId;
        return fn(app);
  ***REMOVED***;
    result.installations = () => ***REMOVED***
        const fn = require('../installations/index').getInstallations;
        return fn(app);
  ***REMOVED***;
    result.machineLearning = () => ***REMOVED***
        const fn = require('../machine-learning/index').getMachineLearning;
        return fn(app);
  ***REMOVED***;
    result.projectManagement = () => ***REMOVED***
        const fn = require('../project-management/index').getProjectManagement;
        return fn(app);
  ***REMOVED***;
    result.securityRules = () => ***REMOVED***
        const fn = require('../security-rules/index').getSecurityRules;
        return fn(app);
  ***REMOVED***;
    result.remoteConfig = () => ***REMOVED***
        const fn = require('../remote-config/index').getRemoteConfig;
        return fn(app);
  ***REMOVED***;
    result.__extended = true;
    return result;
}
