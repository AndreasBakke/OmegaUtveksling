'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) ***REMOVED*** try ***REMOVED*** var info = gen[key](arg); var value = info.value; } catch (error) ***REMOVED*** reject(error); return; } if (info.done) ***REMOVED*** resolve(value); } else ***REMOVED*** Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) ***REMOVED*** return function () ***REMOVED*** var self = this, args = arguments; return new Promise(function (resolve, reject) ***REMOVED*** var gen = fn.apply(self, args); function _next(value) ***REMOVED*** asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) ***REMOVED*** asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) ***REMOVED*** var keys = Object.keys(object); if (Object.getOwnPropertySymbols) ***REMOVED*** var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) ***REMOVED*** return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) ***REMOVED*** for (var i = 1; i < arguments.length; i++) ***REMOVED*** var source = arguments[i] != null ? arguments[i] : ***REMOVED***}; if (i % 2) ***REMOVED*** ownKeys(Object(source), true).forEach(function (key) ***REMOVED*** _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) ***REMOVED*** Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else ***REMOVED*** ownKeys(Object(source)).forEach(function (key) ***REMOVED*** Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) ***REMOVED*** if (key in obj) ***REMOVED*** Object.defineProperty(obj, key, ***REMOVED*** value: value, enumerable: true, configurable: true, writable: true }); } else ***REMOVED*** obj[key] = value; } return obj; }

var ERR_INVALID_ARG_TYPE = require('../../../errors').codes.ERR_INVALID_ARG_TYPE;

function from(Readable, iterable, opts) ***REMOVED***
  var iterator;

  if (iterable && typeof iterable.next === 'function') ***REMOVED***
    iterator = iterable;
***REMOVED*** else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable);

  var readable = new Readable(_objectSpread(***REMOVED***
    objectMode: true
***REMOVED***, opts)); // Reading boolean to protect against _read
  // being called before last iteration completion.

  var reading = false;

  readable._read = function () ***REMOVED***
    if (!reading) ***REMOVED***
      reading = true;
      next();
  ***REMOVED***
***REMOVED***;

  function next() ***REMOVED***
    return _next2.apply(this, arguments);
***REMOVED***

  function _next2() ***REMOVED***
    _next2 = _asyncToGenerator(function* () ***REMOVED***
      try ***REMOVED***
        var _ref = yield iterator.next(),
            value = _ref.value,
            done = _ref.done;

        if (done) ***REMOVED***
          readable.push(null);
      ***REMOVED*** else if (readable.push((yield value))) ***REMOVED***
          next();
      ***REMOVED*** else ***REMOVED***
          reading = false;
      ***REMOVED***
    ***REMOVED*** catch (err) ***REMOVED***
        readable.destroy(err);
    ***REMOVED***
  ***REMOVED***);
    return _next2.apply(this, arguments);
***REMOVED***

  return readable;
}

module.exports = from;