'use strict';

module.exports = function (obj) ***REMOVED***
	if (typeof obj === 'string') ***REMOVED*** return camelCase(obj); }
	return walk(obj);
};

function walk(obj) ***REMOVED***
	if (!obj || typeof obj !== 'object') ***REMOVED*** return obj; }
	if (isDate(obj) || isRegex(obj)) ***REMOVED*** return obj; }
	if (isArray(obj)) ***REMOVED*** return map(obj, walk); }
	return reduce(objectKeys(obj), function (acc, key) ***REMOVED***
		var camel = camelCase(key);
		acc[camel] = walk(obj[key]);
		return acc;
	}, ***REMOVED***});
}

function camelCase(str) ***REMOVED***
	return str.replace(/[_.-](\w|$)/g, function (_, x) ***REMOVED***
		return x.toUpperCase();
	});
}

var isArray = Array.isArray || function (obj) ***REMOVED***
	return Object.prototype.toString.call(obj) === '[object Array]';
};

var isDate = function (obj) ***REMOVED***
	return Object.prototype.toString.call(obj) === '[object Date]';
};

var isRegex = function (obj) ***REMOVED***
	return Object.prototype.toString.call(obj) === '[object RegExp]';
};

var has = Object.prototype.hasOwnProperty;
var objectKeys = Object.keys || function (obj) ***REMOVED***
	var keys = [];
	for (var key in obj) ***REMOVED***
		if (has.call(obj, key)) ***REMOVED*** keys.push(key); }
	}
	return keys;
};

function map(xs, f) ***REMOVED***
	if (xs.map) ***REMOVED*** return xs.map(f); }
	var res = [];
	for (var i = 0; i < xs.length; i++) ***REMOVED***
		res.push(f(xs[i], i));
	}
	return res;
}

function reduce(xs, f, acc) ***REMOVED***
	if (xs.reduce) ***REMOVED*** return xs.reduce(f, acc); }
	for (var i = 0; i < xs.length; i++) ***REMOVED***
		acc = f(acc, xs[i], i);
	}
	return acc;
}
