import ***REMOVED*** Metadata } from './nodejs-common';
import ***REMOVED*** Bucket } from './bucket';
export interface GetPolicyOptions ***REMOVED***
    userProject?: string;
    requestedPolicyVersion?: number;
}
export type GetPolicyResponse = [Policy, Metadata];
/**
 * @callback GetPolicyCallback
 * @param ***REMOVED***?Error} err Request error, if any.
 * @param ***REMOVED***object} acl The policy.
 * @param ***REMOVED***object} apiResponse The full API response.
 */
export interface GetPolicyCallback ***REMOVED***
    (err?: Error | null, acl?: Policy, apiResponse?: Metadata): void;
}
/**
 * @typedef ***REMOVED***object} SetPolicyOptions
 * @param ***REMOVED***string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface SetPolicyOptions ***REMOVED***
    userProject?: string;
}
/**
 * @typedef ***REMOVED***array} SetPolicyResponse
 * @property ***REMOVED***object} 0 The policy.
 * @property ***REMOVED***object} 1 The full API response.
 */
export type SetPolicyResponse = [Policy, Metadata];
/**
 * @callback SetPolicyCallback
 * @param ***REMOVED***?Error} err Request error, if any.
 * @param ***REMOVED***object} acl The policy.
 * @param ***REMOVED***object} apiResponse The full API response.
 */
export interface SetPolicyCallback ***REMOVED***
    (err?: Error | null, acl?: Policy, apiResponse?: object): void;
}
export interface Policy ***REMOVED***
    bindings: PolicyBinding[];
    version?: number;
    etag?: string;
}
export interface PolicyBinding ***REMOVED***
    role: string;
    members: string[];
    condition?: Expr;
}
export interface Expr ***REMOVED***
    title?: string;
    description?: string;
    expression: string;
}
/**
 * @typedef ***REMOVED***array} TestIamPermissionsResponse
 * @property ***REMOVED***object} 0 A subset of permissions that the caller is allowed.
 * @property ***REMOVED***object} 1 The full API response.
 */
export type TestIamPermissionsResponse = [***REMOVED***
    [key: string]: boolean;
}, Metadata];
/**
 * @callback TestIamPermissionsCallback
 * @param ***REMOVED***?Error} err Request error, if any.
 * @param ***REMOVED***object} acl A subset of permissions that the caller is allowed.
 * @param ***REMOVED***object} apiResponse The full API response.
 */
export interface TestIamPermissionsCallback ***REMOVED***
    (err?: Error | null, acl?: ***REMOVED***
        [key: string]: boolean;
  ***REMOVED*** | null, apiResponse?: Metadata): void;
}
/**
 * @typedef ***REMOVED***object} TestIamPermissionsOptions Configuration options for Iam#testPermissions().
 * @param ***REMOVED***string} [userProject] The ID of the project which will be
 *     billed for the request.
 */
export interface TestIamPermissionsOptions ***REMOVED***
    userProject?: string;
}
export declare enum IAMExceptionMessages ***REMOVED***
    POLICY_OBJECT_REQUIRED = "A policy object is required.",
    PERMISSIONS_REQUIRED = "Permissions are required."
}
/**
 * Get and set IAM policies for your Cloud Storage bucket.
 *
 * See ***REMOVED***@link https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management| Cloud Storage IAM Management}
 * See ***REMOVED***@link https://cloud.google.com/iam/docs/granting-changing-revoking-access| Granting, Changing, and Revoking Access}
 * See ***REMOVED***@link https://cloud.google.com/iam/docs/understanding-roles| IAM Roles}
 *
 * @constructor Iam
 *
 * @param ***REMOVED***Bucket} bucket The parent instance.
 * @example
 * ```
 * const ***REMOVED***Storage} = require('@google-cloud/storage');
 * const storage = new Storage();
 * const bucket = storage.bucket('my-bucket');
 * // bucket.iam
 * ```
 */
declare class Iam ***REMOVED***
    private request_;
    private resourceId_;
    constructor(bucket: Bucket);
    getPolicy(options?: GetPolicyOptions): Promise<GetPolicyResponse>;
    getPolicy(options: GetPolicyOptions, callback: GetPolicyCallback): void;
    getPolicy(callback: GetPolicyCallback): void;
    setPolicy(policy: Policy, options?: SetPolicyOptions): Promise<SetPolicyResponse>;
    setPolicy(policy: Policy, callback: SetPolicyCallback): void;
    setPolicy(policy: Policy, options: SetPolicyOptions, callback: SetPolicyCallback): void;
    testPermissions(permissions: string | string[], options?: TestIamPermissionsOptions): Promise<TestIamPermissionsResponse>;
    testPermissions(permissions: string | string[], callback: TestIamPermissionsCallback): void;
    testPermissions(permissions: string | string[], options: TestIamPermissionsOptions, callback: TestIamPermissionsCallback): void;
}
export ***REMOVED*** Iam };
