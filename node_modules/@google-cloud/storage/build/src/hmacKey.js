"use strict";
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.HmacKey = void 0;
const nodejs_common_1 = require("./nodejs-common");
const storage_1 = require("./storage");
const promisify_1 = require("@google-cloud/promisify");
/**
 * The API-formatted resource description of the HMAC key.
 *
 * Note: This is not guaranteed to be up-to-date when accessed. To get the
 * latest record, call the `getMetadata()` method.
 *
 * @name HmacKey#metadata
 * @type ***REMOVED***object}
 */
/**
 * An HmacKey object contains metadata of an HMAC key created from a
 * service account through the ***REMOVED***@link Storage} client using
 * ***REMOVED***@link Storage#createHmacKey}.
 *
 * See ***REMOVED***@link https://cloud.google.com/storage/docs/authentication/hmackeys| HMAC keys documentation}
 *
 * @class
 */
class HmacKey extends nodejs_common_1.ServiceObject ***REMOVED***
    /**
     * @typedef ***REMOVED***object} HmacKeyOptions
     * @property ***REMOVED***string} [projectId] The project ID of the project that owns
     *     the service account of the requested HMAC key. If not provided,
     *     the project ID used to instantiate the Storage client will be used.
     */
    /**
     * Constructs an HmacKey object.
     *
     * Note: this only create a local reference to an HMAC key, to create
     * an HMAC key, use ***REMOVED***@link Storage#createHmacKey}.
     *
     * @param ***REMOVED***Storage} storage The Storage instance this HMAC key is
     *     attached to.
     * @param ***REMOVED***string} accessId The unique accessId for this HMAC key.
     * @param ***REMOVED***HmacKeyOptions} options Constructor configurations.
     * @example
     * ```
     * const ***REMOVED***Storage} = require('@google-cloud/storage');
     * const storage = new Storage();
     * const hmacKey = storage.hmacKey('access-id');
     * ```
     */
    constructor(storage, accessId, options) ***REMOVED***
        const methods = ***REMOVED***
            /**
             * @typedef ***REMOVED***object} DeleteHmacKeyOptions
             * @property ***REMOVED***string} [userProject] This parameter is currently ignored.
             */
            /**
             * @typedef ***REMOVED***array} DeleteHmacKeyResponse
             * @property ***REMOVED***object} 0 The full API response.
             */
            /**
             * @callback DeleteHmacKeyCallback
             * @param ***REMOVED***?Error} err Request error, if any.
             * @param ***REMOVED***object} apiResponse The full API response.
             */
            /**
             * Deletes an HMAC key.
             * Key state must be set to `INACTIVE` prior to deletion.
             * Caution: HMAC keys cannot be recovered once you delete them.
             *
             * The authenticated user must have `storage.hmacKeys.delete` permission for the project in which the key exists.
             *
             * @method HmacKey#delete
             * @param ***REMOVED***DeleteHmacKeyOptions} [options] Configuration options.
             * @param ***REMOVED***DeleteHmacKeyCallback} [callback] Callback function.
             * @returns ***REMOVED***Promise<DeleteHmacKeyResponse>}
             *
             * @example
             * ```
             * const ***REMOVED***Storage} = require('@google-cloud/storage');
             * const storage = new Storage();
             *
             * //-
             * // Delete HMAC key after making the key inactive.
             * //-
             * const hmacKey = storage.hmacKey('ACCESS_ID');
             * hmacKey.setMetadata(***REMOVED***state: 'INACTIVE'}, (err, hmacKeyMetadata) => ***REMOVED***
             *     if (err) ***REMOVED***
             *       // The request was an error.
             *       console.error(err);
             *       return;
             *   ***REMOVED***
             *     hmacKey.delete((err) => ***REMOVED***
             *       if (err) ***REMOVED***
             *         console.error(err);
             *         return;
             *     ***REMOVED***
             *       // The HMAC key is deleted.
             *   ***REMOVED***);
             * ***REMOVED***);
             *
             * //-
             * // If the callback is omitted, a promise is returned.
             * //-
             * const hmacKey = storage.hmacKey('ACCESS_ID');
             * hmacKey
             *   .setMetadata(***REMOVED***state: 'INACTIVE'})
             *   .then(() => ***REMOVED***
             *     return hmacKey.delete();
             * ***REMOVED***);
             * ```
             */
            delete: true,
            /**
             * @callback GetHmacKeyCallback
             * @param ***REMOVED***?Error} err Request error, if any.
             * @param ***REMOVED***HmacKey} hmacKey this ***REMOVED***@link HmacKey} instance.
             * @param ***REMOVED***object} apiResponse The full API response.
             */
            /**
             * @typedef ***REMOVED***array} GetHmacKeyResponse
             * @property ***REMOVED***HmacKey} 0 This ***REMOVED***@link HmacKey} instance.
             * @property ***REMOVED***object} 1 The full API response.
             */
            /**
             * @typedef ***REMOVED***object} GetHmacKeyOptions
             * @property ***REMOVED***string} [userProject] This parameter is currently ignored.
             */
            /**
             * Retrieves and populate an HMAC key's metadata, and return
             * this ***REMOVED***@link HmacKey} instance.
             *
             * HmacKey.get() does not give the HMAC key secret, as
             * it is only returned on creation.
             *
             * The authenticated user must have `storage.hmacKeys.get` permission
             * for the project in which the key exists.
             *
             * @method HmacKey#get
             * @param ***REMOVED***GetHmacKeyOptions} [options] Configuration options.
             * @param ***REMOVED***GetHmacKeyCallback} [callback] Callback function.
             * @returns ***REMOVED***Promise<GetHmacKeyResponse>}
             *
             * @example
             * ```
             * const ***REMOVED***Storage} = require('@google-cloud/storage');
             * const storage = new Storage();
             *
             * //-
             * // Get the HmacKey's Metadata.
             * //-
             * storage.hmacKey('ACCESS_ID')
             *   .get((err, hmacKey) => ***REMOVED***
             *     if (err) ***REMOVED***
             *       // The request was an error.
             *       console.error(err);
             *       return;
             *   ***REMOVED***
             *     // do something with the returned HmacKey object.
             * ***REMOVED***);
             *
             * //-
             * // If the callback is omitted, a promise is returned.
             * //-
             * storage.hmacKey('ACCESS_ID')
             *   .get()
             *   .then((data) => ***REMOVED***
             *     const hmacKey = data[0];
             * ***REMOVED***);
             * ```
             */
            get: true,
            /**
             * @typedef ***REMOVED***object} GetHmacKeyMetadataOptions
             * @property ***REMOVED***string} [userProject] This parameter is currently ignored.
             */
            /**
             * Retrieves and populate an HMAC key's metadata, and return
             * the HMAC key's metadata as an object.
             *
             * HmacKey.getMetadata() does not give the HMAC key secret, as
             * it is only returned on creation.
             *
             * The authenticated user must have `storage.hmacKeys.get` permission
             * for the project in which the key exists.
             *
             * @method HmacKey#getMetadata
             * @param ***REMOVED***GetHmacKeyMetadataOptions} [options] Configuration options.
             * @param ***REMOVED***HmacKeyMetadataCallback} [callback] Callback function.
             * @returns ***REMOVED***Promise<HmacKeyMetadataResponse>}
             *
             * @example
             * ```
             * const ***REMOVED***Storage} = require('@google-cloud/storage');
             * const storage = new Storage();
             *
             * //-
             * // Get the HmacKey's metadata and populate to the metadata property.
             * //-
             * storage.hmacKey('ACCESS_ID')
             *   .getMetadata((err, hmacKeyMetadata) => ***REMOVED***
             *     if (err) ***REMOVED***
             *       // The request was an error.
             *       console.error(err);
             *       return;
             *   ***REMOVED***
             *     console.log(hmacKeyMetadata);
             * ***REMOVED***);
             *
             * //-
             * // If the callback is omitted, a promise is returned.
             * //-
             * storage.hmacKey('ACCESS_ID')
             *   .getMetadata()
             *   .then((data) => ***REMOVED***
             *     const hmacKeyMetadata = data[0];
             *     console.log(hmacKeyMetadata);
             * ***REMOVED***);
             * ```
             */
            getMetadata: true,
            /**
             * @typedef ***REMOVED***object} SetHmacKeyMetadata Subset of ***REMOVED***@link HmacKeyMetadata} to update.
             * @property ***REMOVED***string} state New state of the HmacKey. Either 'ACTIVE' or 'INACTIVE'.
             * @property ***REMOVED***string} [etag] Include an etag from a previous get HMAC key request
             *    to perform safe read-modify-write.
             */
            /**
             * @typedef ***REMOVED***object} SetHmacKeyMetadataOptions
             * @property ***REMOVED***string} [userProject] This parameter is currently ignored.
             */
            /**
             * @callback HmacKeyMetadataCallback
             * @param ***REMOVED***?Error} err Request error, if any.
             * @param ***REMOVED***HmacKeyMetadata} metadata The updated ***REMOVED***@link HmacKeyMetadata} object.
             * @param ***REMOVED***object} apiResponse The full API response.
             */
            /**
             * @typedef ***REMOVED***array} HmacKeyMetadataResponse
             * @property ***REMOVED***HmacKeyMetadata} 0 The updated ***REMOVED***@link HmacKeyMetadata} object.
             * @property ***REMOVED***object} 1 The full API response.
             */
            /**
             * Updates the state of an HMAC key. See ***REMOVED***@link SetHmacKeyMetadata} for
             * valid states.
             *
             * @method HmacKey#setMetadata
             * @param ***REMOVED***SetHmacKeyMetadata} metadata The new metadata.
             * @param ***REMOVED***SetHmacKeyMetadataOptions} [options] Configuration options.
             * @param ***REMOVED***HmacKeyMetadataCallback} [callback] Callback function.
             * @returns ***REMOVED***Promise<HmacKeyMetadataResponse>}
             *
             * @example
             * ```
             * const ***REMOVED***Storage} = require('@google-cloud/storage');
             * const storage = new Storage();
             *
             * const metadata = ***REMOVED***
             *   state: 'INACTIVE',
             * };
             *
             * storage.hmacKey('ACCESS_ID')
             *   .setMetadata(metadata, (err, hmacKeyMetadata) => ***REMOVED***
             *     if (err) ***REMOVED***
             *       // The request was an error.
             *       console.error(err);
             *       return;
             *   ***REMOVED***
             *     console.log(hmacKeyMetadata);
             * ***REMOVED***);
             *
             * //-
             * // If the callback is omitted, a promise is returned.
             * //-
             * storage.hmacKey('ACCESS_ID')
             *   .setMetadata(metadata)
             *   .then((data) => ***REMOVED***
             *     const hmacKeyMetadata = data[0];
             *     console.log(hmacKeyMetadata);
             * ***REMOVED***);
             * ```
             */
            setMetadata: ***REMOVED***
                reqOpts: ***REMOVED***
                    method: 'PUT',
              ***REMOVED***,
          ***REMOVED***,
      ***REMOVED***;
        const projectId = (options && options.projectId) || storage.projectId;
        super(***REMOVED***
            parent: storage,
            id: accessId,
            baseUrl: `/projects/$***REMOVED***projectId}/hmacKeys`,
            methods,
      ***REMOVED***);
        this.storage = storage;
        this.instanceRetryValue = storage.retryOptions.autoRetry;
  ***REMOVED***
    setMetadata(metadata, optionsOrCallback, cb) ***REMOVED***
        // ETag preconditions are not currently supported. Retries should be disabled if the idempotency strategy is not set to RetryAlways
        if (this.storage.retryOptions.idempotencyStrategy !==
            storage_1.IdempotencyStrategy.RetryAlways) ***REMOVED***
            this.storage.retryOptions.autoRetry = false;
      ***REMOVED***
        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : ***REMOVED***};
        cb =
            typeof optionsOrCallback === 'function'
                ? optionsOrCallback
                : cb;
        super
            .setMetadata(metadata, options)
            .then(resp => cb(null, ...resp))
            .catch(cb)
            .finally(() => ***REMOVED***
            this.storage.retryOptions.autoRetry = this.instanceRetryValue;
      ***REMOVED***);
  ***REMOVED***
}
exports.HmacKey = HmacKey;
/*! Developer Documentation
 *
 * All async methods (except for streams) will return a Promise in the event
 * that a callback is omitted.
 */
(0, promisify_1.promisifyAll)(HmacKey);
//# sourceMappingURL=hmacKey.js.map