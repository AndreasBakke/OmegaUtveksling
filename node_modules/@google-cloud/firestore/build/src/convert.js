"use strict";
/*!
 * Copyright 2019 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.fieldsFromJson = exports.valueFromJson = exports.detectValueType = exports.timestampFromJson = void 0;
const validate_1 = require("./validate");
/*!
 * @module firestore/convert
 * @private
 * @internal
 *
 * This module contains utility functions to convert
 * `firestore.v1.Documents` from Proto3 JSON to their equivalent
 * representation in Protobuf JS. Protobuf JS is the only encoding supported by
 * this client, and dependencies that use Proto3 JSON (such as the Google Cloud
 * Functions SDK) are supported through this conversion and its usage in
 * ***REMOVED***@see Firestore#snapshot_}.
 */
/**
 * Converts an ISO 8601 or google.protobuf.Timestamp proto into Protobuf JS.
 *
 * @private
 * @internal
 * @param timestampValue The value to convert.
 * @param argumentName The argument name to use in the error message if the
 * conversion fails. If omitted, 'timestampValue' is used.
 * @return The value as expected by Protobuf JS or undefined if no input was
 * provided.
 */
function timestampFromJson(timestampValue, argumentName) ***REMOVED***
    let timestampProto = ***REMOVED***};
    if (typeof timestampValue === 'string') ***REMOVED***
        const date = new Date(timestampValue);
        const seconds = Math.floor(date.getTime() / 1000);
        let nanos = 0;
        if (timestampValue.length > 20) ***REMOVED***
            const nanoString = timestampValue.substring(20, timestampValue.length - 1);
            const trailingZeroes = 9 - nanoString.length;
            nanos = Number(nanoString) * Math.pow(10, trailingZeroes);
      ***REMOVED***
        if (isNaN(seconds) || isNaN(nanos)) ***REMOVED***
            argumentName = argumentName || 'timestampValue';
            throw new Error(`Specify a valid ISO 8601 timestamp for "$***REMOVED***argumentName}".`);
      ***REMOVED***
        timestampProto = ***REMOVED***
            seconds: seconds || undefined,
            nanos: nanos || undefined,
      ***REMOVED***;
  ***REMOVED***
    else if (timestampValue !== undefined) ***REMOVED***
        (0, validate_1.validateObject)('timestampValue', timestampValue);
        timestampProto = ***REMOVED***
            seconds: timestampValue.seconds || undefined,
            nanos: timestampValue.nanos || undefined,
      ***REMOVED***;
  ***REMOVED***
    return timestampProto;
}
exports.timestampFromJson = timestampFromJson;
/**
 * Converts a Proto3 JSON 'bytesValue' field into Protobuf JS.
 *
 * @private
 * @internal
 * @param bytesValue The value to convert.
 * @return The value as expected by Protobuf JS.
 */
function bytesFromJson(bytesValue) ***REMOVED***
    if (typeof bytesValue === 'string') ***REMOVED***
        return Buffer.from(bytesValue, 'base64');
  ***REMOVED***
    else ***REMOVED***
        return bytesValue;
  ***REMOVED***
}
/**
 * Detects 'valueType' from a Proto3 JSON `firestore.v1.Value` proto.
 *
 * @private
 * @internal
 * @param proto The `firestore.v1.Value` proto.
 * @return The string value for 'valueType'.
 */
function detectValueType(proto) ***REMOVED***
    if (proto.valueType) ***REMOVED***
        return proto.valueType;
  ***REMOVED***
    const detectedValues = [];
    if (proto.stringValue !== undefined) ***REMOVED***
        detectedValues.push('stringValue');
  ***REMOVED***
    if (proto.booleanValue !== undefined) ***REMOVED***
        detectedValues.push('booleanValue');
  ***REMOVED***
    if (proto.integerValue !== undefined) ***REMOVED***
        detectedValues.push('integerValue');
  ***REMOVED***
    if (proto.doubleValue !== undefined) ***REMOVED***
        detectedValues.push('doubleValue');
  ***REMOVED***
    if (proto.timestampValue !== undefined) ***REMOVED***
        detectedValues.push('timestampValue');
  ***REMOVED***
    if (proto.referenceValue !== undefined) ***REMOVED***
        detectedValues.push('referenceValue');
  ***REMOVED***
    if (proto.arrayValue !== undefined) ***REMOVED***
        detectedValues.push('arrayValue');
  ***REMOVED***
    if (proto.nullValue !== undefined) ***REMOVED***
        detectedValues.push('nullValue');
  ***REMOVED***
    if (proto.mapValue !== undefined) ***REMOVED***
        detectedValues.push('mapValue');
  ***REMOVED***
    if (proto.geoPointValue !== undefined) ***REMOVED***
        detectedValues.push('geoPointValue');
  ***REMOVED***
    if (proto.bytesValue !== undefined) ***REMOVED***
        detectedValues.push('bytesValue');
  ***REMOVED***
    if (detectedValues.length !== 1) ***REMOVED***
        throw new Error(`Unable to infer type value from '$***REMOVED***JSON.stringify(proto)}'.`);
  ***REMOVED***
    return detectedValues[0];
}
exports.detectValueType = detectValueType;
/**
 * Converts a `firestore.v1.Value` in Proto3 JSON encoding into the
 * Protobuf JS format expected by this client.
 *
 * @private
 * @internal
 * @param fieldValue The `firestore.v1.Value` in Proto3 JSON format.
 * @return The `firestore.v1.Value` in Protobuf JS format.
 */
function valueFromJson(fieldValue) ***REMOVED***
    const valueType = detectValueType(fieldValue);
    switch (valueType) ***REMOVED***
        case 'timestampValue':
            return ***REMOVED***
                timestampValue: timestampFromJson(fieldValue.timestampValue),
          ***REMOVED***;
        case 'bytesValue':
            return ***REMOVED***
                bytesValue: bytesFromJson(fieldValue.bytesValue),
          ***REMOVED***;
        case 'doubleValue':
            return ***REMOVED***
                doubleValue: Number(fieldValue.doubleValue),
          ***REMOVED***;
        case 'arrayValue': ***REMOVED***
            const arrayValue = [];
            if (Array.isArray(fieldValue.arrayValue.values)) ***REMOVED***
                for (const value of fieldValue.arrayValue.values) ***REMOVED***
                    arrayValue.push(valueFromJson(value));
              ***REMOVED***
          ***REMOVED***
            return ***REMOVED***
                arrayValue: ***REMOVED***
                    values: arrayValue,
              ***REMOVED***,
          ***REMOVED***;
      ***REMOVED***
        case 'mapValue': ***REMOVED***
            const mapValue = ***REMOVED***};
            const fields = fieldValue.mapValue.fields;
            if (fields) ***REMOVED***
                for (const prop of Object.keys(fields)) ***REMOVED***
                    mapValue[prop] = valueFromJson(fieldValue.mapValue.fields[prop]);
              ***REMOVED***
          ***REMOVED***
            return ***REMOVED***
                mapValue: ***REMOVED***
                    fields: mapValue,
              ***REMOVED***,
          ***REMOVED***;
      ***REMOVED***
        default:
            return fieldValue;
  ***REMOVED***
}
exports.valueFromJson = valueFromJson;
/**
 * Converts a map of IValues in Proto3 JSON encoding into the Protobuf JS format
 * expected by this client. This conversion creates a copy of the underlying
 * fields.
 *
 * @private
 * @internal
 * @param document An object with IValues in Proto3 JSON format.
 * @return The object in Protobuf JS format.
 */
function fieldsFromJson(document) ***REMOVED***
    const result = ***REMOVED***};
    for (const prop of Object.keys(document)) ***REMOVED***
        result[prop] = valueFromJson(document[prop]);
  ***REMOVED***
    return result;
}
exports.fieldsFromJson = fieldsFromJson;
//# sourceMappingURL=convert.js.map