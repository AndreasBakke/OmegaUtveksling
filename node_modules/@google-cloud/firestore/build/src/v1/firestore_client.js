"use strict";
// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", ***REMOVED*** value: true });
exports.FirestoreClient = void 0;
const stream_1 = require("stream");
const jsonProtos = require("../../protos/v1.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/firestore_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./firestore_client_config.json");
const version = require('../../../package.json').version;
/**
 *  The Cloud Firestore service.
 *
 *  Cloud Firestore is a fast, fully managed, serverless, cloud-native NoSQL
 *  document database that simplifies storing, syncing, and querying data for
 *  your mobile, web, and IoT apps at global scale. Its client libraries provide
 *  live synchronization and offline support, while its security features and
 *  integrations with Firebase and Google Cloud Platform (GCP) accelerate
 *  building truly serverless apps.
 * @class
 * @memberof v1
 */
class FirestoreClient ***REMOVED***
    /**
     * Construct an instance of FirestoreClient.
     *
     * @param ***REMOVED***object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param ***REMOVED***object} [options.credentials] - Credentials object.
     * @param ***REMOVED***string} [options.credentials.client_email]
     * @param ***REMOVED***string} [options.credentials.private_key]
     * @param ***REMOVED***string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param ***REMOVED***string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param ***REMOVED***number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param ***REMOVED***string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     ***REMOVED***@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param ***REMOVED***string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param ***REMOVED***gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of ***REMOVED***@link gapicConfig}.
     * @param ***REMOVED***boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
     *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
     *     For more information, please check the
     *     ***REMOVED***@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param ***REMOVED***gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new FirestoreClient(***REMOVED***fallback: 'rest'}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) ***REMOVED***
        var _a, _b;
        this._terminated = false;
        this.descriptors = ***REMOVED***
            page: ***REMOVED***},
            stream: ***REMOVED***},
            longrunning: ***REMOVED***},
            batching: ***REMOVED***},
      ***REMOVED***;
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : ***REMOVED***};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign(***REMOVED*** servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) ***REMOVED***
            opts['scopes'] = staticMembers.scopes;
      ***REMOVED***
        // Load google-gax module synchronously if needed
        if (!gaxInstance) ***REMOVED***
            gaxInstance = require('google-gax');
      ***REMOVED***
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = staticMembers.servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) ***REMOVED***
            this.auth.defaultScopes = staticMembers.scopes;
      ***REMOVED***
        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);
        // Determine the client header string.
        const clientHeader = [`gax/$***REMOVED***this._gaxModule.version}`, `gapic/$***REMOVED***version}`];
        if (typeof process !== 'undefined' && 'versions' in process) ***REMOVED***
            clientHeader.push(`gl-node/$***REMOVED***process.versions.node}`);
      ***REMOVED***
        else ***REMOVED***
            clientHeader.push(`gl-web/$***REMOVED***this._gaxModule.version}`);
      ***REMOVED***
        if (!opts.fallback) ***REMOVED***
            clientHeader.push(`grpc/$***REMOVED***this._gaxGrpc.grpcVersion}`);
      ***REMOVED***
        else if (opts.fallback === 'rest') ***REMOVED***
            clientHeader.push(`rest/$***REMOVED***this._gaxGrpc.grpcVersion}`);
      ***REMOVED***
        if (opts.libName && opts.libVersion) ***REMOVED***
            clientHeader.push(`$***REMOVED***opts.libName}/$***REMOVED***opts.libVersion}`);
      ***REMOVED***
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = ***REMOVED***
            listDocuments: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'documents'),
            partitionQuery: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'partitions'),
            listCollectionIds: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'collectionIds'),
      ***REMOVED***;
        // Some of the methods on this service provide streaming responses.
        // Provide descriptors for these.
        this.descriptors.stream = ***REMOVED***
            batchGetDocuments: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, opts.fallback === 'rest'),
            runQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, opts.fallback === 'rest'),
            runAggregationQuery: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.SERVER_STREAMING, opts.fallback === 'rest'),
            write: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, opts.fallback === 'rest'),
            listen: new this._gaxModule.StreamDescriptor(this._gaxModule.StreamType.BIDI_STREAMING, opts.fallback === 'rest'),
      ***REMOVED***;
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.firestore.v1.Firestore', gapicConfig, opts.clientConfig || ***REMOVED***}, ***REMOVED*** 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = ***REMOVED***};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
  ***REMOVED***
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns ***REMOVED***Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() ***REMOVED***
        // If the client stub promise is already initialized, return immediately.
        if (this.firestoreStub) ***REMOVED***
            return this.firestoreStub;
      ***REMOVED***
        // Put together the "service stub" for
        // google.firestore.v1.Firestore.
        this.firestoreStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.firestore.v1.Firestore')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.firestore.v1.Firestore, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const firestoreStubMethods = [
            'getDocument',
            'listDocuments',
            'updateDocument',
            'deleteDocument',
            'batchGetDocuments',
            'beginTransaction',
            'commit',
            'rollback',
            'runQuery',
            'runAggregationQuery',
            'partitionQuery',
            'write',
            'listen',
            'listCollectionIds',
            'batchWrite',
            'createDocument',
        ];
        for (const methodName of firestoreStubMethods) ***REMOVED***
            const callPromise = this.firestoreStub.then(stub => (...args) => ***REMOVED***
                if (this._terminated) ***REMOVED***
                    if (methodName in this.descriptors.stream) ***REMOVED***
                        const stream = new stream_1.PassThrough();
                        setImmediate(() => ***REMOVED***
                            stream.emit('error', new this._gaxModule.GoogleError('The client has already been closed.'));
                      ***REMOVED***);
                        return stream;
                  ***REMOVED***
                    return Promise.reject('The client has already been closed.');
              ***REMOVED***
                const func = stub[methodName];
                return func.apply(stub, args);
          ***REMOVED***, (err) => () => ***REMOVED***
                throw err;
          ***REMOVED***);
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.stream[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
      ***REMOVED***
        return this.firestoreStub;
  ***REMOVED***
    /**
     * The DNS address for this API service.
     * @returns ***REMOVED***string} The DNS address for this service.
     */
    static get servicePath() ***REMOVED***
        return 'firestore.googleapis.com';
  ***REMOVED***
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns ***REMOVED***string} The DNS address for this service.
     */
    static get apiEndpoint() ***REMOVED***
        return 'firestore.googleapis.com';
  ***REMOVED***
    /**
     * The port for this API service.
     * @returns ***REMOVED***number} The default port for this service.
     */
    static get port() ***REMOVED***
        return 443;
  ***REMOVED***
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns ***REMOVED***string[]} List of default scopes.
     */
    static get scopes() ***REMOVED***
        return [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/datastore',
        ];
  ***REMOVED***
    /**
     * Return the project ID used by this class.
     * @returns ***REMOVED***Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) ***REMOVED***
        if (callback) ***REMOVED***
            this.auth.getProjectId(callback);
            return;
      ***REMOVED***
        return this.auth.getProjectId();
  ***REMOVED***
    getDocument(request, optionsOrCallback, callback) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.getDocument(request, options, callback);
  ***REMOVED***
    updateDocument(request, optionsOrCallback, callback) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                'document.name': (_a = request.document.name) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.updateDocument(request, options, callback);
  ***REMOVED***
    deleteDocument(request, optionsOrCallback, callback) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.deleteDocument(request, options, callback);
  ***REMOVED***
    beginTransaction(request, optionsOrCallback, callback) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.beginTransaction(request, options, callback);
  ***REMOVED***
    commit(request, optionsOrCallback, callback) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.commit(request, options, callback);
  ***REMOVED***
    rollback(request, optionsOrCallback, callback) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.rollback(request, options, callback);
  ***REMOVED***
    batchWrite(request, optionsOrCallback, callback) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.batchWrite(request, options, callback);
  ***REMOVED***
    createDocument(request, optionsOrCallback, callback) ***REMOVED***
        var _a, _b;
        request = request || ***REMOVED***};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.createDocument(request, options, callback);
  ***REMOVED***
    /**
     * Gets multiple documents.
     *
     * Documents returned by this method are not guaranteed to be returned in the
     * same order that they were requested.
     *
     * @param ***REMOVED***Object} request
     *   The request object that will be sent.
     * @param ***REMOVED***string} request.database
     *   Required. The database name. In the format:
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}`.
     * @param ***REMOVED***string[]} request.documents
     *   The names of the documents to retrieve. In the format:
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents/***REMOVED***document_path}`.
     *   The request will fail if any of the document is not a child resource of the
     *   given `database`. Duplicate names will be elided.
     * @param ***REMOVED***google.firestore.v1.DocumentMask} request.mask
     *   The fields to return. If not set, returns all fields.
     *
     *   If a document has a field that is not present in this mask, that field will
     *   not be returned in the response.
     * @param ***REMOVED***Buffer} request.transaction
     *   Reads documents in a transaction.
     * @param ***REMOVED***google.firestore.v1.TransactionOptions} request.newTransaction
     *   Starts a new transaction and reads the documents.
     *   Defaults to a read-only transaction.
     *   The new transaction ID will be returned as the first response in the
     *   stream.
     * @param ***REMOVED***google.protobuf.Timestamp} request.readTime
     *   Reads documents as they were at the given time.
     *   This may not be older than 270 seconds.
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Stream}
     *   An object stream which emits [BatchGetDocumentsResponse]***REMOVED***@link google.firestore.v1.BatchGetDocumentsResponse} on 'data' event.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firestore.batch_get_documents.js</caption>
     * region_tag:firestore_v1_generated_Firestore_BatchGetDocuments_async
     */
    batchGetDocuments(request, options) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                database: (_a = request.database) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.batchGetDocuments(request, options);
  ***REMOVED***
    /**
     * Runs a query.
     *
     * @param ***REMOVED***Object} request
     *   The request object that will be sent.
     * @param ***REMOVED***string} request.parent
     *   Required. The parent resource name. In the format:
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents` or
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents/***REMOVED***document_path}`.
     *   For example:
     *   `projects/my-project/databases/my-database/documents` or
     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
     * @param ***REMOVED***google.firestore.v1.StructuredQuery} request.structuredQuery
     *   A structured query.
     * @param ***REMOVED***Buffer} request.transaction
     *   Run the query within an already active transaction.
     *
     *   The value here is the opaque transaction ID to execute the query in.
     * @param ***REMOVED***google.firestore.v1.TransactionOptions} request.newTransaction
     *   Starts a new transaction and reads the documents.
     *   Defaults to a read-only transaction.
     *   The new transaction ID will be returned as the first response in the
     *   stream.
     * @param ***REMOVED***google.protobuf.Timestamp} request.readTime
     *   Reads documents as they were at the given time.
     *   This may not be older than 270 seconds.
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Stream}
     *   An object stream which emits [RunQueryResponse]***REMOVED***@link google.firestore.v1.RunQueryResponse} on 'data' event.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firestore.run_query.js</caption>
     * region_tag:firestore_v1_generated_Firestore_RunQuery_async
     */
    runQuery(request, options) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.runQuery(request, options);
  ***REMOVED***
    /**
     * Runs an aggregation query.
     *
     * Rather than producing ***REMOVED***@link google.firestore.v1.Document|Document} results like ***REMOVED***@link google.firestore.v1.Firestore.RunQuery|Firestore.RunQuery},
     * this API allows running an aggregation to produce a series of
     * ***REMOVED***@link google.firestore.v1.AggregationResult|AggregationResult} server-side.
     *
     * High-Level Example:
     *
     * ```
     * -- Return the number of documents in table given a filter.
     * SELECT COUNT(*) FROM ( SELECT * FROM k where a = true );
     * ```
     *
     * @param ***REMOVED***Object} request
     *   The request object that will be sent.
     * @param ***REMOVED***string} request.parent
     *   Required. The parent resource name. In the format:
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents` or
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents/***REMOVED***document_path}`.
     *   For example:
     *   `projects/my-project/databases/my-database/documents` or
     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
     * @param ***REMOVED***google.firestore.v1.StructuredAggregationQuery} request.structuredAggregationQuery
     *   An aggregation query.
     * @param ***REMOVED***Buffer} request.transaction
     *   Run the aggregation within an already active transaction.
     *
     *   The value here is the opaque transaction ID to execute the query in.
     * @param ***REMOVED***google.firestore.v1.TransactionOptions} request.newTransaction
     *   Starts a new transaction as part of the query, defaulting to read-only.
     *
     *   The new transaction ID will be returned as the first response in the
     *   stream.
     * @param ***REMOVED***google.protobuf.Timestamp} request.readTime
     *   Executes the query at the given timestamp.
     *
     *   Requires:
     *
     *   * Cannot be more than 270 seconds in the past.
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Stream}
     *   An object stream which emits [RunAggregationQueryResponse]***REMOVED***@link google.firestore.v1.RunAggregationQueryResponse} on 'data' event.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#server-streaming)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firestore.run_aggregation_query.js</caption>
     * region_tag:firestore_v1_generated_Firestore_RunAggregationQuery_async
     */
    runAggregationQuery(request, options) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.runAggregationQuery(request, options);
  ***REMOVED***
    /**
     * Streams batches of document updates and deletes, in order.
     *
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Stream}
     *   An object stream which is both readable and writable. It accepts objects
     *   representing [WriteRequest]***REMOVED***@link google.firestore.v1.WriteRequest} for write() method, and
     *   will emit objects representing [WriteResponse]***REMOVED***@link google.firestore.v1.WriteResponse} on 'data' event asynchronously.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firestore.write.js</caption>
     * region_tag:firestore_v1_generated_Firestore_Write_async
     */
    write(options) ***REMOVED***
        this.initialize();
        return this.innerApiCalls.write(null, options);
  ***REMOVED***
    /**
     * Listens to changes.
     *
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Stream}
     *   An object stream which is both readable and writable. It accepts objects
     *   representing [ListenRequest]***REMOVED***@link google.firestore.v1.ListenRequest} for write() method, and
     *   will emit objects representing [ListenResponse]***REMOVED***@link google.firestore.v1.ListenResponse} on 'data' event asynchronously.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firestore.listen.js</caption>
     * region_tag:firestore_v1_generated_Firestore_Listen_async
     */
    listen(options) ***REMOVED***
        this.initialize();
        return this.innerApiCalls.listen(null, options);
  ***REMOVED***
    listDocuments(request, optionsOrCallback, callback) ***REMOVED***
        var _a, _b;
        request = request || ***REMOVED***};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.listDocuments(request, options, callback);
  ***REMOVED***
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param ***REMOVED***Object} request
     *   The request object that will be sent.
     * @param ***REMOVED***string} request.parent
     *   Required. The parent resource name. In the format:
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents` or
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents/***REMOVED***document_path}`.
     *   For example:
     *   `projects/my-project/databases/my-database/documents` or
     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
     * @param ***REMOVED***string} request.collectionId
     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`
     *   or `messages`.
     * @param ***REMOVED***number} request.pageSize
     *   The maximum number of documents to return.
     * @param ***REMOVED***string} request.pageToken
     *   The `next_page_token` value returned from a previous List request, if any.
     * @param ***REMOVED***string} request.orderBy
     *   The order to sort results by. For example: `priority desc, name`.
     * @param ***REMOVED***google.firestore.v1.DocumentMask} request.mask
     *   The fields to return. If not set, returns all fields.
     *
     *   If a document has a field that is not present in this mask, that field
     *   will not be returned in the response.
     * @param ***REMOVED***Buffer} request.transaction
     *   Reads documents in a transaction.
     * @param ***REMOVED***google.protobuf.Timestamp} request.readTime
     *   Reads documents as they were at the given time.
     *   This may not be older than 270 seconds.
     * @param ***REMOVED***boolean} request.showMissing
     *   If the list should show missing documents. A missing document is a
     *   document that does not exist but has sub-documents. These documents will
     *   be returned with a key but will not have fields, ***REMOVED***@link google.firestore.v1.Document.create_time|Document.create_time},
     *   or ***REMOVED***@link google.firestore.v1.Document.update_time|Document.update_time} set.
     *
     *   Requests with `show_missing` may not specify `where` or
     *   `order_by`.
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Stream}
     *   An object stream which emits an object representing [Document]***REMOVED***@link google.firestore.v1.Document} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDocumentsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listDocumentsStream(request, options) ***REMOVED***
        var _a, _b;
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',
          ***REMOVED***);
        const defaultCallSettings = this._defaults['listDocuments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDocuments.createStream(this.innerApiCalls.listDocuments, request, callSettings);
  ***REMOVED***
    /**
     * Equivalent to `listDocuments`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param ***REMOVED***Object} request
     *   The request object that will be sent.
     * @param ***REMOVED***string} request.parent
     *   Required. The parent resource name. In the format:
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents` or
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents/***REMOVED***document_path}`.
     *   For example:
     *   `projects/my-project/databases/my-database/documents` or
     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
     * @param ***REMOVED***string} request.collectionId
     *   Required. The collection ID, relative to `parent`, to list. For example: `chatrooms`
     *   or `messages`.
     * @param ***REMOVED***number} request.pageSize
     *   The maximum number of documents to return.
     * @param ***REMOVED***string} request.pageToken
     *   The `next_page_token` value returned from a previous List request, if any.
     * @param ***REMOVED***string} request.orderBy
     *   The order to sort results by. For example: `priority desc, name`.
     * @param ***REMOVED***google.firestore.v1.DocumentMask} request.mask
     *   The fields to return. If not set, returns all fields.
     *
     *   If a document has a field that is not present in this mask, that field
     *   will not be returned in the response.
     * @param ***REMOVED***Buffer} request.transaction
     *   Reads documents in a transaction.
     * @param ***REMOVED***google.protobuf.Timestamp} request.readTime
     *   Reads documents as they were at the given time.
     *   This may not be older than 270 seconds.
     * @param ***REMOVED***boolean} request.showMissing
     *   If the list should show missing documents. A missing document is a
     *   document that does not exist but has sub-documents. These documents will
     *   be returned with a key but will not have fields, ***REMOVED***@link google.firestore.v1.Document.create_time|Document.create_time},
     *   or ***REMOVED***@link google.firestore.v1.Document.update_time|Document.update_time} set.
     *
     *   Requests with `show_missing` may not specify `where` or
     *   `order_by`.
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Document]***REMOVED***@link google.firestore.v1.Document}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firestore.list_documents.js</caption>
     * region_tag:firestore_v1_generated_Firestore_ListDocuments_async
     */
    listDocumentsAsync(request, options) ***REMOVED***
        var _a, _b;
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
                collection_id: (_b = request.collectionId) !== null && _b !== void 0 ? _b : '',
          ***REMOVED***);
        const defaultCallSettings = this._defaults['listDocuments'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listDocuments.asyncIterate(this.innerApiCalls['listDocuments'], request, callSettings);
  ***REMOVED***
    partitionQuery(request, optionsOrCallback, callback) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.partitionQuery(request, options, callback);
  ***REMOVED***
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param ***REMOVED***Object} request
     *   The request object that will be sent.
     * @param ***REMOVED***string} request.parent
     *   Required. The parent resource name. In the format:
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents`.
     *   Document resource names are not supported; only database resource names
     *   can be specified.
     * @param ***REMOVED***google.firestore.v1.StructuredQuery} request.structuredQuery
     *   A structured query.
     *   Query must specify collection with all descendants and be ordered by name
     *   ascending. Other filters, order bys, limits, offsets, and start/end
     *   cursors are not supported.
     * @param ***REMOVED***number} request.partitionCount
     *   The desired maximum number of partition points.
     *   The partitions may be returned across multiple pages of results.
     *   The number must be positive. The actual number of partitions
     *   returned may be fewer.
     *
     *   For example, this may be set to one fewer than the number of parallel
     *   queries to be run, or in running a data pipeline job, one fewer than the
     *   number of workers or compute instances available.
     * @param ***REMOVED***string} request.pageToken
     *   The `next_page_token` value returned from a previous call to
     *   PartitionQuery that may be used to get an additional set of results.
     *   There are no ordering guarantees between sets of results. Thus, using
     *   multiple sets of results will require merging the different result sets.
     *
     *   For example, two subsequent calls using a page_token may return:
     *
     *    * cursor B, cursor M, cursor Q
     *    * cursor A, cursor U, cursor W
     *
     *   To obtain a complete result set ordered with respect to the results of the
     *   query supplied to PartitionQuery, the results sets should be merged:
     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W
     * @param ***REMOVED***number} request.pageSize
     *   The maximum number of partitions to return in this call, subject to
     *   `partition_count`.
     *
     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call
     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`
     *   if more results exist. A second call to PartitionQuery will return up to
     *   2 partitions, to complete the total of 10 specified in `partition_count`.
     * @param ***REMOVED***google.protobuf.Timestamp} request.readTime
     *   Reads documents as they were at the given time.
     *   This may not be older than 270 seconds.
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Stream}
     *   An object stream which emits an object representing [Cursor]***REMOVED***@link google.firestore.v1.Cursor} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `partitionQueryAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    partitionQueryStream(request, options) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        const defaultCallSettings = this._defaults['partitionQuery'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.partitionQuery.createStream(this.innerApiCalls.partitionQuery, request, callSettings);
  ***REMOVED***
    /**
     * Equivalent to `partitionQuery`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param ***REMOVED***Object} request
     *   The request object that will be sent.
     * @param ***REMOVED***string} request.parent
     *   Required. The parent resource name. In the format:
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents`.
     *   Document resource names are not supported; only database resource names
     *   can be specified.
     * @param ***REMOVED***google.firestore.v1.StructuredQuery} request.structuredQuery
     *   A structured query.
     *   Query must specify collection with all descendants and be ordered by name
     *   ascending. Other filters, order bys, limits, offsets, and start/end
     *   cursors are not supported.
     * @param ***REMOVED***number} request.partitionCount
     *   The desired maximum number of partition points.
     *   The partitions may be returned across multiple pages of results.
     *   The number must be positive. The actual number of partitions
     *   returned may be fewer.
     *
     *   For example, this may be set to one fewer than the number of parallel
     *   queries to be run, or in running a data pipeline job, one fewer than the
     *   number of workers or compute instances available.
     * @param ***REMOVED***string} request.pageToken
     *   The `next_page_token` value returned from a previous call to
     *   PartitionQuery that may be used to get an additional set of results.
     *   There are no ordering guarantees between sets of results. Thus, using
     *   multiple sets of results will require merging the different result sets.
     *
     *   For example, two subsequent calls using a page_token may return:
     *
     *    * cursor B, cursor M, cursor Q
     *    * cursor A, cursor U, cursor W
     *
     *   To obtain a complete result set ordered with respect to the results of the
     *   query supplied to PartitionQuery, the results sets should be merged:
     *   cursor A, cursor B, cursor M, cursor Q, cursor U, cursor W
     * @param ***REMOVED***number} request.pageSize
     *   The maximum number of partitions to return in this call, subject to
     *   `partition_count`.
     *
     *   For example, if `partition_count` = 10 and `page_size` = 8, the first call
     *   to PartitionQuery will return up to 8 partitions and a `next_page_token`
     *   if more results exist. A second call to PartitionQuery will return up to
     *   2 partitions, to complete the total of 10 specified in `partition_count`.
     * @param ***REMOVED***google.protobuf.Timestamp} request.readTime
     *   Reads documents as they were at the given time.
     *   This may not be older than 270 seconds.
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Cursor]***REMOVED***@link google.firestore.v1.Cursor}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firestore.partition_query.js</caption>
     * region_tag:firestore_v1_generated_Firestore_PartitionQuery_async
     */
    partitionQueryAsync(request, options) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        const defaultCallSettings = this._defaults['partitionQuery'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.partitionQuery.asyncIterate(this.innerApiCalls['partitionQuery'], request, callSettings);
  ***REMOVED***
    listCollectionIds(request, optionsOrCallback, callback) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) ***REMOVED***
            callback = optionsOrCallback;
            options = ***REMOVED***};
      ***REMOVED***
        else ***REMOVED***
            options = optionsOrCallback;
      ***REMOVED***
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        this.initialize();
        return this.innerApiCalls.listCollectionIds(request, options, callback);
  ***REMOVED***
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param ***REMOVED***Object} request
     *   The request object that will be sent.
     * @param ***REMOVED***string} request.parent
     *   Required. The parent document. In the format:
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents/***REMOVED***document_path}`.
     *   For example:
     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
     * @param ***REMOVED***number} request.pageSize
     *   The maximum number of results to return.
     * @param ***REMOVED***string} request.pageToken
     *   A page token. Must be a value from
     *   ***REMOVED***@link google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.
     * @param ***REMOVED***google.protobuf.Timestamp} request.readTime
     *   Reads documents as they were at the given time.
     *   This may not be older than 270 seconds.
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Stream}
     *   An object stream which emits an object representing string on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCollectionIdsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listCollectionIdsStream(request, options) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        const defaultCallSettings = this._defaults['listCollectionIds'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCollectionIds.createStream(this.innerApiCalls.listCollectionIds, request, callSettings);
  ***REMOVED***
    /**
     * Equivalent to `listCollectionIds`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param ***REMOVED***Object} request
     *   The request object that will be sent.
     * @param ***REMOVED***string} request.parent
     *   Required. The parent document. In the format:
     *   `projects/***REMOVED***project_id}/databases/***REMOVED***database_id}/documents/***REMOVED***document_path}`.
     *   For example:
     *   `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
     * @param ***REMOVED***number} request.pageSize
     *   The maximum number of results to return.
     * @param ***REMOVED***string} request.pageToken
     *   A page token. Must be a value from
     *   ***REMOVED***@link google.firestore.v1.ListCollectionIdsResponse|ListCollectionIdsResponse}.
     * @param ***REMOVED***google.protobuf.Timestamp} request.readTime
     *   Reads documents as they were at the given time.
     *   This may not be older than 270 seconds.
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   string. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1/firestore.list_collection_ids.js</caption>
     * region_tag:firestore_v1_generated_Firestore_ListCollectionIds_async
     */
    listCollectionIdsAsync(request, options) ***REMOVED***
        var _a;
        request = request || ***REMOVED***};
        options = options || ***REMOVED***};
        options.otherArgs = options.otherArgs || ***REMOVED***};
        options.otherArgs.headers = options.otherArgs.headers || ***REMOVED***};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams(***REMOVED***
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
          ***REMOVED***);
        const defaultCallSettings = this._defaults['listCollectionIds'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listCollectionIds.asyncIterate(this.innerApiCalls['listCollectionIds'], request, callSettings);
  ***REMOVED***
    /**
     * Gets information about a location.
     *
     * @param ***REMOVED***Object} request
     *   The request object that will be sent.
     * @param ***REMOVED***string} request.name
     *   Resource name for the location.
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Location]***REMOVED***@link google.cloud.location.Location}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * ```
     * const [response] = await client.getLocation(request);
     * ```
     */
    getLocation(request, options, callback) ***REMOVED***
        return this.locationsClient.getLocation(request, options, callback);
  ***REMOVED***
    /**
     * Lists information about the supported locations for this service. Returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param ***REMOVED***Object} request
     *   The request object that will be sent.
     * @param ***REMOVED***string} request.name
     *   The resource that owns the locations collection, if applicable.
     * @param ***REMOVED***string} request.filter
     *   The standard list filter.
     * @param ***REMOVED***number} request.pageSize
     *   The standard list page size.
     * @param ***REMOVED***string} request.pageToken
     *   The standard list page token.
     * @param ***REMOVED***object} [options]
     *   Call options. See ***REMOVED***@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns ***REMOVED***Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Location]***REMOVED***@link google.cloud.location.Location}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * ```
     * const iterable = client.listLocationsAsync(request);
     * for await (const response of iterable) ***REMOVED***
     *   // process response
     * }
     * ```
     */
    listLocationsAsync(request, options) ***REMOVED***
        return this.locationsClient.listLocationsAsync(request, options);
  ***REMOVED***
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns ***REMOVED***Promise} A promise that resolves when the client is closed.
     */
    close() ***REMOVED***
        if (this.firestoreStub && !this._terminated) ***REMOVED***
            return this.firestoreStub.then(stub => ***REMOVED***
                this._terminated = true;
                stub.close();
                this.locationsClient.close();
          ***REMOVED***);
      ***REMOVED***
        return Promise.resolve();
  ***REMOVED***
}
exports.FirestoreClient = FirestoreClient;
//# sourceMappingURL=firestore_client.js.map