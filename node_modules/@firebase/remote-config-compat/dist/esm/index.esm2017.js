import firebase from '@firebase/app-compat';
import ***REMOVED*** Component } from '@firebase/component';
import ***REMOVED*** activate, ensureInitialized, fetchConfig, fetchAndActivate, getAll, getBoolean, getNumber, getString, getValue, setLogLevel, isSupported } from '@firebase/remote-config';

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class RemoteConfigCompatImpl ***REMOVED***
    constructor(app, _delegate) ***REMOVED***
        this.app = app;
        this._delegate = _delegate;
  ***REMOVED***
    get defaultConfig() ***REMOVED***
        return this._delegate.defaultConfig;
  ***REMOVED***
    set defaultConfig(value) ***REMOVED***
        this._delegate.defaultConfig = value;
  ***REMOVED***
    get fetchTimeMillis() ***REMOVED***
        return this._delegate.fetchTimeMillis;
  ***REMOVED***
    get lastFetchStatus() ***REMOVED***
        return this._delegate.lastFetchStatus;
  ***REMOVED***
    get settings() ***REMOVED***
        return this._delegate.settings;
  ***REMOVED***
    set settings(value) ***REMOVED***
        this._delegate.settings = value;
  ***REMOVED***
    activate() ***REMOVED***
        return activate(this._delegate);
  ***REMOVED***
    ensureInitialized() ***REMOVED***
        return ensureInitialized(this._delegate);
  ***REMOVED***
    /**
     * @throws a ***REMOVED***@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than
     * ***REMOVED***@link Settings.fetchTimeoutInSeconds} or
     * ***REMOVED***@link DEFAULT_FETCH_TIMEOUT_SECONDS}.
     */
    fetch() ***REMOVED***
        return fetchConfig(this._delegate);
  ***REMOVED***
    fetchAndActivate() ***REMOVED***
        return fetchAndActivate(this._delegate);
  ***REMOVED***
    getAll() ***REMOVED***
        return getAll(this._delegate);
  ***REMOVED***
    getBoolean(key) ***REMOVED***
        return getBoolean(this._delegate, key);
  ***REMOVED***
    getNumber(key) ***REMOVED***
        return getNumber(this._delegate, key);
  ***REMOVED***
    getString(key) ***REMOVED***
        return getString(this._delegate, key);
  ***REMOVED***
    getValue(key) ***REMOVED***
        return getValue(this._delegate, key);
  ***REMOVED***
    // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels
    // to differentiate 2p and 3p use-cases.
    setLogLevel(logLevel) ***REMOVED***
        setLogLevel(this._delegate, logLevel);
  ***REMOVED***
}

const name = "@firebase/remote-config-compat";
const version = "0.2.1";

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function registerRemoteConfigCompat(firebaseInstance) ***REMOVED***
    firebaseInstance.INTERNAL.registerComponent(new Component('remoteConfig-compat', remoteConfigFactory, "PUBLIC" /* ComponentType.PUBLIC */)
        .setMultipleInstances(true)
        .setServiceProps(***REMOVED*** isSupported }));
    firebaseInstance.registerVersion(name, version);
}
function remoteConfigFactory(container, ***REMOVED*** instanceIdentifier: namespace }) ***REMOVED***
    const app = container.getProvider('app-compat').getImmediate();
    // The following call will always succeed because rc `import ***REMOVED***...} from '@firebase/remote-config'`
    const remoteConfig = container.getProvider('remote-config').getImmediate(***REMOVED***
        identifier: namespace
  ***REMOVED***);
    return new RemoteConfigCompatImpl(app, remoteConfig);
}
registerRemoteConfigCompat(firebase);
//# sourceMappingURL=index.esm2017.js.map
