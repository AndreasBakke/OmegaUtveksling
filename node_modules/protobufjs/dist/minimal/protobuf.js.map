***REMOVED***"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/index-minimal","../src/reader.js","../src/reader_buffer.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/util/longbits.js","../src/util/minimal.js","../src/writer.js","../src/writer_buffer.js"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpxrajdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"protobuf.js","sourcesContent":["(function prelude(modules, cache, entries) ***REMOVED***\n\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\n    // sources through a conflict-free require shim and is again wrapped within an iife that\n    // provides a minification-friendly `undefined` var plus a global \"use strict\" directive\n    // so that minification can remove the directives of each module.\n\n    function $require(name) ***REMOVED***\n        var $module = cache[name];\n        if (!$module)\n            modules[name][0].call($module = cache[name] = ***REMOVED*** exports: ***REMOVED***} }, $require, $module, $module.exports);\n        return $module.exports;\n  ***REMOVED***\n\n    var protobuf = $require(entries[0]);\n\n    // Expose globally\n    protobuf.util.global.protobuf = protobuf;\n\n    // Be nice to AMD\n    if (typeof define === \"function\" && define.amd)\n        define([\"long\"], function(Long) ***REMOVED***\n            if (Long && Long.isLong) ***REMOVED***\n                protobuf.util.Long = Long;\n                protobuf.configure();\n          ***REMOVED***\n            return protobuf;\n      ***REMOVED***);\n\n    // Be nice to CommonJS\n    if (typeof module === \"object\" && module && module.exports)\n        module.exports = protobuf;\n\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by ***REMOVED***@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type ***REMOVED***function}\r\n * @param ***REMOVED***Error|null} error Error, if any\r\n * @param ***REMOVED***...*} params Additional arguments\r\n * @returns ***REMOVED***undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param ***REMOVED***asPromiseCallback} fn Function to call\r\n * @param ***REMOVED****} ctx Function context\r\n * @param ***REMOVED***...*} params Function arguments\r\n * @returns ***REMOVED***Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) ***REMOVED***\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) ***REMOVED***\r\n        params[offset] = function callback(err/*, varargs */) ***REMOVED***\r\n            if (pending) ***REMOVED***\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else ***REMOVED***\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n              ***REMOVED***\r\n          ***REMOVED***\r\n      ***REMOVED***;\r\n        try ***REMOVED***\r\n            fn.apply(ctx || null, params);\r\n      ***REMOVED*** catch (err) ***REMOVED***\r\n            if (pending) ***REMOVED***\r\n                pending = false;\r\n                reject(err);\r\n          ***REMOVED***\r\n      ***REMOVED***\r\n  ***REMOVED***);\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param ***REMOVED***string} string Base64 encoded string\r\n * @returns ***REMOVED***number} Byte length\r\n */\r\nbase64.length = function length(string) ***REMOVED***\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param ***REMOVED***Uint8Array} buffer Source buffer\r\n * @param ***REMOVED***number} start Source start\r\n * @param ***REMOVED***number} end Source end\r\n * @returns ***REMOVED***string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) ***REMOVED***\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) ***REMOVED***\r\n        var b = buffer[start++];\r\n        switch (j) ***REMOVED***\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n      ***REMOVED***\r\n        if (i > 8191) ***REMOVED***\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n      ***REMOVED***\r\n  ***REMOVED***\r\n    if (j) ***REMOVED***\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n  ***REMOVED***\r\n    if (parts) ***REMOVED***\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n  ***REMOVED***\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param ***REMOVED***string} string Source string\r\n * @param ***REMOVED***Uint8Array} buffer Destination buffer\r\n * @param ***REMOVED***number} offset Destination offset\r\n * @returns ***REMOVED***number} Number of bytes written\r\n * @throws ***REMOVED***Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) ***REMOVED***\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) ***REMOVED***\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) ***REMOVED***\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n      ***REMOVED***\r\n  ***REMOVED***\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param ***REMOVED***string} string String to test\r\n * @returns ***REMOVED***boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) ***REMOVED***\r\n    return /^(?:[A-Za-z0-9+/]***REMOVED***4})*(?:[A-Za-z0-9+/]***REMOVED***2}==|[A-Za-z0-9+/]***REMOVED***3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() ***REMOVED***\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type ***REMOVED***Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = ***REMOVED***};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param ***REMOVED***string} evt Event name\r\n * @param ***REMOVED***function} fn Listener\r\n * @param ***REMOVED****} [ctx] Listener context\r\n * @returns ***REMOVED***util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) ***REMOVED***\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push(***REMOVED***\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n  ***REMOVED***);\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param ***REMOVED***string} [evt] Event name. Removes all listeners if omitted.\r\n * @param ***REMOVED***function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns ***REMOVED***util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) ***REMOVED***\r\n    if (evt === undefined)\r\n        this._listeners = ***REMOVED***};\r\n    else ***REMOVED***\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else ***REMOVED***\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n      ***REMOVED***\r\n  ***REMOVED***\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param ***REMOVED***string} evt Event name\r\n * @param ***REMOVED***...*} args Arguments\r\n * @returns ***REMOVED***util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) ***REMOVED***\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) ***REMOVED***\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n  ***REMOVED***\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param ***REMOVED***number} val Value to write\r\n * @param ***REMOVED***Uint8Array} buf Target buffer\r\n * @param ***REMOVED***number} pos Target buffer offset\r\n * @returns ***REMOVED***undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param ***REMOVED***number} val Value to write\r\n * @param ***REMOVED***Uint8Array} buf Target buffer\r\n * @param ***REMOVED***number} pos Target buffer offset\r\n * @returns ***REMOVED***undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param ***REMOVED***Uint8Array} buf Source buffer\r\n * @param ***REMOVED***number} pos Source buffer offset\r\n * @returns ***REMOVED***number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param ***REMOVED***Uint8Array} buf Source buffer\r\n * @param ***REMOVED***number} pos Source buffer offset\r\n * @returns ***REMOVED***number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param ***REMOVED***number} val Value to write\r\n * @param ***REMOVED***Uint8Array} buf Target buffer\r\n * @param ***REMOVED***number} pos Target buffer offset\r\n * @returns ***REMOVED***undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param ***REMOVED***number} val Value to write\r\n * @param ***REMOVED***Uint8Array} buf Target buffer\r\n * @param ***REMOVED***number} pos Target buffer offset\r\n * @returns ***REMOVED***undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param ***REMOVED***Uint8Array} buf Source buffer\r\n * @param ***REMOVED***number} pos Source buffer offset\r\n * @returns ***REMOVED***number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param ***REMOVED***Uint8Array} buf Source buffer\r\n * @param ***REMOVED***number} pos Source buffer offset\r\n * @returns ***REMOVED***number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) ***REMOVED***\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() ***REMOVED***\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) ***REMOVED***\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n      ***REMOVED***\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) ***REMOVED***\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n      ***REMOVED***\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) ***REMOVED***\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n      ***REMOVED***\r\n\r\n        function readFloat_f32_rev(buf, pos) ***REMOVED***\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n      ***REMOVED***\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n  ***REMOVED***)(); else (function() ***REMOVED***\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) ***REMOVED***\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else ***REMOVED***\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n          ***REMOVED***\r\n      ***REMOVED***\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) ***REMOVED***\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n      ***REMOVED***\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n  ***REMOVED***)();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() ***REMOVED***\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) ***REMOVED***\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n      ***REMOVED***\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) ***REMOVED***\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n      ***REMOVED***\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) ***REMOVED***\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n      ***REMOVED***\r\n\r\n        function readDouble_f64_rev(buf, pos) ***REMOVED***\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n      ***REMOVED***\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n  ***REMOVED***)(); else (function() ***REMOVED***\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) ***REMOVED***\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) ***REMOVED***\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n          ***REMOVED*** else if (isNaN(val)) ***REMOVED***\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n          ***REMOVED*** else if (val > 1.7976931348623157e+308) ***REMOVED*** // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n          ***REMOVED*** else ***REMOVED***\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) ***REMOVED*** // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n              ***REMOVED*** else ***REMOVED***\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n              ***REMOVED***\r\n          ***REMOVED***\r\n      ***REMOVED***\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) ***REMOVED***\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n      ***REMOVED***\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n  ***REMOVED***)();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) ***REMOVED***\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) ***REMOVED***\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) ***REMOVED***\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) ***REMOVED***\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param ***REMOVED***string} moduleName Module to require\r\n * @returns ***REMOVED***?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) ***REMOVED***\r\n    try ***REMOVED***\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n  ***REMOVED*** catch (e) ***REMOVED***} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by ***REMOVED***@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type ***REMOVED***function}\r\n * @param ***REMOVED***number} size Buffer size\r\n * @returns ***REMOVED***Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by ***REMOVED***@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type ***REMOVED***function}\r\n * @param ***REMOVED***number} start Start offset\r\n * @param ***REMOVED***number} end End offset\r\n * @returns ***REMOVED***Uint8Array} Buffer slice\r\n * @this ***REMOVED***Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param ***REMOVED***PoolAllocator} alloc Allocator\r\n * @param ***REMOVED***PoolSlicer} slice Slicer\r\n * @param ***REMOVED***number} [size=8192] Slab size\r\n * @returns ***REMOVED***PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) ***REMOVED***\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) ***REMOVED***\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) ***REMOVED***\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n      ***REMOVED***\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n  ***REMOVED***;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param ***REMOVED***string} string String\r\n * @returns ***REMOVED***number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) ***REMOVED***\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) ***REMOVED***\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) ***REMOVED***\r\n            ++i;\r\n            len += 4;\r\n      ***REMOVED*** else\r\n            len += 3;\r\n  ***REMOVED***\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param ***REMOVED***Uint8Array} buffer Source buffer\r\n * @param ***REMOVED***number} start Source start\r\n * @param ***REMOVED***number} end Source end\r\n * @returns ***REMOVED***string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) ***REMOVED***\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) ***REMOVED***\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) ***REMOVED***\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n      ***REMOVED*** else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) ***REMOVED***\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n      ***REMOVED***\r\n  ***REMOVED***\r\n    if (parts) ***REMOVED***\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n  ***REMOVED***\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param ***REMOVED***string} string Source string\r\n * @param ***REMOVED***Uint8Array} buffer Destination buffer\r\n * @param ***REMOVED***number} offset Destination offset\r\n * @returns ***REMOVED***number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) ***REMOVED***\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) ***REMOVED***\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) ***REMOVED***\r\n            buffer[offset++] = c1;\r\n      ***REMOVED*** else if (c1 < 2048) ***REMOVED***\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n      ***REMOVED*** else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) ***REMOVED***\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n      ***REMOVED*** else ***REMOVED***\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n      ***REMOVED***\r\n  ***REMOVED***\r\n    return offset - start;\r\n};\r\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type ***REMOVED***string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(16);\nprotobuf.BufferWriter = require(17);\nprotobuf.Reader       = require(9);\nprotobuf.BufferReader = require(10);\n\n// Utility\nprotobuf.util         = require(15);\nprotobuf.rpc          = require(12);\nprotobuf.roots        = require(11);\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns ***REMOVED***undefined}\n */\nfunction configure() ***REMOVED***\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(15);\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) ***REMOVED***\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param ***REMOVED***Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) ***REMOVED***\n\n    /**\n     * Read buffer.\n     * @type ***REMOVED***Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type ***REMOVED***number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type ***REMOVED***number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) ***REMOVED***\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n  ***REMOVED***\n    /* istanbul ignore next */\n    : function create_array(buffer) ***REMOVED***\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n  ***REMOVED***;\n\nvar create = function create() ***REMOVED***\n    return util.Buffer\n        ? function create_buffer_setup(buffer) ***REMOVED***\n            return (Reader.create = function create_buffer(buffer) ***REMOVED***\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n          ***REMOVED***)(buffer);\n      ***REMOVED***\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param ***REMOVED***Uint8Array|Buffer} buffer Buffer to read from\n * @returns ***REMOVED***Reader|BufferReader} A ***REMOVED***@link BufferReader} if `buffer` is a Buffer, otherwise a ***REMOVED***@link Reader}\n * @throws ***REMOVED***Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns ***REMOVED***number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() ***REMOVED***\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() ***REMOVED***\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) ***REMOVED***\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n      ***REMOVED***\n        return value;\n  ***REMOVED***;\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns ***REMOVED***number} Value read\n */\nReader.prototype.int32 = function read_int32() ***REMOVED***\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns ***REMOVED***number} Value read\n */\nReader.prototype.sint32 = function read_sint32() ***REMOVED***\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() ***REMOVED***\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) ***REMOVED*** // fast route (lo)\n        for (; i < 4; ++i) ***REMOVED***\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n      ***REMOVED***\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n  ***REMOVED*** else ***REMOVED***\n        for (; i < 3; ++i) ***REMOVED***\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n      ***REMOVED***\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n  ***REMOVED***\n    if (this.len - this.pos > 4) ***REMOVED*** // fast route (hi)\n        for (; i < 5; ++i) ***REMOVED***\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n      ***REMOVED***\n  ***REMOVED*** else ***REMOVED***\n        for (; i < 5; ++i) ***REMOVED***\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n      ***REMOVED***\n  ***REMOVED***\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns ***REMOVED***Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns ***REMOVED***Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns ***REMOVED***Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns ***REMOVED***boolean} Value read\n */\nReader.prototype.bool = function read_bool() ***REMOVED***\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) ***REMOVED*** // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns ***REMOVED***number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() ***REMOVED***\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns ***REMOVED***number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() ***REMOVED***\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) ***REMOVED***\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns ***REMOVED***Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns ***REMOVED***Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns ***REMOVED***number} Value read\n */\nReader.prototype.float = function read_float() ***REMOVED***\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns ***REMOVED***number} Value read\n */\nReader.prototype.double = function read_double() ***REMOVED***\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns ***REMOVED***Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() ***REMOVED***\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns ***REMOVED***string} Value read\n */\nReader.prototype.string = function read_string() ***REMOVED***\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param ***REMOVED***number} [length] Length if known, otherwise a varint is assumed\n * @returns ***REMOVED***Reader} `this`\n */\nReader.prototype.skip = function skip(length) ***REMOVED***\n    if (typeof length === \"number\") ***REMOVED***\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n  ***REMOVED*** else ***REMOVED***\n        do ***REMOVED***\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n      ***REMOVED*** while (this.buf[this.pos++] & 128);\n  ***REMOVED***\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param ***REMOVED***number} wireType Wire type received\n * @returns ***REMOVED***Reader} `this`\n */\nReader.prototype.skipType = function(wireType) ***REMOVED***\n    switch (wireType) ***REMOVED***\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) ***REMOVED***\n                this.skipType(wireType);\n          ***REMOVED***\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n  ***REMOVED***\n    return this;\n};\n\nReader._configure = function(BufferReader_) ***REMOVED***\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, ***REMOVED***\n\n        int64: function read_int64() ***REMOVED***\n            return readLongVarint.call(this)[fn](false);\n      ***REMOVED***,\n\n        uint64: function read_uint64() ***REMOVED***\n            return readLongVarint.call(this)[fn](true);\n      ***REMOVED***,\n\n        sint64: function read_sint64() ***REMOVED***\n            return readLongVarint.call(this).zzDecode()[fn](false);\n      ***REMOVED***,\n\n        fixed64: function read_fixed64() ***REMOVED***\n            return readFixed64.call(this)[fn](true);\n      ***REMOVED***,\n\n        sfixed64: function read_sfixed64() ***REMOVED***\n            return readFixed64.call(this)[fn](false);\n      ***REMOVED***\n\n  ***REMOVED***);\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(9);\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(15);\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param ***REMOVED***Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) ***REMOVED***\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type ***REMOVED***Buffer}\n     */\n}\n\nBufferReader._configure = function () ***REMOVED***\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() ***REMOVED***\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns ***REMOVED***Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = ***REMOVED***};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type ***REMOVED***Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to ***REMOVED***@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type ***REMOVED***function}\n * @param ***REMOVED***Method|rpc.ServiceMethod<Message<***REMOVED***}>,Message<***REMOVED***}>>} method Reflected or static method being called\n * @param ***REMOVED***Uint8Array} requestData Request data\n * @param ***REMOVED***RPCImplCallback} callback Callback function\n * @returns ***REMOVED***undefined}\n * @example\n * function rpcImpl(method, requestData, callback) ***REMOVED***\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) ***REMOVED***\n *         callback(err, responseData);\n *   ***REMOVED***);\n * }\n */\n\n/**\n * Node-style callback as used by ***REMOVED***@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type ***REMOVED***function}\n * @param ***REMOVED***Error|null} error Error, if any, otherwise `null`\n * @param ***REMOVED***Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns ***REMOVED***undefined}\n */\n\nrpc.Service = require(13);\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(15);\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by ***REMOVED***@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from ***REMOVED***@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type ***REMOVED***function}\n * @param ***REMOVED***Error|null} error Error, if any\n * @param ***REMOVED***TRes} [response] Response message\n * @returns ***REMOVED***undefined}\n */\n\n/**\n * A service method part of a ***REMOVED***@link rpc.Service} as created by ***REMOVED***@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type ***REMOVED***function}\n * @param ***REMOVED***TReq|Properties<TReq>} request Request message or plain object\n * @param ***REMOVED***rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns ***REMOVED***Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by ***REMOVED***@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param ***REMOVED***RPCImpl} rpcImpl RPC implementation\n * @param ***REMOVED***boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param ***REMOVED***boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) ***REMOVED***\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type ***REMOVED***RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type ***REMOVED***boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type ***REMOVED***boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through ***REMOVED***@link rpc.Service#rpcImpl|rpcImpl}.\n * @param ***REMOVED***Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param ***REMOVED***Constructor<TReq>} requestCtor Request constructor\n * @param ***REMOVED***Constructor<TRes>} responseCtor Response constructor\n * @param ***REMOVED***TReq|Properties<TReq>} request Request message or plain object\n * @param ***REMOVED***rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns ***REMOVED***undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) ***REMOVED***\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) ***REMOVED***\n        setTimeout(function() ***REMOVED*** callback(Error(\"already ended\")); }, 0);\n        return undefined;\n  ***REMOVED***\n\n    try ***REMOVED***\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) ***REMOVED***\n\n                if (err) ***REMOVED***\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n              ***REMOVED***\n\n                if (response === null) ***REMOVED***\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n              ***REMOVED***\n\n                if (!(response instanceof responseCtor)) ***REMOVED***\n                    try ***REMOVED***\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                  ***REMOVED*** catch (err) ***REMOVED***\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                  ***REMOVED***\n              ***REMOVED***\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n          ***REMOVED***\n        );\n  ***REMOVED*** catch (err) ***REMOVED***\n        self.emit(\"error\", err, method);\n        setTimeout(function() ***REMOVED*** callback(err); }, 0);\n        return undefined;\n  ***REMOVED***\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param ***REMOVED***boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns ***REMOVED***rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) ***REMOVED***\n    if (this.rpcImpl) ***REMOVED***\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n  ***REMOVED***\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(15);\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param ***REMOVED***number} lo Low 32 bits, unsigned\n * @param ***REMOVED***number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) ***REMOVED***\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type ***REMOVED***number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type ***REMOVED***number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type ***REMOVED***util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() ***REMOVED*** return 0; };\nzero.zzEncode = zero.zzDecode = function() ***REMOVED*** return this; };\nzero.length = function() ***REMOVED*** return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type ***REMOVED***string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param ***REMOVED***number} value Value\n * @returns ***REMOVED***util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) ***REMOVED***\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) ***REMOVED***\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) ***REMOVED***\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n      ***REMOVED***\n  ***REMOVED***\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param ***REMOVED***Long|number|string} value Value\n * @returns ***REMOVED***util.LongBits} Instance\n */\nLongBits.from = function from(value) ***REMOVED***\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) ***REMOVED***\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n  ***REMOVED***\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param ***REMOVED***boolean} [unsigned=false] Whether unsigned or not\n * @returns ***REMOVED***number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) ***REMOVED***\n    if (!unsigned && this.hi >>> 31) ***REMOVED***\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n  ***REMOVED***\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param ***REMOVED***boolean} [unsigned=false] Whether unsigned or not\n * @returns ***REMOVED***Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) ***REMOVED***\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : ***REMOVED*** low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param ***REMOVED***string} hash Hash\n * @returns ***REMOVED***util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) ***REMOVED***\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns ***REMOVED***string} Hash\n */\nLongBits.prototype.toHash = function toHash() ***REMOVED***\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns ***REMOVED***util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() ***REMOVED***\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns ***REMOVED***util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() ***REMOVED***\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns ***REMOVED***number} Length\n */\nLongBits.prototype.length = function length() ***REMOVED***\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(1);\n\n// converts to / from base64 encoded strings\nutil.base64 = require(2);\n\n// base class of rpc.Service\nutil.EventEmitter = require(3);\n\n// float handling accross browsers\nutil.float = require(4);\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(5);\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(7);\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(6);\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(14);\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type ***REMOVED***boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type ***REMOVED***Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type ***REMOVED***Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type ***REMOVED***Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze(***REMOVED***}) : /* istanbul ignore next */ ***REMOVED***}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param ***REMOVED****} value Value to test\n * @returns ***REMOVED***boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) ***REMOVED***\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param ***REMOVED****} value Value to test\n * @returns ***REMOVED***boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) ***REMOVED***\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param ***REMOVED****} value Value to test\n * @returns ***REMOVED***boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) ***REMOVED***\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of ***REMOVED***@link util.isSet}.\n * @function\n * @param ***REMOVED***Object} obj Plain object or message instance\n * @param ***REMOVED***string} prop Property name\n * @returns ***REMOVED***boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param ***REMOVED***Object} obj Plain object or message instance\n * @param ***REMOVED***string} prop Property name\n * @returns ***REMOVED***boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) ***REMOVED***\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type ***REMOVED***Constructor<Buffer>}\n */\nutil.Buffer = (function() ***REMOVED***\n    try ***REMOVED***\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n  ***REMOVED*** catch (e) ***REMOVED***\n        /* istanbul ignore next */\n        return null;\n  ***REMOVED***\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param ***REMOVED***number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns ***REMOVED***Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) ***REMOVED***\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type ***REMOVED***Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property ***REMOVED***number} low Low bits\n * @property ***REMOVED***number} high High bits\n * @property ***REMOVED***boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type ***REMOVED***Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type ***REMOVED***RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type ***REMOVED***RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type ***REMOVED***RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]***REMOVED***8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param ***REMOVED***Long|number} value Value to convert\n * @returns ***REMOVED***string} Hash\n */\nutil.longToHash = function longToHash(value) ***REMOVED***\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param ***REMOVED***string} hash Hash\n * @param ***REMOVED***boolean} [unsigned=false] Whether unsigned or not\n * @returns ***REMOVED***Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) ***REMOVED***\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param ***REMOVED***Object.<string,*>} dst Destination object\n * @param ***REMOVED***Object.<string,*>} src Source object\n * @param ***REMOVED***boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns ***REMOVED***Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) ***REMOVED*** // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param ***REMOVED***string} str String to convert\n * @returns ***REMOVED***string} Converted string\n */\nutil.lcFirst = function lcFirst(str) ***REMOVED***\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param ***REMOVED***string} name Error name\n * @returns ***REMOVED***Constructor<Error>} Custom error constructor\n */\nfunction newError(name) ***REMOVED***\n\n    function CustomError(message, properties) ***REMOVED***\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", ***REMOVED*** get: function() ***REMOVED*** return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", ***REMOVED*** value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n  ***REMOVED***\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", ***REMOVED*** get: function() ***REMOVED*** return name; } });\n\n    CustomError.prototype.toString = function toString() ***REMOVED***\n        return this.name + \": \" + this.message;\n  ***REMOVED***;\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param ***REMOVED***string} message Error message\n * @param ***REMOVED***Object.<string,*>} [properties] Additional properties\n * @example\n * try ***REMOVED***\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) ***REMOVED***\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type ***REMOVED***Message<T>}\n */\n\n/**\n * A OneOf getter as returned by ***REMOVED***@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type ***REMOVED***function}\n * @returns ***REMOVED***string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param ***REMOVED***string[]} fieldNames Field names\n * @returns ***REMOVED***OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) ***REMOVED***\n    var fieldMap = ***REMOVED***};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns ***REMOVED***string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() ***REMOVED*** // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n  ***REMOVED***;\n};\n\n/**\n * A OneOf setter as returned by ***REMOVED***@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type ***REMOVED***function}\n * @param ***REMOVED***string|undefined} value Field name\n * @returns ***REMOVED***undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param ***REMOVED***string[]} fieldNames Field names\n * @returns ***REMOVED***OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) ***REMOVED***\n\n    /**\n     * @param ***REMOVED***string} name Field name\n     * @returns ***REMOVED***undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) ***REMOVED***\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n  ***REMOVED***;\n};\n\n/**\n * Default conversion options used for ***REMOVED***@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type ***REMOVED***IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = ***REMOVED***\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() ***REMOVED***\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) ***REMOVED***\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n  ***REMOVED***\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) ***REMOVED***\n            return new Buffer(value, encoding);\n      ***REMOVED***;\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) ***REMOVED***\n            return new Buffer(size);\n      ***REMOVED***;\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(15);\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param ***REMOVED***function(*, Uint8Array, number)} fn Function to call\n * @param ***REMOVED***number} len Value byte length\n * @param ***REMOVED****} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) ***REMOVED***\n\n    /**\n     * Function to call.\n     * @type ***REMOVED***function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type ***REMOVED***number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type ***REMOVED***Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type ***REMOVED****}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() ***REMOVED***} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param ***REMOVED***Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) ***REMOVED***\n\n    /**\n     * Current head.\n     * @type ***REMOVED***Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type ***REMOVED***Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type ***REMOVED***number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type ***REMOVED***State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() ***REMOVED***\n\n    /**\n     * Current length.\n     * @type ***REMOVED***number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type ***REMOVED***Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type ***REMOVED***Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type ***REMOVED***Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() ***REMOVED***\n    return util.Buffer\n        ? function create_buffer_setup() ***REMOVED***\n            return (Writer.create = function create_buffer() ***REMOVED***\n                return new BufferWriter();\n          ***REMOVED***)();\n      ***REMOVED***\n        /* istanbul ignore next */\n        : function create_array() ***REMOVED***\n            return new Writer();\n      ***REMOVED***;\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns ***REMOVED***BufferWriter|Writer} A ***REMOVED***@link BufferWriter} when Buffers are supported, otherwise a ***REMOVED***@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param ***REMOVED***number} size Buffer size\n * @returns ***REMOVED***Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) ***REMOVED***\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param ***REMOVED***function(Uint8Array, number, *)} fn Function to call\n * @param ***REMOVED***number} len Value byte length\n * @param ***REMOVED***number} val Value to write\n * @returns ***REMOVED***Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) ***REMOVED***\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) ***REMOVED***\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) ***REMOVED***\n    while (val > 127) ***REMOVED***\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n  ***REMOVED***\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param ***REMOVED***number} len Value byte length\n * @param ***REMOVED***number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) ***REMOVED***\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param ***REMOVED***number} value Value to write\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) ***REMOVED***\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param ***REMOVED***number} value Value to write\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) ***REMOVED***\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param ***REMOVED***number} value Value to write\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) ***REMOVED***\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) ***REMOVED***\n    while (val.hi) ***REMOVED***\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n  ***REMOVED***\n    while (val.lo > 127) ***REMOVED***\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n  ***REMOVED***\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param ***REMOVED***Long|number|string} value Value to write\n * @returns ***REMOVED***Writer} `this`\n * @throws ***REMOVED***TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) ***REMOVED***\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param ***REMOVED***Long|number|string} value Value to write\n * @returns ***REMOVED***Writer} `this`\n * @throws ***REMOVED***TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param ***REMOVED***Long|number|string} value Value to write\n * @returns ***REMOVED***Writer} `this`\n * @throws ***REMOVED***TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) ***REMOVED***\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param ***REMOVED***boolean} value Value to write\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) ***REMOVED***\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) ***REMOVED***\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param ***REMOVED***number} value Value to write\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) ***REMOVED***\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param ***REMOVED***number} value Value to write\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param ***REMOVED***Long|number|string} value Value to write\n * @returns ***REMOVED***Writer} `this`\n * @throws ***REMOVED***TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) ***REMOVED***\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param ***REMOVED***Long|number|string} value Value to write\n * @returns ***REMOVED***Writer} `this`\n * @throws ***REMOVED***TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param ***REMOVED***number} value Value to write\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.float = function write_float(value) ***REMOVED***\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param ***REMOVED***number} value Value to write\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.double = function write_double(value) ***REMOVED***\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) ***REMOVED***\n        buf.set(val, pos); // also works for plain array values\n  ***REMOVED***\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) ***REMOVED***\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n  ***REMOVED***;\n\n/**\n * Writes a sequence of bytes.\n * @param ***REMOVED***Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) ***REMOVED***\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) ***REMOVED***\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n  ***REMOVED***\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param ***REMOVED***string} value Value to write\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.string = function write_string(value) ***REMOVED***\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling ***REMOVED***@link Writer#reset|reset} or ***REMOVED***@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.fork = function fork() ***REMOVED***\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.reset = function reset() ***REMOVED***\n    if (this.states) ***REMOVED***\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n  ***REMOVED*** else ***REMOVED***\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n  ***REMOVED***\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns ***REMOVED***Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() ***REMOVED***\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) ***REMOVED***\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n  ***REMOVED***\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns ***REMOVED***Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() ***REMOVED***\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) ***REMOVED***\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n  ***REMOVED***\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) ***REMOVED***\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(16);\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(15);\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() ***REMOVED***\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () ***REMOVED***\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param ***REMOVED***number} size Buffer size\n     * @returns ***REMOVED***Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) ***REMOVED***\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n      ***REMOVED***\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) ***REMOVED***\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n      ***REMOVED***;\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) ***REMOVED***\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) ***REMOVED***\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) ***REMOVED***\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns ***REMOVED***Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n"],"sourceRoot":"."}